
MyFirstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000acc  0800ff18  0800ff18  0001ff18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109e4  080109e4  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080109e4  080109e4  000209e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109ec  080109ec  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109ec  080109ec  000209ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080109f0  080109f0  000209f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080109f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001e0  08010bd4  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08010bd4  000304e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f3c  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000338c  00000000  00000000  0004914c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0004c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0004da88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264e3  00000000  00000000  0004eef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d126  00000000  00000000  000753db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6418  00000000  00000000  00092501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178919  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000768c  00000000  00000000  0017896c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fefc 	.word	0x0800fefc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800fefc 	.word	0x0800fefc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_ADC1_Init>:

/* ----------------------------------FUNCTIONS--------------------------------*/
// ADC channel 5 configuration (GPIO PA5)

extern void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <MX_ADC1_Init+0xa8>)
 800104c:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <MX_ADC1_Init+0xac>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_ADC1_Init+0xa8>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001064:	2200      	movs	r2, #0
 8001066:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_ADC1_Init+0xa8>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion   = 1;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001072:	2201      	movs	r2, #1
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001078:	2201      	movs	r2, #1
 800107a:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_ADC1_Init+0xa8>)
 800107e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;   // triggered by Timer3
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_ADC1_Init+0xa8>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_ADC1_Init+0xa8>)
 800109c:	2201      	movs	r2, #1
 800109e:	615a      	str	r2, [r3, #20]

  MX_DMA_Init(&hadc1);
 80010a0:	480f      	ldr	r0, [pc, #60]	; (80010e0 <MX_ADC1_Init+0xa8>)
 80010a2:	f000 f983 	bl	80013ac <MX_DMA_Init>

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <MX_ADC1_Init+0xa8>)
 80010a8:	f001 fa92 	bl	80025d0 <HAL_ADC_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80010b2:	f000 fd93 	bl	8001bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010b6:	2305      	movs	r3, #5
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_ADC1_Init+0xa8>)
 80010c8:	f001 fc1c 	bl	8002904 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010d2:	f000 fd83 	bl	8001bdc <Error_Handler>
  }

}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001fc 	.word	0x200001fc
 80010e4:	40012000 	.word	0x40012000

080010e8 <MX_DAC_Init>:
/**
  * @brief DAC Initialization Function
    DAC channel OUT1 configuration (GPIO PA4)
  */
extern void MX_DAC_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0

  DAC_ChannelConfTypeDef sConfig = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]

  hdac1.Instance = DAC;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_DAC_Init+0x4c>)
 80010f8:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <MX_DAC_Init+0x50>)
 80010fa:	601a      	str	r2, [r3, #0]

  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_DAC_Init+0x4c>)
 80010fe:	f001 ffc2 	bl	8003086 <HAL_DAC_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001108:	f000 fd68 	bl	8001bdc <Error_Handler>
  }

  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_DAC_Init+0x4c>)
 800111c:	f002 f869 	bl	80031f2 <HAL_DAC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001126:	f000 fd59 	bl	8001bdc <Error_Handler>
  }

}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000244 	.word	0x20000244
 8001138:	40007400 	.word	0x40007400
 800113c:	00000000 	.word	0x00000000

08001140 <read_ADC>:

// ****************************************************************************

extern float read_ADC(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

	sensorValue=0;
 8001146:	4b38      	ldr	r3, [pc, #224]	; (8001228 <read_ADC+0xe8>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

	adc_conv_complete_flag = 0;
 800114c:	4b37      	ldr	r3, [pc, #220]	; (800122c <read_ADC+0xec>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim3);
 8001152:	4837      	ldr	r0, [pc, #220]	; (8001230 <read_ADC+0xf0>)
 8001154:	f007 fd88 	bl	8008c68 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_dma_buf , 10); // start ADC => DMA samples transfer
 8001158:	220a      	movs	r2, #10
 800115a:	4936      	ldr	r1, [pc, #216]	; (8001234 <read_ADC+0xf4>)
 800115c:	4836      	ldr	r0, [pc, #216]	; (8001238 <read_ADC+0xf8>)
 800115e:	f001 faad 	bl	80026bc <HAL_ADC_Start_DMA>


	while (adc_conv_complete_flag==0)   // waiting until DMA if filled with ADC data
 8001162:	bf00      	nop
 8001164:	4b31      	ldr	r3, [pc, #196]	; (800122c <read_ADC+0xec>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0fb      	beq.n	8001164 <read_ADC+0x24>
	{

	}

	for(size_t ind = 0; ind < 10; ++ind) {
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	e00d      	b.n	800118e <read_ADC+0x4e>
		sensorValue += (uint32_t)adc_dma_buf[ind];
 8001172:	4a30      	ldr	r2, [pc, #192]	; (8001234 <read_ADC+0xf4>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800117a:	461a      	mov	r2, r3
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <read_ADC+0xe8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4413      	add	r3, r2
 8001182:	461a      	mov	r2, r3
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <read_ADC+0xe8>)
 8001186:	601a      	str	r2, [r3, #0]
	for(size_t ind = 0; ind < 10; ++ind) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3301      	adds	r3, #1
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b09      	cmp	r3, #9
 8001192:	d9ee      	bls.n	8001172 <read_ADC+0x32>

	}
	sensorValue /=10;
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <read_ADC+0xe8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a28      	ldr	r2, [pc, #160]	; (800123c <read_ADC+0xfc>)
 800119a:	fb82 1203 	smull	r1, r2, r2, r3
 800119e:	1092      	asrs	r2, r2, #2
 80011a0:	17db      	asrs	r3, r3, #31
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	4a20      	ldr	r2, [pc, #128]	; (8001228 <read_ADC+0xe8>)
 80011a6:	6013      	str	r3, [r2, #0]
	voltage = (0.001*sensorValue * (ADC_REFERENCE_VOLTAGE_MV / ADC_MAX_OUTPUT_VALUE));
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <read_ADC+0xe8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9d9 	bl	8000564 <__aeabi_i2d>
 80011b2:	a317      	add	r3, pc, #92	; (adr r3, 8001210 <read_ADC+0xd0>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fa3e 	bl	8000638 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	a314      	add	r3, pc, #80	; (adr r3, 8001218 <read_ADC+0xd8>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff fa35 	bl	8000638 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fd27 	bl	8000c28 <__aeabi_d2f>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <read_ADC+0x100>)
 80011de:	6013      	str	r3, [r2, #0]
	return voltage-0.08;  // removing DC offset contribution
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <read_ADC+0x100>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9cf 	bl	8000588 <__aeabi_f2d>
 80011ea:	a30d      	add	r3, pc, #52	; (adr r3, 8001220 <read_ADC+0xe0>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff f86a 	bl	80002c8 <__aeabi_dsub>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fd14 	bl	8000c28 <__aeabi_d2f>
 8001200:	4603      	mov	r3, r0
 8001202:	ee07 3a90 	vmov	s15, r3

}
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	d2f1a9fc 	.word	0xd2f1a9fc
 8001214:	3f50624d 	.word	0x3f50624d
 8001218:	a0000000 	.word	0xa0000000
 800121c:	3fe9c99c 	.word	0x3fe9c99c
 8001220:	47ae147b 	.word	0x47ae147b
 8001224:	3fb47ae1 	.word	0x3fb47ae1
 8001228:	200002b4 	.word	0x200002b4
 800122c:	200002b8 	.word	0x200002b8
 8001230:	20000258 	.word	0x20000258
 8001234:	200002a0 	.word	0x200002a0
 8001238:	200001fc 	.word	0x200001fc
 800123c:	66666667 	.word	0x66666667
 8001240:	200002bc 	.word	0x200002bc

08001244 <HAL_ADC_ConvCpltCallback>:

// ****************************************************************************

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	adc_conv_complete_flag = 1;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_ADC_ConvCpltCallback+0x2c>)
 800124e:	2201      	movs	r2, #1
 8001250:	601a      	str	r2, [r3, #0]
	printf("\n\rSamples are moved by DMA to memory!\r");
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <HAL_ADC_ConvCpltCallback+0x30>)
 8001254:	f009 ff76 	bl	800b144 <iprintf>
	HAL_ADC_Stop(&hadc1);
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4618      	mov	r0, r3
 800125c:	f001 f9fb 	bl	8002656 <HAL_ADC_Stop>
	HAL_TIM_Base_Stop(&htim3);
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <HAL_ADC_ConvCpltCallback+0x34>)
 8001262:	f007 fd69 	bl	8008d38 <HAL_TIM_Base_Stop>


}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200002b8 	.word	0x200002b8
 8001274:	0800ff18 	.word	0x0800ff18
 8001278:	20000258 	.word	0x20000258

0800127c <DAC_output>:

// ****************************************************************************

extern void DAC_output(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	sensorValue=0;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <DAC_output+0x70>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 8001288:	2100      	movs	r1, #0
 800128a:	4819      	ldr	r0, [pc, #100]	; (80012f0 <DAC_output+0x74>)
 800128c:	f001 ff1d 	bl	80030ca <HAL_DAC_Start>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <DAC_output+0x1e>
	  {
	    Error_Handler();
 8001296:	f000 fca1 	bl	8001bdc <Error_Handler>
	  }

	for(size_t ind = 0; ind < 10; ++ind) {          //reading the ADC samples
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	e00d      	b.n	80012bc <DAC_output+0x40>
		sensorValue += (uint32_t)adc_dma_buf[ind];  //stored on SRAM by DMA
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <DAC_output+0x78>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <DAC_output+0x70>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <DAC_output+0x70>)
 80012b4:	601a      	str	r2, [r3, #0]
	for(size_t ind = 0; ind < 10; ++ind) {          //reading the ADC samples
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3301      	adds	r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b09      	cmp	r3, #9
 80012c0:	d9ee      	bls.n	80012a0 <DAC_output+0x24>
	   }                                            // to output them to PA5 pin

	sensorValue /=10;
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <DAC_output+0x70>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <DAC_output+0x7c>)
 80012c8:	fb82 1203 	smull	r1, r2, r2, r3
 80012cc:	1092      	asrs	r2, r2, #2
 80012ce:	17db      	asrs	r3, r3, #31
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a06      	ldr	r2, [pc, #24]	; (80012ec <DAC_output+0x70>)
 80012d4:	6013      	str	r3, [r2, #0]

    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sensorValue);
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <DAC_output+0x70>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	4804      	ldr	r0, [pc, #16]	; (80012f0 <DAC_output+0x74>)
 80012e0:	f001 ff62 	bl	80031a8 <HAL_DAC_SetValue>

}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200002b4 	.word	0x200002b4
 80012f0:	20000244 	.word	0x20000244
 80012f4:	200002a0 	.word	0x200002a0
 80012f8:	66666667 	.word	0x66666667

080012fc <DAC_output_Stop>:
// ****************************************************************************

extern void DAC_output_Stop(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 8001300:	2100      	movs	r1, #0
 8001302:	4802      	ldr	r0, [pc, #8]	; (800130c <DAC_output_Stop+0x10>)
 8001304:	f001 ff33 	bl	800316e <HAL_DAC_Stop>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000244 	.word	0x20000244

08001310 <MX_TIM3_Init>:
// ****************************************************************************

extern void MX_TIM3_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM3_Init+0x94>)
 800132e:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <MX_TIM3_Init+0x98>)
 8001330:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <MX_TIM3_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_TIM3_Init+0x94>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;   // using 16MHz => 62.5nsec timer clock counts to ~4msec
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_TIM3_Init+0x94>)
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_TIM3_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_TIM3_Init+0x94>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001352:	4814      	ldr	r0, [pc, #80]	; (80013a4 <MX_TIM3_Init+0x94>)
 8001354:	f007 fc38 	bl	8008bc8 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800135e:	f000 fc3d 	bl	8001bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	60bb      	str	r3, [r7, #8]

  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4619      	mov	r1, r3
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <MX_TIM3_Init+0x94>)
 8001370:	f007 fd09 	bl	8008d86 <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800137a:	f000 fc2f 	bl	8001bdc <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800137e:	2320      	movs	r3, #32
 8001380:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001386:	463b      	mov	r3, r7
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_TIM3_Init+0x94>)
 800138c:	f007 fefc 	bl	8009188 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001396:	f000 fc21 	bl	8001bdc <Error_Handler>
  }

}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000258 	.word	0x20000258
 80013a8:	40000400 	.word	0x40000400

080013ac <MX_DMA_Init>:
DMA_HandleTypeDef hdma_adc1;

/* ----------------------------------FUNCTIONS--------------------------------*/

extern void MX_DMA_Init(ADC_HandleTypeDef *hadc)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  /* DMA controller clock enable */

  __HAL_RCC_DMA2_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <MX_DMA_Init+0xb0>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	4a27      	ldr	r2, [pc, #156]	; (800145c <MX_DMA_Init+0xb0>)
 80013be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013c2:	6313      	str	r3, [r2, #48]	; 0x30
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <MX_DMA_Init+0xb0>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]

  hdma_adc1.Instance=DMA2_Stream0;
 80013d0:	4b23      	ldr	r3, [pc, #140]	; (8001460 <MX_DMA_Init+0xb4>)
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <MX_DMA_Init+0xb8>)
 80013d4:	601a      	str	r2, [r3, #0]
  hdma_adc1.Init.Channel = DMA_CHANNEL_0;// Channel 0, Stream 0
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <MX_DMA_Init+0xb4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
  hdma_adc1.Init.Direction=DMA_PERIPH_TO_MEMORY;
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <MX_DMA_Init+0xb4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hdma_adc1.Init.PeriphInc=DMA_PINC_DISABLE;
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <MX_DMA_Init+0xb4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hdma_adc1.Init.MemInc=DMA_MINC_ENABLE;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <MX_DMA_Init+0xb4>)
 80013ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ee:	611a      	str	r2, [r3, #16]
  hdma_adc1.Init.PeriphDataAlignment=DMA_PDATAALIGN_WORD;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <MX_DMA_Init+0xb4>)
 80013f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f6:	615a      	str	r2, [r3, #20]
  hdma_adc1.Init.MemDataAlignment=DMA_MDATAALIGN_WORD;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_DMA_Init+0xb4>)
 80013fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013fe:	619a      	str	r2, [r3, #24]
  hdma_adc1.Init.Mode=DMA_CIRCULAR;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <MX_DMA_Init+0xb4>)
 8001402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001406:	61da      	str	r2, [r3, #28]
  hdma_adc1.Init.Priority=DMA_PRIORITY_HIGH;
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <MX_DMA_Init+0xb4>)
 800140a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800140e:	621a      	str	r2, [r3, #32]
  hdma_adc1.Init.FIFOMode=DMA_FIFOMODE_DISABLE;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <MX_DMA_Init+0xb4>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_adc1.Init.FIFOThreshold=DMA_FIFO_THRESHOLD_HALFFULL;
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <MX_DMA_Init+0xb4>)
 8001418:	2201      	movs	r2, #1
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_adc1.Init.MemBurst=DMA_MBURST_SINGLE;
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_DMA_Init+0xb4>)
 800141e:	2200      	movs	r2, #0
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_adc1.Init.PeriphBurst=DMA_PBURST_SINGLE;
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_DMA_Init+0xb4>)
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	; 0x30

  //Initialize DMA
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <MX_DMA_Init+0xb4>)
 800142a:	f001 ff31 	bl	8003290 <HAL_DMA_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_DMA_Init+0x8c>
  {
	  Error_Handler();
 8001434:	f000 fbd2 	bl	8001bdc <Error_Handler>
  };

  /* Associate the initialized DMA handle to the ADC handle */
  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <MX_DMA_Init+0xb4>)
 800143c:	639a      	str	r2, [r3, #56]	; 0x38
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <MX_DMA_Init+0xb4>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6393      	str	r3, [r2, #56]	; 0x38


  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2038      	movs	r0, #56	; 0x38
 800144a:	f001 fde6 	bl	800301a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800144e:	2038      	movs	r0, #56	; 0x38
 8001450:	f001 fdff 	bl	8003052 <HAL_NVIC_EnableIRQ>

}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	200002c0 	.word	0x200002c0
 8001464:	40026410 	.word	0x40026410

08001468 <MX_I2C1_Init>:
PB6     ------> I2C1_SCL
PB7     ------> I2C1_SDA
*/

extern void MX_I2C1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_I2C1_Init+0x50>)
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <MX_I2C1_Init+0x54>)
 8001470:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_I2C1_Init+0x50>)
 8001474:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_I2C1_Init+0x58>)
 8001476:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_I2C1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_I2C1_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_I2C1_Init+0x50>)
 8001486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MX_I2C1_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_I2C1_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_I2C1_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_I2C1_Init+0x50>)
 80014a6:	f002 fc97 	bl	8003dd8 <HAL_I2C_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014b0:	f000 fb94 	bl	8001bdc <Error_Handler>
  }
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000320 	.word	0x20000320
 80014bc:	40005400 	.word	0x40005400
 80014c0:	000186a0 	.word	0x000186a0

080014c4 <I2C_read_temp_sensor>:

// ****************************************************************************
extern int16_t I2C_read_temp_sensor()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af02      	add	r7, sp, #8

	  *buf=0;
 80014ca:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <I2C_read_temp_sensor+0xc4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]

	  if (HAL_I2C_Master_Transmit(&hi2c1, SENS_ADDR, buf, 1, HAL_MAX_DELAY) != HAL_OK)
 80014d0:	2390      	movs	r3, #144	; 0x90
 80014d2:	b299      	uxth	r1, r3
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	4a2a      	ldr	r2, [pc, #168]	; (8001588 <I2C_read_temp_sensor+0xc4>)
 80014de:	482b      	ldr	r0, [pc, #172]	; (800158c <I2C_read_temp_sensor+0xc8>)
 80014e0:	f002 fdbe 	bl	8004060 <HAL_I2C_Master_Transmit>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d004      	beq.n	80014f4 <I2C_read_temp_sensor+0x30>
	  {
		  printf("\r\nNo sensor connected!\r\n");
 80014ea:	4829      	ldr	r0, [pc, #164]	; (8001590 <I2C_read_temp_sensor+0xcc>)
 80014ec:	f009 feb0 	bl	800b250 <puts>
		  Error_Handler();
 80014f0:	f000 fb74 	bl	8001bdc <Error_Handler>
	  }

	  if (HAL_I2C_Master_Receive(&hi2c1, SENS_ADDR, buf, 2, HAL_MAX_DELAY) != HAL_OK)
 80014f4:	2390      	movs	r3, #144	; 0x90
 80014f6:	b299      	uxth	r1, r3
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2302      	movs	r3, #2
 8001500:	4a21      	ldr	r2, [pc, #132]	; (8001588 <I2C_read_temp_sensor+0xc4>)
 8001502:	4822      	ldr	r0, [pc, #136]	; (800158c <I2C_read_temp_sensor+0xc8>)
 8001504:	f002 feaa 	bl	800425c <HAL_I2C_Master_Receive>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d004      	beq.n	8001518 <I2C_read_temp_sensor+0x54>
	  {
		  printf("\r\nNo data from sensor received!\r\n");
 800150e:	4821      	ldr	r0, [pc, #132]	; (8001594 <I2C_read_temp_sensor+0xd0>)
 8001510:	f009 fe9e 	bl	800b250 <puts>
		  Error_Handler();
 8001514:	f000 fb62 	bl	8001bdc <Error_Handler>
	  }

	  val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <I2C_read_temp_sensor+0xc4>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	b21a      	sxth	r2, r3
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <I2C_read_temp_sensor+0xc4>)
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	b2db      	uxtb	r3, r3
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21a      	sxth	r2, r3
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <I2C_read_temp_sensor+0xd4>)
 8001530:	801a      	strh	r2, [r3, #0]

	  if ( val > 0x7FF ) {
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <I2C_read_temp_sensor+0xd4>)
 8001534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800153c:	db09      	blt.n	8001552 <I2C_read_temp_sensor+0x8e>
        val |= 0xF000;
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <I2C_read_temp_sensor+0xd4>)
 8001540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001544:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001548:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800154c:	b21a      	sxth	r2, r3
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <I2C_read_temp_sensor+0xd4>)
 8001550:	801a      	strh	r2, [r3, #0]
      }

	  val=val*0.0625;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <I2C_read_temp_sensor+0xd4>)
 8001554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f803 	bl	8000564 <__aeabi_i2d>
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <I2C_read_temp_sensor+0xd8>)
 8001564:	f7ff f868 	bl	8000638 <__aeabi_dmul>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff fb12 	bl	8000b98 <__aeabi_d2iz>
 8001574:	4603      	mov	r3, r0
 8001576:	b21a      	sxth	r2, r3
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <I2C_read_temp_sensor+0xd4>)
 800157a:	801a      	strh	r2, [r3, #0]

	  return val;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <I2C_read_temp_sensor+0xd4>)
 800157e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200003d4 	.word	0x200003d4
 800158c:	20000320 	.word	0x20000320
 8001590:	0800ff40 	.word	0x0800ff40
 8001594:	0800ff58 	.word	0x0800ff58
 8001598:	200003e0 	.word	0x200003e0
 800159c:	3fb00000 	.word	0x3fb00000

080015a0 <MX_SPI2_Init>:
PB10     ------> SPI2_SCK (Nucleo FR446 board, CN9 pin #7)
PB12     ------> SPI2_NSS (Nucleo FR446 board, CN10 pin #14)
*/

extern void MX_SPI2_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0

	  hspi2.Instance = SPI2;
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <MX_SPI2_Init+0x5c>)
 80015a6:	4a16      	ldr	r2, [pc, #88]	; (8001600 <MX_SPI2_Init+0x60>)
 80015a8:	601a      	str	r2, [r3, #0]
	  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_SPI2_Init+0x5c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	605a      	str	r2, [r3, #4]
	  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_SPI2_Init+0x5c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
	  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_SPI2_Init+0x5c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
	  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_SPI2_Init+0x5c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
	  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_SPI2_Init+0x5c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
	  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_SPI2_Init+0x5c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
	  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_SPI2_Init+0x5c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
	  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_SPI2_Init+0x5c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_SPI2_Init+0x5c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi2.Init.CRCPolynomial = 10;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_SPI2_Init+0x5c>)
 80015e2:	220a      	movs	r2, #10
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_SPI2_Init+0x5c>)
 80015e8:	f006 fd38 	bl	800805c <HAL_SPI_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_SPI2_Init+0x56>
	  {
	    Error_Handler();
 80015f2:	f000 faf3 	bl	8001bdc <Error_Handler>
	  }

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200003e4 	.word	0x200003e4
 8001600:	40003800 	.word	0x40003800

08001604 <SPI_read>:

// ****************************************************************************

extern uint8_t SPI_read(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0

	  uint8_t *buf=0;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
	  uint8_t response[]={0xab,0xcd,0xca,0xfe};
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <SPI_read+0x4c>)
 8001610:	603b      	str	r3, [r7, #0]

	  while (!(HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_READY));
 8001612:	bf00      	nop
 8001614:	480f      	ldr	r0, [pc, #60]	; (8001654 <SPI_read+0x50>)
 8001616:	f007 f999 	bl	800894c <HAL_SPI_GetState>
 800161a:	4603      	mov	r3, r0
 800161c:	2b01      	cmp	r3, #1
 800161e:	d1f9      	bne.n	8001614 <SPI_read+0x10>

	  HAL_SPI_Receive(&hspi2, &buf, 1,HAL_MAX_DELAY);
 8001620:	1d39      	adds	r1, r7, #4
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	2201      	movs	r2, #1
 8001628:	480a      	ldr	r0, [pc, #40]	; (8001654 <SPI_read+0x50>)
 800162a:	f006 fedc 	bl	80083e6 <HAL_SPI_Receive>

	  if (buf==0x5) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b05      	cmp	r3, #5
 8001632:	d106      	bne.n	8001642 <SPI_read+0x3e>

		  HAL_SPI_Transmit(&hspi2, &response, 4,HAL_MAX_DELAY);
 8001634:	4639      	mov	r1, r7
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	2204      	movs	r2, #4
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <SPI_read+0x50>)
 800163e:	f006 fd96 	bl	800816e <HAL_SPI_Transmit>

	  };

	  return &response;
 8001642:	463b      	mov	r3, r7
 8001644:	b2db      	uxtb	r3, r3
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	fecacdab 	.word	0xfecacdab
 8001654:	200003e4 	.word	0x200003e4

08001658 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1,0xFFFF);
 8001660:	1d39      	adds	r1, r7, #4
 8001662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001666:	2201      	movs	r2, #1
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <__io_putchar+0x20>)
 800166a:	f007 fe56 	bl	800931a <HAL_UART_Transmit>

  return ch;
 800166e:	687b      	ldr	r3, [r7, #4]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000484 	.word	0x20000484

0800167c <__io_getchar>:


GETCHAR_PROTOTYPE
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	71fb      	strb	r3, [r7, #7]

  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <__io_getchar+0x38>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <__io_getchar+0x38>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	683b      	ldr	r3, [r7, #0]

  HAL_UART_Receive (&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800169c:	1df9      	adds	r1, r7, #7
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	2201      	movs	r2, #1
 80016a4:	4803      	ldr	r0, [pc, #12]	; (80016b4 <__io_getchar+0x38>)
 80016a6:	f007 feca 	bl	800943e <HAL_UART_Receive>
//  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);

  return ch;
 80016aa:	79fb      	ldrb	r3, [r7, #7]

}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000484 	.word	0x20000484

080016b8 <main>:

/* ----------------------------------MAIN ROUTINE------------------------*/

int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08e      	sub	sp, #56	; 0x38
 80016bc:	af02      	add	r7, sp, #8

  char input[20]="\0"; // cleaning the CLI input string
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  char cmd[5]="\0";    // and commands
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	2300      	movs	r3, #0
 80016d6:	733b      	strb	r3, [r7, #12]
  unsigned int addr;
  unsigned int val;
  int16_t temp;
  float V;
  uint8_t res;
  int i=0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c

  setvbuf(stdin, NULL, _IONBF, 0);
 80016dc:	4b77      	ldr	r3, [pc, #476]	; (80018bc <main+0x204>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6858      	ldr	r0, [r3, #4]
 80016e2:	2300      	movs	r3, #0
 80016e4:	2202      	movs	r2, #2
 80016e6:	2100      	movs	r1, #0
 80016e8:	f009 fdd2 	bl	800b290 <setvbuf>

  /* Initialize all configured peripherals */

  HAL_Init();
 80016ec:	f000 fefe 	bl	80024ec <HAL_Init>
  SystemClock_Config();
 80016f0:	f000 f90e 	bl	8001910 <SystemClock_Config>
  MX_GPIO_Init();
 80016f4:	f000 f9d4 	bl	8001aa0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016f8:	f7ff feb6 	bl	8001468 <MX_I2C1_Init>
  MX_I2S1_Init();
 80016fc:	f000 f978 	bl	80019f0 <MX_I2S1_Init>
  MX_SPI2_Init();
 8001700:	f7ff ff4e 	bl	80015a0 <MX_SPI2_Init>
  MX_ADC1_Init();
 8001704:	f7ff fc98 	bl	8001038 <MX_ADC1_Init>
  MX_DAC_Init();
 8001708:	f7ff fcee 	bl	80010e8 <MX_DAC_Init>
  MX_USART2_UART_Init();
 800170c:	f000 f99e 	bl	8001a4c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001710:	f7ff fdfe 	bl	8001310 <MX_TIM3_Init>

  write_register (0x4002040c,0x5100); // required for setting I2C #1 pins with internal pull ups
 8001714:	f44f 41a2 	mov.w	r1, #20736	; 0x5100
 8001718:	4869      	ldr	r0, [pc, #420]	; (80018c0 <main+0x208>)
 800171a:	f000 fa09 	bl	8001b30 <write_register>

  help_menu();
 800171e:	f000 fa15 	bl	8001b4c <help_menu>
 // main CLI loop

  while (1)
  {

	  	 printf("\rST32F446>>");
 8001722:	4868      	ldr	r0, [pc, #416]	; (80018c4 <main+0x20c>)
 8001724:	f009 fd0e 	bl	800b144 <iprintf>

	  	 scanf("%[^\r]", input);
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4619      	mov	r1, r3
 800172e:	4866      	ldr	r0, [pc, #408]	; (80018c8 <main+0x210>)
 8001730:	f009 fd96 	bl	800b260 <iscanf>

		 sscanf(input,"%s %x %x",cmd,&addr,&val);
 8001734:	1d39      	adds	r1, r7, #4
 8001736:	f107 0208 	add.w	r2, r7, #8
 800173a:	f107 0010 	add.w	r0, r7, #16
 800173e:	463b      	mov	r3, r7
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	460b      	mov	r3, r1
 8001744:	4961      	ldr	r1, [pc, #388]	; (80018cc <main+0x214>)
 8001746:	f009 fe8f 	bl	800b468 <siscanf>


	  	 if (strstr(cmd,"rd")) {         // reading from a register
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	4960      	ldr	r1, [pc, #384]	; (80018d0 <main+0x218>)
 8001750:	4618      	mov	r0, r3
 8001752:	f009 fefa 	bl	800b54a <strstr>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d004      	beq.n	8001766 <main+0xae>
	  		read_register(addr);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f9d4 	bl	8001b0c <read_register>
 8001764:	e09b      	b.n	800189e <main+0x1e6>

	  	 }

	  	 else if (strstr(cmd,"dump")) {    // writing to a register
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	495a      	ldr	r1, [pc, #360]	; (80018d4 <main+0x21c>)
 800176c:	4618      	mov	r0, r3
 800176e:	f009 feec 	bl	800b54a <strstr>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d011      	beq.n	800179c <main+0xe4>

	  		 for (i=0; i<val; i++) {
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800177c:	e009      	b.n	8001792 <main+0xda>
	  			read_register(addr);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4618      	mov	r0, r3
 8001782:	f000 f9c3 	bl	8001b0c <read_register>
	  			addr=addr+4;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3304      	adds	r3, #4
 800178a:	607b      	str	r3, [r7, #4]
	  		 for (i=0; i<val; i++) {
 800178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178e:	3301      	adds	r3, #1
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d3f1      	bcc.n	800177e <main+0xc6>
 800179a:	e080      	b.n	800189e <main+0x1e6>
	  		 }

	  	 }

	  	 else if (strstr(cmd,"wr")) {    // registers' dump
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	494d      	ldr	r1, [pc, #308]	; (80018d8 <main+0x220>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f009 fed1 	bl	800b54a <strstr>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <main+0x10a>
	  		write_register(addr,val);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f9bb 	bl	8001b30 <write_register>
	  		printf("\r\n");
 80017ba:	4848      	ldr	r0, [pc, #288]	; (80018dc <main+0x224>)
 80017bc:	f009 fd48 	bl	800b250 <puts>
 80017c0:	e06d      	b.n	800189e <main+0x1e6>

	  	 }

	  	 else if (strstr(cmd,"quit")) {    // writing to a register
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	4946      	ldr	r1, [pc, #280]	; (80018e0 <main+0x228>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f009 febe 	bl	800b54a <strstr>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <main+0x12a>
	  		printf("\r\n<<<<<<<Goodbye from ST32F4466RTE MCU UART terminal>>>>>\r\n");
 80017d4:	4843      	ldr	r0, [pc, #268]	; (80018e4 <main+0x22c>)
 80017d6:	f009 fd3b 	bl	800b250 <puts>
	  		printf("\r\n");
 80017da:	4840      	ldr	r0, [pc, #256]	; (80018dc <main+0x224>)
 80017dc:	f009 fd38 	bl	800b250 <puts>
	  		break;
 80017e0:	e066      	b.n	80018b0 <main+0x1f8>
	  	 }

	  	 else if (strstr(cmd,"temp")) {     // reading temperature sensor
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	4940      	ldr	r1, [pc, #256]	; (80018e8 <main+0x230>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f009 feae 	bl	800b54a <strstr>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00a      	beq.n	800180a <main+0x152>

	  		temp = I2C_read_temp_sensor();
 80017f4:	f7ff fe66 	bl	80014c4 <I2C_read_temp_sensor>
 80017f8:	4603      	mov	r3, r0
 80017fa:	84bb      	strh	r3, [r7, #36]	; 0x24
	  		printf("\r\nTemperature is: %d\r\n",temp);
 80017fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001800:	4619      	mov	r1, r3
 8001802:	483a      	ldr	r0, [pc, #232]	; (80018ec <main+0x234>)
 8001804:	f009 fc9e 	bl	800b144 <iprintf>
 8001808:	e049      	b.n	800189e <main+0x1e6>

	  	 }

	  	 else if (strstr(cmd,"spi")) {     // reading temperature sensor
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	4938      	ldr	r1, [pc, #224]	; (80018f0 <main+0x238>)
 8001810:	4618      	mov	r0, r3
 8001812:	f009 fe9a 	bl	800b54a <strstr>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <main+0x176>

	  		res=SPI_read();
 800181c:	f7ff fef2 	bl	8001604 <SPI_read>
 8001820:	4603      	mov	r3, r0
 8001822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  		printf("\r\nST32F446 MCU SPI slave interface approached by host and answered with 0xABCDCAFE\r\n");
 8001826:	4833      	ldr	r0, [pc, #204]	; (80018f4 <main+0x23c>)
 8001828:	f009 fd12 	bl	800b250 <puts>
 800182c:	e037      	b.n	800189e <main+0x1e6>

	  	 }

	  	 else if (strstr(cmd,"adc")) {     // reading temperature sensor
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	4931      	ldr	r1, [pc, #196]	; (80018f8 <main+0x240>)
 8001834:	4618      	mov	r0, r3
 8001836:	f009 fe88 	bl	800b54a <strstr>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00c      	beq.n	800185a <main+0x1a2>

	  		V=read_ADC();
 8001840:	f7ff fc7e 	bl	8001140 <read_ADC>
 8001844:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	  		printf("\r\nVoltage measured at PA5 physical pin is: %.2f[V]\r\n",(float)V);
 8001848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800184a:	f7fe fe9d 	bl	8000588 <__aeabi_f2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	482a      	ldr	r0, [pc, #168]	; (80018fc <main+0x244>)
 8001854:	f009 fc76 	bl	800b144 <iprintf>
 8001858:	e021      	b.n	800189e <main+0x1e6>

	  	 }

	  	 else if (strstr(cmd,"dac")) {     // reading temperature sensor
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	4928      	ldr	r1, [pc, #160]	; (8001900 <main+0x248>)
 8001860:	4618      	mov	r0, r3
 8001862:	f009 fe72 	bl	800b54a <strstr>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <main+0x1c0>

	  		printf("\r\nOutput the signal measured on PA5 GPIO pin....\r\n");
 800186c:	4825      	ldr	r0, [pc, #148]	; (8001904 <main+0x24c>)
 800186e:	f009 fcef 	bl	800b250 <puts>
	  		DAC_output();
 8001872:	f7ff fd03 	bl	800127c <DAC_output>
 8001876:	e012      	b.n	800189e <main+0x1e6>

	  	 }

	  	 else if (strstr(cmd,"help")) {     // help menu of commands
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	4922      	ldr	r1, [pc, #136]	; (8001908 <main+0x250>)
 800187e:	4618      	mov	r0, r3
 8001880:	f009 fe63 	bl	800b54a <strstr>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <main+0x1dc>

	  		help_menu();
 800188a:	f000 f95f 	bl	8001b4c <help_menu>
	  		DAC_output_Stop();
 800188e:	f7ff fd35 	bl	80012fc <DAC_output_Stop>
 8001892:	e004      	b.n	800189e <main+0x1e6>

	  	 }

	  	 else {

	  		 printf("\runknown command, please type again...\r\n");
 8001894:	481d      	ldr	r0, [pc, #116]	; (800190c <main+0x254>)
 8001896:	f009 fcdb 	bl	800b250 <puts>
	  		 DAC_output_Stop();
 800189a:	f7ff fd2f 	bl	80012fc <DAC_output_Stop>


	  	 	  }	  	 setvbuf(stdin, NULL, _IONBF, 0);
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <main+0x204>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6858      	ldr	r0, [r3, #4]
 80018a4:	2300      	movs	r3, #0
 80018a6:	2202      	movs	r2, #2
 80018a8:	2100      	movs	r1, #0
 80018aa:	f009 fcf1 	bl	800b290 <setvbuf>
	  	 printf("\rST32F446>>");
 80018ae:	e738      	b.n	8001722 <main+0x6a>
 80018b0:	2300      	movs	r3, #0



  	  }  // end of while loop

} // end of main code
 80018b2:	4618      	mov	r0, r3
 80018b4:	3730      	adds	r7, #48	; 0x30
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000000c 	.word	0x2000000c
 80018c0:	4002040c 	.word	0x4002040c
 80018c4:	0800ff7c 	.word	0x0800ff7c
 80018c8:	0800ff88 	.word	0x0800ff88
 80018cc:	0800ff90 	.word	0x0800ff90
 80018d0:	0800ff9c 	.word	0x0800ff9c
 80018d4:	0800ffa0 	.word	0x0800ffa0
 80018d8:	0800ffa8 	.word	0x0800ffa8
 80018dc:	0800ffac 	.word	0x0800ffac
 80018e0:	0800ffb0 	.word	0x0800ffb0
 80018e4:	0800ffb8 	.word	0x0800ffb8
 80018e8:	0800fff4 	.word	0x0800fff4
 80018ec:	0800fffc 	.word	0x0800fffc
 80018f0:	08010014 	.word	0x08010014
 80018f4:	08010018 	.word	0x08010018
 80018f8:	0801006c 	.word	0x0801006c
 80018fc:	08010070 	.word	0x08010070
 8001900:	080100a8 	.word	0x080100a8
 8001904:	080100ac 	.word	0x080100ac
 8001908:	080100e0 	.word	0x080100e0
 800190c:	080100e8 	.word	0x080100e8

08001910 <SystemClock_Config>:
/* =========================================================================================
 * */
/* ----------------------------------AUX functions------------------------*/

void SystemClock_Config(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b094      	sub	sp, #80	; 0x50
 8001914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	2234      	movs	r2, #52	; 0x34
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f008 fd8e 	bl	800a440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 8001934:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <SystemClock_Config+0xd8>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800193c:	4a2a      	ldr	r2, [pc, #168]	; (80019e8 <SystemClock_Config+0xd8>)
 800193e:	f043 0310 	orr.w	r3, r3, #16
 8001942:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <SystemClock_Config+0xd8>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <SystemClock_Config+0xd8>)
 800194a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800194e:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <SystemClock_Config+0xd8>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <SystemClock_Config+0xd8>)
 800195a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195e:	6413      	str	r3, [r2, #64]	; 0x40
 8001960:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <SystemClock_Config+0xd8>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <SystemClock_Config+0xdc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001978:	4a1c      	ldr	r2, [pc, #112]	; (80019ec <SystemClock_Config+0xdc>)
 800197a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <SystemClock_Config+0xdc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	683b      	ldr	r3, [r7, #0]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800198c:	2302      	movs	r3, #2
 800198e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001990:	2301      	movs	r3, #1
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001994:	2310      	movs	r3, #16
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800199c:	2300      	movs	r3, #0
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4618      	mov	r0, r3
 80019a6:	f006 f8bb 	bl	8007b20 <HAL_RCC_OscConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80019b0:	f000 f914 	bl	8001bdc <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b4:	230f      	movs	r3, #15
 80019b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f005 f870 	bl	8006ab4 <HAL_RCC_ClockConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0xce>
  {
    Error_Handler();
 80019da:	f000 f8ff 	bl	8001bdc <Error_Handler>
  }
}
 80019de:	bf00      	nop
 80019e0:	3750      	adds	r7, #80	; 0x50
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000

080019f0 <MX_I2S1_Init>:

// ****************************************************************************

static void MX_I2S1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

  hi2s1.Instance = SPI1;
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_I2S1_Init+0x54>)
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <MX_I2S1_Init+0x58>)
 80019f8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <MX_I2S1_Init+0x54>)
 80019fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a00:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <MX_I2S1_Init+0x54>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_I2S1_Init+0x54>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <MX_I2S1_Init+0x54>)
 8001a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a14:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_I2S1_Init+0x54>)
 8001a18:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001a1c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_I2S1_Init+0x54>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <MX_I2S1_Init+0x54>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_I2S1_Init+0x54>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <MX_I2S1_Init+0x54>)
 8001a32:	f004 fe41 	bl	80066b8 <HAL_I2S_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 8001a3c:	f000 f8ce 	bl	8001bdc <Error_Handler>
  }

}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2000043c 	.word	0x2000043c
 8001a48:	40013000 	.word	0x40013000

08001a4c <MX_USART2_UART_Init>:
PA2     ------> USART2_TX
PA3     ------> USART2_RX
*/

static void MX_USART2_UART_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <MX_USART2_UART_Init+0x50>)
 8001a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a72:	220c      	movs	r2, #12
 8001a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a84:	f007 fbfc 	bl	8009280 <HAL_UART_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a8e:	f000 f8a5 	bl	8001bdc <Error_Handler>
  }

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000484 	.word	0x20000484
 8001a9c:	40004400 	.word	0x40004400

08001aa0 <MX_GPIO_Init>:

// ****************************************************************************

static void MX_GPIO_Init(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0

//  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <MX_GPIO_Init+0x68>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a16      	ldr	r2, [pc, #88]	; (8001b08 <MX_GPIO_Init+0x68>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_GPIO_Init+0x68>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <MX_GPIO_Init+0x68>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a0f      	ldr	r2, [pc, #60]	; (8001b08 <MX_GPIO_Init+0x68>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <MX_GPIO_Init+0x68>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_GPIO_Init+0x68>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <MX_GPIO_Init+0x68>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_GPIO_Init+0x68>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800

08001b0c <read_register>:

// ****************************************************************************

void read_register(unsigned int addr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	 unsigned int  data;
	 // reading a register command

	 data = READ_REG(*((unsigned int *)addr));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
	 printf("\r\nRegister 0x%x, value : 0x%x \r\n",addr,data);
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4803      	ldr	r0, [pc, #12]	; (8001b2c <read_register+0x20>)
 8001b20:	f009 fb10 	bl	800b144 <iprintf>

}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	08010110 	.word	0x08010110

08001b30 <write_register>:

// ****************************************************************************

void write_register(unsigned int addr, unsigned int val)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]

	*((unsigned int *)addr)=((unsigned int *)val);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	601a      	str	r2, [r3, #0]


}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <help_menu>:

// ****************************************************************************

void help_menu(void)

{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	  printf("\r<<<<<<<Hello from ST32F4466RTE MCU UART terminal>>>>>\r\n");
 8001b50:	4815      	ldr	r0, [pc, #84]	; (8001ba8 <help_menu+0x5c>)
 8001b52:	f009 fb7d 	bl	800b250 <puts>
	  printf("\r\n");
 8001b56:	4815      	ldr	r0, [pc, #84]	; (8001bac <help_menu+0x60>)
 8001b58:	f009 fb7a 	bl	800b250 <puts>
	  printf("\r<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<CLI supported commands >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n");
 8001b5c:	4814      	ldr	r0, [pc, #80]	; (8001bb0 <help_menu+0x64>)
 8001b5e:	f009 fb77 	bl	800b250 <puts>
	  printf("\r=========================================================================================================\r\n");
 8001b62:	4814      	ldr	r0, [pc, #80]	; (8001bb4 <help_menu+0x68>)
 8001b64:	f009 fb74 	bl	800b250 <puts>
	  printf("\rhelp                  : list of supported commands\r\n");
 8001b68:	4813      	ldr	r0, [pc, #76]	; (8001bb8 <help_menu+0x6c>)
 8001b6a:	f009 fb71 	bl	800b250 <puts>
	  printf("rd <xxxx>             : read a register address <xxxx>\r\n");
 8001b6e:	4813      	ldr	r0, [pc, #76]	; (8001bbc <help_menu+0x70>)
 8001b70:	f009 fb6e 	bl	800b250 <puts>
	  printf("dump <xxxx> <yyyy>    : register dump from address <xxxx> # of addresses <yyyy> (32 bit each)\r\n");
 8001b74:	4812      	ldr	r0, [pc, #72]	; (8001bc0 <help_menu+0x74>)
 8001b76:	f009 fb6b 	bl	800b250 <puts>
	  printf("wr <xxxx> <yyyy>      : write to a register <xxxx> value <yyyy>\r\n");
 8001b7a:	4812      	ldr	r0, [pc, #72]	; (8001bc4 <help_menu+0x78>)
 8001b7c:	f009 fb68 	bl	800b250 <puts>
	  printf("temp                  : read temperature sensor value\r\n");
 8001b80:	4811      	ldr	r0, [pc, #68]	; (8001bc8 <help_menu+0x7c>)
 8001b82:	f009 fb65 	bl	800b250 <puts>
	  printf("spi                   : allow host to send an SPI command to MCU SPI slave interface\r\n");
 8001b86:	4811      	ldr	r0, [pc, #68]	; (8001bcc <help_menu+0x80>)
 8001b88:	f009 fb62 	bl	800b250 <puts>
	  printf("adc                   : print analog reading from MCU ADC interface (pin A5 input)\r\n");
 8001b8c:	4810      	ldr	r0, [pc, #64]	; (8001bd0 <help_menu+0x84>)
 8001b8e:	f009 fb5f 	bl	800b250 <puts>
	  printf("dac                   : output on MCU PA5 DAC output pin the signal measured with ADC on PA4 GPIO pin\r\n");
 8001b92:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <help_menu+0x88>)
 8001b94:	f009 fb5c 	bl	800b250 <puts>
	  printf("quit                  : Exit Command Line terminal \r\n");
 8001b98:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <help_menu+0x8c>)
 8001b9a:	f009 fb59 	bl	800b250 <puts>
	  printf("\r=========================================================================================================\r\n");
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <help_menu+0x68>)
 8001ba0:	f009 fb56 	bl	800b250 <puts>

}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	08010134 	.word	0x08010134
 8001bac:	0800ffac 	.word	0x0800ffac
 8001bb0:	0801016c 	.word	0x0801016c
 8001bb4:	080101d0 	.word	0x080101d0
 8001bb8:	0801023c 	.word	0x0801023c
 8001bbc:	08010274 	.word	0x08010274
 8001bc0:	080102ac 	.word	0x080102ac
 8001bc4:	0801030c 	.word	0x0801030c
 8001bc8:	08010350 	.word	0x08010350
 8001bcc:	08010388 	.word	0x08010388
 8001bd0:	080103e0 	.word	0x080103e0
 8001bd4:	08010434 	.word	0x08010434
 8001bd8:	0801049c 	.word	0x0801049c

08001bdc <Error_Handler>:
// ****************************************************************************


void Error_Handler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
}
 8001be2:	bf00      	nop

  __disable_irq();
  	 printf ("An error occured! Will break now...");
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <Error_Handler+0x14>)
 8001be6:	f009 faad 	bl	800b144 <iprintf>

}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	080104d4 	.word	0x080104d4

08001bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2f      	ldr	r2, [pc, #188]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d157      	bne.n	8001d16 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_ADC_MspInit+0xe0>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a2d      	ldr	r2, [pc, #180]	; (8001d24 <HAL_ADC_MspInit+0xe0>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_ADC_MspInit+0xe0>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_ADC_MspInit+0xe0>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <HAL_ADC_MspInit+0xe0>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_ADC_MspInit+0xe0>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	481d      	ldr	r0, [pc, #116]	; (8001d28 <HAL_ADC_MspInit+0xe4>)
 8001cb2:	f001 fefd 	bl	8003ab0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001cb8:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_ADC_MspInit+0xec>)
 8001cba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cdc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001ce0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cfa:	480c      	ldr	r0, [pc, #48]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001cfc:	f001 fac8 	bl	8003290 <HAL_DMA_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d06:	f7ff ff69 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38
 8001d10:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <HAL_ADC_MspInit+0xe8>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40012000 	.word	0x40012000
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	200002c0 	.word	0x200002c0
 8001d30:	40026410 	.word	0x40026410

08001d34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_DAC_MspInit+0x7c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d127      	bne.n	8001da6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_DAC_MspInit+0x80>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <HAL_DAC_MspInit+0x80>)
 8001d60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_DAC_MspInit+0x80>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_DAC_MspInit+0x80>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_DAC_MspInit+0x80>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_DAC_MspInit+0x80>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d8e:	2310      	movs	r3, #16
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d92:	2303      	movs	r3, #3
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <HAL_DAC_MspInit+0x84>)
 8001da2:	f001 fe85 	bl	8003ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001da6:	bf00      	nop
 8001da8:	3728      	adds	r7, #40	; 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40007400 	.word	0x40007400
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000

08001dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a38      	ldr	r2, [pc, #224]	; (8001ebc <HAL_I2C_MspInit+0x100>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d169      	bne.n	8001eb2 <HAL_I2C_MspInit+0xf6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b37      	ldr	r3, [pc, #220]	; (8001ec0 <HAL_I2C_MspInit+0x104>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a36      	ldr	r2, [pc, #216]	; (8001ec0 <HAL_I2C_MspInit+0x104>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <HAL_I2C_MspInit+0x104>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dfa:	23c0      	movs	r3, #192	; 0xc0
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfe:	2312      	movs	r3, #18
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	482b      	ldr	r0, [pc, #172]	; (8001ec4 <HAL_I2C_MspInit+0x108>)
 8001e16:	f001 fe4b 	bl	8003ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_I2C_MspInit+0x104>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <HAL_I2C_MspInit+0x104>)
 8001e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_I2C_MspInit+0x104>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e38:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <HAL_I2C_MspInit+0x110>)
 8001e3a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e42:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e56:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e76:	4814      	ldr	r0, [pc, #80]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e78:	f001 fa0a 	bl	8003290 <HAL_DMA_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001e82:	f7ff feab 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a0f      	ldr	r2, [pc, #60]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e8a:	639a      	str	r2, [r3, #56]	; 0x38
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <HAL_I2C_MspInit+0x10c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	201f      	movs	r0, #31
 8001e98:	f001 f8bf 	bl	800301a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e9c:	201f      	movs	r0, #31
 8001e9e:	f001 f8d8 	bl	8003052 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2020      	movs	r0, #32
 8001ea8:	f001 f8b7 	bl	800301a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001eac:	2020      	movs	r0, #32
 8001eae:	f001 f8d0 	bl	8003052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	; 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40005400 	.word	0x40005400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	20000374 	.word	0x20000374
 8001ecc:	40026010 	.word	0x40026010

08001ed0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b0a2      	sub	sp, #136	; 0x88
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee8:	f107 0318 	add.w	r3, r7, #24
 8001eec:	225c      	movs	r2, #92	; 0x5c
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f008 faa5 	bl	800a440 <memset>
  if(hi2s->Instance==SPI1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a48      	ldr	r2, [pc, #288]	; (800201c <HAL_I2S_MspInit+0x14c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	f040 8089 	bne.w	8002014 <HAL_I2S_MspInit+0x144>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001f06:	23c0      	movs	r3, #192	; 0xc0
 8001f08:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8001f0e:	2310      	movs	r3, #16
 8001f10:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f12:	2302      	movs	r3, #2
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001f16:	2302      	movs	r3, #2
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f22:	f107 0318 	add.w	r3, r7, #24
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 fede 	bl	8006ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 8001f32:	f7ff fe53 	bl	8001bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <HAL_I2S_MspInit+0x150>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a38      	ldr	r2, [pc, #224]	; (8002020 <HAL_I2S_MspInit+0x150>)
 8001f40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_I2S_MspInit+0x150>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	4b32      	ldr	r3, [pc, #200]	; (8002020 <HAL_I2S_MspInit+0x150>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a31      	ldr	r2, [pc, #196]	; (8002020 <HAL_I2S_MspInit+0x150>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <HAL_I2S_MspInit+0x150>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_I2S_MspInit+0x150>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a2a      	ldr	r2, [pc, #168]	; (8002020 <HAL_I2S_MspInit+0x150>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_I2S_MspInit+0x150>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_I2S_MspInit+0x150>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a23      	ldr	r2, [pc, #140]	; (8002020 <HAL_I2S_MspInit+0x150>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_I2S_MspInit+0x150>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_15;
 8001fa6:	f248 0380 	movw	r3, #32896	; 0x8080
 8001faa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fba:	2305      	movs	r3, #5
 8001fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4817      	ldr	r0, [pc, #92]	; (8002024 <HAL_I2S_MspInit+0x154>)
 8001fc8:	f001 fd72 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fcc:	2310      	movs	r3, #16
 8001fce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fde:	2305      	movs	r3, #5
 8001fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480f      	ldr	r0, [pc, #60]	; (8002028 <HAL_I2S_MspInit+0x158>)
 8001fec:	f001 fd60 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002002:	2305      	movs	r3, #5
 8002004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002008:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800200c:	4619      	mov	r1, r3
 800200e:	4807      	ldr	r0, [pc, #28]	; (800202c <HAL_I2S_MspInit+0x15c>)
 8002010:	f001 fd4e 	bl	8003ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002014:	bf00      	nop
 8002016:	3788      	adds	r7, #136	; 0x88
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40013000 	.word	0x40013000
 8002020:	40023800 	.word	0x40023800
 8002024:	40020000 	.word	0x40020000
 8002028:	40020800 	.word	0x40020800
 800202c:	40020400 	.word	0x40020400

08002030 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a30      	ldr	r2, [pc, #192]	; (8002110 <HAL_SPI_MspInit+0xe0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d15a      	bne.n	8002108 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_SPI_MspInit+0xe4>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a2e      	ldr	r2, [pc, #184]	; (8002114 <HAL_SPI_MspInit+0xe4>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_SPI_MspInit+0xe4>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_SPI_MspInit+0xe4>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a27      	ldr	r2, [pc, #156]	; (8002114 <HAL_SPI_MspInit+0xe4>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_SPI_MspInit+0xe4>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_SPI_MspInit+0xe4>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_SPI_MspInit+0xe4>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_SPI_MspInit+0xe4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020a6:	2302      	movs	r3, #2
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80020b6:	2307      	movs	r3, #7
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4815      	ldr	r0, [pc, #84]	; (8002118 <HAL_SPI_MspInit+0xe8>)
 80020c2:	f001 fcf5 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020c6:	2304      	movs	r3, #4
 80020c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d2:	2303      	movs	r3, #3
 80020d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020d6:	2305      	movs	r3, #5
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	4619      	mov	r1, r3
 80020e0:	480d      	ldr	r0, [pc, #52]	; (8002118 <HAL_SPI_MspInit+0xe8>)
 80020e2:	f001 fce5 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80020e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020f8:	2305      	movs	r3, #5
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	4806      	ldr	r0, [pc, #24]	; (800211c <HAL_SPI_MspInit+0xec>)
 8002104:	f001 fcd4 	bl	8003ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	3728      	adds	r7, #40	; 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40003800 	.word	0x40003800
 8002114:	40023800 	.word	0x40023800
 8002118:	40020800 	.word	0x40020800
 800211c:	40020400 	.word	0x40020400

08002120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a15      	ldr	r2, [pc, #84]	; (8002184 <HAL_TIM_Base_MspInit+0x64>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_TIM_Base_MspInit+0x68>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a13      	ldr	r2, [pc, #76]	; (8002188 <HAL_TIM_Base_MspInit+0x68>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_TIM_Base_MspInit+0x68>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800214e:	e012      	b.n	8002176 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0d      	ldr	r2, [pc, #52]	; (800218c <HAL_TIM_Base_MspInit+0x6c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10d      	bne.n	8002176 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_TIM_Base_MspInit+0x68>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_TIM_Base_MspInit+0x68>)
 8002164:	f043 0310 	orr.w	r3, r3, #16
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_TIM_Base_MspInit+0x68>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40000400 	.word	0x40000400
 8002188:	40023800 	.word	0x40023800
 800218c:	40001000 	.word	0x40001000

08002190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_UART_MspInit+0x94>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d133      	bne.n	800221a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_UART_MspInit+0x98>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_UART_MspInit+0x98>)
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_UART_MspInit+0x98>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_UART_MspInit+0x98>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a14      	ldr	r2, [pc, #80]	; (8002228 <HAL_UART_MspInit+0x98>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_UART_MspInit+0x98>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021ea:	230c      	movs	r3, #12
 80021ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021fa:	2307      	movs	r3, #7
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	4809      	ldr	r0, [pc, #36]	; (800222c <HAL_UART_MspInit+0x9c>)
 8002206:	f001 fc53 	bl	8003ab0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2101      	movs	r1, #1
 800220e:	2026      	movs	r0, #38	; 0x26
 8002210:	f000 ff03 	bl	800301a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002214:	2026      	movs	r0, #38	; 0x26
 8002216:	f000 ff1c 	bl	8003052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	; 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40004400 	.word	0x40004400
 8002228:	40023800 	.word	0x40023800
 800222c:	40020000 	.word	0x40020000

08002230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <NMI_Handler+0x4>

08002236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <HardFault_Handler+0x4>

0800223c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <MemManage_Handler+0x4>

08002242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002246:	e7fe      	b.n	8002246 <BusFault_Handler+0x4>

08002248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800224c:	e7fe      	b.n	800224c <UsageFault_Handler+0x4>

0800224e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800227c:	f000 f988 	bl	8002590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <DMA1_Stream0_IRQHandler+0x10>)
 800228a:	f001 f999 	bl	80035c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000374 	.word	0x20000374

08002298 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <I2C1_EV_IRQHandler+0x10>)
 800229e:	f002 fa03 	bl	80046a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000320 	.word	0x20000320

080022ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <I2C1_ER_IRQHandler+0x10>)
 80022b2:	f002 fb6a 	bl	800498a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000320 	.word	0x20000320

080022c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <USART2_IRQHandler+0x10>)
 80022c6:	f007 f95d 	bl	8009584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000484 	.word	0x20000484

080022d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <DMA2_Stream0_IRQHandler+0x10>)
 80022da:	f001 f971 	bl	80035c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200002c0 	.word	0x200002c0

080022e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return 1;
 80022ec:	2301      	movs	r3, #1
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_kill>:

int _kill(int pid, int sig)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002302:	f008 f873 	bl	800a3ec <__errno>
 8002306:	4603      	mov	r3, r0
 8002308:	2216      	movs	r2, #22
 800230a:	601a      	str	r2, [r3, #0]
  return -1;
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_exit>:

void _exit (int status)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ffe7 	bl	80022f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800232a:	e7fe      	b.n	800232a <_exit+0x12>

0800232c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e00a      	b.n	8002354 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800233e:	f7ff f99d 	bl	800167c <__io_getchar>
 8002342:	4601      	mov	r1, r0
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	60ba      	str	r2, [r7, #8]
 800234a:	b2ca      	uxtb	r2, r1
 800234c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbf0      	blt.n	800233e <_read+0x12>
  }

  return len;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e009      	b.n	800238c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	60ba      	str	r2, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff f969 	bl	8001658 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbf1      	blt.n	8002378 <_write+0x12>
  }
  return len;
 8002394:	687b      	ldr	r3, [r7, #4]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_close>:

int _close(int file)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c6:	605a      	str	r2, [r3, #4]
  return 0;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_isatty>:

int _isatty(int file)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <_sbrk+0x5c>)
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <_sbrk+0x60>)
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <_sbrk+0x64>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <_sbrk+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d207      	bcs.n	8002448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002438:	f007 ffd8 	bl	800a3ec <__errno>
 800243c:	4603      	mov	r3, r0
 800243e:	220c      	movs	r2, #12
 8002440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	e009      	b.n	800245c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <_sbrk+0x64>)
 8002458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20020000 	.word	0x20020000
 8002468:	00000400 	.word	0x00000400
 800246c:	200004c8 	.word	0x200004c8
 8002470:	200004e0 	.word	0x200004e0

08002474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <SystemInit+0x20>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <SystemInit+0x20>)
 8002480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800249e:	490e      	ldr	r1, [pc, #56]	; (80024d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024a0:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024b4:	4c0b      	ldr	r4, [pc, #44]	; (80024e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024c2:	f7ff ffd7 	bl	8002474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024c6:	f007 ff97 	bl	800a3f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ca:	f7ff f8f5 	bl	80016b8 <main>
  bx  lr    
 80024ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80024dc:	080109f4 	.word	0x080109f4
  ldr r2, =_sbss
 80024e0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80024e4:	200004e0 	.word	0x200004e0

080024e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC_IRQHandler>
	...

080024ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_Init+0x40>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <HAL_Init+0x40>)
 80024f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_Init+0x40>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_Init+0x40>)
 8002502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_Init+0x40>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <HAL_Init+0x40>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002514:	2003      	movs	r0, #3
 8002516:	f000 fd75 	bl	8003004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251a:	200f      	movs	r0, #15
 800251c:	f000 f808 	bl	8002530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002520:	f7ff fb68 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023c00 	.word	0x40023c00

08002530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_InitTick+0x54>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x58>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002546:	fbb3 f3f1 	udiv	r3, r3, r1
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fd8d 	bl	800306e <HAL_SYSTICK_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e00e      	b.n	800257c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d80a      	bhi.n	800257a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002564:	2200      	movs	r2, #0
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f000 fd55 	bl	800301a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <HAL_InitTick+0x5c>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000000 	.word	0x20000000
 8002588:	20000008 	.word	0x20000008
 800258c:	20000004 	.word	0x20000004

08002590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x20>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_IncTick+0x24>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <HAL_IncTick+0x24>)
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000008 	.word	0x20000008
 80025b4:	200004cc 	.word	0x200004cc

080025b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_GetTick+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	200004cc 	.word	0x200004cc

080025d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e033      	b.n	800264e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fb28 	bl	8001c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	d118      	bne.n	8002640 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002616:	f023 0302 	bic.w	r3, r3, #2
 800261a:	f043 0202 	orr.w	r2, r3, #2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 faa0 	bl	8002b68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f023 0303 	bic.w	r3, r3, #3
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
 800263e:	e001      	b.n	8002644 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_ADC_Stop+0x16>
 8002668:	2302      	movs	r3, #2
 800266a:	e021      	b.n	80026b0 <HAL_ADC_Stop+0x5a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_ADC_Start_DMA+0x1e>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e0e9      	b.n	80028ae <HAL_ADC_Start_DMA+0x1f2>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d018      	beq.n	8002722 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002700:	4b6d      	ldr	r3, [pc, #436]	; (80028b8 <HAL_ADC_Start_DMA+0x1fc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a6d      	ldr	r2, [pc, #436]	; (80028bc <HAL_ADC_Start_DMA+0x200>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0c9a      	lsrs	r2, r3, #18
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002714:	e002      	b.n	800271c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	3b01      	subs	r3, #1
 800271a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f9      	bne.n	8002716 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002730:	d107      	bne.n	8002742 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002740:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	f040 80a1 	bne.w	8002894 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800277c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800278c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002790:	d106      	bne.n	80027a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f023 0206 	bic.w	r2, r3, #6
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
 800279e:	e002      	b.n	80027a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ae:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <HAL_ADC_Start_DMA+0x204>)
 80027b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	4a43      	ldr	r2, [pc, #268]	; (80028c4 <HAL_ADC_Start_DMA+0x208>)
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	4a42      	ldr	r2, [pc, #264]	; (80028c8 <HAL_ADC_Start_DMA+0x20c>)
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	4a41      	ldr	r2, [pc, #260]	; (80028cc <HAL_ADC_Start_DMA+0x210>)
 80027c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80027e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	334c      	adds	r3, #76	; 0x4c
 80027fe:	4619      	mov	r1, r3
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f000 fdf2 	bl	80033ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2b00      	cmp	r3, #0
 8002812:	d12a      	bne.n	800286a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2d      	ldr	r2, [pc, #180]	; (80028d0 <HAL_ADC_Start_DMA+0x214>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d015      	beq.n	800284a <HAL_ADC_Start_DMA+0x18e>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2c      	ldr	r2, [pc, #176]	; (80028d4 <HAL_ADC_Start_DMA+0x218>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d105      	bne.n	8002834 <HAL_ADC_Start_DMA+0x178>
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <HAL_ADC_Start_DMA+0x204>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a27      	ldr	r2, [pc, #156]	; (80028d8 <HAL_ADC_Start_DMA+0x21c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d136      	bne.n	80028ac <HAL_ADC_Start_DMA+0x1f0>
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_ADC_Start_DMA+0x204>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b00      	cmp	r3, #0
 8002848:	d130      	bne.n	80028ac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d129      	bne.n	80028ac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	e020      	b.n	80028ac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <HAL_ADC_Start_DMA+0x214>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d11b      	bne.n	80028ac <HAL_ADC_Start_DMA+0x1f0>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d114      	bne.n	80028ac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	e00b      	b.n	80028ac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000000 	.word	0x20000000
 80028bc:	431bde83 	.word	0x431bde83
 80028c0:	40012300 	.word	0x40012300
 80028c4:	08002d61 	.word	0x08002d61
 80028c8:	08002e1b 	.word	0x08002e1b
 80028cc:	08002e37 	.word	0x08002e37
 80028d0:	40012000 	.word	0x40012000
 80028d4:	40012100 	.word	0x40012100
 80028d8:	40012200 	.word	0x40012200

080028dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1c>
 800291c:	2302      	movs	r3, #2
 800291e:	e113      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x244>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b09      	cmp	r3, #9
 800292e:	d925      	bls.n	800297c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68d9      	ldr	r1, [r3, #12]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	3b1e      	subs	r3, #30
 8002946:	2207      	movs	r2, #7
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43da      	mvns	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	400a      	ands	r2, r1
 8002954:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68d9      	ldr	r1, [r3, #12]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	b29b      	uxth	r3, r3
 8002966:	4618      	mov	r0, r3
 8002968:	4603      	mov	r3, r0
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4403      	add	r3, r0
 800296e:	3b1e      	subs	r3, #30
 8002970:	409a      	lsls	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	e022      	b.n	80029c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6919      	ldr	r1, [r3, #16]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	2207      	movs	r2, #7
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43da      	mvns	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	400a      	ands	r2, r1
 800299e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6919      	ldr	r1, [r3, #16]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	4618      	mov	r0, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4403      	add	r3, r0
 80029b8:	409a      	lsls	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d824      	bhi.n	8002a14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	3b05      	subs	r3, #5
 80029dc:	221f      	movs	r2, #31
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	400a      	ands	r2, r1
 80029ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4618      	mov	r0, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	3b05      	subs	r3, #5
 8002a06:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	635a      	str	r2, [r3, #52]	; 0x34
 8002a12:	e04c      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b0c      	cmp	r3, #12
 8002a1a:	d824      	bhi.n	8002a66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3b23      	subs	r3, #35	; 0x23
 8002a2e:	221f      	movs	r2, #31
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43da      	mvns	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	3b23      	subs	r3, #35	; 0x23
 8002a58:	fa00 f203 	lsl.w	r2, r0, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
 8002a64:	e023      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	3b41      	subs	r3, #65	; 0x41
 8002a78:	221f      	movs	r2, #31
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	400a      	ands	r2, r1
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3b41      	subs	r3, #65	; 0x41
 8002aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aae:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_ADC_ConfigChannel+0x250>)
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a28      	ldr	r2, [pc, #160]	; (8002b58 <HAL_ADC_ConfigChannel+0x254>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10f      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x1d8>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b12      	cmp	r3, #18
 8002ac2:	d10b      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <HAL_ADC_ConfigChannel+0x254>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d12b      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x23a>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <HAL_ADC_ConfigChannel+0x258>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d003      	beq.n	8002af8 <HAL_ADC_ConfigChannel+0x1f4>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b11      	cmp	r3, #17
 8002af6:	d122      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a11      	ldr	r2, [pc, #68]	; (8002b5c <HAL_ADC_ConfigChannel+0x258>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d111      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <HAL_ADC_ConfigChannel+0x25c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a11      	ldr	r2, [pc, #68]	; (8002b64 <HAL_ADC_ConfigChannel+0x260>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	0c9a      	lsrs	r2, r3, #18
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b30:	e002      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f9      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	40012300 	.word	0x40012300
 8002b58:	40012000 	.word	0x40012000
 8002b5c:	10000012 	.word	0x10000012
 8002b60:	20000000 	.word	0x20000000
 8002b64:	431bde83 	.word	0x431bde83

08002b68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b70:	4b79      	ldr	r3, [pc, #484]	; (8002d58 <ADC_Init+0x1f0>)
 8002b72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	021a      	lsls	r2, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6899      	ldr	r1, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	4a58      	ldr	r2, [pc, #352]	; (8002d5c <ADC_Init+0x1f4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6899      	ldr	r1, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6899      	ldr	r1, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	e00f      	b.n	8002c66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0202 	bic.w	r2, r2, #2
 8002c74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6899      	ldr	r1, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7e1b      	ldrb	r3, [r3, #24]
 8002c80:	005a      	lsls	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01b      	beq.n	8002ccc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ca2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6859      	ldr	r1, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	035a      	lsls	r2, r3, #13
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	e007      	b.n	8002cdc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	051a      	lsls	r2, r3, #20
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d1e:	025a      	lsls	r2, r3, #9
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6899      	ldr	r1, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	029a      	lsls	r2, r3, #10
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	609a      	str	r2, [r3, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	40012300 	.word	0x40012300
 8002d5c:	0f000001 	.word	0x0f000001

08002d60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d13c      	bne.n	8002df4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d12b      	bne.n	8002dec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d127      	bne.n	8002dec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d119      	bne.n	8002dec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0220 	bic.w	r2, r2, #32
 8002dc6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7fe fa29 	bl	8001244 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002df2:	e00e      	b.n	8002e12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff fd75 	bl	80028f0 <HAL_ADC_ErrorCallback>
}
 8002e06:	e004      	b.n	8002e12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4798      	blx	r3
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7ff fd57 	bl	80028dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2240      	movs	r2, #64	; 0x40
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f043 0204 	orr.w	r2, r3, #4
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff fd4a 	bl	80028f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60d3      	str	r3, [r2, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 0307 	and.w	r3, r3, #7
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db0b      	blt.n	8002ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	4907      	ldr	r1, [pc, #28]	; (8002f00 <__NVIC_EnableIRQ+0x38>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	db0a      	blt.n	8002f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	490c      	ldr	r1, [pc, #48]	; (8002f50 <__NVIC_SetPriority+0x4c>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	440b      	add	r3, r1
 8002f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f2c:	e00a      	b.n	8002f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4908      	ldr	r1, [pc, #32]	; (8002f54 <__NVIC_SetPriority+0x50>)
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	3b04      	subs	r3, #4
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	440b      	add	r3, r1
 8002f42:	761a      	strb	r2, [r3, #24]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f1c3 0307 	rsb	r3, r3, #7
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	bf28      	it	cs
 8002f76:	2304      	movcs	r3, #4
 8002f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d902      	bls.n	8002f88 <NVIC_EncodePriority+0x30>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3b03      	subs	r3, #3
 8002f86:	e000      	b.n	8002f8a <NVIC_EncodePriority+0x32>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	43d9      	mvns	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	4313      	orrs	r3, r2
         );
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	; 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fd0:	d301      	bcc.n	8002fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00f      	b.n	8002ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <SysTick_Config+0x40>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fde:	210f      	movs	r1, #15
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	f7ff ff8e 	bl	8002f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <SysTick_Config+0x40>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fee:	4b04      	ldr	r3, [pc, #16]	; (8003000 <SysTick_Config+0x40>)
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	e000e010 	.word	0xe000e010

08003004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff29 	bl	8002e64 <__NVIC_SetPriorityGrouping>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800302c:	f7ff ff3e 	bl	8002eac <__NVIC_GetPriorityGrouping>
 8003030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	6978      	ldr	r0, [r7, #20]
 8003038:	f7ff ff8e 	bl	8002f58 <NVIC_EncodePriority>
 800303c:	4602      	mov	r2, r0
 800303e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ff5d 	bl	8002f04 <__NVIC_SetPriority>
}
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800305c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff31 	bl	8002ec8 <__NVIC_EnableIRQ>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff ffa2 	bl	8002fc0 <SysTick_Config>
 800307c:	4603      	mov	r3, r0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e014      	b.n	80030c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	791b      	ldrb	r3, [r3, #4]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d105      	bne.n	80030ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fe fe43 	bl	8001d34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	795b      	ldrb	r3, [r3, #5]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_DAC_Start+0x16>
 80030dc:	2302      	movs	r3, #2
 80030de:	e040      	b.n	8003162 <HAL_DAC_Start+0x98>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6819      	ldr	r1, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2201      	movs	r2, #1
 80030fa:	409a      	lsls	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10f      	bne.n	800312a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003114:	2b3c      	cmp	r3, #60	; 0x3c
 8003116:	d11d      	bne.n	8003154 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	e014      	b.n	8003154 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	213c      	movs	r1, #60	; 0x3c
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	429a      	cmp	r2, r3
 8003142:	d107      	bne.n	8003154 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0202 	orr.w	r2, r2, #2
 8003152:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2201      	movs	r2, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	400a      	ands	r2, r1
 8003192:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	3308      	adds	r3, #8
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	e004      	b.n	80031dc <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	3314      	adds	r3, #20
 80031da:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	461a      	mov	r2, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b087      	sub	sp, #28
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	795b      	ldrb	r3, [r3, #5]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_DAC_ConfigChannel+0x18>
 8003206:	2302      	movs	r3, #2
 8003208:	e03c      	b.n	8003284 <HAL_DAC_ConfigChannel+0x92>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2202      	movs	r2, #2
 8003214:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4013      	ands	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	22c0      	movs	r2, #192	; 0xc0
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43da      	mvns	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	400a      	ands	r2, r1
 8003274:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800329c:	f7ff f98c 	bl	80025b8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e099      	b.n	80033e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032cc:	e00f      	b.n	80032ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ce:	f7ff f973 	bl	80025b8 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d908      	bls.n	80032ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2203      	movs	r2, #3
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e078      	b.n	80033e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e8      	bne.n	80032ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <HAL_DMA_Init+0x158>)
 8003308:	4013      	ands	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800331a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	2b04      	cmp	r3, #4
 8003346:	d107      	bne.n	8003358 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	4313      	orrs	r3, r2
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f023 0307 	bic.w	r3, r3, #7
 800336e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	2b04      	cmp	r3, #4
 8003380:	d117      	bne.n	80033b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00e      	beq.n	80033b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fb0f 	bl	80039b8 <DMA_CheckFifoParam>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2240      	movs	r2, #64	; 0x40
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033ae:	2301      	movs	r3, #1
 80033b0:	e016      	b.n	80033e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fac6 	bl	800394c <DMA_CalcBaseAndBitshift>
 80033c0:	4603      	mov	r3, r0
 80033c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	223f      	movs	r2, #63	; 0x3f
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	f010803f 	.word	0xf010803f

080033ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_DMA_Start_IT+0x26>
 800340e:	2302      	movs	r3, #2
 8003410:	e040      	b.n	8003494 <HAL_DMA_Start_IT+0xa8>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b01      	cmp	r3, #1
 8003424:	d12f      	bne.n	8003486 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2202      	movs	r2, #2
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fa58 	bl	80038f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003444:	223f      	movs	r2, #63	; 0x3f
 8003446:	409a      	lsls	r2, r3
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0216 	orr.w	r2, r2, #22
 800345a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0208 	orr.w	r2, r2, #8
 8003472:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e005      	b.n	8003492 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800348e:	2302      	movs	r3, #2
 8003490:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003492:	7dfb      	ldrb	r3, [r7, #23]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034aa:	f7ff f885 	bl	80025b8 <HAL_GetTick>
 80034ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d008      	beq.n	80034ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e052      	b.n	8003574 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0216 	bic.w	r2, r2, #22
 80034dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d103      	bne.n	80034fe <HAL_DMA_Abort+0x62>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0208 	bic.w	r2, r2, #8
 800350c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800351e:	e013      	b.n	8003548 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003520:	f7ff f84a 	bl	80025b8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b05      	cmp	r3, #5
 800352c:	d90c      	bls.n	8003548 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2203      	movs	r2, #3
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e015      	b.n	8003574 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e4      	bne.n	8003520 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355a:	223f      	movs	r2, #63	; 0x3f
 800355c:	409a      	lsls	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d004      	beq.n	800359a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e00c      	b.n	80035b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2205      	movs	r2, #5
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035cc:	4b8e      	ldr	r3, [pc, #568]	; (8003808 <HAL_DMA_IRQHandler+0x248>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a8e      	ldr	r2, [pc, #568]	; (800380c <HAL_DMA_IRQHandler+0x24c>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	0a9b      	lsrs	r3, r3, #10
 80035d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ea:	2208      	movs	r2, #8
 80035ec:	409a      	lsls	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d01a      	beq.n	800362c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d013      	beq.n	800362c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0204 	bic.w	r2, r2, #4
 8003612:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003618:	2208      	movs	r2, #8
 800361a:	409a      	lsls	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	2201      	movs	r2, #1
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d012      	beq.n	8003662 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	2201      	movs	r2, #1
 8003650:	409a      	lsls	r2, r3
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	f043 0202 	orr.w	r2, r3, #2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	2204      	movs	r2, #4
 8003668:	409a      	lsls	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d012      	beq.n	8003698 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00b      	beq.n	8003698 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	2204      	movs	r2, #4
 8003686:	409a      	lsls	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	f043 0204 	orr.w	r2, r3, #4
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	2210      	movs	r2, #16
 800369e:	409a      	lsls	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d043      	beq.n	8003730 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d03c      	beq.n	8003730 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	2210      	movs	r2, #16
 80036bc:	409a      	lsls	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d018      	beq.n	8003702 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d024      	beq.n	8003730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
 80036ee:	e01f      	b.n	8003730 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01b      	beq.n	8003730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
 8003700:	e016      	b.n	8003730 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0208 	bic.w	r2, r2, #8
 800371e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	2220      	movs	r2, #32
 8003736:	409a      	lsls	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 808f 	beq.w	8003860 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8087 	beq.w	8003860 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003756:	2220      	movs	r2, #32
 8003758:	409a      	lsls	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b05      	cmp	r3, #5
 8003768:	d136      	bne.n	80037d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0216 	bic.w	r2, r2, #22
 8003778:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003788:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <HAL_DMA_IRQHandler+0x1da>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003796:	2b00      	cmp	r3, #0
 8003798:	d007      	beq.n	80037aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0208 	bic.w	r2, r2, #8
 80037a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ae:	223f      	movs	r2, #63	; 0x3f
 80037b0:	409a      	lsls	r2, r3
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d07e      	beq.n	80038cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	4798      	blx	r3
        }
        return;
 80037d6:	e079      	b.n	80038cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01d      	beq.n	8003822 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10d      	bne.n	8003810 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d031      	beq.n	8003860 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
 8003804:	e02c      	b.n	8003860 <HAL_DMA_IRQHandler+0x2a0>
 8003806:	bf00      	nop
 8003808:	20000000 	.word	0x20000000
 800380c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d023      	beq.n	8003860 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
 8003820:	e01e      	b.n	8003860 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10f      	bne.n	8003850 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0210 	bic.w	r2, r2, #16
 800383e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	2b00      	cmp	r3, #0
 8003866:	d032      	beq.n	80038ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d022      	beq.n	80038ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2205      	movs	r2, #5
 8003878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	3301      	adds	r3, #1
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	429a      	cmp	r2, r3
 8003896:	d307      	bcc.n	80038a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f2      	bne.n	800388c <HAL_DMA_IRQHandler+0x2cc>
 80038a6:	e000      	b.n	80038aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
 80038ca:	e000      	b.n	80038ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80038cc:	bf00      	nop
    }
  }
}
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e2:	b2db      	uxtb	r3, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800390c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	d108      	bne.n	8003930 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800392e:	e007      	b.n	8003940 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	3b10      	subs	r3, #16
 800395c:	4a14      	ldr	r2, [pc, #80]	; (80039b0 <DMA_CalcBaseAndBitshift+0x64>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003966:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d909      	bls.n	800398e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	1d1a      	adds	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	659a      	str	r2, [r3, #88]	; 0x58
 800398c:	e007      	b.n	800399e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	aaaaaaab 	.word	0xaaaaaaab
 80039b4:	0801051c 	.word	0x0801051c

080039b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d11f      	bne.n	8003a12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d856      	bhi.n	8003a86 <DMA_CheckFifoParam+0xce>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <DMA_CheckFifoParam+0x28>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	08003a03 	.word	0x08003a03
 80039e8:	080039f1 	.word	0x080039f1
 80039ec:	08003a87 	.word	0x08003a87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d046      	beq.n	8003a8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a00:	e043      	b.n	8003a8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a0a:	d140      	bne.n	8003a8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a10:	e03d      	b.n	8003a8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1a:	d121      	bne.n	8003a60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d837      	bhi.n	8003a92 <DMA_CheckFifoParam+0xda>
 8003a22:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <DMA_CheckFifoParam+0x70>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a3f 	.word	0x08003a3f
 8003a30:	08003a39 	.word	0x08003a39
 8003a34:	08003a51 	.word	0x08003a51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3c:	e030      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d025      	beq.n	8003a96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4e:	e022      	b.n	8003a96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a58:	d11f      	bne.n	8003a9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a5e:	e01c      	b.n	8003a9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d903      	bls.n	8003a6e <DMA_CheckFifoParam+0xb6>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d003      	beq.n	8003a74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a6c:	e018      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
      break;
 8003a72:	e015      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00e      	beq.n	8003a9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      break;
 8003a84:	e00b      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
      break;
 8003a86:	bf00      	nop
 8003a88:	e00a      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e008      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e006      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a92:	bf00      	nop
 8003a94:	e004      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop

08003ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	e165      	b.n	8003d98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003acc:	2201      	movs	r2, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	f040 8154 	bne.w	8003d92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d005      	beq.n	8003b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d130      	bne.n	8003b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b38:	2201      	movs	r2, #1
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 0201 	and.w	r2, r3, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d017      	beq.n	8003ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d123      	bne.n	8003bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	08da      	lsrs	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3208      	adds	r2, #8
 8003bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	220f      	movs	r2, #15
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	08da      	lsrs	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3208      	adds	r2, #8
 8003bee:	69b9      	ldr	r1, [r7, #24]
 8003bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0203 	and.w	r2, r3, #3
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80ae 	beq.w	8003d92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	4b5d      	ldr	r3, [pc, #372]	; (8003db0 <HAL_GPIO_Init+0x300>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	4a5c      	ldr	r2, [pc, #368]	; (8003db0 <HAL_GPIO_Init+0x300>)
 8003c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c44:	6453      	str	r3, [r2, #68]	; 0x44
 8003c46:	4b5a      	ldr	r3, [pc, #360]	; (8003db0 <HAL_GPIO_Init+0x300>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c52:	4a58      	ldr	r2, [pc, #352]	; (8003db4 <HAL_GPIO_Init+0x304>)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	3302      	adds	r3, #2
 8003c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	220f      	movs	r2, #15
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a4f      	ldr	r2, [pc, #316]	; (8003db8 <HAL_GPIO_Init+0x308>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d025      	beq.n	8003cca <HAL_GPIO_Init+0x21a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a4e      	ldr	r2, [pc, #312]	; (8003dbc <HAL_GPIO_Init+0x30c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01f      	beq.n	8003cc6 <HAL_GPIO_Init+0x216>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a4d      	ldr	r2, [pc, #308]	; (8003dc0 <HAL_GPIO_Init+0x310>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d019      	beq.n	8003cc2 <HAL_GPIO_Init+0x212>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a4c      	ldr	r2, [pc, #304]	; (8003dc4 <HAL_GPIO_Init+0x314>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_GPIO_Init+0x20e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a4b      	ldr	r2, [pc, #300]	; (8003dc8 <HAL_GPIO_Init+0x318>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00d      	beq.n	8003cba <HAL_GPIO_Init+0x20a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a4a      	ldr	r2, [pc, #296]	; (8003dcc <HAL_GPIO_Init+0x31c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <HAL_GPIO_Init+0x206>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a49      	ldr	r2, [pc, #292]	; (8003dd0 <HAL_GPIO_Init+0x320>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d101      	bne.n	8003cb2 <HAL_GPIO_Init+0x202>
 8003cae:	2306      	movs	r3, #6
 8003cb0:	e00c      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cb2:	2307      	movs	r3, #7
 8003cb4:	e00a      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cb6:	2305      	movs	r3, #5
 8003cb8:	e008      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cba:	2304      	movs	r3, #4
 8003cbc:	e006      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e004      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e002      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	f002 0203 	and.w	r2, r2, #3
 8003cd2:	0092      	lsls	r2, r2, #2
 8003cd4:	4093      	lsls	r3, r2
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cdc:	4935      	ldr	r1, [pc, #212]	; (8003db4 <HAL_GPIO_Init+0x304>)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cea:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d0e:	4a31      	ldr	r2, [pc, #196]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d14:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d38:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d3e:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d62:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d68:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d8c:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3301      	adds	r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	f67f ae96 	bls.w	8003acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	3724      	adds	r7, #36	; 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40013800 	.word	0x40013800
 8003db8:	40020000 	.word	0x40020000
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	40020800 	.word	0x40020800
 8003dc4:	40020c00 	.word	0x40020c00
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40021400 	.word	0x40021400
 8003dd0:	40021800 	.word	0x40021800
 8003dd4:	40013c00 	.word	0x40013c00

08003dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e12b      	b.n	8004042 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd ffdc 	bl	8001dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2224      	movs	r2, #36	; 0x24
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e3c:	f002 ff2c 	bl	8006c98 <HAL_RCC_GetPCLK1Freq>
 8003e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4a81      	ldr	r2, [pc, #516]	; (800404c <HAL_I2C_Init+0x274>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d807      	bhi.n	8003e5c <HAL_I2C_Init+0x84>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a80      	ldr	r2, [pc, #512]	; (8004050 <HAL_I2C_Init+0x278>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	bf94      	ite	ls
 8003e54:	2301      	movls	r3, #1
 8003e56:	2300      	movhi	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	e006      	b.n	8003e6a <HAL_I2C_Init+0x92>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a7d      	ldr	r2, [pc, #500]	; (8004054 <HAL_I2C_Init+0x27c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	bf94      	ite	ls
 8003e64:	2301      	movls	r3, #1
 8003e66:	2300      	movhi	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0e7      	b.n	8004042 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a78      	ldr	r2, [pc, #480]	; (8004058 <HAL_I2C_Init+0x280>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	0c9b      	lsrs	r3, r3, #18
 8003e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4a6a      	ldr	r2, [pc, #424]	; (800404c <HAL_I2C_Init+0x274>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d802      	bhi.n	8003eac <HAL_I2C_Init+0xd4>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	e009      	b.n	8003ec0 <HAL_I2C_Init+0xe8>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	4a69      	ldr	r2, [pc, #420]	; (800405c <HAL_I2C_Init+0x284>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ed2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	495c      	ldr	r1, [pc, #368]	; (800404c <HAL_I2C_Init+0x274>)
 8003edc:	428b      	cmp	r3, r1
 8003ede:	d819      	bhi.n	8003f14 <HAL_I2C_Init+0x13c>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1e59      	subs	r1, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eee:	1c59      	adds	r1, r3, #1
 8003ef0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ef4:	400b      	ands	r3, r1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_I2C_Init+0x138>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1e59      	subs	r1, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0e:	e051      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f10:	2304      	movs	r3, #4
 8003f12:	e04f      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d111      	bne.n	8003f40 <HAL_I2C_Init+0x168>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1e58      	subs	r0, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	440b      	add	r3, r1
 8003f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e012      	b.n	8003f66 <HAL_I2C_Init+0x18e>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1e58      	subs	r0, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6859      	ldr	r1, [r3, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	0099      	lsls	r1, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f56:	3301      	adds	r3, #1
 8003f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Init+0x196>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e022      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10e      	bne.n	8003f94 <HAL_I2C_Init+0x1bc>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1e58      	subs	r0, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	440b      	add	r3, r1
 8003f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f88:	3301      	adds	r3, #1
 8003f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f92:	e00f      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e58      	subs	r0, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	0099      	lsls	r1, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003faa:	3301      	adds	r3, #1
 8003fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	6809      	ldr	r1, [r1, #0]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6911      	ldr	r1, [r2, #16]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68d2      	ldr	r2, [r2, #12]
 8003fee:	4311      	orrs	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	000186a0 	.word	0x000186a0
 8004050:	001e847f 	.word	0x001e847f
 8004054:	003d08ff 	.word	0x003d08ff
 8004058:	431bde83 	.word	0x431bde83
 800405c:	10624dd3 	.word	0x10624dd3

08004060 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	461a      	mov	r2, r3
 800406c:	460b      	mov	r3, r1
 800406e:	817b      	strh	r3, [r7, #10]
 8004070:	4613      	mov	r3, r2
 8004072:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004074:	f7fe faa0 	bl	80025b8 <HAL_GetTick>
 8004078:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b20      	cmp	r3, #32
 8004084:	f040 80e0 	bne.w	8004248 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	2319      	movs	r3, #25
 800408e:	2201      	movs	r2, #1
 8004090:	4970      	ldr	r1, [pc, #448]	; (8004254 <HAL_I2C_Master_Transmit+0x1f4>)
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f002 f8e6 	bl	8006264 <I2C_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800409e:	2302      	movs	r3, #2
 80040a0:	e0d3      	b.n	800424a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_I2C_Master_Transmit+0x50>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e0cc      	b.n	800424a <HAL_I2C_Master_Transmit+0x1ea>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d007      	beq.n	80040d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2221      	movs	r2, #33	; 0x21
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2210      	movs	r2, #16
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	893a      	ldrh	r2, [r7, #8]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4a50      	ldr	r2, [pc, #320]	; (8004258 <HAL_I2C_Master_Transmit+0x1f8>)
 8004116:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004118:	8979      	ldrh	r1, [r7, #10]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	6a3a      	ldr	r2, [r7, #32]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f001 fea8 	bl	8005e74 <I2C_MasterRequestWrite>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e08d      	b.n	800424a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004144:	e066      	b.n	8004214 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	6a39      	ldr	r1, [r7, #32]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f002 f960 	bl	8006410 <I2C_WaitOnTXEFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00d      	beq.n	8004172 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	2b04      	cmp	r3, #4
 800415c:	d107      	bne.n	800416e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e06b      	b.n	800424a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	781a      	ldrb	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d11b      	bne.n	80041e8 <HAL_I2C_Master_Transmit+0x188>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d017      	beq.n	80041e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	781a      	ldrb	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	6a39      	ldr	r1, [r7, #32]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f002 f950 	bl	8006492 <I2C_WaitOnBTFFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d107      	bne.n	8004210 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e01a      	b.n	800424a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	d194      	bne.n	8004146 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	e000      	b.n	800424a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004248:	2302      	movs	r3, #2
  }
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	00100002 	.word	0x00100002
 8004258:	ffff0000 	.word	0xffff0000

0800425c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08c      	sub	sp, #48	; 0x30
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	461a      	mov	r2, r3
 8004268:	460b      	mov	r3, r1
 800426a:	817b      	strh	r3, [r7, #10]
 800426c:	4613      	mov	r3, r2
 800426e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004270:	f7fe f9a2 	bl	80025b8 <HAL_GetTick>
 8004274:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b20      	cmp	r3, #32
 8004280:	f040 820b 	bne.w	800469a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	2319      	movs	r3, #25
 800428a:	2201      	movs	r2, #1
 800428c:	497c      	ldr	r1, [pc, #496]	; (8004480 <HAL_I2C_Master_Receive+0x224>)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f001 ffe8 	bl	8006264 <I2C_WaitOnFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800429a:	2302      	movs	r3, #2
 800429c:	e1fe      	b.n	800469c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_I2C_Master_Receive+0x50>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e1f7      	b.n	800469c <HAL_I2C_Master_Receive+0x440>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d007      	beq.n	80042d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2222      	movs	r2, #34	; 0x22
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2210      	movs	r2, #16
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	893a      	ldrh	r2, [r7, #8]
 8004302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a5c      	ldr	r2, [pc, #368]	; (8004484 <HAL_I2C_Master_Receive+0x228>)
 8004312:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004314:	8979      	ldrh	r1, [r7, #10]
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f001 fe2c 	bl	8005f78 <I2C_MasterRequestRead>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e1b8      	b.n	800469c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432e:	2b00      	cmp	r3, #0
 8004330:	d113      	bne.n	800435a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004332:	2300      	movs	r3, #0
 8004334:	623b      	str	r3, [r7, #32]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	623b      	str	r3, [r7, #32]
 8004346:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e18c      	b.n	8004674 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435e:	2b01      	cmp	r3, #1
 8004360:	d11b      	bne.n	800439a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e16c      	b.n	8004674 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d11b      	bne.n	80043da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c2:	2300      	movs	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	e14c      	b.n	8004674 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004400:	e138      	b.n	8004674 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004406:	2b03      	cmp	r3, #3
 8004408:	f200 80f1 	bhi.w	80045ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	2b01      	cmp	r3, #1
 8004412:	d123      	bne.n	800445c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004416:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f002 f8ad 	bl	8006578 <I2C_WaitOnRXNEFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e139      	b.n	800469c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	855a      	strh	r2, [r3, #42]	; 0x2a
 800445a:	e10b      	b.n	8004674 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004460:	2b02      	cmp	r3, #2
 8004462:	d14e      	bne.n	8004502 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2200      	movs	r2, #0
 800446c:	4906      	ldr	r1, [pc, #24]	; (8004488 <HAL_I2C_Master_Receive+0x22c>)
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f001 fef8 	bl	8006264 <I2C_WaitOnFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e10e      	b.n	800469c <HAL_I2C_Master_Receive+0x440>
 800447e:	bf00      	nop
 8004480:	00100002 	.word	0x00100002
 8004484:	ffff0000 	.word	0xffff0000
 8004488:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800449a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004500:	e0b8      	b.n	8004674 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	2200      	movs	r2, #0
 800450a:	4966      	ldr	r1, [pc, #408]	; (80046a4 <HAL_I2C_Master_Receive+0x448>)
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f001 fea9 	bl	8006264 <I2C_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0bf      	b.n	800469c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	2200      	movs	r2, #0
 8004566:	494f      	ldr	r1, [pc, #316]	; (80046a4 <HAL_I2C_Master_Receive+0x448>)
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f001 fe7b 	bl	8006264 <I2C_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e091      	b.n	800469c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045ec:	e042      	b.n	8004674 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f001 ffc0 	bl	8006578 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e04c      	b.n	800469c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b04      	cmp	r3, #4
 8004640:	d118      	bne.n	8004674 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	f47f aec2 	bne.w	8004402 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	e000      	b.n	800469c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800469a:	2302      	movs	r3, #2
  }
}
 800469c:	4618      	mov	r0, r3
 800469e:	3728      	adds	r7, #40	; 0x28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	00010004 	.word	0x00010004

080046a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d003      	beq.n	80046e0 <HAL_I2C_EV_IRQHandler+0x38>
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b40      	cmp	r3, #64	; 0x40
 80046dc:	f040 80c1 	bne.w	8004862 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10d      	bne.n	8004716 <HAL_I2C_EV_IRQHandler+0x6e>
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004700:	d003      	beq.n	800470a <HAL_I2C_EV_IRQHandler+0x62>
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004708:	d101      	bne.n	800470e <HAL_I2C_EV_IRQHandler+0x66>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_I2C_EV_IRQHandler+0x68>
 800470e:	2300      	movs	r3, #0
 8004710:	2b01      	cmp	r3, #1
 8004712:	f000 8132 	beq.w	800497a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00c      	beq.n	800473a <HAL_I2C_EV_IRQHandler+0x92>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	0a5b      	lsrs	r3, r3, #9
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d006      	beq.n	800473a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f001 ffa8 	bl	8006682 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fd83 	bl	800523e <I2C_Master_SB>
 8004738:	e092      	b.n	8004860 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	08db      	lsrs	r3, r3, #3
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_I2C_EV_IRQHandler+0xb2>
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	0a5b      	lsrs	r3, r3, #9
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fdf9 	bl	800534a <I2C_Master_ADD10>
 8004758:	e082      	b.n	8004860 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0xd2>
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	0a5b      	lsrs	r3, r3, #9
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fe13 	bl	800539e <I2C_Master_ADDR>
 8004778:	e072      	b.n	8004860 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	089b      	lsrs	r3, r3, #2
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d03b      	beq.n	80047fe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004794:	f000 80f3 	beq.w	800497e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	09db      	lsrs	r3, r3, #7
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00f      	beq.n	80047c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	0a9b      	lsrs	r3, r3, #10
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d103      	bne.n	80047c4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f9f3 	bl	8004ba8 <I2C_MasterTransmit_TXE>
 80047c2:	e04d      	b.n	8004860 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80d6 	beq.w	800497e <HAL_I2C_EV_IRQHandler+0x2d6>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	0a5b      	lsrs	r3, r3, #9
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80cf 	beq.w	800497e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047e0:	7bbb      	ldrb	r3, [r7, #14]
 80047e2:	2b21      	cmp	r3, #33	; 0x21
 80047e4:	d103      	bne.n	80047ee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fa7a 	bl	8004ce0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ec:	e0c7      	b.n	800497e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	f040 80c4 	bne.w	800497e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fae8 	bl	8004dcc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047fc:	e0bf      	b.n	800497e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480c:	f000 80b7 	beq.w	800497e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00f      	beq.n	800483c <HAL_I2C_EV_IRQHandler+0x194>
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	0a9b      	lsrs	r3, r3, #10
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d009      	beq.n	800483c <HAL_I2C_EV_IRQHandler+0x194>
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	089b      	lsrs	r3, r3, #2
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d103      	bne.n	800483c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fb5d 	bl	8004ef4 <I2C_MasterReceive_RXNE>
 800483a:	e011      	b.n	8004860 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 809a 	beq.w	800497e <HAL_I2C_EV_IRQHandler+0x2d6>
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	0a5b      	lsrs	r3, r3, #9
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 8093 	beq.w	800497e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fc06 	bl	800506a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800485e:	e08e      	b.n	800497e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004860:	e08d      	b.n	800497e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d004      	beq.n	8004874 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	e007      	b.n	8004884 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d012      	beq.n	80048b6 <HAL_I2C_EV_IRQHandler+0x20e>
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	0a5b      	lsrs	r3, r3, #9
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00c      	beq.n	80048b6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048ac:	69b9      	ldr	r1, [r7, #24]
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 ffc4 	bl	800583c <I2C_Slave_ADDR>
 80048b4:	e066      	b.n	8004984 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <HAL_I2C_EV_IRQHandler+0x22e>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	0a5b      	lsrs	r3, r3, #9
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fffe 	bl	80058d0 <I2C_Slave_STOPF>
 80048d4:	e056      	b.n	8004984 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048d6:	7bbb      	ldrb	r3, [r7, #14]
 80048d8:	2b21      	cmp	r3, #33	; 0x21
 80048da:	d002      	beq.n	80048e2 <HAL_I2C_EV_IRQHandler+0x23a>
 80048dc:	7bbb      	ldrb	r3, [r7, #14]
 80048de:	2b29      	cmp	r3, #41	; 0x29
 80048e0:	d125      	bne.n	800492e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	09db      	lsrs	r3, r3, #7
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00f      	beq.n	800490e <HAL_I2C_EV_IRQHandler+0x266>
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	0a9b      	lsrs	r3, r3, #10
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <HAL_I2C_EV_IRQHandler+0x266>
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 feda 	bl	80056c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800490c:	e039      	b.n	8004982 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	089b      	lsrs	r3, r3, #2
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d033      	beq.n	8004982 <HAL_I2C_EV_IRQHandler+0x2da>
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	0a5b      	lsrs	r3, r3, #9
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d02d      	beq.n	8004982 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 ff07 	bl	800573a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800492c:	e029      	b.n	8004982 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	099b      	lsrs	r3, r3, #6
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00f      	beq.n	800495a <HAL_I2C_EV_IRQHandler+0x2b2>
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	0a9b      	lsrs	r3, r3, #10
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	089b      	lsrs	r3, r3, #2
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 ff12 	bl	800577c <I2C_SlaveReceive_RXNE>
 8004958:	e014      	b.n	8004984 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	089b      	lsrs	r3, r3, #2
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00e      	beq.n	8004984 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	0a5b      	lsrs	r3, r3, #9
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 ff40 	bl	80057f8 <I2C_SlaveReceive_BTF>
 8004978:	e004      	b.n	8004984 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800497a:	bf00      	nop
 800497c:	e002      	b.n	8004984 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004982:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b08a      	sub	sp, #40	; 0x28
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00e      	beq.n	80049d8 <HAL_I2C_ER_IRQHandler+0x4e>
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049d6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	0a5b      	lsrs	r3, r3, #9
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00e      	beq.n	8004a02 <HAL_I2C_ER_IRQHandler+0x78>
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	f043 0302 	orr.w	r3, r3, #2
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a00:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	0a9b      	lsrs	r3, r3, #10
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d03f      	beq.n	8004a8e <HAL_I2C_ER_IRQHandler+0x104>
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	0a1b      	lsrs	r3, r3, #8
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d039      	beq.n	8004a8e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004a1a:	7efb      	ldrb	r3, [r7, #27]
 8004a1c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a34:	7ebb      	ldrb	r3, [r7, #26]
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d112      	bne.n	8004a60 <HAL_I2C_ER_IRQHandler+0xd6>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10f      	bne.n	8004a60 <HAL_I2C_ER_IRQHandler+0xd6>
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	2b21      	cmp	r3, #33	; 0x21
 8004a44:	d008      	beq.n	8004a58 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	2b29      	cmp	r3, #41	; 0x29
 8004a4a:	d005      	beq.n	8004a58 <HAL_I2C_ER_IRQHandler+0xce>
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	2b28      	cmp	r3, #40	; 0x28
 8004a50:	d106      	bne.n	8004a60 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b21      	cmp	r3, #33	; 0x21
 8004a56:	d103      	bne.n	8004a60 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f001 f869 	bl	8005b30 <I2C_Slave_AF>
 8004a5e:	e016      	b.n	8004a8e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a68:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	f043 0304 	orr.w	r3, r3, #4
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a72:	7efb      	ldrb	r3, [r7, #27]
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d002      	beq.n	8004a7e <HAL_I2C_ER_IRQHandler+0xf4>
 8004a78:	7efb      	ldrb	r3, [r7, #27]
 8004a7a:	2b40      	cmp	r3, #64	; 0x40
 8004a7c:	d107      	bne.n	8004a8e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	0adb      	lsrs	r3, r3, #11
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00e      	beq.n	8004ab8 <HAL_I2C_ER_IRQHandler+0x12e>
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	0a1b      	lsrs	r3, r3, #8
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	f043 0308 	orr.w	r3, r3, #8
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004ab6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d008      	beq.n	8004ad0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f001 f8a0 	bl	8005c10 <I2C_ITError>
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	3728      	adds	r7, #40	; 0x28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	70fb      	strb	r3, [r7, #3]
 8004b34:	4613      	mov	r3, r2
 8004b36:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bbe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d150      	bne.n	8004c70 <I2C_MasterTransmit_TXE+0xc8>
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	2b21      	cmp	r3, #33	; 0x21
 8004bd2:	d14d      	bne.n	8004c70 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d01d      	beq.n	8004c16 <I2C_MasterTransmit_TXE+0x6e>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d01a      	beq.n	8004c16 <I2C_MasterTransmit_TXE+0x6e>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004be6:	d016      	beq.n	8004c16 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bf6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2211      	movs	r2, #17
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff ff62 	bl	8004ad8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c14:	e060      	b.n	8004cd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c24:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c34:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	d107      	bne.n	8004c60 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff ff7d 	bl	8004b58 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c5e:	e03b      	b.n	8004cd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ff35 	bl	8004ad8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c6e:	e033      	b.n	8004cd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b21      	cmp	r3, #33	; 0x21
 8004c74:	d005      	beq.n	8004c82 <I2C_MasterTransmit_TXE+0xda>
 8004c76:	7bbb      	ldrb	r3, [r7, #14]
 8004c78:	2b40      	cmp	r3, #64	; 0x40
 8004c7a:	d12d      	bne.n	8004cd8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b22      	cmp	r3, #34	; 0x22
 8004c80:	d12a      	bne.n	8004cd8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d108      	bne.n	8004c9e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c9c:	e01c      	b.n	8004cd8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d103      	bne.n	8004cb2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f88e 	bl	8004dcc <I2C_MemoryTransmit_TXE_BTF>
}
 8004cb0:	e012      	b.n	8004cd8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	781a      	ldrb	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cd6:	e7ff      	b.n	8004cd8 <I2C_MasterTransmit_TXE+0x130>
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b21      	cmp	r3, #33	; 0x21
 8004cf8:	d164      	bne.n	8004dc4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d012      	beq.n	8004d2a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d28:	e04c      	b.n	8004dc4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d01d      	beq.n	8004d6c <I2C_MasterTransmit_BTF+0x8c>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d01a      	beq.n	8004d6c <I2C_MasterTransmit_BTF+0x8c>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d3c:	d016      	beq.n	8004d6c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d4c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2211      	movs	r2, #17
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff feb7 	bl	8004ad8 <HAL_I2C_MasterTxCpltCallback>
}
 8004d6a:	e02b      	b.n	8004dc4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d7a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d107      	bne.n	8004db6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fed2 	bl	8004b58 <HAL_I2C_MemTxCpltCallback>
}
 8004db4:	e006      	b.n	8004dc4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fe8a 	bl	8004ad8 <HAL_I2C_MasterTxCpltCallback>
}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d11d      	bne.n	8004e20 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d10b      	bne.n	8004e04 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	1c9a      	adds	r2, r3, #2
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e02:	e073      	b.n	8004eec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	121b      	asrs	r3, r3, #8
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e1e:	e065      	b.n	8004eec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d10b      	bne.n	8004e40 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e3e:	e055      	b.n	8004eec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d151      	bne.n	8004eec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b22      	cmp	r3, #34	; 0x22
 8004e4c:	d10d      	bne.n	8004e6a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e5c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e68:	e040      	b.n	8004eec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d015      	beq.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b21      	cmp	r3, #33	; 0x21
 8004e78:	d112      	bne.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	781a      	ldrb	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e9e:	e025      	b.n	8004eec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d120      	bne.n	8004eec <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b21      	cmp	r3, #33	; 0x21
 8004eae:	d11d      	bne.n	8004eec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ebe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ece:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff fe36 	bl	8004b58 <HAL_I2C_MemTxCpltCallback>
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b22      	cmp	r3, #34	; 0x22
 8004f06:	f040 80ac 	bne.w	8005062 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d921      	bls.n	8004f5c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	f040 808c 	bne.w	8005062 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f58:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004f5a:	e082      	b.n	8005062 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d075      	beq.n	8005050 <I2C_MasterReceive_RXNE+0x15c>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d002      	beq.n	8004f70 <I2C_MasterReceive_RXNE+0x7c>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d16f      	bne.n	8005050 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f001 facf 	bl	8006514 <I2C_WaitOnSTOPRequestThroughIT>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d142      	bne.n	8005002 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	d10a      	bne.n	8004fec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff fdc1 	bl	8004b6c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fea:	e03a      	b.n	8005062 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2212      	movs	r2, #18
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff fd76 	bl	8004aec <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005000:	e02f      	b.n	8005062 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005010:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fd99 	bl	8004b80 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800504e:	e008      	b.n	8005062 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505e:	605a      	str	r2, [r3, #4]
}
 8005060:	e7ff      	b.n	8005062 <I2C_MasterReceive_RXNE+0x16e>
 8005062:	bf00      	nop
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b04      	cmp	r3, #4
 8005080:	d11b      	bne.n	80050ba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005090:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80050b8:	e0bd      	b.n	8005236 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d129      	bne.n	8005118 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d00a      	beq.n	80050f0 <I2C_MasterReceive_BTF+0x86>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d007      	beq.n	80050f0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005116:	e08e      	b.n	8005236 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d176      	bne.n	8005210 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d002      	beq.n	800512e <I2C_MasterReceive_BTF+0xc4>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b10      	cmp	r3, #16
 800512c:	d108      	bne.n	8005140 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	e019      	b.n	8005174 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b04      	cmp	r3, #4
 8005144:	d002      	beq.n	800514c <I2C_MasterReceive_BTF+0xe2>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d108      	bne.n	800515e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	e00a      	b.n	8005174 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b10      	cmp	r3, #16
 8005162:	d007      	beq.n	8005174 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005172:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d10a      	bne.n	80051fa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff fcba 	bl	8004b6c <HAL_I2C_MemRxCpltCallback>
}
 80051f8:	e01d      	b.n	8005236 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2212      	movs	r2, #18
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fc6f 	bl	8004aec <HAL_I2C_MasterRxCpltCallback>
}
 800520e:	e012      	b.n	8005236 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005236:	bf00      	nop
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	d117      	bne.n	8005282 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	b2db      	uxtb	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800526a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800526c:	e067      	b.n	800533e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	b2da      	uxtb	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	611a      	str	r2, [r3, #16]
}
 8005280:	e05d      	b.n	800533e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800528a:	d133      	bne.n	80052f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b21      	cmp	r3, #33	; 0x21
 8005296:	d109      	bne.n	80052ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052a8:	611a      	str	r2, [r3, #16]
 80052aa:	e008      	b.n	80052be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f043 0301 	orr.w	r3, r3, #1
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <I2C_Master_SB+0x92>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d108      	bne.n	80052e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d032      	beq.n	800533e <I2C_Master_SB+0x100>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d02d      	beq.n	800533e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f0:	605a      	str	r2, [r3, #4]
}
 80052f2:	e024      	b.n	800533e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10e      	bne.n	800531a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005300:	b29b      	uxth	r3, r3
 8005302:	11db      	asrs	r3, r3, #7
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0306 	and.w	r3, r3, #6
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f063 030f 	orn	r3, r3, #15
 8005310:	b2da      	uxtb	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	611a      	str	r2, [r3, #16]
}
 8005318:	e011      	b.n	800533e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531e:	2b01      	cmp	r3, #1
 8005320:	d10d      	bne.n	800533e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005326:	b29b      	uxth	r3, r3
 8005328:	11db      	asrs	r3, r3, #7
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f003 0306 	and.w	r3, r3, #6
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f063 030e 	orn	r3, r3, #14
 8005336:	b2da      	uxtb	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	611a      	str	r2, [r3, #16]
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005356:	b2da      	uxtb	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <I2C_Master_ADD10+0x26>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d108      	bne.n	8005382 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00c      	beq.n	8005392 <I2C_Master_ADD10+0x48>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005390:	605a      	str	r2, [r3, #4]
  }
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800539e:	b480      	push	{r7}
 80053a0:	b091      	sub	sp, #68	; 0x44
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b22      	cmp	r3, #34	; 0x22
 80053c6:	f040 8169 	bne.w	800569c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10f      	bne.n	80053f2 <I2C_Master_ADDR+0x54>
 80053d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053d6:	2b40      	cmp	r3, #64	; 0x40
 80053d8:	d10b      	bne.n	80053f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053da:	2300      	movs	r3, #0
 80053dc:	633b      	str	r3, [r7, #48]	; 0x30
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	633b      	str	r3, [r7, #48]	; 0x30
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	633b      	str	r3, [r7, #48]	; 0x30
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	e160      	b.n	80056b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d11d      	bne.n	8005436 <I2C_Master_ADDR+0x98>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005402:	d118      	bne.n	8005436 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005404:	2300      	movs	r3, #0
 8005406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005428:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	651a      	str	r2, [r3, #80]	; 0x50
 8005434:	e13e      	b.n	80056b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d113      	bne.n	8005468 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005440:	2300      	movs	r3, #0
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e115      	b.n	8005694 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b01      	cmp	r3, #1
 8005470:	f040 808a 	bne.w	8005588 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800547a:	d137      	bne.n	80054ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549a:	d113      	bne.n	80054c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ac:	2300      	movs	r3, #0
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	e0e7      	b.n	8005694 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c4:	2300      	movs	r3, #0
 80054c6:	623b      	str	r3, [r7, #32]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	623b      	str	r3, [r7, #32]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	623b      	str	r3, [r7, #32]
 80054d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	e0d3      	b.n	8005694 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d02e      	beq.n	8005550 <I2C_Master_ADDR+0x1b2>
 80054f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d02b      	beq.n	8005550 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80054f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fa:	2b12      	cmp	r3, #18
 80054fc:	d102      	bne.n	8005504 <I2C_Master_ADDR+0x166>
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	2b01      	cmp	r3, #1
 8005502:	d125      	bne.n	8005550 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	2b04      	cmp	r3, #4
 8005508:	d00e      	beq.n	8005528 <I2C_Master_ADDR+0x18a>
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	2b02      	cmp	r3, #2
 800550e:	d00b      	beq.n	8005528 <I2C_Master_ADDR+0x18a>
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	2b10      	cmp	r3, #16
 8005514:	d008      	beq.n	8005528 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e007      	b.n	8005538 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005536:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	e0a1      	b.n	8005694 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800555e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005560:	2300      	movs	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	e085      	b.n	8005694 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d14d      	bne.n	800562e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	2b04      	cmp	r3, #4
 8005596:	d016      	beq.n	80055c6 <I2C_Master_ADDR+0x228>
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	2b02      	cmp	r3, #2
 800559c:	d013      	beq.n	80055c6 <I2C_Master_ADDR+0x228>
 800559e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d010      	beq.n	80055c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e007      	b.n	80055d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e4:	d117      	bne.n	8005616 <I2C_Master_ADDR+0x278>
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055ec:	d00b      	beq.n	8005606 <I2C_Master_ADDR+0x268>
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d008      	beq.n	8005606 <I2C_Master_ADDR+0x268>
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d005      	beq.n	8005606 <I2C_Master_ADDR+0x268>
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d002      	beq.n	8005606 <I2C_Master_ADDR+0x268>
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	2b20      	cmp	r3, #32
 8005604:	d107      	bne.n	8005616 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005614:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	e032      	b.n	8005694 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800563c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564c:	d117      	bne.n	800567e <I2C_Master_ADDR+0x2e0>
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005654:	d00b      	beq.n	800566e <I2C_Master_ADDR+0x2d0>
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	2b01      	cmp	r3, #1
 800565a:	d008      	beq.n	800566e <I2C_Master_ADDR+0x2d0>
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	2b08      	cmp	r3, #8
 8005660:	d005      	beq.n	800566e <I2C_Master_ADDR+0x2d0>
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	2b10      	cmp	r3, #16
 8005666:	d002      	beq.n	800566e <I2C_Master_ADDR+0x2d0>
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	2b20      	cmp	r3, #32
 800566c:	d107      	bne.n	800567e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800567c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567e:	2300      	movs	r3, #0
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800569a:	e00b      	b.n	80056b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
}
 80056b2:	e7ff      	b.n	80056b4 <I2C_Master_ADDR+0x316>
 80056b4:	bf00      	nop
 80056b6:	3744      	adds	r7, #68	; 0x44
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d02b      	beq.n	8005732 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d114      	bne.n	8005732 <I2C_SlaveTransmit_TXE+0x72>
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b29      	cmp	r3, #41	; 0x29
 800570c:	d111      	bne.n	8005732 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2221      	movs	r2, #33	; 0x21
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2228      	movs	r2, #40	; 0x28
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff f9e7 	bl	8004b00 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d011      	beq.n	8005770 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	781a      	ldrb	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d02c      	beq.n	80057f0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d114      	bne.n	80057f0 <I2C_SlaveReceive_RXNE+0x74>
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	2b2a      	cmp	r3, #42	; 0x2a
 80057ca:	d111      	bne.n	80057f0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2222      	movs	r2, #34	; 0x22
 80057e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2228      	movs	r2, #40	; 0x28
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff f992 	bl	8004b14 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d012      	beq.n	8005830 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005856:	2b28      	cmp	r3, #40	; 0x28
 8005858:	d127      	bne.n	80058aa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005868:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	089b      	lsrs	r3, r3, #2
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005876:	2301      	movs	r3, #1
 8005878:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	09db      	lsrs	r3, r3, #7
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	81bb      	strh	r3, [r7, #12]
 800588c:	e002      	b.n	8005894 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800589c:	89ba      	ldrh	r2, [r7, #12]
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	4619      	mov	r1, r3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff f940 	bl	8004b28 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80058a8:	e00e      	b.n	80058c8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058aa:	2300      	movs	r3, #0
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058f0:	2300      	movs	r3, #0
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	60bb      	str	r3, [r7, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800592c:	d172      	bne.n	8005a14 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800592e:	7bfb      	ldrb	r3, [r7, #15]
 8005930:	2b22      	cmp	r3, #34	; 0x22
 8005932:	d002      	beq.n	800593a <I2C_Slave_STOPF+0x6a>
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b2a      	cmp	r3, #42	; 0x2a
 8005938:	d135      	bne.n	80059a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	b29a      	uxth	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	f043 0204 	orr.w	r2, r3, #4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800596c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	4618      	mov	r0, r3
 8005974:	f7fd ffae 	bl	80038d4 <HAL_DMA_GetState>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d049      	beq.n	8005a12 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	4a69      	ldr	r2, [pc, #420]	; (8005b28 <I2C_Slave_STOPF+0x258>)
 8005984:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	4618      	mov	r0, r3
 800598c:	f7fd fdf6 	bl	800357c <HAL_DMA_Abort_IT>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d03d      	beq.n	8005a12 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059a0:	4610      	mov	r0, r2
 80059a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059a4:	e035      	b.n	8005a12 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d005      	beq.n	80059ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f043 0204 	orr.w	r2, r3, #4
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fd ff78 	bl	80038d4 <HAL_DMA_GetState>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d014      	beq.n	8005a14 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ee:	4a4e      	ldr	r2, [pc, #312]	; (8005b28 <I2C_Slave_STOPF+0x258>)
 80059f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fd fdc0 	bl	800357c <HAL_DMA_Abort_IT>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
 8005a10:	e000      	b.n	8005a14 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a12:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d03e      	beq.n	8005a9c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d112      	bne.n	8005a52 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b40      	cmp	r3, #64	; 0x40
 8005a5e:	d112      	bne.n	8005a86 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	f043 0204 	orr.w	r2, r3, #4
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f8b3 	bl	8005c10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005aaa:	e039      	b.n	8005b20 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab0:	d109      	bne.n	8005ac6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2228      	movs	r2, #40	; 0x28
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff f827 	bl	8004b14 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b28      	cmp	r3, #40	; 0x28
 8005ad0:	d111      	bne.n	8005af6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a15      	ldr	r2, [pc, #84]	; (8005b2c <I2C_Slave_STOPF+0x25c>)
 8005ad6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff f828 	bl	8004b44 <HAL_I2C_ListenCpltCallback>
}
 8005af4:	e014      	b.n	8005b20 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	2b22      	cmp	r3, #34	; 0x22
 8005afc:	d002      	beq.n	8005b04 <I2C_Slave_STOPF+0x234>
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	2b22      	cmp	r3, #34	; 0x22
 8005b02:	d10d      	bne.n	8005b20 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fe fffa 	bl	8004b14 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b20:	bf00      	nop
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	08006115 	.word	0x08006115
 8005b2c:	ffff0000 	.word	0xffff0000

08005b30 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d002      	beq.n	8005b52 <I2C_Slave_AF+0x22>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d129      	bne.n	8005ba6 <I2C_Slave_AF+0x76>
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	2b28      	cmp	r3, #40	; 0x28
 8005b56:	d126      	bne.n	8005ba6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a2c      	ldr	r2, [pc, #176]	; (8005c0c <I2C_Slave_AF+0xdc>)
 8005b5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b6c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b76:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b86:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fe ffd0 	bl	8004b44 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005ba4:	e02e      	b.n	8005c04 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b21      	cmp	r3, #33	; 0x21
 8005baa:	d126      	bne.n	8005bfa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a17      	ldr	r2, [pc, #92]	; (8005c0c <I2C_Slave_AF+0xdc>)
 8005bb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2221      	movs	r2, #33	; 0x21
 8005bb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bd6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005be0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fe ff84 	bl	8004b00 <HAL_I2C_SlaveTxCpltCallback>
}
 8005bf8:	e004      	b.n	8005c04 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c02:	615a      	str	r2, [r3, #20]
}
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	ffff0000 	.word	0xffff0000

08005c10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c28:	7bbb      	ldrb	r3, [r7, #14]
 8005c2a:	2b10      	cmp	r3, #16
 8005c2c:	d002      	beq.n	8005c34 <I2C_ITError+0x24>
 8005c2e:	7bbb      	ldrb	r3, [r7, #14]
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d10a      	bne.n	8005c4a <I2C_ITError+0x3a>
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	2b22      	cmp	r3, #34	; 0x22
 8005c38:	d107      	bne.n	8005c4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
 8005c4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c50:	2b28      	cmp	r3, #40	; 0x28
 8005c52:	d107      	bne.n	8005c64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2228      	movs	r2, #40	; 0x28
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c62:	e015      	b.n	8005c90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c72:	d00a      	beq.n	8005c8a <I2C_ITError+0x7a>
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b60      	cmp	r3, #96	; 0x60
 8005c78:	d007      	beq.n	8005c8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9e:	d162      	bne.n	8005d66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d020      	beq.n	8005d00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc2:	4a6a      	ldr	r2, [pc, #424]	; (8005e6c <I2C_ITError+0x25c>)
 8005cc4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fd fc56 	bl	800357c <HAL_DMA_Abort_IT>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8089 	beq.w	8005dea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	4798      	blx	r3
 8005cfe:	e074      	b.n	8005dea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	4a59      	ldr	r2, [pc, #356]	; (8005e6c <I2C_ITError+0x25c>)
 8005d06:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fd fc35 	bl	800357c <HAL_DMA_Abort_IT>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d068      	beq.n	8005dea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d10b      	bne.n	8005d3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0201 	bic.w	r2, r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d60:	4610      	mov	r0, r2
 8005d62:	4798      	blx	r3
 8005d64:	e041      	b.n	8005dea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b60      	cmp	r3, #96	; 0x60
 8005d70:	d125      	bne.n	8005dbe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b40      	cmp	r3, #64	; 0x40
 8005d8c:	d10b      	bne.n	8005da6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0201 	bic.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fe feec 	bl	8004b94 <HAL_I2C_AbortCpltCallback>
 8005dbc:	e015      	b.n	8005dea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d10b      	bne.n	8005de4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7fe fecb 	bl	8004b80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10e      	bne.n	8005e18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d109      	bne.n	8005e18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d104      	bne.n	8005e18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d113      	bne.n	8005e64 <I2C_ITError+0x254>
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b28      	cmp	r3, #40	; 0x28
 8005e40:	d110      	bne.n	8005e64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <I2C_ITError+0x260>)
 8005e46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fe fe70 	bl	8004b44 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e64:	bf00      	nop
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	08006115 	.word	0x08006115
 8005e70:	ffff0000 	.word	0xffff0000

08005e74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	460b      	mov	r3, r1
 8005e82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d006      	beq.n	8005e9e <I2C_MasterRequestWrite+0x2a>
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d003      	beq.n	8005e9e <I2C_MasterRequestWrite+0x2a>
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e9c:	d108      	bne.n	8005eb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	e00b      	b.n	8005ec8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb4:	2b12      	cmp	r3, #18
 8005eb6:	d107      	bne.n	8005ec8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ec6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 f9c5 	bl	8006264 <I2C_WaitOnFlagUntilTimeout>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00d      	beq.n	8005efc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eee:	d103      	bne.n	8005ef8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e035      	b.n	8005f68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f04:	d108      	bne.n	8005f18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f06:	897b      	ldrh	r3, [r7, #10]
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f14:	611a      	str	r2, [r3, #16]
 8005f16:	e01b      	b.n	8005f50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f18:	897b      	ldrh	r3, [r7, #10]
 8005f1a:	11db      	asrs	r3, r3, #7
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	f003 0306 	and.w	r3, r3, #6
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	f063 030f 	orn	r3, r3, #15
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	490e      	ldr	r1, [pc, #56]	; (8005f70 <I2C_MasterRequestWrite+0xfc>)
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f9eb 	bl	8006312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e010      	b.n	8005f68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f46:	897b      	ldrh	r3, [r7, #10]
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	4907      	ldr	r1, [pc, #28]	; (8005f74 <I2C_MasterRequestWrite+0x100>)
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 f9db 	bl	8006312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	00010008 	.word	0x00010008
 8005f74:	00010002 	.word	0x00010002

08005f78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	607a      	str	r2, [r7, #4]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	460b      	mov	r3, r1
 8005f86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d006      	beq.n	8005fb2 <I2C_MasterRequestRead+0x3a>
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d003      	beq.n	8005fb2 <I2C_MasterRequestRead+0x3a>
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fb0:	d108      	bne.n	8005fc4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	e00b      	b.n	8005fdc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	2b11      	cmp	r3, #17
 8005fca:	d107      	bne.n	8005fdc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 f93b 	bl	8006264 <I2C_WaitOnFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00d      	beq.n	8006010 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006002:	d103      	bne.n	800600c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800600a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e079      	b.n	8006104 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006018:	d108      	bne.n	800602c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800601a:	897b      	ldrh	r3, [r7, #10]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	b2da      	uxtb	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	611a      	str	r2, [r3, #16]
 800602a:	e05f      	b.n	80060ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800602c:	897b      	ldrh	r3, [r7, #10]
 800602e:	11db      	asrs	r3, r3, #7
 8006030:	b2db      	uxtb	r3, r3
 8006032:	f003 0306 	and.w	r3, r3, #6
 8006036:	b2db      	uxtb	r3, r3
 8006038:	f063 030f 	orn	r3, r3, #15
 800603c:	b2da      	uxtb	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4930      	ldr	r1, [pc, #192]	; (800610c <I2C_MasterRequestRead+0x194>)
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f961 	bl	8006312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e054      	b.n	8006104 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800605a:	897b      	ldrh	r3, [r7, #10]
 800605c:	b2da      	uxtb	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	4929      	ldr	r1, [pc, #164]	; (8006110 <I2C_MasterRequestRead+0x198>)
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f951 	bl	8006312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e044      	b.n	8006104 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800607a:	2300      	movs	r3, #0
 800607c:	613b      	str	r3, [r7, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800609e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f8d9 	bl	8006264 <I2C_WaitOnFlagUntilTimeout>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00d      	beq.n	80060d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c6:	d103      	bne.n	80060d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e017      	b.n	8006104 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80060d4:	897b      	ldrh	r3, [r7, #10]
 80060d6:	11db      	asrs	r3, r3, #7
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	f003 0306 	and.w	r3, r3, #6
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f063 030e 	orn	r3, r3, #14
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	4907      	ldr	r1, [pc, #28]	; (8006110 <I2C_MasterRequestRead+0x198>)
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f90d 	bl	8006312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	00010008 	.word	0x00010008
 8006110:	00010002 	.word	0x00010002

08006114 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800612e:	4b4b      	ldr	r3, [pc, #300]	; (800625c <I2C_DMAAbort+0x148>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	08db      	lsrs	r3, r3, #3
 8006134:	4a4a      	ldr	r2, [pc, #296]	; (8006260 <I2C_DMAAbort+0x14c>)
 8006136:	fba2 2303 	umull	r2, r3, r2, r3
 800613a:	0a1a      	lsrs	r2, r3, #8
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	00da      	lsls	r2, r3, #3
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f043 0220 	orr.w	r2, r3, #32
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800615a:	e00a      	b.n	8006172 <I2C_DMAAbort+0x5e>
    }
    count--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3b01      	subs	r3, #1
 8006160:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800616c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006170:	d0ea      	beq.n	8006148 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617e:	2200      	movs	r2, #0
 8006180:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	2200      	movs	r2, #0
 8006190:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2200      	movs	r2, #0
 80061a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b4:	2200      	movs	r2, #0
 80061b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	2200      	movs	r2, #0
 80061c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0201 	bic.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b60      	cmp	r3, #96	; 0x60
 80061e2:	d10e      	bne.n	8006202 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2200      	movs	r2, #0
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80061fa:	6978      	ldr	r0, [r7, #20]
 80061fc:	f7fe fcca 	bl	8004b94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006200:	e027      	b.n	8006252 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006202:	7cfb      	ldrb	r3, [r7, #19]
 8006204:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006208:	2b28      	cmp	r3, #40	; 0x28
 800620a:	d117      	bne.n	800623c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800622a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2228      	movs	r2, #40	; 0x28
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800623a:	e007      	b.n	800624c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800624c:	6978      	ldr	r0, [r7, #20]
 800624e:	f7fe fc97 	bl	8004b80 <HAL_I2C_ErrorCallback>
}
 8006252:	bf00      	nop
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000000 	.word	0x20000000
 8006260:	14f8b589 	.word	0x14f8b589

08006264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	4613      	mov	r3, r2
 8006272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006274:	e025      	b.n	80062c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627c:	d021      	beq.n	80062c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800627e:	f7fc f99b 	bl	80025b8 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d302      	bcc.n	8006294 <I2C_WaitOnFlagUntilTimeout+0x30>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d116      	bne.n	80062c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2220      	movs	r2, #32
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f043 0220 	orr.w	r2, r3, #32
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e023      	b.n	800630a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	0c1b      	lsrs	r3, r3, #16
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d10d      	bne.n	80062e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	43da      	mvns	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4013      	ands	r3, r2
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bf0c      	ite	eq
 80062de:	2301      	moveq	r3, #1
 80062e0:	2300      	movne	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	e00c      	b.n	8006302 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	43da      	mvns	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4013      	ands	r3, r2
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bf0c      	ite	eq
 80062fa:	2301      	moveq	r3, #1
 80062fc:	2300      	movne	r3, #0
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	429a      	cmp	r2, r3
 8006306:	d0b6      	beq.n	8006276 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006320:	e051      	b.n	80063c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006330:	d123      	bne.n	800637a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006340:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800634a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2220      	movs	r2, #32
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	f043 0204 	orr.w	r2, r3, #4
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e046      	b.n	8006408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d021      	beq.n	80063c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006382:	f7fc f919 	bl	80025b8 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d302      	bcc.n	8006398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d116      	bne.n	80063c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f043 0220 	orr.w	r2, r3, #32
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e020      	b.n	8006408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	0c1b      	lsrs	r3, r3, #16
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d10c      	bne.n	80063ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	43da      	mvns	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4013      	ands	r3, r2
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bf14      	ite	ne
 80063e2:	2301      	movne	r3, #1
 80063e4:	2300      	moveq	r3, #0
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	e00b      	b.n	8006402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	43da      	mvns	r2, r3
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	4013      	ands	r3, r2
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bf14      	ite	ne
 80063fc:	2301      	movne	r3, #1
 80063fe:	2300      	moveq	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d18d      	bne.n	8006322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800641c:	e02d      	b.n	800647a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 f900 	bl	8006624 <I2C_IsAcknowledgeFailed>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e02d      	b.n	800648a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006434:	d021      	beq.n	800647a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006436:	f7fc f8bf 	bl	80025b8 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	429a      	cmp	r2, r3
 8006444:	d302      	bcc.n	800644c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d116      	bne.n	800647a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f043 0220 	orr.w	r2, r3, #32
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e007      	b.n	800648a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006484:	2b80      	cmp	r3, #128	; 0x80
 8006486:	d1ca      	bne.n	800641e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800649e:	e02d      	b.n	80064fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f8bf 	bl	8006624 <I2C_IsAcknowledgeFailed>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e02d      	b.n	800650c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b6:	d021      	beq.n	80064fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b8:	f7fc f87e 	bl	80025b8 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d302      	bcc.n	80064ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d116      	bne.n	80064fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	f043 0220 	orr.w	r2, r3, #32
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e007      	b.n	800650c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b04      	cmp	r3, #4
 8006508:	d1ca      	bne.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006520:	4b13      	ldr	r3, [pc, #76]	; (8006570 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	08db      	lsrs	r3, r3, #3
 8006526:	4a13      	ldr	r2, [pc, #76]	; (8006574 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006528:	fba2 2303 	umull	r2, r3, r2, r3
 800652c:	0a1a      	lsrs	r2, r3, #8
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3b01      	subs	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d107      	bne.n	8006552 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	f043 0220 	orr.w	r2, r3, #32
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e008      	b.n	8006564 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800655c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006560:	d0e9      	beq.n	8006536 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	20000000 	.word	0x20000000
 8006574:	14f8b589 	.word	0x14f8b589

08006578 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006584:	e042      	b.n	800660c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	f003 0310 	and.w	r3, r3, #16
 8006590:	2b10      	cmp	r3, #16
 8006592:	d119      	bne.n	80065c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0210 	mvn.w	r2, #16
 800659c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e029      	b.n	800661c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c8:	f7fb fff6 	bl	80025b8 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d302      	bcc.n	80065de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d116      	bne.n	800660c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	f043 0220 	orr.w	r2, r3, #32
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e007      	b.n	800661c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	d1b5      	bne.n	8006586 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663a:	d11b      	bne.n	8006674 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006644:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	f043 0204 	orr.w	r2, r3, #4
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006692:	d103      	bne.n	800669c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800669a:	e007      	b.n	80066ac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80066a4:	d102      	bne.n	80066ac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2208      	movs	r2, #8
 80066aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e0e1      	b.n	800688e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a6d      	ldr	r2, [pc, #436]	; (8006898 <HAL_I2S_Init+0x1e0>)
 80066e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7fb fbf3 	bl	8001ed0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2202      	movs	r2, #2
 80066ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6812      	ldr	r2, [r2, #0]
 80066fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006700:	f023 030f 	bic.w	r3, r3, #15
 8006704:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2202      	movs	r2, #2
 800670c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	2b02      	cmp	r3, #2
 8006714:	d06f      	beq.n	80067f6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800671e:	2310      	movs	r3, #16
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	e001      	b.n	8006728 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006724:	2320      	movs	r3, #32
 8006726:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	2b20      	cmp	r3, #32
 800672e:	d802      	bhi.n	8006736 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a58      	ldr	r2, [pc, #352]	; (800689c <HAL_I2S_Init+0x1e4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d004      	beq.n	800674a <HAL_I2S_Init+0x92>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a56      	ldr	r2, [pc, #344]	; (80068a0 <HAL_I2S_Init+0x1e8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d104      	bne.n	8006754 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800674a:	2001      	movs	r0, #1
 800674c:	f000 fdf6 	bl	800733c <HAL_RCCEx_GetPeriphCLKFreq>
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	e003      	b.n	800675c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8006754:	2002      	movs	r0, #2
 8006756:	f000 fdf1 	bl	800733c <HAL_RCCEx_GetPeriphCLKFreq>
 800675a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006764:	d125      	bne.n	80067b2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d010      	beq.n	8006790 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	fbb2 f2f3 	udiv	r2, r2, r3
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	461a      	mov	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	fbb2 f3f3 	udiv	r3, r2, r3
 800678a:	3305      	adds	r3, #5
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	e01f      	b.n	80067d0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	fbb2 f2f3 	udiv	r2, r2, r3
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	461a      	mov	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	3305      	adds	r3, #5
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	e00e      	b.n	80067d0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	461a      	mov	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	3305      	adds	r3, #5
 80067ce:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	4a34      	ldr	r2, [pc, #208]	; (80068a4 <HAL_I2S_Init+0x1ec>)
 80067d4:	fba2 2303 	umull	r2, r3, r2, r3
 80067d8:	08db      	lsrs	r3, r3, #3
 80067da:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	021b      	lsls	r3, r3, #8
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	e003      	b.n	80067fe <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80067f6:	2302      	movs	r3, #2
 80067f8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d902      	bls.n	800680a <HAL_I2S_Init+0x152>
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	2bff      	cmp	r3, #255	; 0xff
 8006808:	d907      	bls.n	800681a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680e:	f043 0210 	orr.w	r2, r3, #16
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e039      	b.n	800688e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691a      	ldr	r2, [r3, #16]
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	ea42 0103 	orr.w	r1, r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	430a      	orrs	r2, r1
 800682c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006838:	f023 030f 	bic.w	r3, r3, #15
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6851      	ldr	r1, [r2, #4]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6892      	ldr	r2, [r2, #8]
 8006844:	4311      	orrs	r1, r2
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	68d2      	ldr	r2, [r2, #12]
 800684a:	4311      	orrs	r1, r2
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6992      	ldr	r2, [r2, #24]
 8006850:	430a      	orrs	r2, r1
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800685c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b30      	cmp	r3, #48	; 0x30
 8006864:	d003      	beq.n	800686e <HAL_I2S_Init+0x1b6>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	2bb0      	cmp	r3, #176	; 0xb0
 800686c:	d107      	bne.n	800687e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800687c:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3720      	adds	r7, #32
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	0800699f 	.word	0x0800699f
 800689c:	40003800 	.word	0x40003800
 80068a0:	40003c00 	.word	0x40003c00
 80068a4:	cccccccd 	.word	0xcccccccd

080068a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	881a      	ldrh	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	1c9a      	adds	r2, r3, #2
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10e      	bne.n	8006938 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006928:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff ffb8 	bl	80068a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	b292      	uxth	r2, r2
 8006954:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	1c9a      	adds	r2, r3, #2
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006972:	b29b      	uxth	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10e      	bne.n	8006996 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006986:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff ff93 	bl	80068bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b086      	sub	sp, #24
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d13a      	bne.n	8006a30 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d109      	bne.n	80069d8 <I2S_IRQHandler+0x3a>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d102      	bne.n	80069d8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff ffb4 	bl	8006940 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069de:	2b40      	cmp	r3, #64	; 0x40
 80069e0:	d126      	bne.n	8006a30 <I2S_IRQHandler+0x92>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	d11f      	bne.n	8006a30 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006a00:	2300      	movs	r3, #0
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	613b      	str	r3, [r7, #16]
 8006a14:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a22:	f043 0202 	orr.w	r2, r3, #2
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff ff50 	bl	80068d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d136      	bne.n	8006aaa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d109      	bne.n	8006a5a <I2S_IRQHandler+0xbc>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a50:	2b80      	cmp	r3, #128	; 0x80
 8006a52:	d102      	bne.n	8006a5a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff ff45 	bl	80068e4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d122      	bne.n	8006aaa <I2S_IRQHandler+0x10c>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d11b      	bne.n	8006aaa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9c:	f043 0204 	orr.w	r2, r3, #4
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff ff13 	bl	80068d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006aaa:	bf00      	nop
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e0cc      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ac8:	4b68      	ldr	r3, [pc, #416]	; (8006c6c <HAL_RCC_ClockConfig+0x1b8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d90c      	bls.n	8006af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ad6:	4b65      	ldr	r3, [pc, #404]	; (8006c6c <HAL_RCC_ClockConfig+0x1b8>)
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ade:	4b63      	ldr	r3, [pc, #396]	; (8006c6c <HAL_RCC_ClockConfig+0x1b8>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d001      	beq.n	8006af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e0b8      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d020      	beq.n	8006b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b08:	4b59      	ldr	r3, [pc, #356]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4a58      	ldr	r2, [pc, #352]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b20:	4b53      	ldr	r3, [pc, #332]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	4a52      	ldr	r2, [pc, #328]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b2c:	4b50      	ldr	r3, [pc, #320]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	494d      	ldr	r1, [pc, #308]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d044      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d107      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b52:	4b47      	ldr	r3, [pc, #284]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d119      	bne.n	8006b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e07f      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d003      	beq.n	8006b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d107      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b72:	4b3f      	ldr	r3, [pc, #252]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e06f      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b82:	4b3b      	ldr	r3, [pc, #236]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e067      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b92:	4b37      	ldr	r3, [pc, #220]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f023 0203 	bic.w	r2, r3, #3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	4934      	ldr	r1, [pc, #208]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ba4:	f7fb fd08 	bl	80025b8 <HAL_GetTick>
 8006ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006baa:	e00a      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bac:	f7fb fd04 	bl	80025b8 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e04f      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc2:	4b2b      	ldr	r3, [pc, #172]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 020c 	and.w	r2, r3, #12
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d1eb      	bne.n	8006bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bd4:	4b25      	ldr	r3, [pc, #148]	; (8006c6c <HAL_RCC_ClockConfig+0x1b8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 030f 	and.w	r3, r3, #15
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d20c      	bcs.n	8006bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006be2:	4b22      	ldr	r3, [pc, #136]	; (8006c6c <HAL_RCC_ClockConfig+0x1b8>)
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bea:	4b20      	ldr	r3, [pc, #128]	; (8006c6c <HAL_RCC_ClockConfig+0x1b8>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d001      	beq.n	8006bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e032      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d008      	beq.n	8006c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c08:	4b19      	ldr	r3, [pc, #100]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	4916      	ldr	r1, [pc, #88]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d009      	beq.n	8006c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c26:	4b12      	ldr	r3, [pc, #72]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	490e      	ldr	r1, [pc, #56]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c3a:	f000 fdc7 	bl	80077cc <HAL_RCC_GetSysClockFreq>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <HAL_RCC_ClockConfig+0x1bc>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	091b      	lsrs	r3, r3, #4
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	490a      	ldr	r1, [pc, #40]	; (8006c74 <HAL_RCC_ClockConfig+0x1c0>)
 8006c4c:	5ccb      	ldrb	r3, [r1, r3]
 8006c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c52:	4a09      	ldr	r2, [pc, #36]	; (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c56:	4b09      	ldr	r3, [pc, #36]	; (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fb fc68 	bl	8002530 <HAL_InitTick>

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40023c00 	.word	0x40023c00
 8006c70:	40023800 	.word	0x40023800
 8006c74:	08010504 	.word	0x08010504
 8006c78:	20000000 	.word	0x20000000
 8006c7c:	20000004 	.word	0x20000004

08006c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c86:	681b      	ldr	r3, [r3, #0]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000000 	.word	0x20000000

08006c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c9c:	f7ff fff0 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	0a9b      	lsrs	r3, r3, #10
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	4903      	ldr	r1, [pc, #12]	; (8006cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cae:	5ccb      	ldrb	r3, [r1, r3]
 8006cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40023800 	.word	0x40023800
 8006cbc:	08010514 	.word	0x08010514

08006cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006cc4:	f7ff ffdc 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	0b5b      	lsrs	r3, r3, #13
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	4903      	ldr	r1, [pc, #12]	; (8006ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cd6:	5ccb      	ldrb	r3, [r1, r3]
 8006cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	40023800 	.word	0x40023800
 8006ce4:	08010514 	.word	0x08010514

08006ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08c      	sub	sp, #48	; 0x30
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d010      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006d20:	4b6f      	ldr	r3, [pc, #444]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d26:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	496c      	ldr	r1, [pc, #432]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d010      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006d4e:	4b64      	ldr	r3, [pc, #400]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d54:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5c:	4960      	ldr	r1, [pc, #384]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d017      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d7c:	4b58      	ldr	r3, [pc, #352]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	4955      	ldr	r1, [pc, #340]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d9a:	d101      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006da8:	2301      	movs	r3, #1
 8006daa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d017      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006db8:	4b49      	ldr	r3, [pc, #292]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc6:	4946      	ldr	r1, [pc, #280]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dd6:	d101      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006de4:	2301      	movs	r3, #1
 8006de6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0320 	and.w	r3, r3, #32
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 808a 	beq.w	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006df6:	2300      	movs	r3, #0
 8006df8:	60bb      	str	r3, [r7, #8]
 8006dfa:	4b39      	ldr	r3, [pc, #228]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	4a38      	ldr	r2, [pc, #224]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e04:	6413      	str	r3, [r2, #64]	; 0x40
 8006e06:	4b36      	ldr	r3, [pc, #216]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e0e:	60bb      	str	r3, [r7, #8]
 8006e10:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e12:	4b34      	ldr	r3, [pc, #208]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a33      	ldr	r2, [pc, #204]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e1e:	f7fb fbcb 	bl	80025b8 <HAL_GetTick>
 8006e22:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e24:	e008      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e26:	f7fb fbc7 	bl	80025b8 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e278      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e38:	4b2a      	ldr	r3, [pc, #168]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0f0      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e44:	4b26      	ldr	r3, [pc, #152]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d02f      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e5c:	6a3a      	ldr	r2, [r7, #32]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d028      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e62:	4b1f      	ldr	r3, [pc, #124]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e6a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e6c:	4b1e      	ldr	r3, [pc, #120]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e72:	4b1d      	ldr	r3, [pc, #116]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e78:	4a19      	ldr	r2, [pc, #100]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e7e:	4b18      	ldr	r3, [pc, #96]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d114      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e8a:	f7fb fb95 	bl	80025b8 <HAL_GetTick>
 8006e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e90:	e00a      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e92:	f7fb fb91 	bl	80025b8 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e240      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea8:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0ee      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec0:	d114      	bne.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006ec2:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed6:	4902      	ldr	r1, [pc, #8]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	608b      	str	r3, [r1, #8]
 8006edc:	e00c      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006ede:	bf00      	nop
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	40007000 	.word	0x40007000
 8006ee8:	42470e40 	.word	0x42470e40
 8006eec:	4b4a      	ldr	r3, [pc, #296]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	4a49      	ldr	r2, [pc, #292]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ef2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ef6:	6093      	str	r3, [r2, #8]
 8006ef8:	4b47      	ldr	r3, [pc, #284]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006efa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f04:	4944      	ldr	r1, [pc, #272]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0310 	and.w	r3, r3, #16
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d004      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006f1c:	4b3f      	ldr	r3, [pc, #252]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006f1e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006f2c:	4b3a      	ldr	r3, [pc, #232]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	4937      	ldr	r1, [pc, #220]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f4e:	4b32      	ldr	r3, [pc, #200]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f54:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f5c:	492e      	ldr	r1, [pc, #184]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d011      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006f70:	4b29      	ldr	r3, [pc, #164]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f76:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7e:	4926      	ldr	r1, [pc, #152]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f8e:	d101      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006f90:	2301      	movs	r3, #1
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006fa0:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fa6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fae:	491a      	ldr	r1, [pc, #104]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d011      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006fc2:	4b15      	ldr	r3, [pc, #84]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fc8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd0:	4911      	ldr	r1, [pc, #68]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fe0:	d101      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d005      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff4:	f040 80ff 	bne.w	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ff8:	4b09      	ldr	r3, [pc, #36]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ffe:	f7fb fadb 	bl	80025b8 <HAL_GetTick>
 8007002:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007004:	e00e      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007006:	f7fb fad7 	bl	80025b8 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d907      	bls.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e188      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007018:	40023800 	.word	0x40023800
 800701c:	424711e0 	.word	0x424711e0
 8007020:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007024:	4b7e      	ldr	r3, [pc, #504]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1ea      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	2b00      	cmp	r3, #0
 8007042:	d009      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800704c:	2b00      	cmp	r3, #0
 800704e:	d028      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d124      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007058:	4b71      	ldr	r3, [pc, #452]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800705a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800705e:	0c1b      	lsrs	r3, r3, #16
 8007060:	f003 0303 	and.w	r3, r3, #3
 8007064:	3301      	adds	r3, #1
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800706a:	4b6d      	ldr	r3, [pc, #436]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800706c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007070:	0e1b      	lsrs	r3, r3, #24
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	019b      	lsls	r3, r3, #6
 8007082:	431a      	orrs	r2, r3
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	3b01      	subs	r3, #1
 800708a:	041b      	lsls	r3, r3, #16
 800708c:	431a      	orrs	r2, r3
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	061b      	lsls	r3, r3, #24
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	071b      	lsls	r3, r3, #28
 800709a:	4961      	ldr	r1, [pc, #388]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800709c:	4313      	orrs	r3, r2
 800709e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0304 	and.w	r3, r3, #4
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070b6:	d00a      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d035      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070cc:	d130      	bne.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80070ce:	4b54      	ldr	r3, [pc, #336]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80070d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d4:	0c1b      	lsrs	r3, r3, #16
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	3301      	adds	r3, #1
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070e0:	4b4f      	ldr	r3, [pc, #316]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80070e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e6:	0f1b      	lsrs	r3, r3, #28
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	019b      	lsls	r3, r3, #6
 80070f8:	431a      	orrs	r2, r3
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	085b      	lsrs	r3, r3, #1
 80070fe:	3b01      	subs	r3, #1
 8007100:	041b      	lsls	r3, r3, #16
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	061b      	lsls	r3, r3, #24
 800710a:	431a      	orrs	r2, r3
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	071b      	lsls	r3, r3, #28
 8007110:	4943      	ldr	r1, [pc, #268]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007118:	4b41      	ldr	r3, [pc, #260]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800711a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800711e:	f023 021f 	bic.w	r2, r3, #31
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007126:	3b01      	subs	r3, #1
 8007128:	493d      	ldr	r1, [pc, #244]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800712a:	4313      	orrs	r3, r2
 800712c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007138:	2b00      	cmp	r3, #0
 800713a:	d029      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007144:	d124      	bne.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007146:	4b36      	ldr	r3, [pc, #216]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800714c:	0c1b      	lsrs	r3, r3, #16
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	3301      	adds	r3, #1
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007158:	4b31      	ldr	r3, [pc, #196]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800715a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800715e:	0f1b      	lsrs	r3, r3, #28
 8007160:	f003 0307 	and.w	r3, r3, #7
 8007164:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	019b      	lsls	r3, r3, #6
 8007170:	431a      	orrs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	085b      	lsrs	r3, r3, #1
 8007178:	3b01      	subs	r3, #1
 800717a:	041b      	lsls	r3, r3, #16
 800717c:	431a      	orrs	r2, r3
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	061b      	lsls	r3, r3, #24
 8007182:	431a      	orrs	r2, r3
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	071b      	lsls	r3, r3, #28
 8007188:	4925      	ldr	r1, [pc, #148]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800718a:	4313      	orrs	r3, r2
 800718c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007198:	2b00      	cmp	r3, #0
 800719a:	d016      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	019b      	lsls	r3, r3, #6
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	3b01      	subs	r3, #1
 80071b0:	041b      	lsls	r3, r3, #16
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	061b      	lsls	r3, r3, #24
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	071b      	lsls	r3, r3, #28
 80071c2:	4917      	ldr	r1, [pc, #92]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071ca:	4b16      	ldr	r3, [pc, #88]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80071cc:	2201      	movs	r2, #1
 80071ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071d0:	f7fb f9f2 	bl	80025b8 <HAL_GetTick>
 80071d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071d6:	e008      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071d8:	f7fb f9ee 	bl	80025b8 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d901      	bls.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e09f      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071ea:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0f0      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	f040 8095 	bne.w	8007328 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80071fe:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007204:	f7fb f9d8 	bl	80025b8 <HAL_GetTick>
 8007208:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800720a:	e00f      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800720c:	f7fb f9d4 	bl	80025b8 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d908      	bls.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e085      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800721e:	bf00      	nop
 8007220:	40023800 	.word	0x40023800
 8007224:	42470068 	.word	0x42470068
 8007228:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800722c:	4b41      	ldr	r3, [pc, #260]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007238:	d0e8      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	2b00      	cmp	r3, #0
 800724c:	d009      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007256:	2b00      	cmp	r3, #0
 8007258:	d02b      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725e:	2b00      	cmp	r3, #0
 8007260:	d127      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007262:	4b34      	ldr	r3, [pc, #208]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007268:	0c1b      	lsrs	r3, r3, #16
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	3301      	adds	r3, #1
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	699a      	ldr	r2, [r3, #24]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	019b      	lsls	r3, r3, #6
 800727e:	431a      	orrs	r2, r3
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	3b01      	subs	r3, #1
 8007286:	041b      	lsls	r3, r3, #16
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	061b      	lsls	r3, r3, #24
 8007290:	4928      	ldr	r1, [pc, #160]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007292:	4313      	orrs	r3, r2
 8007294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007298:	4b26      	ldr	r3, [pc, #152]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800729a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800729e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	3b01      	subs	r3, #1
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	4922      	ldr	r1, [pc, #136]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d01d      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x612>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072c6:	d118      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072c8:	4b1a      	ldr	r3, [pc, #104]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80072ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ce:	0e1b      	lsrs	r3, r3, #24
 80072d0:	f003 030f 	and.w	r3, r3, #15
 80072d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	019b      	lsls	r3, r3, #6
 80072e0:	431a      	orrs	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	085b      	lsrs	r3, r3, #1
 80072e8:	3b01      	subs	r3, #1
 80072ea:	041b      	lsls	r3, r3, #16
 80072ec:	431a      	orrs	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	061b      	lsls	r3, r3, #24
 80072f2:	4910      	ldr	r1, [pc, #64]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80072fa:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007300:	f7fb f95a 	bl	80025b8 <HAL_GetTick>
 8007304:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007306:	e008      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007308:	f7fb f956 	bl	80025b8 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d901      	bls.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e007      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800731a:	4b06      	ldr	r3, [pc, #24]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007326:	d1ef      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3730      	adds	r7, #48	; 0x30
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	40023800 	.word	0x40023800
 8007338:	42470070 	.word	0x42470070

0800733c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800733c:	b480      	push	{r7}
 800733e:	b089      	sub	sp, #36	; 0x24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3b01      	subs	r3, #1
 8007360:	2b07      	cmp	r3, #7
 8007362:	f200 8224 	bhi.w	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	0800756f 	.word	0x0800756f
 8007370:	08007699 	.word	0x08007699
 8007374:	080077af 	.word	0x080077af
 8007378:	0800738d 	.word	0x0800738d
 800737c:	080077af 	.word	0x080077af
 8007380:	080077af 	.word	0x080077af
 8007384:	080077af 	.word	0x080077af
 8007388:	0800738d 	.word	0x0800738d
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800738c:	4ba8      	ldr	r3, [pc, #672]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800738e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007392:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80073a2:	f000 80d6 	beq.w	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80073ac:	f200 80dd 	bhi.w	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073b6:	f000 809f 	beq.w	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073c0:	f200 80d3 	bhi.w	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ca:	d05b      	beq.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073d2:	f200 80ca 	bhi.w	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073dc:	f000 80b6 	beq.w	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073e6:	f200 80c0 	bhi.w	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073f0:	f000 8082 	beq.w	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073fa:	f200 80b6 	bhi.w	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800740a:	d03b      	beq.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 800740c:	e0ad      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800740e:	4b88      	ldr	r3, [pc, #544]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d109      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800741a:	4b85      	ldr	r3, [pc, #532]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007424:	4a83      	ldr	r2, [pc, #524]	; (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007426:	fbb2 f3f3 	udiv	r3, r2, r3
 800742a:	61bb      	str	r3, [r7, #24]
 800742c:	e008      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800742e:	4b80      	ldr	r3, [pc, #512]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007438:	4a7f      	ldr	r2, [pc, #508]	; (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800743a:	fbb2 f3f3 	udiv	r3, r2, r3
 800743e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8007440:	4b7b      	ldr	r3, [pc, #492]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007446:	0e1b      	lsrs	r3, r3, #24
 8007448:	f003 030f 	and.w	r3, r3, #15
 800744c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800744e:	4b78      	ldr	r3, [pc, #480]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007454:	099b      	lsrs	r3, r3, #6
 8007456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	fb03 f202 	mul.w	r2, r3, r2
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	fbb2 f3f3 	udiv	r3, r2, r3
 8007466:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8007468:	4b71      	ldr	r3, [pc, #452]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800746a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800746e:	0a1b      	lsrs	r3, r3, #8
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	3301      	adds	r3, #1
 8007476:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007480:	61fb      	str	r3, [r7, #28]
          break;
 8007482:	e073      	b.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007484:	4b6a      	ldr	r3, [pc, #424]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d109      	bne.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007490:	4b67      	ldr	r3, [pc, #412]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007496:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800749a:	4a66      	ldr	r2, [pc, #408]	; (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800749c:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a0:	61bb      	str	r3, [r7, #24]
 80074a2:	e008      	b.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80074a4:	4b62      	ldr	r3, [pc, #392]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80074a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074ae:	4a62      	ldr	r2, [pc, #392]	; (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80074b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80074b6:	4b5e      	ldr	r3, [pc, #376]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80074b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074bc:	0e1b      	lsrs	r3, r3, #24
 80074be:	f003 030f 	and.w	r3, r3, #15
 80074c2:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80074c4:	4b5a      	ldr	r3, [pc, #360]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80074c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ca:	099b      	lsrs	r3, r3, #6
 80074cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	fb03 f202 	mul.w	r2, r3, r2
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074dc:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80074de:	4b54      	ldr	r3, [pc, #336]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80074e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074e4:	f003 031f 	and.w	r3, r3, #31
 80074e8:	3301      	adds	r3, #1
 80074ea:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f4:	61fb      	str	r3, [r7, #28]
          break;
 80074f6:	e039      	b.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80074f8:	4b4d      	ldr	r3, [pc, #308]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d108      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007504:	4b4a      	ldr	r3, [pc, #296]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800750c:	4a49      	ldr	r2, [pc, #292]	; (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800750e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007512:	61bb      	str	r3, [r7, #24]
 8007514:	e007      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007516:	4b46      	ldr	r3, [pc, #280]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800751e:	4a46      	ldr	r2, [pc, #280]	; (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007520:	fbb2 f3f3 	udiv	r3, r2, r3
 8007524:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8007526:	4b42      	ldr	r3, [pc, #264]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	0f1b      	lsrs	r3, r3, #28
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8007532:	4b3f      	ldr	r3, [pc, #252]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	099b      	lsrs	r3, r3, #6
 8007538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	fb03 f202 	mul.w	r2, r3, r2
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	fbb2 f3f3 	udiv	r3, r2, r3
 8007548:	61fb      	str	r3, [r7, #28]
          break;
 800754a:	e00f      	b.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800754c:	4b3b      	ldr	r3, [pc, #236]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800754e:	61fb      	str	r3, [r7, #28]
          break;
 8007550:	e00c      	b.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007552:	4b37      	ldr	r3, [pc, #220]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d102      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800755e:	4b35      	ldr	r3, [pc, #212]	; (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007560:	61fb      	str	r3, [r7, #28]
          break;
 8007562:	e003      	b.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8007564:	4b34      	ldr	r3, [pc, #208]	; (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007566:	61fb      	str	r3, [r7, #28]
          break;
 8007568:	e000      	b.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800756a:	bf00      	nop
        }
      }
      break;
 800756c:	e11f      	b.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800756e:	4b30      	ldr	r3, [pc, #192]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007574:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007580:	d079      	beq.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007588:	f200 8082 	bhi.w	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007592:	d03c      	beq.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800759a:	d879      	bhi.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d006      	beq.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075a8:	d172      	bne.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80075aa:	4b24      	ldr	r3, [pc, #144]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80075ac:	61fb      	str	r3, [r7, #28]
          break;
 80075ae:	e072      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80075b0:	4b1f      	ldr	r3, [pc, #124]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075bc:	d109      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80075be:	4b1c      	ldr	r3, [pc, #112]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80075c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075c8:	4a1b      	ldr	r2, [pc, #108]	; (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80075ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	e008      	b.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80075d2:	4b17      	ldr	r3, [pc, #92]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80075d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075dc:	4a15      	ldr	r2, [pc, #84]	; (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80075de:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80075e4:	4b12      	ldr	r3, [pc, #72]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80075e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ea:	099b      	lsrs	r3, r3, #6
 80075ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	fb02 f303 	mul.w	r3, r2, r3
 80075f6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80075f8:	4b0d      	ldr	r3, [pc, #52]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80075fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075fe:	0f1b      	lsrs	r3, r3, #28
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	fbb2 f3f3 	udiv	r3, r2, r3
 800760a:	61fb      	str	r3, [r7, #28]
          break;
 800760c:	e043      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800760e:	4b08      	ldr	r3, [pc, #32]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800761a:	d111      	bne.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800761c:	4b04      	ldr	r3, [pc, #16]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007624:	4a04      	ldr	r2, [pc, #16]	; (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007626:	fbb2 f3f3 	udiv	r3, r2, r3
 800762a:	61bb      	str	r3, [r7, #24]
 800762c:	e010      	b.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800762e:	bf00      	nop
 8007630:	40023800 	.word	0x40023800
 8007634:	00f42400 	.word	0x00f42400
 8007638:	017d7840 	.word	0x017d7840
 800763c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007640:	4b5e      	ldr	r3, [pc, #376]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007648:	4a5d      	ldr	r2, [pc, #372]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800764a:	fbb2 f3f3 	udiv	r3, r2, r3
 800764e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007650:	4b5a      	ldr	r3, [pc, #360]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	099b      	lsrs	r3, r3, #6
 8007656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	fb02 f303 	mul.w	r3, r2, r3
 8007660:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007662:	4b56      	ldr	r3, [pc, #344]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	0f1b      	lsrs	r3, r3, #28
 8007668:	f003 0307 	and.w	r3, r3, #7
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007672:	61fb      	str	r3, [r7, #28]
          break;
 8007674:	e00f      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007676:	4b51      	ldr	r3, [pc, #324]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800767e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007682:	d102      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8007684:	4b4f      	ldr	r3, [pc, #316]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8007686:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007688:	e005      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 800768a:	4b4d      	ldr	r3, [pc, #308]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800768c:	61fb      	str	r3, [r7, #28]
          break;
 800768e:	e002      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	61fb      	str	r3, [r7, #28]
          break;
 8007694:	bf00      	nop
        }
      }
      break;
 8007696:	e08a      	b.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007698:	4b48      	ldr	r3, [pc, #288]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800769a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800769e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80076aa:	d06f      	beq.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80076b2:	d878      	bhi.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076ba:	d03c      	beq.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076c2:	d870      	bhi.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d006      	beq.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076d0:	d169      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80076d2:	4b3d      	ldr	r3, [pc, #244]	; (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80076d4:	61fb      	str	r3, [r7, #28]
          break;
 80076d6:	e069      	b.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80076d8:	4b38      	ldr	r3, [pc, #224]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076e4:	d109      	bne.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80076e6:	4b35      	ldr	r3, [pc, #212]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80076e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076f0:	4a34      	ldr	r2, [pc, #208]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80076f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f6:	61bb      	str	r3, [r7, #24]
 80076f8:	e008      	b.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80076fa:	4b30      	ldr	r3, [pc, #192]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80076fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007704:	4a2e      	ldr	r2, [pc, #184]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8007706:	fbb2 f3f3 	udiv	r3, r2, r3
 800770a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800770c:	4b2b      	ldr	r3, [pc, #172]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800770e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007712:	099b      	lsrs	r3, r3, #6
 8007714:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	fb02 f303 	mul.w	r3, r2, r3
 800771e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007720:	4b26      	ldr	r3, [pc, #152]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007726:	0f1b      	lsrs	r3, r3, #28
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007732:	61fb      	str	r3, [r7, #28]
          break;
 8007734:	e03a      	b.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007736:	4b21      	ldr	r3, [pc, #132]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800773e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007742:	d108      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007744:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800774c:	4a1d      	ldr	r2, [pc, #116]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800774e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007752:	61bb      	str	r3, [r7, #24]
 8007754:	e007      	b.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007756:	4b19      	ldr	r3, [pc, #100]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800775e:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8007760:	fbb2 f3f3 	udiv	r3, r2, r3
 8007764:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007766:	4b15      	ldr	r3, [pc, #84]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	099b      	lsrs	r3, r3, #6
 800776c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	fb02 f303 	mul.w	r3, r2, r3
 8007776:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007778:	4b10      	ldr	r3, [pc, #64]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	0f1b      	lsrs	r3, r3, #28
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	fbb2 f3f3 	udiv	r3, r2, r3
 8007788:	61fb      	str	r3, [r7, #28]
          break;
 800778a:	e00f      	b.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800778c:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007798:	d102      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 800779a:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800779c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800779e:	e005      	b.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80077a0:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80077a2:	61fb      	str	r3, [r7, #28]
          break;
 80077a4:	e002      	b.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61fb      	str	r3, [r7, #28]
          break;
 80077aa:	bf00      	nop
        }
      }
      break;
 80077ac:	bf00      	nop
    }
  }
  return frequency;
 80077ae:	69fb      	ldr	r3, [r7, #28]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3724      	adds	r7, #36	; 0x24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	40023800 	.word	0x40023800
 80077c0:	00f42400 	.word	0x00f42400
 80077c4:	017d7840 	.word	0x017d7840
 80077c8:	00bb8000 	.word	0x00bb8000

080077cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077d0:	b0a6      	sub	sp, #152	; 0x98
 80077d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077f2:	4bc8      	ldr	r3, [pc, #800]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x348>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 030c 	and.w	r3, r3, #12
 80077fa:	2b0c      	cmp	r3, #12
 80077fc:	f200 817e 	bhi.w	8007afc <HAL_RCC_GetSysClockFreq+0x330>
 8007800:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	0800783d 	.word	0x0800783d
 800780c:	08007afd 	.word	0x08007afd
 8007810:	08007afd 	.word	0x08007afd
 8007814:	08007afd 	.word	0x08007afd
 8007818:	08007845 	.word	0x08007845
 800781c:	08007afd 	.word	0x08007afd
 8007820:	08007afd 	.word	0x08007afd
 8007824:	08007afd 	.word	0x08007afd
 8007828:	0800784d 	.word	0x0800784d
 800782c:	08007afd 	.word	0x08007afd
 8007830:	08007afd 	.word	0x08007afd
 8007834:	08007afd 	.word	0x08007afd
 8007838:	080079b7 	.word	0x080079b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800783c:	4bb6      	ldr	r3, [pc, #728]	; (8007b18 <HAL_RCC_GetSysClockFreq+0x34c>)
 800783e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8007842:	e15f      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007844:	4bb5      	ldr	r3, [pc, #724]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x350>)
 8007846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800784a:	e15b      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800784c:	4bb1      	ldr	r3, [pc, #708]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x348>)
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007854:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007858:	4bae      	ldr	r3, [pc, #696]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x348>)
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d031      	beq.n	80078c8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007864:	4bab      	ldr	r3, [pc, #684]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x348>)
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	099b      	lsrs	r3, r3, #6
 800786a:	2200      	movs	r2, #0
 800786c:	66bb      	str	r3, [r7, #104]	; 0x68
 800786e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007876:	663b      	str	r3, [r7, #96]	; 0x60
 8007878:	2300      	movs	r3, #0
 800787a:	667b      	str	r3, [r7, #100]	; 0x64
 800787c:	4ba7      	ldr	r3, [pc, #668]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x350>)
 800787e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007882:	462a      	mov	r2, r5
 8007884:	fb03 f202 	mul.w	r2, r3, r2
 8007888:	2300      	movs	r3, #0
 800788a:	4621      	mov	r1, r4
 800788c:	fb01 f303 	mul.w	r3, r1, r3
 8007890:	4413      	add	r3, r2
 8007892:	4aa2      	ldr	r2, [pc, #648]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x350>)
 8007894:	4621      	mov	r1, r4
 8007896:	fba1 1202 	umull	r1, r2, r1, r2
 800789a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800789c:	460a      	mov	r2, r1
 800789e:	67ba      	str	r2, [r7, #120]	; 0x78
 80078a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80078a2:	4413      	add	r3, r2
 80078a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078aa:	2200      	movs	r2, #0
 80078ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80078ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80078b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80078b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80078b8:	f7f9 fa06 	bl	8000cc8 <__aeabi_uldivmod>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4613      	mov	r3, r2
 80078c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078c6:	e064      	b.n	8007992 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078c8:	4b92      	ldr	r3, [pc, #584]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x348>)
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	099b      	lsrs	r3, r3, #6
 80078ce:	2200      	movs	r2, #0
 80078d0:	653b      	str	r3, [r7, #80]	; 0x50
 80078d2:	657a      	str	r2, [r7, #84]	; 0x54
 80078d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078da:	64bb      	str	r3, [r7, #72]	; 0x48
 80078dc:	2300      	movs	r3, #0
 80078de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078e0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80078e4:	4622      	mov	r2, r4
 80078e6:	462b      	mov	r3, r5
 80078e8:	f04f 0000 	mov.w	r0, #0
 80078ec:	f04f 0100 	mov.w	r1, #0
 80078f0:	0159      	lsls	r1, r3, #5
 80078f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078f6:	0150      	lsls	r0, r2, #5
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	4621      	mov	r1, r4
 80078fe:	1a51      	subs	r1, r2, r1
 8007900:	6139      	str	r1, [r7, #16]
 8007902:	4629      	mov	r1, r5
 8007904:	eb63 0301 	sbc.w	r3, r3, r1
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	f04f 0200 	mov.w	r2, #0
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007916:	4659      	mov	r1, fp
 8007918:	018b      	lsls	r3, r1, #6
 800791a:	4651      	mov	r1, sl
 800791c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007920:	4651      	mov	r1, sl
 8007922:	018a      	lsls	r2, r1, #6
 8007924:	4651      	mov	r1, sl
 8007926:	ebb2 0801 	subs.w	r8, r2, r1
 800792a:	4659      	mov	r1, fp
 800792c:	eb63 0901 	sbc.w	r9, r3, r1
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800793c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007940:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007944:	4690      	mov	r8, r2
 8007946:	4699      	mov	r9, r3
 8007948:	4623      	mov	r3, r4
 800794a:	eb18 0303 	adds.w	r3, r8, r3
 800794e:	60bb      	str	r3, [r7, #8]
 8007950:	462b      	mov	r3, r5
 8007952:	eb49 0303 	adc.w	r3, r9, r3
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	f04f 0200 	mov.w	r2, #0
 800795c:	f04f 0300 	mov.w	r3, #0
 8007960:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007964:	4629      	mov	r1, r5
 8007966:	028b      	lsls	r3, r1, #10
 8007968:	4621      	mov	r1, r4
 800796a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800796e:	4621      	mov	r1, r4
 8007970:	028a      	lsls	r2, r1, #10
 8007972:	4610      	mov	r0, r2
 8007974:	4619      	mov	r1, r3
 8007976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800797a:	2200      	movs	r2, #0
 800797c:	643b      	str	r3, [r7, #64]	; 0x40
 800797e:	647a      	str	r2, [r7, #68]	; 0x44
 8007980:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007984:	f7f9 f9a0 	bl	8000cc8 <__aeabi_uldivmod>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4613      	mov	r3, r2
 800798e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007992:	4b60      	ldr	r3, [pc, #384]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x348>)
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	0c1b      	lsrs	r3, r3, #16
 8007998:	f003 0303 	and.w	r3, r3, #3
 800799c:	3301      	adds	r3, #1
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80079a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80079b4:	e0a6      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079b6:	4b57      	ldr	r3, [pc, #348]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x348>)
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079c2:	4b54      	ldr	r3, [pc, #336]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x348>)
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d02a      	beq.n	8007a24 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079ce:	4b51      	ldr	r3, [pc, #324]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x348>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	099b      	lsrs	r3, r3, #6
 80079d4:	2200      	movs	r2, #0
 80079d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80079d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80079e0:	2100      	movs	r1, #0
 80079e2:	4b4e      	ldr	r3, [pc, #312]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x350>)
 80079e4:	fb03 f201 	mul.w	r2, r3, r1
 80079e8:	2300      	movs	r3, #0
 80079ea:	fb00 f303 	mul.w	r3, r0, r3
 80079ee:	4413      	add	r3, r2
 80079f0:	4a4a      	ldr	r2, [pc, #296]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x350>)
 80079f2:	fba0 1202 	umull	r1, r2, r0, r2
 80079f6:	677a      	str	r2, [r7, #116]	; 0x74
 80079f8:	460a      	mov	r2, r1
 80079fa:	673a      	str	r2, [r7, #112]	; 0x70
 80079fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80079fe:	4413      	add	r3, r2
 8007a00:	677b      	str	r3, [r7, #116]	; 0x74
 8007a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a06:	2200      	movs	r2, #0
 8007a08:	633b      	str	r3, [r7, #48]	; 0x30
 8007a0a:	637a      	str	r2, [r7, #52]	; 0x34
 8007a0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a10:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007a14:	f7f9 f958 	bl	8000cc8 <__aeabi_uldivmod>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a22:	e05b      	b.n	8007adc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a24:	4b3b      	ldr	r3, [pc, #236]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x348>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	099b      	lsrs	r3, r3, #6
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a36:	623b      	str	r3, [r7, #32]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a40:	4642      	mov	r2, r8
 8007a42:	464b      	mov	r3, r9
 8007a44:	f04f 0000 	mov.w	r0, #0
 8007a48:	f04f 0100 	mov.w	r1, #0
 8007a4c:	0159      	lsls	r1, r3, #5
 8007a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a52:	0150      	lsls	r0, r2, #5
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4641      	mov	r1, r8
 8007a5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a5e:	4649      	mov	r1, r9
 8007a60:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007a70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007a74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007a78:	ebb2 040a 	subs.w	r4, r2, sl
 8007a7c:	eb63 050b 	sbc.w	r5, r3, fp
 8007a80:	f04f 0200 	mov.w	r2, #0
 8007a84:	f04f 0300 	mov.w	r3, #0
 8007a88:	00eb      	lsls	r3, r5, #3
 8007a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a8e:	00e2      	lsls	r2, r4, #3
 8007a90:	4614      	mov	r4, r2
 8007a92:	461d      	mov	r5, r3
 8007a94:	4643      	mov	r3, r8
 8007a96:	18e3      	adds	r3, r4, r3
 8007a98:	603b      	str	r3, [r7, #0]
 8007a9a:	464b      	mov	r3, r9
 8007a9c:	eb45 0303 	adc.w	r3, r5, r3
 8007aa0:	607b      	str	r3, [r7, #4]
 8007aa2:	f04f 0200 	mov.w	r2, #0
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007aae:	4629      	mov	r1, r5
 8007ab0:	028b      	lsls	r3, r1, #10
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ab8:	4621      	mov	r1, r4
 8007aba:	028a      	lsls	r2, r1, #10
 8007abc:	4610      	mov	r0, r2
 8007abe:	4619      	mov	r1, r3
 8007ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	61bb      	str	r3, [r7, #24]
 8007ac8:	61fa      	str	r2, [r7, #28]
 8007aca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ace:	f7f9 f8fb 	bl	8000cc8 <__aeabi_uldivmod>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007adc:	4b0d      	ldr	r3, [pc, #52]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x348>)
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	0f1b      	lsrs	r3, r3, #28
 8007ae2:	f003 0307 	and.w	r3, r3, #7
 8007ae6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8007aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007afa:	e003      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007afc:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <HAL_RCC_GetSysClockFreq+0x34c>)
 8007afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007b02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3798      	adds	r7, #152	; 0x98
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b12:	bf00      	nop
 8007b14:	40023800 	.word	0x40023800
 8007b18:	00f42400 	.word	0x00f42400
 8007b1c:	017d7840 	.word	0x017d7840

08007b20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e28d      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 8083 	beq.w	8007c46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007b40:	4b94      	ldr	r3, [pc, #592]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f003 030c 	and.w	r3, r3, #12
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d019      	beq.n	8007b80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007b4c:	4b91      	ldr	r3, [pc, #580]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d106      	bne.n	8007b66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007b58:	4b8e      	ldr	r3, [pc, #568]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b64:	d00c      	beq.n	8007b80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b66:	4b8b      	ldr	r3, [pc, #556]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007b6e:	2b0c      	cmp	r3, #12
 8007b70:	d112      	bne.n	8007b98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b72:	4b88      	ldr	r3, [pc, #544]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b7e:	d10b      	bne.n	8007b98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b80:	4b84      	ldr	r3, [pc, #528]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d05b      	beq.n	8007c44 <HAL_RCC_OscConfig+0x124>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d157      	bne.n	8007c44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e25a      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba0:	d106      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x90>
 8007ba2:	4b7c      	ldr	r3, [pc, #496]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a7b      	ldr	r2, [pc, #492]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bac:	6013      	str	r3, [r2, #0]
 8007bae:	e01d      	b.n	8007bec <HAL_RCC_OscConfig+0xcc>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bb8:	d10c      	bne.n	8007bd4 <HAL_RCC_OscConfig+0xb4>
 8007bba:	4b76      	ldr	r3, [pc, #472]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a75      	ldr	r2, [pc, #468]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	4b73      	ldr	r3, [pc, #460]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a72      	ldr	r2, [pc, #456]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	e00b      	b.n	8007bec <HAL_RCC_OscConfig+0xcc>
 8007bd4:	4b6f      	ldr	r3, [pc, #444]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a6e      	ldr	r2, [pc, #440]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	4b6c      	ldr	r3, [pc, #432]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a6b      	ldr	r2, [pc, #428]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d013      	beq.n	8007c1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf4:	f7fa fce0 	bl	80025b8 <HAL_GetTick>
 8007bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007bfc:	f7fa fcdc 	bl	80025b8 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b64      	cmp	r3, #100	; 0x64
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e21f      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c0e:	4b61      	ldr	r3, [pc, #388]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0f0      	beq.n	8007bfc <HAL_RCC_OscConfig+0xdc>
 8007c1a:	e014      	b.n	8007c46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1c:	f7fa fccc 	bl	80025b8 <HAL_GetTick>
 8007c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c22:	e008      	b.n	8007c36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c24:	f7fa fcc8 	bl	80025b8 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	2b64      	cmp	r3, #100	; 0x64
 8007c30:	d901      	bls.n	8007c36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e20b      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c36:	4b57      	ldr	r3, [pc, #348]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1f0      	bne.n	8007c24 <HAL_RCC_OscConfig+0x104>
 8007c42:	e000      	b.n	8007c46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d06f      	beq.n	8007d32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007c52:	4b50      	ldr	r3, [pc, #320]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 030c 	and.w	r3, r3, #12
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d017      	beq.n	8007c8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007c5e:	4b4d      	ldr	r3, [pc, #308]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007c66:	2b08      	cmp	r3, #8
 8007c68:	d105      	bne.n	8007c76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007c6a:	4b4a      	ldr	r3, [pc, #296]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c76:	4b47      	ldr	r3, [pc, #284]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007c7e:	2b0c      	cmp	r3, #12
 8007c80:	d11c      	bne.n	8007cbc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c82:	4b44      	ldr	r3, [pc, #272]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d116      	bne.n	8007cbc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c8e:	4b41      	ldr	r3, [pc, #260]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x186>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d001      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e1d3      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ca6:	4b3b      	ldr	r3, [pc, #236]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	4937      	ldr	r1, [pc, #220]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cba:	e03a      	b.n	8007d32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d020      	beq.n	8007d06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cc4:	4b34      	ldr	r3, [pc, #208]	; (8007d98 <HAL_RCC_OscConfig+0x278>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cca:	f7fa fc75 	bl	80025b8 <HAL_GetTick>
 8007cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cd0:	e008      	b.n	8007ce4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cd2:	f7fa fc71 	bl	80025b8 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d901      	bls.n	8007ce4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e1b4      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ce4:	4b2b      	ldr	r3, [pc, #172]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0f0      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cf0:	4b28      	ldr	r3, [pc, #160]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	00db      	lsls	r3, r3, #3
 8007cfe:	4925      	ldr	r1, [pc, #148]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	600b      	str	r3, [r1, #0]
 8007d04:	e015      	b.n	8007d32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d06:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <HAL_RCC_OscConfig+0x278>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0c:	f7fa fc54 	bl	80025b8 <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d12:	e008      	b.n	8007d26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d14:	f7fa fc50 	bl	80025b8 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e193      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d26:	4b1b      	ldr	r3, [pc, #108]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1f0      	bne.n	8007d14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d036      	beq.n	8007dac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d016      	beq.n	8007d74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d46:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <HAL_RCC_OscConfig+0x27c>)
 8007d48:	2201      	movs	r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d4c:	f7fa fc34 	bl	80025b8 <HAL_GetTick>
 8007d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d54:	f7fa fc30 	bl	80025b8 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e173      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d66:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <HAL_RCC_OscConfig+0x274>)
 8007d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0f0      	beq.n	8007d54 <HAL_RCC_OscConfig+0x234>
 8007d72:	e01b      	b.n	8007dac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d74:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <HAL_RCC_OscConfig+0x27c>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d7a:	f7fa fc1d 	bl	80025b8 <HAL_GetTick>
 8007d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d80:	e00e      	b.n	8007da0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d82:	f7fa fc19 	bl	80025b8 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d907      	bls.n	8007da0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e15c      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
 8007d94:	40023800 	.word	0x40023800
 8007d98:	42470000 	.word	0x42470000
 8007d9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007da0:	4b8a      	ldr	r3, [pc, #552]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1ea      	bne.n	8007d82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0304 	and.w	r3, r3, #4
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8097 	beq.w	8007ee8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dbe:	4b83      	ldr	r3, [pc, #524]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10f      	bne.n	8007dea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60bb      	str	r3, [r7, #8]
 8007dce:	4b7f      	ldr	r3, [pc, #508]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	4a7e      	ldr	r2, [pc, #504]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8007dda:	4b7c      	ldr	r3, [pc, #496]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007de2:	60bb      	str	r3, [r7, #8]
 8007de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007de6:	2301      	movs	r3, #1
 8007de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dea:	4b79      	ldr	r3, [pc, #484]	; (8007fd0 <HAL_RCC_OscConfig+0x4b0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d118      	bne.n	8007e28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007df6:	4b76      	ldr	r3, [pc, #472]	; (8007fd0 <HAL_RCC_OscConfig+0x4b0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a75      	ldr	r2, [pc, #468]	; (8007fd0 <HAL_RCC_OscConfig+0x4b0>)
 8007dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e02:	f7fa fbd9 	bl	80025b8 <HAL_GetTick>
 8007e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e08:	e008      	b.n	8007e1c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e0a:	f7fa fbd5 	bl	80025b8 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d901      	bls.n	8007e1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e118      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e1c:	4b6c      	ldr	r3, [pc, #432]	; (8007fd0 <HAL_RCC_OscConfig+0x4b0>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d0f0      	beq.n	8007e0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d106      	bne.n	8007e3e <HAL_RCC_OscConfig+0x31e>
 8007e30:	4b66      	ldr	r3, [pc, #408]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e34:	4a65      	ldr	r2, [pc, #404]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e3c:	e01c      	b.n	8007e78 <HAL_RCC_OscConfig+0x358>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	2b05      	cmp	r3, #5
 8007e44:	d10c      	bne.n	8007e60 <HAL_RCC_OscConfig+0x340>
 8007e46:	4b61      	ldr	r3, [pc, #388]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4a:	4a60      	ldr	r2, [pc, #384]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007e4c:	f043 0304 	orr.w	r3, r3, #4
 8007e50:	6713      	str	r3, [r2, #112]	; 0x70
 8007e52:	4b5e      	ldr	r3, [pc, #376]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e56:	4a5d      	ldr	r2, [pc, #372]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007e58:	f043 0301 	orr.w	r3, r3, #1
 8007e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8007e5e:	e00b      	b.n	8007e78 <HAL_RCC_OscConfig+0x358>
 8007e60:	4b5a      	ldr	r3, [pc, #360]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e64:	4a59      	ldr	r2, [pc, #356]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007e66:	f023 0301 	bic.w	r3, r3, #1
 8007e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e6c:	4b57      	ldr	r3, [pc, #348]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e70:	4a56      	ldr	r2, [pc, #344]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007e72:	f023 0304 	bic.w	r3, r3, #4
 8007e76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d015      	beq.n	8007eac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e80:	f7fa fb9a 	bl	80025b8 <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e86:	e00a      	b.n	8007e9e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e88:	f7fa fb96 	bl	80025b8 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e0d7      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e9e:	4b4b      	ldr	r3, [pc, #300]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0ee      	beq.n	8007e88 <HAL_RCC_OscConfig+0x368>
 8007eaa:	e014      	b.n	8007ed6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eac:	f7fa fb84 	bl	80025b8 <HAL_GetTick>
 8007eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eb2:	e00a      	b.n	8007eca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007eb4:	f7fa fb80 	bl	80025b8 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e0c1      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eca:	4b40      	ldr	r3, [pc, #256]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1ee      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ed6:	7dfb      	ldrb	r3, [r7, #23]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d105      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007edc:	4b3b      	ldr	r3, [pc, #236]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	4a3a      	ldr	r2, [pc, #232]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ee6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 80ad 	beq.w	800804c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ef2:	4b36      	ldr	r3, [pc, #216]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f003 030c 	and.w	r3, r3, #12
 8007efa:	2b08      	cmp	r3, #8
 8007efc:	d060      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d145      	bne.n	8007f92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f06:	4b33      	ldr	r3, [pc, #204]	; (8007fd4 <HAL_RCC_OscConfig+0x4b4>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0c:	f7fa fb54 	bl	80025b8 <HAL_GetTick>
 8007f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f12:	e008      	b.n	8007f26 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f14:	f7fa fb50 	bl	80025b8 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e093      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f26:	4b29      	ldr	r3, [pc, #164]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f0      	bne.n	8007f14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	69da      	ldr	r2, [r3, #28]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f40:	019b      	lsls	r3, r3, #6
 8007f42:	431a      	orrs	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	085b      	lsrs	r3, r3, #1
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	041b      	lsls	r3, r3, #16
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f54:	061b      	lsls	r3, r3, #24
 8007f56:	431a      	orrs	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5c:	071b      	lsls	r3, r3, #28
 8007f5e:	491b      	ldr	r1, [pc, #108]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f64:	4b1b      	ldr	r3, [pc, #108]	; (8007fd4 <HAL_RCC_OscConfig+0x4b4>)
 8007f66:	2201      	movs	r2, #1
 8007f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f6a:	f7fa fb25 	bl	80025b8 <HAL_GetTick>
 8007f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f70:	e008      	b.n	8007f84 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f72:	f7fa fb21 	bl	80025b8 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d901      	bls.n	8007f84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e064      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f84:	4b11      	ldr	r3, [pc, #68]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d0f0      	beq.n	8007f72 <HAL_RCC_OscConfig+0x452>
 8007f90:	e05c      	b.n	800804c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f92:	4b10      	ldr	r3, [pc, #64]	; (8007fd4 <HAL_RCC_OscConfig+0x4b4>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f98:	f7fa fb0e 	bl	80025b8 <HAL_GetTick>
 8007f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f9e:	e008      	b.n	8007fb2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fa0:	f7fa fb0a 	bl	80025b8 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d901      	bls.n	8007fb2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e04d      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fb2:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <HAL_RCC_OscConfig+0x4ac>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1f0      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x480>
 8007fbe:	e045      	b.n	800804c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d107      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e040      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
 8007fcc:	40023800 	.word	0x40023800
 8007fd0:	40007000 	.word	0x40007000
 8007fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007fd8:	4b1f      	ldr	r3, [pc, #124]	; (8008058 <HAL_RCC_OscConfig+0x538>)
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d030      	beq.n	8008048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d129      	bne.n	8008048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d122      	bne.n	8008048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008008:	4013      	ands	r3, r2
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800800e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008010:	4293      	cmp	r3, r2
 8008012:	d119      	bne.n	8008048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801e:	085b      	lsrs	r3, r3, #1
 8008020:	3b01      	subs	r3, #1
 8008022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008024:	429a      	cmp	r2, r3
 8008026:	d10f      	bne.n	8008048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008034:	429a      	cmp	r2, r3
 8008036:	d107      	bne.n	8008048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008042:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008044:	429a      	cmp	r2, r3
 8008046:	d001      	beq.n	800804c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	40023800 	.word	0x40023800

0800805c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e07b      	b.n	8008166 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	2b00      	cmp	r3, #0
 8008074:	d108      	bne.n	8008088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800807e:	d009      	beq.n	8008094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	61da      	str	r2, [r3, #28]
 8008086:	e005      	b.n	8008094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7f9 ffbe 	bl	8002030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008118:	ea42 0103 	orr.w	r1, r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008120:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	0c1b      	lsrs	r3, r3, #16
 8008132:	f003 0104 	and.w	r1, r3, #4
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	f003 0210 	and.w	r2, r3, #16
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	69da      	ldr	r2, [r3, #28]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b088      	sub	sp, #32
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	603b      	str	r3, [r7, #0]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_SPI_Transmit+0x22>
 800818c:	2302      	movs	r3, #2
 800818e:	e126      	b.n	80083de <HAL_SPI_Transmit+0x270>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008198:	f7fa fa0e 	bl	80025b8 <HAL_GetTick>
 800819c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800819e:	88fb      	ldrh	r3, [r7, #6]
 80081a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d002      	beq.n	80081b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80081ae:	2302      	movs	r3, #2
 80081b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081b2:	e10b      	b.n	80083cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <HAL_SPI_Transmit+0x52>
 80081ba:	88fb      	ldrh	r3, [r7, #6]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d102      	bne.n	80081c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081c4:	e102      	b.n	80083cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2203      	movs	r2, #3
 80081ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	88fa      	ldrh	r2, [r7, #6]
 80081de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	88fa      	ldrh	r2, [r7, #6]
 80081e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820c:	d10f      	bne.n	800822e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800821c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800822c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008238:	2b40      	cmp	r3, #64	; 0x40
 800823a:	d007      	beq.n	800824c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800824a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008254:	d14b      	bne.n	80082ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <HAL_SPI_Transmit+0xf6>
 800825e:	8afb      	ldrh	r3, [r7, #22]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d13e      	bne.n	80082e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008268:	881a      	ldrh	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008274:	1c9a      	adds	r2, r3, #2
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800827e:	b29b      	uxth	r3, r3
 8008280:	3b01      	subs	r3, #1
 8008282:	b29a      	uxth	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008288:	e02b      	b.n	80082e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b02      	cmp	r3, #2
 8008296:	d112      	bne.n	80082be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829c:	881a      	ldrh	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a8:	1c9a      	adds	r2, r3, #2
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	3b01      	subs	r3, #1
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80082bc:	e011      	b.n	80082e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082be:	f7fa f97b 	bl	80025b8 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d803      	bhi.n	80082d6 <HAL_SPI_Transmit+0x168>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d4:	d102      	bne.n	80082dc <HAL_SPI_Transmit+0x16e>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d102      	bne.n	80082e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082e0:	e074      	b.n	80083cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1ce      	bne.n	800828a <HAL_SPI_Transmit+0x11c>
 80082ec:	e04c      	b.n	8008388 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <HAL_SPI_Transmit+0x18e>
 80082f6:	8afb      	ldrh	r3, [r7, #22]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d140      	bne.n	800837e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	330c      	adds	r3, #12
 8008306:	7812      	ldrb	r2, [r2, #0]
 8008308:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008318:	b29b      	uxth	r3, r3
 800831a:	3b01      	subs	r3, #1
 800831c:	b29a      	uxth	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008322:	e02c      	b.n	800837e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b02      	cmp	r3, #2
 8008330:	d113      	bne.n	800835a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	330c      	adds	r3, #12
 800833c:	7812      	ldrb	r2, [r2, #0]
 800833e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800834e:	b29b      	uxth	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	86da      	strh	r2, [r3, #54]	; 0x36
 8008358:	e011      	b.n	800837e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800835a:	f7fa f92d 	bl	80025b8 <HAL_GetTick>
 800835e:	4602      	mov	r2, r0
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d803      	bhi.n	8008372 <HAL_SPI_Transmit+0x204>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008370:	d102      	bne.n	8008378 <HAL_SPI_Transmit+0x20a>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d102      	bne.n	800837e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800837c:	e026      	b.n	80083cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008382:	b29b      	uxth	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1cd      	bne.n	8008324 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 fbd9 	bl	8008b44 <SPI_EndRxTxTransaction>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2220      	movs	r2, #32
 800839c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083a6:	2300      	movs	r3, #0
 80083a8:	613b      	str	r3, [r7, #16]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	613b      	str	r3, [r7, #16]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	613b      	str	r3, [r7, #16]
 80083ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	77fb      	strb	r3, [r7, #31]
 80083c8:	e000      	b.n	80083cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80083ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3720      	adds	r7, #32
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b088      	sub	sp, #32
 80083ea:	af02      	add	r7, sp, #8
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	60b9      	str	r1, [r7, #8]
 80083f0:	603b      	str	r3, [r7, #0]
 80083f2:	4613      	mov	r3, r2
 80083f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008402:	d112      	bne.n	800842a <HAL_SPI_Receive+0x44>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10e      	bne.n	800842a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2204      	movs	r2, #4
 8008410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008414:	88fa      	ldrh	r2, [r7, #6]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	4613      	mov	r3, r2
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	68b9      	ldr	r1, [r7, #8]
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 f8f1 	bl	8008608 <HAL_SPI_TransmitReceive>
 8008426:	4603      	mov	r3, r0
 8008428:	e0ea      	b.n	8008600 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_SPI_Receive+0x52>
 8008434:	2302      	movs	r3, #2
 8008436:	e0e3      	b.n	8008600 <HAL_SPI_Receive+0x21a>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008440:	f7fa f8ba 	bl	80025b8 <HAL_GetTick>
 8008444:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b01      	cmp	r3, #1
 8008450:	d002      	beq.n	8008458 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008452:	2302      	movs	r3, #2
 8008454:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008456:	e0ca      	b.n	80085ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <HAL_SPI_Receive+0x7e>
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d102      	bne.n	800846a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008468:	e0c1      	b.n	80085ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2204      	movs	r2, #4
 800846e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	88fa      	ldrh	r2, [r7, #6]
 8008488:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b0:	d10f      	bne.n	80084d2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80084d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084dc:	2b40      	cmp	r3, #64	; 0x40
 80084de:	d007      	beq.n	80084f0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d162      	bne.n	80085be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80084f8:	e02e      	b.n	8008558 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b01      	cmp	r3, #1
 8008506:	d115      	bne.n	8008534 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f103 020c 	add.w	r2, r3, #12
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	7812      	ldrb	r2, [r2, #0]
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008528:	b29b      	uxth	r3, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008532:	e011      	b.n	8008558 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008534:	f7fa f840 	bl	80025b8 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d803      	bhi.n	800854c <HAL_SPI_Receive+0x166>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854a:	d102      	bne.n	8008552 <HAL_SPI_Receive+0x16c>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d102      	bne.n	8008558 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008556:	e04a      	b.n	80085ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1cb      	bne.n	80084fa <HAL_SPI_Receive+0x114>
 8008562:	e031      	b.n	80085c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b01      	cmp	r3, #1
 8008570:	d113      	bne.n	800859a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	b292      	uxth	r2, r2
 800857e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008584:	1c9a      	adds	r2, r3, #2
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008598:	e011      	b.n	80085be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800859a:	f7fa f80d 	bl	80025b8 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d803      	bhi.n	80085b2 <HAL_SPI_Receive+0x1cc>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b0:	d102      	bne.n	80085b8 <HAL_SPI_Receive+0x1d2>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d102      	bne.n	80085be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80085bc:	e017      	b.n	80085ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1cd      	bne.n	8008564 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 fa53 	bl	8008a78 <SPI_EndRxTransaction>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2220      	movs	r2, #32
 80085dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	75fb      	strb	r3, [r7, #23]
 80085ea:	e000      	b.n	80085ee <HAL_SPI_Receive+0x208>
  }

error :
 80085ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08c      	sub	sp, #48	; 0x30
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008616:	2301      	movs	r3, #1
 8008618:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008626:	2b01      	cmp	r3, #1
 8008628:	d101      	bne.n	800862e <HAL_SPI_TransmitReceive+0x26>
 800862a:	2302      	movs	r3, #2
 800862c:	e18a      	b.n	8008944 <HAL_SPI_TransmitReceive+0x33c>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008636:	f7f9 ffbf 	bl	80025b8 <HAL_GetTick>
 800863a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800864c:	887b      	ldrh	r3, [r7, #2]
 800864e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008654:	2b01      	cmp	r3, #1
 8008656:	d00f      	beq.n	8008678 <HAL_SPI_TransmitReceive+0x70>
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800865e:	d107      	bne.n	8008670 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d103      	bne.n	8008670 <HAL_SPI_TransmitReceive+0x68>
 8008668:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800866c:	2b04      	cmp	r3, #4
 800866e:	d003      	beq.n	8008678 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008670:	2302      	movs	r3, #2
 8008672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008676:	e15b      	b.n	8008930 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <HAL_SPI_TransmitReceive+0x82>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <HAL_SPI_TransmitReceive+0x82>
 8008684:	887b      	ldrh	r3, [r7, #2]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d103      	bne.n	8008692 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008690:	e14e      	b.n	8008930 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b04      	cmp	r3, #4
 800869c:	d003      	beq.n	80086a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2205      	movs	r2, #5
 80086a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	887a      	ldrh	r2, [r7, #2]
 80086b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	887a      	ldrh	r2, [r7, #2]
 80086bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	887a      	ldrh	r2, [r7, #2]
 80086c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	887a      	ldrh	r2, [r7, #2]
 80086ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e6:	2b40      	cmp	r3, #64	; 0x40
 80086e8:	d007      	beq.n	80086fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008702:	d178      	bne.n	80087f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <HAL_SPI_TransmitReceive+0x10a>
 800870c:	8b7b      	ldrh	r3, [r7, #26]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d166      	bne.n	80087e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008716:	881a      	ldrh	r2, [r3, #0]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	1c9a      	adds	r2, r3, #2
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800872c:	b29b      	uxth	r3, r3
 800872e:	3b01      	subs	r3, #1
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008736:	e053      	b.n	80087e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b02      	cmp	r3, #2
 8008744:	d11b      	bne.n	800877e <HAL_SPI_TransmitReceive+0x176>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d016      	beq.n	800877e <HAL_SPI_TransmitReceive+0x176>
 8008750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008752:	2b01      	cmp	r3, #1
 8008754:	d113      	bne.n	800877e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875a:	881a      	ldrh	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008766:	1c9a      	adds	r2, r3, #2
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008770:	b29b      	uxth	r3, r3
 8008772:	3b01      	subs	r3, #1
 8008774:	b29a      	uxth	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800877a:	2300      	movs	r3, #0
 800877c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b01      	cmp	r3, #1
 800878a:	d119      	bne.n	80087c0 <HAL_SPI_TransmitReceive+0x1b8>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d014      	beq.n	80087c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68da      	ldr	r2, [r3, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a0:	b292      	uxth	r2, r2
 80087a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	1c9a      	adds	r2, r3, #2
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	3b01      	subs	r3, #1
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087bc:	2301      	movs	r3, #1
 80087be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80087c0:	f7f9 fefa 	bl	80025b8 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d807      	bhi.n	80087e0 <HAL_SPI_TransmitReceive+0x1d8>
 80087d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d6:	d003      	beq.n	80087e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80087de:	e0a7      	b.n	8008930 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1a6      	bne.n	8008738 <HAL_SPI_TransmitReceive+0x130>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1a1      	bne.n	8008738 <HAL_SPI_TransmitReceive+0x130>
 80087f4:	e07c      	b.n	80088f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d002      	beq.n	8008804 <HAL_SPI_TransmitReceive+0x1fc>
 80087fe:	8b7b      	ldrh	r3, [r7, #26]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d16b      	bne.n	80088dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	330c      	adds	r3, #12
 800880e:	7812      	ldrb	r2, [r2, #0]
 8008810:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008820:	b29b      	uxth	r3, r3
 8008822:	3b01      	subs	r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800882a:	e057      	b.n	80088dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b02      	cmp	r3, #2
 8008838:	d11c      	bne.n	8008874 <HAL_SPI_TransmitReceive+0x26c>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800883e:	b29b      	uxth	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d017      	beq.n	8008874 <HAL_SPI_TransmitReceive+0x26c>
 8008844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008846:	2b01      	cmp	r3, #1
 8008848:	d114      	bne.n	8008874 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	330c      	adds	r3, #12
 8008854:	7812      	ldrb	r2, [r2, #0]
 8008856:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008866:	b29b      	uxth	r3, r3
 8008868:	3b01      	subs	r3, #1
 800886a:	b29a      	uxth	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008870:	2300      	movs	r3, #0
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	2b01      	cmp	r3, #1
 8008880:	d119      	bne.n	80088b6 <HAL_SPI_TransmitReceive+0x2ae>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008886:	b29b      	uxth	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d014      	beq.n	80088b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68da      	ldr	r2, [r3, #12]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008896:	b2d2      	uxtb	r2, r2
 8008898:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	3b01      	subs	r3, #1
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088b2:	2301      	movs	r3, #1
 80088b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80088b6:	f7f9 fe7f 	bl	80025b8 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d803      	bhi.n	80088ce <HAL_SPI_TransmitReceive+0x2c6>
 80088c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d102      	bne.n	80088d4 <HAL_SPI_TransmitReceive+0x2cc>
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d103      	bne.n	80088dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80088da:	e029      	b.n	8008930 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1a2      	bne.n	800882c <HAL_SPI_TransmitReceive+0x224>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d19d      	bne.n	800882c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 f925 	bl	8008b44 <SPI_EndRxTxTransaction>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d006      	beq.n	800890e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2220      	movs	r2, #32
 800890a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800890c:	e010      	b.n	8008930 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10b      	bne.n	800892e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	617b      	str	r3, [r7, #20]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	e000      	b.n	8008930 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800892e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008940:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008944:	4618      	mov	r0, r3
 8008946:	3730      	adds	r7, #48	; 0x30
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800895a:	b2db      	uxtb	r3, r3
}
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b088      	sub	sp, #32
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	4613      	mov	r3, r2
 8008976:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008978:	f7f9 fe1e 	bl	80025b8 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008980:	1a9b      	subs	r3, r3, r2
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	4413      	add	r3, r2
 8008986:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008988:	f7f9 fe16 	bl	80025b8 <HAL_GetTick>
 800898c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800898e:	4b39      	ldr	r3, [pc, #228]	; (8008a74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	015b      	lsls	r3, r3, #5
 8008994:	0d1b      	lsrs	r3, r3, #20
 8008996:	69fa      	ldr	r2, [r7, #28]
 8008998:	fb02 f303 	mul.w	r3, r2, r3
 800899c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800899e:	e054      	b.n	8008a4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a6:	d050      	beq.n	8008a4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089a8:	f7f9 fe06 	bl	80025b8 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d902      	bls.n	80089be <SPI_WaitFlagStateUntilTimeout+0x56>
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d13d      	bne.n	8008a3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089d6:	d111      	bne.n	80089fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089e0:	d004      	beq.n	80089ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ea:	d107      	bne.n	80089fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a04:	d10f      	bne.n	8008a26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e017      	b.n	8008a6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008a40:	2300      	movs	r3, #0
 8008a42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	4013      	ands	r3, r2
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	bf0c      	ite	eq
 8008a5a:	2301      	moveq	r3, #1
 8008a5c:	2300      	movne	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	79fb      	ldrb	r3, [r7, #7]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d19b      	bne.n	80089a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3720      	adds	r7, #32
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000000 	.word	0x20000000

08008a78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af02      	add	r7, sp, #8
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a8c:	d111      	bne.n	8008ab2 <SPI_EndRxTransaction+0x3a>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a96:	d004      	beq.n	8008aa2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aa0:	d107      	bne.n	8008ab2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ab0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aba:	d12a      	bne.n	8008b12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ac4:	d012      	beq.n	8008aec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2200      	movs	r2, #0
 8008ace:	2180      	movs	r1, #128	; 0x80
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7ff ff49 	bl	8008968 <SPI_WaitFlagStateUntilTimeout>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d02d      	beq.n	8008b38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae0:	f043 0220 	orr.w	r2, r3, #32
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e026      	b.n	8008b3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2200      	movs	r2, #0
 8008af4:	2101      	movs	r1, #1
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7ff ff36 	bl	8008968 <SPI_WaitFlagStateUntilTimeout>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d01a      	beq.n	8008b38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b06:	f043 0220 	orr.w	r2, r3, #32
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e013      	b.n	8008b3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f7ff ff23 	bl	8008968 <SPI_WaitFlagStateUntilTimeout>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d007      	beq.n	8008b38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b2c:	f043 0220 	orr.w	r2, r3, #32
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e000      	b.n	8008b3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b50:	4b1b      	ldr	r3, [pc, #108]	; (8008bc0 <SPI_EndRxTxTransaction+0x7c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a1b      	ldr	r2, [pc, #108]	; (8008bc4 <SPI_EndRxTxTransaction+0x80>)
 8008b56:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5a:	0d5b      	lsrs	r3, r3, #21
 8008b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b60:	fb02 f303 	mul.w	r3, r2, r3
 8008b64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b6e:	d112      	bne.n	8008b96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2200      	movs	r2, #0
 8008b78:	2180      	movs	r1, #128	; 0x80
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f7ff fef4 	bl	8008968 <SPI_WaitFlagStateUntilTimeout>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d016      	beq.n	8008bb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8a:	f043 0220 	orr.w	r2, r3, #32
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e00f      	b.n	8008bb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bac:	2b80      	cmp	r3, #128	; 0x80
 8008bae:	d0f2      	beq.n	8008b96 <SPI_EndRxTxTransaction+0x52>
 8008bb0:	e000      	b.n	8008bb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8008bb2:	bf00      	nop
  }

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20000000 	.word	0x20000000
 8008bc4:	165e9f81 	.word	0x165e9f81

08008bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e041      	b.n	8008c5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7f9 fa96 	bl	8002120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f000 f984 	bl	8008f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d001      	beq.n	8008c80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e046      	b.n	8008d0e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a23      	ldr	r2, [pc, #140]	; (8008d1c <HAL_TIM_Base_Start+0xb4>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d022      	beq.n	8008cd8 <HAL_TIM_Base_Start+0x70>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9a:	d01d      	beq.n	8008cd8 <HAL_TIM_Base_Start+0x70>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a1f      	ldr	r2, [pc, #124]	; (8008d20 <HAL_TIM_Base_Start+0xb8>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d018      	beq.n	8008cd8 <HAL_TIM_Base_Start+0x70>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a1e      	ldr	r2, [pc, #120]	; (8008d24 <HAL_TIM_Base_Start+0xbc>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d013      	beq.n	8008cd8 <HAL_TIM_Base_Start+0x70>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a1c      	ldr	r2, [pc, #112]	; (8008d28 <HAL_TIM_Base_Start+0xc0>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00e      	beq.n	8008cd8 <HAL_TIM_Base_Start+0x70>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a1b      	ldr	r2, [pc, #108]	; (8008d2c <HAL_TIM_Base_Start+0xc4>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d009      	beq.n	8008cd8 <HAL_TIM_Base_Start+0x70>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a19      	ldr	r2, [pc, #100]	; (8008d30 <HAL_TIM_Base_Start+0xc8>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d004      	beq.n	8008cd8 <HAL_TIM_Base_Start+0x70>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a18      	ldr	r2, [pc, #96]	; (8008d34 <HAL_TIM_Base_Start+0xcc>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d111      	bne.n	8008cfc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b06      	cmp	r3, #6
 8008ce8:	d010      	beq.n	8008d0c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f042 0201 	orr.w	r2, r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cfa:	e007      	b.n	8008d0c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f042 0201 	orr.w	r2, r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	40010000 	.word	0x40010000
 8008d20:	40000400 	.word	0x40000400
 8008d24:	40000800 	.word	0x40000800
 8008d28:	40000c00 	.word	0x40000c00
 8008d2c:	40010400 	.word	0x40010400
 8008d30:	40014000 	.word	0x40014000
 8008d34:	40001800 	.word	0x40001800

08008d38 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6a1a      	ldr	r2, [r3, #32]
 8008d46:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10f      	bne.n	8008d70 <HAL_TIM_Base_Stop+0x38>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6a1a      	ldr	r2, [r3, #32]
 8008d56:	f240 4344 	movw	r3, #1092	; 0x444
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d107      	bne.n	8008d70 <HAL_TIM_Base_Stop+0x38>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0201 	bic.w	r2, r2, #1
 8008d6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d101      	bne.n	8008da2 <HAL_TIM_ConfigClockSource+0x1c>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e0b4      	b.n	8008f0c <HAL_TIM_ConfigClockSource+0x186>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2202      	movs	r2, #2
 8008dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008dc0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dc8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dda:	d03e      	beq.n	8008e5a <HAL_TIM_ConfigClockSource+0xd4>
 8008ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de0:	f200 8087 	bhi.w	8008ef2 <HAL_TIM_ConfigClockSource+0x16c>
 8008de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de8:	f000 8086 	beq.w	8008ef8 <HAL_TIM_ConfigClockSource+0x172>
 8008dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df0:	d87f      	bhi.n	8008ef2 <HAL_TIM_ConfigClockSource+0x16c>
 8008df2:	2b70      	cmp	r3, #112	; 0x70
 8008df4:	d01a      	beq.n	8008e2c <HAL_TIM_ConfigClockSource+0xa6>
 8008df6:	2b70      	cmp	r3, #112	; 0x70
 8008df8:	d87b      	bhi.n	8008ef2 <HAL_TIM_ConfigClockSource+0x16c>
 8008dfa:	2b60      	cmp	r3, #96	; 0x60
 8008dfc:	d050      	beq.n	8008ea0 <HAL_TIM_ConfigClockSource+0x11a>
 8008dfe:	2b60      	cmp	r3, #96	; 0x60
 8008e00:	d877      	bhi.n	8008ef2 <HAL_TIM_ConfigClockSource+0x16c>
 8008e02:	2b50      	cmp	r3, #80	; 0x50
 8008e04:	d03c      	beq.n	8008e80 <HAL_TIM_ConfigClockSource+0xfa>
 8008e06:	2b50      	cmp	r3, #80	; 0x50
 8008e08:	d873      	bhi.n	8008ef2 <HAL_TIM_ConfigClockSource+0x16c>
 8008e0a:	2b40      	cmp	r3, #64	; 0x40
 8008e0c:	d058      	beq.n	8008ec0 <HAL_TIM_ConfigClockSource+0x13a>
 8008e0e:	2b40      	cmp	r3, #64	; 0x40
 8008e10:	d86f      	bhi.n	8008ef2 <HAL_TIM_ConfigClockSource+0x16c>
 8008e12:	2b30      	cmp	r3, #48	; 0x30
 8008e14:	d064      	beq.n	8008ee0 <HAL_TIM_ConfigClockSource+0x15a>
 8008e16:	2b30      	cmp	r3, #48	; 0x30
 8008e18:	d86b      	bhi.n	8008ef2 <HAL_TIM_ConfigClockSource+0x16c>
 8008e1a:	2b20      	cmp	r3, #32
 8008e1c:	d060      	beq.n	8008ee0 <HAL_TIM_ConfigClockSource+0x15a>
 8008e1e:	2b20      	cmp	r3, #32
 8008e20:	d867      	bhi.n	8008ef2 <HAL_TIM_ConfigClockSource+0x16c>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d05c      	beq.n	8008ee0 <HAL_TIM_ConfigClockSource+0x15a>
 8008e26:	2b10      	cmp	r3, #16
 8008e28:	d05a      	beq.n	8008ee0 <HAL_TIM_ConfigClockSource+0x15a>
 8008e2a:	e062      	b.n	8008ef2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	6899      	ldr	r1, [r3, #8]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f000 f984 	bl	8009148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	609a      	str	r2, [r3, #8]
      break;
 8008e58:	e04f      	b.n	8008efa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	6899      	ldr	r1, [r3, #8]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	f000 f96d 	bl	8009148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689a      	ldr	r2, [r3, #8]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e7c:	609a      	str	r2, [r3, #8]
      break;
 8008e7e:	e03c      	b.n	8008efa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6818      	ldr	r0, [r3, #0]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	6859      	ldr	r1, [r3, #4]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	f000 f8e1 	bl	8009054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2150      	movs	r1, #80	; 0x50
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 f93a 	bl	8009112 <TIM_ITRx_SetConfig>
      break;
 8008e9e:	e02c      	b.n	8008efa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6818      	ldr	r0, [r3, #0]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	6859      	ldr	r1, [r3, #4]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	461a      	mov	r2, r3
 8008eae:	f000 f900 	bl	80090b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2160      	movs	r1, #96	; 0x60
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 f92a 	bl	8009112 <TIM_ITRx_SetConfig>
      break;
 8008ebe:	e01c      	b.n	8008efa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6818      	ldr	r0, [r3, #0]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	6859      	ldr	r1, [r3, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	f000 f8c1 	bl	8009054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2140      	movs	r1, #64	; 0x40
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 f91a 	bl	8009112 <TIM_ITRx_SetConfig>
      break;
 8008ede:	e00c      	b.n	8008efa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f000 f911 	bl	8009112 <TIM_ITRx_SetConfig>
      break;
 8008ef0:	e003      	b.n	8008efa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef6:	e000      	b.n	8008efa <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ef8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a40      	ldr	r2, [pc, #256]	; (8009028 <TIM_Base_SetConfig+0x114>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d013      	beq.n	8008f54 <TIM_Base_SetConfig+0x40>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f32:	d00f      	beq.n	8008f54 <TIM_Base_SetConfig+0x40>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a3d      	ldr	r2, [pc, #244]	; (800902c <TIM_Base_SetConfig+0x118>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00b      	beq.n	8008f54 <TIM_Base_SetConfig+0x40>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a3c      	ldr	r2, [pc, #240]	; (8009030 <TIM_Base_SetConfig+0x11c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d007      	beq.n	8008f54 <TIM_Base_SetConfig+0x40>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a3b      	ldr	r2, [pc, #236]	; (8009034 <TIM_Base_SetConfig+0x120>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_Base_SetConfig+0x40>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a3a      	ldr	r2, [pc, #232]	; (8009038 <TIM_Base_SetConfig+0x124>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d108      	bne.n	8008f66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a2f      	ldr	r2, [pc, #188]	; (8009028 <TIM_Base_SetConfig+0x114>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d02b      	beq.n	8008fc6 <TIM_Base_SetConfig+0xb2>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f74:	d027      	beq.n	8008fc6 <TIM_Base_SetConfig+0xb2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a2c      	ldr	r2, [pc, #176]	; (800902c <TIM_Base_SetConfig+0x118>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d023      	beq.n	8008fc6 <TIM_Base_SetConfig+0xb2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a2b      	ldr	r2, [pc, #172]	; (8009030 <TIM_Base_SetConfig+0x11c>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d01f      	beq.n	8008fc6 <TIM_Base_SetConfig+0xb2>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a2a      	ldr	r2, [pc, #168]	; (8009034 <TIM_Base_SetConfig+0x120>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d01b      	beq.n	8008fc6 <TIM_Base_SetConfig+0xb2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a29      	ldr	r2, [pc, #164]	; (8009038 <TIM_Base_SetConfig+0x124>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d017      	beq.n	8008fc6 <TIM_Base_SetConfig+0xb2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a28      	ldr	r2, [pc, #160]	; (800903c <TIM_Base_SetConfig+0x128>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d013      	beq.n	8008fc6 <TIM_Base_SetConfig+0xb2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a27      	ldr	r2, [pc, #156]	; (8009040 <TIM_Base_SetConfig+0x12c>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00f      	beq.n	8008fc6 <TIM_Base_SetConfig+0xb2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a26      	ldr	r2, [pc, #152]	; (8009044 <TIM_Base_SetConfig+0x130>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d00b      	beq.n	8008fc6 <TIM_Base_SetConfig+0xb2>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a25      	ldr	r2, [pc, #148]	; (8009048 <TIM_Base_SetConfig+0x134>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d007      	beq.n	8008fc6 <TIM_Base_SetConfig+0xb2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a24      	ldr	r2, [pc, #144]	; (800904c <TIM_Base_SetConfig+0x138>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d003      	beq.n	8008fc6 <TIM_Base_SetConfig+0xb2>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a23      	ldr	r2, [pc, #140]	; (8009050 <TIM_Base_SetConfig+0x13c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d108      	bne.n	8008fd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a0a      	ldr	r2, [pc, #40]	; (8009028 <TIM_Base_SetConfig+0x114>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d003      	beq.n	800900c <TIM_Base_SetConfig+0xf8>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a0c      	ldr	r2, [pc, #48]	; (8009038 <TIM_Base_SetConfig+0x124>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d103      	bne.n	8009014 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	691a      	ldr	r2, [r3, #16]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	615a      	str	r2, [r3, #20]
}
 800901a:	bf00      	nop
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	40010000 	.word	0x40010000
 800902c:	40000400 	.word	0x40000400
 8009030:	40000800 	.word	0x40000800
 8009034:	40000c00 	.word	0x40000c00
 8009038:	40010400 	.word	0x40010400
 800903c:	40014000 	.word	0x40014000
 8009040:	40014400 	.word	0x40014400
 8009044:	40014800 	.word	0x40014800
 8009048:	40001800 	.word	0x40001800
 800904c:	40001c00 	.word	0x40001c00
 8009050:	40002000 	.word	0x40002000

08009054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009054:	b480      	push	{r7}
 8009056:	b087      	sub	sp, #28
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	f023 0201 	bic.w	r2, r3, #1
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800907e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	011b      	lsls	r3, r3, #4
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	4313      	orrs	r3, r2
 8009088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f023 030a 	bic.w	r3, r3, #10
 8009090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	4313      	orrs	r3, r2
 8009098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	621a      	str	r2, [r3, #32]
}
 80090a6:	bf00      	nop
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b087      	sub	sp, #28
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	f023 0210 	bic.w	r2, r3, #16
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	031b      	lsls	r3, r3, #12
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	011b      	lsls	r3, r3, #4
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	621a      	str	r2, [r3, #32]
}
 8009106:	bf00      	nop
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009112:	b480      	push	{r7}
 8009114:	b085      	sub	sp, #20
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4313      	orrs	r3, r2
 8009130:	f043 0307 	orr.w	r3, r3, #7
 8009134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	609a      	str	r2, [r3, #8]
}
 800913c:	bf00      	nop
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	021a      	lsls	r2, r3, #8
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	431a      	orrs	r2, r3
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4313      	orrs	r3, r2
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	4313      	orrs	r3, r2
 8009174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	609a      	str	r2, [r3, #8]
}
 800917c:	bf00      	nop
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800919c:	2302      	movs	r3, #2
 800919e:	e05a      	b.n	8009256 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a21      	ldr	r2, [pc, #132]	; (8009264 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d022      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ec:	d01d      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a1d      	ldr	r2, [pc, #116]	; (8009268 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d018      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a1b      	ldr	r2, [pc, #108]	; (800926c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d013      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a1a      	ldr	r2, [pc, #104]	; (8009270 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d00e      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a18      	ldr	r2, [pc, #96]	; (8009274 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d009      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a17      	ldr	r2, [pc, #92]	; (8009278 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d004      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a15      	ldr	r2, [pc, #84]	; (800927c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d10c      	bne.n	8009244 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	4313      	orrs	r3, r2
 800923a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	40010000 	.word	0x40010000
 8009268:	40000400 	.word	0x40000400
 800926c:	40000800 	.word	0x40000800
 8009270:	40000c00 	.word	0x40000c00
 8009274:	40010400 	.word	0x40010400
 8009278:	40014000 	.word	0x40014000
 800927c:	40001800 	.word	0x40001800

08009280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e03f      	b.n	8009312 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d106      	bne.n	80092ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7f8 ff72 	bl	8002190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2224      	movs	r2, #36	; 0x24
 80092b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fe1d 	bl	8009f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	691a      	ldr	r2, [r3, #16]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	695a      	ldr	r2, [r3, #20]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2220      	movs	r2, #32
 800930c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b08a      	sub	sp, #40	; 0x28
 800931e:	af02      	add	r7, sp, #8
 8009320:	60f8      	str	r0, [r7, #12]
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	603b      	str	r3, [r7, #0]
 8009326:	4613      	mov	r3, r2
 8009328:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800932a:	2300      	movs	r3, #0
 800932c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b20      	cmp	r3, #32
 8009338:	d17c      	bne.n	8009434 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <HAL_UART_Transmit+0x2c>
 8009340:	88fb      	ldrh	r3, [r7, #6]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e075      	b.n	8009436 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009350:	2b01      	cmp	r3, #1
 8009352:	d101      	bne.n	8009358 <HAL_UART_Transmit+0x3e>
 8009354:	2302      	movs	r3, #2
 8009356:	e06e      	b.n	8009436 <HAL_UART_Transmit+0x11c>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2221      	movs	r2, #33	; 0x21
 800936a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800936e:	f7f9 f923 	bl	80025b8 <HAL_GetTick>
 8009372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	88fa      	ldrh	r2, [r7, #6]
 8009378:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	88fa      	ldrh	r2, [r7, #6]
 800937e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009388:	d108      	bne.n	800939c <HAL_UART_Transmit+0x82>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d104      	bne.n	800939c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009392:	2300      	movs	r3, #0
 8009394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	61bb      	str	r3, [r7, #24]
 800939a:	e003      	b.n	80093a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093a0:	2300      	movs	r3, #0
 80093a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80093ac:	e02a      	b.n	8009404 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	2200      	movs	r2, #0
 80093b6:	2180      	movs	r1, #128	; 0x80
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 fb9b 	bl	8009af4 <UART_WaitOnFlagUntilTimeout>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e036      	b.n	8009436 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10b      	bne.n	80093e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	3302      	adds	r3, #2
 80093e2:	61bb      	str	r3, [r7, #24]
 80093e4:	e007      	b.n	80093f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	781a      	ldrb	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	3301      	adds	r3, #1
 80093f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29a      	uxth	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009408:	b29b      	uxth	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1cf      	bne.n	80093ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2200      	movs	r2, #0
 8009416:	2140      	movs	r1, #64	; 0x40
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 fb6b 	bl	8009af4 <UART_WaitOnFlagUntilTimeout>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d001      	beq.n	8009428 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e006      	b.n	8009436 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2220      	movs	r2, #32
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	e000      	b.n	8009436 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009434:	2302      	movs	r3, #2
  }
}
 8009436:	4618      	mov	r0, r3
 8009438:	3720      	adds	r7, #32
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b08a      	sub	sp, #40	; 0x28
 8009442:	af02      	add	r7, sp, #8
 8009444:	60f8      	str	r0, [r7, #12]
 8009446:	60b9      	str	r1, [r7, #8]
 8009448:	603b      	str	r3, [r7, #0]
 800944a:	4613      	mov	r3, r2
 800944c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b20      	cmp	r3, #32
 800945c:	f040 808c 	bne.w	8009578 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <HAL_UART_Receive+0x2e>
 8009466:	88fb      	ldrh	r3, [r7, #6]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e084      	b.n	800957a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009476:	2b01      	cmp	r3, #1
 8009478:	d101      	bne.n	800947e <HAL_UART_Receive+0x40>
 800947a:	2302      	movs	r3, #2
 800947c:	e07d      	b.n	800957a <HAL_UART_Receive+0x13c>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2222      	movs	r2, #34	; 0x22
 8009490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800949a:	f7f9 f88d 	bl	80025b8 <HAL_GetTick>
 800949e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	88fa      	ldrh	r2, [r7, #6]
 80094a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	88fa      	ldrh	r2, [r7, #6]
 80094aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b4:	d108      	bne.n	80094c8 <HAL_UART_Receive+0x8a>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d104      	bne.n	80094c8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80094be:	2300      	movs	r3, #0
 80094c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	61bb      	str	r3, [r7, #24]
 80094c6:	e003      	b.n	80094d0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094cc:	2300      	movs	r3, #0
 80094ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80094d8:	e043      	b.n	8009562 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2200      	movs	r2, #0
 80094e2:	2120      	movs	r1, #32
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 fb05 	bl	8009af4 <UART_WaitOnFlagUntilTimeout>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80094f0:	2303      	movs	r3, #3
 80094f2:	e042      	b.n	800957a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10c      	bne.n	8009514 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	b29b      	uxth	r3, r3
 8009502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009506:	b29a      	uxth	r2, r3
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	3302      	adds	r3, #2
 8009510:	61bb      	str	r3, [r7, #24]
 8009512:	e01f      	b.n	8009554 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800951c:	d007      	beq.n	800952e <HAL_UART_Receive+0xf0>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10a      	bne.n	800953c <HAL_UART_Receive+0xfe>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d106      	bne.n	800953c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	b2da      	uxtb	r2, r3
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	701a      	strb	r2, [r3, #0]
 800953a:	e008      	b.n	800954e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009548:	b2da      	uxtb	r2, r3
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	3301      	adds	r3, #1
 8009552:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009558:	b29b      	uxth	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	b29a      	uxth	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009566:	b29b      	uxth	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1b6      	bne.n	80094da <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2220      	movs	r2, #32
 8009570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	e000      	b.n	800957a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009578:	2302      	movs	r3, #2
  }
}
 800957a:	4618      	mov	r0, r3
 800957c:	3720      	adds	r7, #32
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b0ba      	sub	sp, #232	; 0xe8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80095b0:	2300      	movs	r3, #0
 80095b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80095b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ba:	f003 030f 	and.w	r3, r3, #15
 80095be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80095c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10f      	bne.n	80095ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ce:	f003 0320 	and.w	r3, r3, #32
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d009      	beq.n	80095ea <HAL_UART_IRQHandler+0x66>
 80095d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095da:	f003 0320 	and.w	r3, r3, #32
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fbd3 	bl	8009d8e <UART_Receive_IT>
      return;
 80095e8:	e256      	b.n	8009a98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80095ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 80de 	beq.w	80097b0 <HAL_UART_IRQHandler+0x22c>
 80095f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d106      	bne.n	800960e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009604:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 80d1 	beq.w	80097b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800960e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00b      	beq.n	8009632 <HAL_UART_IRQHandler+0xae>
 800961a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800961e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009622:	2b00      	cmp	r3, #0
 8009624:	d005      	beq.n	8009632 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962a:	f043 0201 	orr.w	r2, r3, #1
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009636:	f003 0304 	and.w	r3, r3, #4
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00b      	beq.n	8009656 <HAL_UART_IRQHandler+0xd2>
 800963e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	d005      	beq.n	8009656 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964e:	f043 0202 	orr.w	r2, r3, #2
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800965a:	f003 0302 	and.w	r3, r3, #2
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00b      	beq.n	800967a <HAL_UART_IRQHandler+0xf6>
 8009662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	2b00      	cmp	r3, #0
 800966c:	d005      	beq.n	800967a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009672:	f043 0204 	orr.w	r2, r3, #4
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800967a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800967e:	f003 0308 	and.w	r3, r3, #8
 8009682:	2b00      	cmp	r3, #0
 8009684:	d011      	beq.n	80096aa <HAL_UART_IRQHandler+0x126>
 8009686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800968a:	f003 0320 	and.w	r3, r3, #32
 800968e:	2b00      	cmp	r3, #0
 8009690:	d105      	bne.n	800969e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	2b00      	cmp	r3, #0
 800969c:	d005      	beq.n	80096aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a2:	f043 0208 	orr.w	r2, r3, #8
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 81ed 	beq.w	8009a8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b8:	f003 0320 	and.w	r3, r3, #32
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d008      	beq.n	80096d2 <HAL_UART_IRQHandler+0x14e>
 80096c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096c4:	f003 0320 	and.w	r3, r3, #32
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fb5e 	bl	8009d8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096dc:	2b40      	cmp	r3, #64	; 0x40
 80096de:	bf0c      	ite	eq
 80096e0:	2301      	moveq	r3, #1
 80096e2:	2300      	movne	r3, #0
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	f003 0308 	and.w	r3, r3, #8
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d103      	bne.n	80096fe <HAL_UART_IRQHandler+0x17a>
 80096f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d04f      	beq.n	800979e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fa66 	bl	8009bd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800970e:	2b40      	cmp	r3, #64	; 0x40
 8009710:	d141      	bne.n	8009796 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3314      	adds	r3, #20
 8009718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800972c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	3314      	adds	r3, #20
 800973a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800973e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009742:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009746:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800974a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1d9      	bne.n	8009712 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009762:	2b00      	cmp	r3, #0
 8009764:	d013      	beq.n	800978e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976a:	4a7d      	ldr	r2, [pc, #500]	; (8009960 <HAL_UART_IRQHandler+0x3dc>)
 800976c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009772:	4618      	mov	r0, r3
 8009774:	f7f9 ff02 	bl	800357c <HAL_DMA_Abort_IT>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d016      	beq.n	80097ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009788:	4610      	mov	r0, r2
 800978a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800978c:	e00e      	b.n	80097ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f99a 	bl	8009ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009794:	e00a      	b.n	80097ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f996 	bl	8009ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800979c:	e006      	b.n	80097ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f992 	bl	8009ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80097aa:	e170      	b.n	8009a8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ac:	bf00      	nop
    return;
 80097ae:	e16e      	b.n	8009a8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	f040 814a 	bne.w	8009a4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80097ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097be:	f003 0310 	and.w	r3, r3, #16
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 8143 	beq.w	8009a4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80097c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097cc:	f003 0310 	and.w	r3, r3, #16
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 813c 	beq.w	8009a4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097d6:	2300      	movs	r3, #0
 80097d8:	60bb      	str	r3, [r7, #8]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	60bb      	str	r3, [r7, #8]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	60bb      	str	r3, [r7, #8]
 80097ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f6:	2b40      	cmp	r3, #64	; 0x40
 80097f8:	f040 80b4 	bne.w	8009964 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009808:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 8140 	beq.w	8009a92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800981a:	429a      	cmp	r2, r3
 800981c:	f080 8139 	bcs.w	8009a92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009826:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009832:	f000 8088 	beq.w	8009946 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	330c      	adds	r3, #12
 800983c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800984c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	330c      	adds	r3, #12
 800985e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009862:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800986e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800987a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1d9      	bne.n	8009836 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3314      	adds	r3, #20
 8009888:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800988c:	e853 3f00 	ldrex	r3, [r3]
 8009890:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009894:	f023 0301 	bic.w	r3, r3, #1
 8009898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	3314      	adds	r3, #20
 80098a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098b2:	e841 2300 	strex	r3, r2, [r1]
 80098b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1e1      	bne.n	8009882 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3314      	adds	r3, #20
 80098c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098c8:	e853 3f00 	ldrex	r3, [r3]
 80098cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3314      	adds	r3, #20
 80098de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80098e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80098e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098ea:	e841 2300 	strex	r3, r2, [r1]
 80098ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80098f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1e3      	bne.n	80098be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	330c      	adds	r3, #12
 800990a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800990e:	e853 3f00 	ldrex	r3, [r3]
 8009912:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009916:	f023 0310 	bic.w	r3, r3, #16
 800991a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	330c      	adds	r3, #12
 8009924:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009928:	65ba      	str	r2, [r7, #88]	; 0x58
 800992a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800992e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009930:	e841 2300 	strex	r3, r2, [r1]
 8009934:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e3      	bne.n	8009904 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009940:	4618      	mov	r0, r3
 8009942:	f7f9 fdab 	bl	800349c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800994e:	b29b      	uxth	r3, r3
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	b29b      	uxth	r3, r3
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f8c0 	bl	8009adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800995c:	e099      	b.n	8009a92 <HAL_UART_IRQHandler+0x50e>
 800995e:	bf00      	nop
 8009960:	08009c97 	.word	0x08009c97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800996c:	b29b      	uxth	r3, r3
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009978:	b29b      	uxth	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 808b 	beq.w	8009a96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 8086 	beq.w	8009a96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	330c      	adds	r3, #12
 8009990:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800999a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	330c      	adds	r3, #12
 80099aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80099ae:	647a      	str	r2, [r7, #68]	; 0x44
 80099b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e3      	bne.n	800998a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3314      	adds	r3, #20
 80099c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	623b      	str	r3, [r7, #32]
   return(result);
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	f023 0301 	bic.w	r3, r3, #1
 80099d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3314      	adds	r3, #20
 80099e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80099e6:	633a      	str	r2, [r7, #48]	; 0x30
 80099e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ee:	e841 2300 	strex	r3, r2, [r1]
 80099f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1e3      	bne.n	80099c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2220      	movs	r2, #32
 80099fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	330c      	adds	r3, #12
 8009a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	e853 3f00 	ldrex	r3, [r3]
 8009a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f023 0310 	bic.w	r3, r3, #16
 8009a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	330c      	adds	r3, #12
 8009a28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009a2c:	61fa      	str	r2, [r7, #28]
 8009a2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	69b9      	ldr	r1, [r7, #24]
 8009a32:	69fa      	ldr	r2, [r7, #28]
 8009a34:	e841 2300 	strex	r3, r2, [r1]
 8009a38:	617b      	str	r3, [r7, #20]
   return(result);
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e3      	bne.n	8009a08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a44:	4619      	mov	r1, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f848 	bl	8009adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a4c:	e023      	b.n	8009a96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d009      	beq.n	8009a6e <HAL_UART_IRQHandler+0x4ea>
 8009a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d003      	beq.n	8009a6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f929 	bl	8009cbe <UART_Transmit_IT>
    return;
 8009a6c:	e014      	b.n	8009a98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00e      	beq.n	8009a98 <HAL_UART_IRQHandler+0x514>
 8009a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d008      	beq.n	8009a98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f969 	bl	8009d5e <UART_EndTransmit_IT>
    return;
 8009a8c:	e004      	b.n	8009a98 <HAL_UART_IRQHandler+0x514>
    return;
 8009a8e:	bf00      	nop
 8009a90:	e002      	b.n	8009a98 <HAL_UART_IRQHandler+0x514>
      return;
 8009a92:	bf00      	nop
 8009a94:	e000      	b.n	8009a98 <HAL_UART_IRQHandler+0x514>
      return;
 8009a96:	bf00      	nop
  }
}
 8009a98:	37e8      	adds	r7, #232	; 0xe8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop

08009aa0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b090      	sub	sp, #64	; 0x40
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	603b      	str	r3, [r7, #0]
 8009b00:	4613      	mov	r3, r2
 8009b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b04:	e050      	b.n	8009ba8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0c:	d04c      	beq.n	8009ba8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d007      	beq.n	8009b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b14:	f7f8 fd50 	bl	80025b8 <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d241      	bcs.n	8009ba8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	330c      	adds	r3, #12
 8009b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	330c      	adds	r3, #12
 8009b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b44:	637a      	str	r2, [r7, #52]	; 0x34
 8009b46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e5      	bne.n	8009b24 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3314      	adds	r3, #20
 8009b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	e853 3f00 	ldrex	r3, [r3]
 8009b66:	613b      	str	r3, [r7, #16]
   return(result);
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f023 0301 	bic.w	r3, r3, #1
 8009b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3314      	adds	r3, #20
 8009b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b78:	623a      	str	r2, [r7, #32]
 8009b7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7c:	69f9      	ldr	r1, [r7, #28]
 8009b7e:	6a3a      	ldr	r2, [r7, #32]
 8009b80:	e841 2300 	strex	r3, r2, [r1]
 8009b84:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1e5      	bne.n	8009b58 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2220      	movs	r2, #32
 8009b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2220      	movs	r2, #32
 8009b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e00f      	b.n	8009bc8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	bf0c      	ite	eq
 8009bb8:	2301      	moveq	r3, #1
 8009bba:	2300      	movne	r3, #0
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d09f      	beq.n	8009b06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3740      	adds	r7, #64	; 0x40
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b095      	sub	sp, #84	; 0x54
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	330c      	adds	r3, #12
 8009bde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be2:	e853 3f00 	ldrex	r3, [r3]
 8009be6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	330c      	adds	r3, #12
 8009bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bf8:	643a      	str	r2, [r7, #64]	; 0x40
 8009bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c00:	e841 2300 	strex	r3, r2, [r1]
 8009c04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1e5      	bne.n	8009bd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3314      	adds	r3, #20
 8009c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	e853 3f00 	ldrex	r3, [r3]
 8009c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f023 0301 	bic.w	r3, r3, #1
 8009c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3314      	adds	r3, #20
 8009c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c34:	e841 2300 	strex	r3, r2, [r1]
 8009c38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1e5      	bne.n	8009c0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d119      	bne.n	8009c7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	330c      	adds	r3, #12
 8009c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	e853 3f00 	ldrex	r3, [r3]
 8009c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f023 0310 	bic.w	r3, r3, #16
 8009c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	330c      	adds	r3, #12
 8009c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c68:	61ba      	str	r2, [r7, #24]
 8009c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6c:	6979      	ldr	r1, [r7, #20]
 8009c6e:	69ba      	ldr	r2, [r7, #24]
 8009c70:	e841 2300 	strex	r3, r2, [r1]
 8009c74:	613b      	str	r3, [r7, #16]
   return(result);
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1e5      	bne.n	8009c48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2220      	movs	r2, #32
 8009c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009c8a:	bf00      	nop
 8009c8c:	3754      	adds	r7, #84	; 0x54
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f7ff ff09 	bl	8009ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cb6:	bf00      	nop
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b085      	sub	sp, #20
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b21      	cmp	r3, #33	; 0x21
 8009cd0:	d13e      	bne.n	8009d50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cda:	d114      	bne.n	8009d06 <UART_Transmit_IT+0x48>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d110      	bne.n	8009d06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a1b      	ldr	r3, [r3, #32]
 8009ce8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	1c9a      	adds	r2, r3, #2
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	621a      	str	r2, [r3, #32]
 8009d04:	e008      	b.n	8009d18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	1c59      	adds	r1, r3, #1
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	6211      	str	r1, [r2, #32]
 8009d10:	781a      	ldrb	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	4619      	mov	r1, r3
 8009d26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10f      	bne.n	8009d4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68da      	ldr	r2, [r3, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68da      	ldr	r2, [r3, #12]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	e000      	b.n	8009d52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009d50:	2302      	movs	r3, #2
  }
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b082      	sub	sp, #8
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2220      	movs	r2, #32
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7ff fe8e 	bl	8009aa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b08c      	sub	sp, #48	; 0x30
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b22      	cmp	r3, #34	; 0x22
 8009da0:	f040 80ab 	bne.w	8009efa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dac:	d117      	bne.n	8009dde <UART_Receive_IT+0x50>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d113      	bne.n	8009dde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009db6:	2300      	movs	r3, #0
 8009db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd6:	1c9a      	adds	r2, r3, #2
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	629a      	str	r2, [r3, #40]	; 0x28
 8009ddc:	e026      	b.n	8009e2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009de4:	2300      	movs	r3, #0
 8009de6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df0:	d007      	beq.n	8009e02 <UART_Receive_IT+0x74>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10a      	bne.n	8009e10 <UART_Receive_IT+0x82>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d106      	bne.n	8009e10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	701a      	strb	r2, [r3, #0]
 8009e0e:	e008      	b.n	8009e22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	3b01      	subs	r3, #1
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d15a      	bne.n	8009ef6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68da      	ldr	r2, [r3, #12]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f022 0220 	bic.w	r2, r2, #32
 8009e4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68da      	ldr	r2, [r3, #12]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	695a      	ldr	r2, [r3, #20]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f022 0201 	bic.w	r2, r2, #1
 8009e6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2220      	movs	r2, #32
 8009e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d135      	bne.n	8009eec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	330c      	adds	r3, #12
 8009e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	613b      	str	r3, [r7, #16]
   return(result);
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	f023 0310 	bic.w	r3, r3, #16
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	330c      	adds	r3, #12
 8009ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea6:	623a      	str	r2, [r7, #32]
 8009ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eaa:	69f9      	ldr	r1, [r7, #28]
 8009eac:	6a3a      	ldr	r2, [r7, #32]
 8009eae:	e841 2300 	strex	r3, r2, [r1]
 8009eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1e5      	bne.n	8009e86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0310 	and.w	r3, r3, #16
 8009ec4:	2b10      	cmp	r3, #16
 8009ec6:	d10a      	bne.n	8009ede <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff fdf9 	bl	8009adc <HAL_UARTEx_RxEventCallback>
 8009eea:	e002      	b.n	8009ef2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff fde1 	bl	8009ab4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e002      	b.n	8009efc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e000      	b.n	8009efc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009efa:	2302      	movs	r3, #2
  }
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3730      	adds	r7, #48	; 0x30
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f08:	b0c0      	sub	sp, #256	; 0x100
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f20:	68d9      	ldr	r1, [r3, #12]
 8009f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	ea40 0301 	orr.w	r3, r0, r1
 8009f2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f32:	689a      	ldr	r2, [r3, #8]
 8009f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	431a      	orrs	r2, r3
 8009f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009f5c:	f021 010c 	bic.w	r1, r1, #12
 8009f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f6a:	430b      	orrs	r3, r1
 8009f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f7e:	6999      	ldr	r1, [r3, #24]
 8009f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	ea40 0301 	orr.w	r3, r0, r1
 8009f8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	4b8f      	ldr	r3, [pc, #572]	; (800a1d0 <UART_SetConfig+0x2cc>)
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d005      	beq.n	8009fa4 <UART_SetConfig+0xa0>
 8009f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	4b8d      	ldr	r3, [pc, #564]	; (800a1d4 <UART_SetConfig+0x2d0>)
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d104      	bne.n	8009fae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009fa4:	f7fc fe8c 	bl	8006cc0 <HAL_RCC_GetPCLK2Freq>
 8009fa8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009fac:	e003      	b.n	8009fb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009fae:	f7fc fe73 	bl	8006c98 <HAL_RCC_GetPCLK1Freq>
 8009fb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fba:	69db      	ldr	r3, [r3, #28]
 8009fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fc0:	f040 810c 	bne.w	800a1dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009fce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009fd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009fd6:	4622      	mov	r2, r4
 8009fd8:	462b      	mov	r3, r5
 8009fda:	1891      	adds	r1, r2, r2
 8009fdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8009fde:	415b      	adcs	r3, r3
 8009fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fe2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	eb12 0801 	adds.w	r8, r2, r1
 8009fec:	4629      	mov	r1, r5
 8009fee:	eb43 0901 	adc.w	r9, r3, r1
 8009ff2:	f04f 0200 	mov.w	r2, #0
 8009ff6:	f04f 0300 	mov.w	r3, #0
 8009ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a006:	4690      	mov	r8, r2
 800a008:	4699      	mov	r9, r3
 800a00a:	4623      	mov	r3, r4
 800a00c:	eb18 0303 	adds.w	r3, r8, r3
 800a010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a014:	462b      	mov	r3, r5
 800a016:	eb49 0303 	adc.w	r3, r9, r3
 800a01a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a01e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a02a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a02e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a032:	460b      	mov	r3, r1
 800a034:	18db      	adds	r3, r3, r3
 800a036:	653b      	str	r3, [r7, #80]	; 0x50
 800a038:	4613      	mov	r3, r2
 800a03a:	eb42 0303 	adc.w	r3, r2, r3
 800a03e:	657b      	str	r3, [r7, #84]	; 0x54
 800a040:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a044:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a048:	f7f6 fe3e 	bl	8000cc8 <__aeabi_uldivmod>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4b61      	ldr	r3, [pc, #388]	; (800a1d8 <UART_SetConfig+0x2d4>)
 800a052:	fba3 2302 	umull	r2, r3, r3, r2
 800a056:	095b      	lsrs	r3, r3, #5
 800a058:	011c      	lsls	r4, r3, #4
 800a05a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a05e:	2200      	movs	r2, #0
 800a060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a064:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a068:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a06c:	4642      	mov	r2, r8
 800a06e:	464b      	mov	r3, r9
 800a070:	1891      	adds	r1, r2, r2
 800a072:	64b9      	str	r1, [r7, #72]	; 0x48
 800a074:	415b      	adcs	r3, r3
 800a076:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a078:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a07c:	4641      	mov	r1, r8
 800a07e:	eb12 0a01 	adds.w	sl, r2, r1
 800a082:	4649      	mov	r1, r9
 800a084:	eb43 0b01 	adc.w	fp, r3, r1
 800a088:	f04f 0200 	mov.w	r2, #0
 800a08c:	f04f 0300 	mov.w	r3, #0
 800a090:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a094:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a09c:	4692      	mov	sl, r2
 800a09e:	469b      	mov	fp, r3
 800a0a0:	4643      	mov	r3, r8
 800a0a2:	eb1a 0303 	adds.w	r3, sl, r3
 800a0a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	eb4b 0303 	adc.w	r3, fp, r3
 800a0b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a0c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	18db      	adds	r3, r3, r3
 800a0cc:	643b      	str	r3, [r7, #64]	; 0x40
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	eb42 0303 	adc.w	r3, r2, r3
 800a0d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a0d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a0da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a0de:	f7f6 fdf3 	bl	8000cc8 <__aeabi_uldivmod>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4b3b      	ldr	r3, [pc, #236]	; (800a1d8 <UART_SetConfig+0x2d4>)
 800a0ea:	fba3 2301 	umull	r2, r3, r3, r1
 800a0ee:	095b      	lsrs	r3, r3, #5
 800a0f0:	2264      	movs	r2, #100	; 0x64
 800a0f2:	fb02 f303 	mul.w	r3, r2, r3
 800a0f6:	1acb      	subs	r3, r1, r3
 800a0f8:	00db      	lsls	r3, r3, #3
 800a0fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a0fe:	4b36      	ldr	r3, [pc, #216]	; (800a1d8 <UART_SetConfig+0x2d4>)
 800a100:	fba3 2302 	umull	r2, r3, r3, r2
 800a104:	095b      	lsrs	r3, r3, #5
 800a106:	005b      	lsls	r3, r3, #1
 800a108:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a10c:	441c      	add	r4, r3
 800a10e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a112:	2200      	movs	r2, #0
 800a114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a118:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a11c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a120:	4642      	mov	r2, r8
 800a122:	464b      	mov	r3, r9
 800a124:	1891      	adds	r1, r2, r2
 800a126:	63b9      	str	r1, [r7, #56]	; 0x38
 800a128:	415b      	adcs	r3, r3
 800a12a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a12c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a130:	4641      	mov	r1, r8
 800a132:	1851      	adds	r1, r2, r1
 800a134:	6339      	str	r1, [r7, #48]	; 0x30
 800a136:	4649      	mov	r1, r9
 800a138:	414b      	adcs	r3, r1
 800a13a:	637b      	str	r3, [r7, #52]	; 0x34
 800a13c:	f04f 0200 	mov.w	r2, #0
 800a140:	f04f 0300 	mov.w	r3, #0
 800a144:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a148:	4659      	mov	r1, fp
 800a14a:	00cb      	lsls	r3, r1, #3
 800a14c:	4651      	mov	r1, sl
 800a14e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a152:	4651      	mov	r1, sl
 800a154:	00ca      	lsls	r2, r1, #3
 800a156:	4610      	mov	r0, r2
 800a158:	4619      	mov	r1, r3
 800a15a:	4603      	mov	r3, r0
 800a15c:	4642      	mov	r2, r8
 800a15e:	189b      	adds	r3, r3, r2
 800a160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a164:	464b      	mov	r3, r9
 800a166:	460a      	mov	r2, r1
 800a168:	eb42 0303 	adc.w	r3, r2, r3
 800a16c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a17c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a180:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a184:	460b      	mov	r3, r1
 800a186:	18db      	adds	r3, r3, r3
 800a188:	62bb      	str	r3, [r7, #40]	; 0x28
 800a18a:	4613      	mov	r3, r2
 800a18c:	eb42 0303 	adc.w	r3, r2, r3
 800a190:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a196:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a19a:	f7f6 fd95 	bl	8000cc8 <__aeabi_uldivmod>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4b0d      	ldr	r3, [pc, #52]	; (800a1d8 <UART_SetConfig+0x2d4>)
 800a1a4:	fba3 1302 	umull	r1, r3, r3, r2
 800a1a8:	095b      	lsrs	r3, r3, #5
 800a1aa:	2164      	movs	r1, #100	; 0x64
 800a1ac:	fb01 f303 	mul.w	r3, r1, r3
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	3332      	adds	r3, #50	; 0x32
 800a1b6:	4a08      	ldr	r2, [pc, #32]	; (800a1d8 <UART_SetConfig+0x2d4>)
 800a1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1bc:	095b      	lsrs	r3, r3, #5
 800a1be:	f003 0207 	and.w	r2, r3, #7
 800a1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4422      	add	r2, r4
 800a1ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1cc:	e105      	b.n	800a3da <UART_SetConfig+0x4d6>
 800a1ce:	bf00      	nop
 800a1d0:	40011000 	.word	0x40011000
 800a1d4:	40011400 	.word	0x40011400
 800a1d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a1e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a1ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a1ee:	4642      	mov	r2, r8
 800a1f0:	464b      	mov	r3, r9
 800a1f2:	1891      	adds	r1, r2, r2
 800a1f4:	6239      	str	r1, [r7, #32]
 800a1f6:	415b      	adcs	r3, r3
 800a1f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a1fe:	4641      	mov	r1, r8
 800a200:	1854      	adds	r4, r2, r1
 800a202:	4649      	mov	r1, r9
 800a204:	eb43 0501 	adc.w	r5, r3, r1
 800a208:	f04f 0200 	mov.w	r2, #0
 800a20c:	f04f 0300 	mov.w	r3, #0
 800a210:	00eb      	lsls	r3, r5, #3
 800a212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a216:	00e2      	lsls	r2, r4, #3
 800a218:	4614      	mov	r4, r2
 800a21a:	461d      	mov	r5, r3
 800a21c:	4643      	mov	r3, r8
 800a21e:	18e3      	adds	r3, r4, r3
 800a220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a224:	464b      	mov	r3, r9
 800a226:	eb45 0303 	adc.w	r3, r5, r3
 800a22a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a22e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a23a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a23e:	f04f 0200 	mov.w	r2, #0
 800a242:	f04f 0300 	mov.w	r3, #0
 800a246:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a24a:	4629      	mov	r1, r5
 800a24c:	008b      	lsls	r3, r1, #2
 800a24e:	4621      	mov	r1, r4
 800a250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a254:	4621      	mov	r1, r4
 800a256:	008a      	lsls	r2, r1, #2
 800a258:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a25c:	f7f6 fd34 	bl	8000cc8 <__aeabi_uldivmod>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	4b60      	ldr	r3, [pc, #384]	; (800a3e8 <UART_SetConfig+0x4e4>)
 800a266:	fba3 2302 	umull	r2, r3, r3, r2
 800a26a:	095b      	lsrs	r3, r3, #5
 800a26c:	011c      	lsls	r4, r3, #4
 800a26e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a272:	2200      	movs	r2, #0
 800a274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a278:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a27c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a280:	4642      	mov	r2, r8
 800a282:	464b      	mov	r3, r9
 800a284:	1891      	adds	r1, r2, r2
 800a286:	61b9      	str	r1, [r7, #24]
 800a288:	415b      	adcs	r3, r3
 800a28a:	61fb      	str	r3, [r7, #28]
 800a28c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a290:	4641      	mov	r1, r8
 800a292:	1851      	adds	r1, r2, r1
 800a294:	6139      	str	r1, [r7, #16]
 800a296:	4649      	mov	r1, r9
 800a298:	414b      	adcs	r3, r1
 800a29a:	617b      	str	r3, [r7, #20]
 800a29c:	f04f 0200 	mov.w	r2, #0
 800a2a0:	f04f 0300 	mov.w	r3, #0
 800a2a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a2a8:	4659      	mov	r1, fp
 800a2aa:	00cb      	lsls	r3, r1, #3
 800a2ac:	4651      	mov	r1, sl
 800a2ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2b2:	4651      	mov	r1, sl
 800a2b4:	00ca      	lsls	r2, r1, #3
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	4642      	mov	r2, r8
 800a2be:	189b      	adds	r3, r3, r2
 800a2c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a2c4:	464b      	mov	r3, r9
 800a2c6:	460a      	mov	r2, r1
 800a2c8:	eb42 0303 	adc.w	r3, r2, r3
 800a2cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a2dc:	f04f 0200 	mov.w	r2, #0
 800a2e0:	f04f 0300 	mov.w	r3, #0
 800a2e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a2e8:	4649      	mov	r1, r9
 800a2ea:	008b      	lsls	r3, r1, #2
 800a2ec:	4641      	mov	r1, r8
 800a2ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2f2:	4641      	mov	r1, r8
 800a2f4:	008a      	lsls	r2, r1, #2
 800a2f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a2fa:	f7f6 fce5 	bl	8000cc8 <__aeabi_uldivmod>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4b39      	ldr	r3, [pc, #228]	; (800a3e8 <UART_SetConfig+0x4e4>)
 800a304:	fba3 1302 	umull	r1, r3, r3, r2
 800a308:	095b      	lsrs	r3, r3, #5
 800a30a:	2164      	movs	r1, #100	; 0x64
 800a30c:	fb01 f303 	mul.w	r3, r1, r3
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	011b      	lsls	r3, r3, #4
 800a314:	3332      	adds	r3, #50	; 0x32
 800a316:	4a34      	ldr	r2, [pc, #208]	; (800a3e8 <UART_SetConfig+0x4e4>)
 800a318:	fba2 2303 	umull	r2, r3, r2, r3
 800a31c:	095b      	lsrs	r3, r3, #5
 800a31e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a322:	441c      	add	r4, r3
 800a324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a328:	2200      	movs	r2, #0
 800a32a:	673b      	str	r3, [r7, #112]	; 0x70
 800a32c:	677a      	str	r2, [r7, #116]	; 0x74
 800a32e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a332:	4642      	mov	r2, r8
 800a334:	464b      	mov	r3, r9
 800a336:	1891      	adds	r1, r2, r2
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	415b      	adcs	r3, r3
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a342:	4641      	mov	r1, r8
 800a344:	1851      	adds	r1, r2, r1
 800a346:	6039      	str	r1, [r7, #0]
 800a348:	4649      	mov	r1, r9
 800a34a:	414b      	adcs	r3, r1
 800a34c:	607b      	str	r3, [r7, #4]
 800a34e:	f04f 0200 	mov.w	r2, #0
 800a352:	f04f 0300 	mov.w	r3, #0
 800a356:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a35a:	4659      	mov	r1, fp
 800a35c:	00cb      	lsls	r3, r1, #3
 800a35e:	4651      	mov	r1, sl
 800a360:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a364:	4651      	mov	r1, sl
 800a366:	00ca      	lsls	r2, r1, #3
 800a368:	4610      	mov	r0, r2
 800a36a:	4619      	mov	r1, r3
 800a36c:	4603      	mov	r3, r0
 800a36e:	4642      	mov	r2, r8
 800a370:	189b      	adds	r3, r3, r2
 800a372:	66bb      	str	r3, [r7, #104]	; 0x68
 800a374:	464b      	mov	r3, r9
 800a376:	460a      	mov	r2, r1
 800a378:	eb42 0303 	adc.w	r3, r2, r3
 800a37c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a37e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	663b      	str	r3, [r7, #96]	; 0x60
 800a388:	667a      	str	r2, [r7, #100]	; 0x64
 800a38a:	f04f 0200 	mov.w	r2, #0
 800a38e:	f04f 0300 	mov.w	r3, #0
 800a392:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a396:	4649      	mov	r1, r9
 800a398:	008b      	lsls	r3, r1, #2
 800a39a:	4641      	mov	r1, r8
 800a39c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3a0:	4641      	mov	r1, r8
 800a3a2:	008a      	lsls	r2, r1, #2
 800a3a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a3a8:	f7f6 fc8e 	bl	8000cc8 <__aeabi_uldivmod>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4b0d      	ldr	r3, [pc, #52]	; (800a3e8 <UART_SetConfig+0x4e4>)
 800a3b2:	fba3 1302 	umull	r1, r3, r3, r2
 800a3b6:	095b      	lsrs	r3, r3, #5
 800a3b8:	2164      	movs	r1, #100	; 0x64
 800a3ba:	fb01 f303 	mul.w	r3, r1, r3
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	011b      	lsls	r3, r3, #4
 800a3c2:	3332      	adds	r3, #50	; 0x32
 800a3c4:	4a08      	ldr	r2, [pc, #32]	; (800a3e8 <UART_SetConfig+0x4e4>)
 800a3c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ca:	095b      	lsrs	r3, r3, #5
 800a3cc:	f003 020f 	and.w	r2, r3, #15
 800a3d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4422      	add	r2, r4
 800a3d8:	609a      	str	r2, [r3, #8]
}
 800a3da:	bf00      	nop
 800a3dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3e6:	bf00      	nop
 800a3e8:	51eb851f 	.word	0x51eb851f

0800a3ec <__errno>:
 800a3ec:	4b01      	ldr	r3, [pc, #4]	; (800a3f4 <__errno+0x8>)
 800a3ee:	6818      	ldr	r0, [r3, #0]
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	2000000c 	.word	0x2000000c

0800a3f8 <__libc_init_array>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	4d0d      	ldr	r5, [pc, #52]	; (800a430 <__libc_init_array+0x38>)
 800a3fc:	4c0d      	ldr	r4, [pc, #52]	; (800a434 <__libc_init_array+0x3c>)
 800a3fe:	1b64      	subs	r4, r4, r5
 800a400:	10a4      	asrs	r4, r4, #2
 800a402:	2600      	movs	r6, #0
 800a404:	42a6      	cmp	r6, r4
 800a406:	d109      	bne.n	800a41c <__libc_init_array+0x24>
 800a408:	4d0b      	ldr	r5, [pc, #44]	; (800a438 <__libc_init_array+0x40>)
 800a40a:	4c0c      	ldr	r4, [pc, #48]	; (800a43c <__libc_init_array+0x44>)
 800a40c:	f005 fd76 	bl	800fefc <_init>
 800a410:	1b64      	subs	r4, r4, r5
 800a412:	10a4      	asrs	r4, r4, #2
 800a414:	2600      	movs	r6, #0
 800a416:	42a6      	cmp	r6, r4
 800a418:	d105      	bne.n	800a426 <__libc_init_array+0x2e>
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
 800a41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a420:	4798      	blx	r3
 800a422:	3601      	adds	r6, #1
 800a424:	e7ee      	b.n	800a404 <__libc_init_array+0xc>
 800a426:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42a:	4798      	blx	r3
 800a42c:	3601      	adds	r6, #1
 800a42e:	e7f2      	b.n	800a416 <__libc_init_array+0x1e>
 800a430:	080109ec 	.word	0x080109ec
 800a434:	080109ec 	.word	0x080109ec
 800a438:	080109ec 	.word	0x080109ec
 800a43c:	080109f0 	.word	0x080109f0

0800a440 <memset>:
 800a440:	4402      	add	r2, r0
 800a442:	4603      	mov	r3, r0
 800a444:	4293      	cmp	r3, r2
 800a446:	d100      	bne.n	800a44a <memset+0xa>
 800a448:	4770      	bx	lr
 800a44a:	f803 1b01 	strb.w	r1, [r3], #1
 800a44e:	e7f9      	b.n	800a444 <memset+0x4>

0800a450 <__cvt>:
 800a450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a454:	ec55 4b10 	vmov	r4, r5, d0
 800a458:	2d00      	cmp	r5, #0
 800a45a:	460e      	mov	r6, r1
 800a45c:	4619      	mov	r1, r3
 800a45e:	462b      	mov	r3, r5
 800a460:	bfbb      	ittet	lt
 800a462:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a466:	461d      	movlt	r5, r3
 800a468:	2300      	movge	r3, #0
 800a46a:	232d      	movlt	r3, #45	; 0x2d
 800a46c:	700b      	strb	r3, [r1, #0]
 800a46e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a470:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a474:	4691      	mov	r9, r2
 800a476:	f023 0820 	bic.w	r8, r3, #32
 800a47a:	bfbc      	itt	lt
 800a47c:	4622      	movlt	r2, r4
 800a47e:	4614      	movlt	r4, r2
 800a480:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a484:	d005      	beq.n	800a492 <__cvt+0x42>
 800a486:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a48a:	d100      	bne.n	800a48e <__cvt+0x3e>
 800a48c:	3601      	adds	r6, #1
 800a48e:	2102      	movs	r1, #2
 800a490:	e000      	b.n	800a494 <__cvt+0x44>
 800a492:	2103      	movs	r1, #3
 800a494:	ab03      	add	r3, sp, #12
 800a496:	9301      	str	r3, [sp, #4]
 800a498:	ab02      	add	r3, sp, #8
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	ec45 4b10 	vmov	d0, r4, r5
 800a4a0:	4653      	mov	r3, sl
 800a4a2:	4632      	mov	r2, r6
 800a4a4:	f002 f884 	bl	800c5b0 <_dtoa_r>
 800a4a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4ac:	4607      	mov	r7, r0
 800a4ae:	d102      	bne.n	800a4b6 <__cvt+0x66>
 800a4b0:	f019 0f01 	tst.w	r9, #1
 800a4b4:	d022      	beq.n	800a4fc <__cvt+0xac>
 800a4b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4ba:	eb07 0906 	add.w	r9, r7, r6
 800a4be:	d110      	bne.n	800a4e2 <__cvt+0x92>
 800a4c0:	783b      	ldrb	r3, [r7, #0]
 800a4c2:	2b30      	cmp	r3, #48	; 0x30
 800a4c4:	d10a      	bne.n	800a4dc <__cvt+0x8c>
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	f7f6 fb1b 	bl	8000b08 <__aeabi_dcmpeq>
 800a4d2:	b918      	cbnz	r0, 800a4dc <__cvt+0x8c>
 800a4d4:	f1c6 0601 	rsb	r6, r6, #1
 800a4d8:	f8ca 6000 	str.w	r6, [sl]
 800a4dc:	f8da 3000 	ldr.w	r3, [sl]
 800a4e0:	4499      	add	r9, r3
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	f7f6 fb0d 	bl	8000b08 <__aeabi_dcmpeq>
 800a4ee:	b108      	cbz	r0, 800a4f4 <__cvt+0xa4>
 800a4f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4f4:	2230      	movs	r2, #48	; 0x30
 800a4f6:	9b03      	ldr	r3, [sp, #12]
 800a4f8:	454b      	cmp	r3, r9
 800a4fa:	d307      	bcc.n	800a50c <__cvt+0xbc>
 800a4fc:	9b03      	ldr	r3, [sp, #12]
 800a4fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a500:	1bdb      	subs	r3, r3, r7
 800a502:	4638      	mov	r0, r7
 800a504:	6013      	str	r3, [r2, #0]
 800a506:	b004      	add	sp, #16
 800a508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50c:	1c59      	adds	r1, r3, #1
 800a50e:	9103      	str	r1, [sp, #12]
 800a510:	701a      	strb	r2, [r3, #0]
 800a512:	e7f0      	b.n	800a4f6 <__cvt+0xa6>

0800a514 <__exponent>:
 800a514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a516:	4603      	mov	r3, r0
 800a518:	2900      	cmp	r1, #0
 800a51a:	bfb8      	it	lt
 800a51c:	4249      	neglt	r1, r1
 800a51e:	f803 2b02 	strb.w	r2, [r3], #2
 800a522:	bfb4      	ite	lt
 800a524:	222d      	movlt	r2, #45	; 0x2d
 800a526:	222b      	movge	r2, #43	; 0x2b
 800a528:	2909      	cmp	r1, #9
 800a52a:	7042      	strb	r2, [r0, #1]
 800a52c:	dd2a      	ble.n	800a584 <__exponent+0x70>
 800a52e:	f10d 0407 	add.w	r4, sp, #7
 800a532:	46a4      	mov	ip, r4
 800a534:	270a      	movs	r7, #10
 800a536:	46a6      	mov	lr, r4
 800a538:	460a      	mov	r2, r1
 800a53a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a53e:	fb07 1516 	mls	r5, r7, r6, r1
 800a542:	3530      	adds	r5, #48	; 0x30
 800a544:	2a63      	cmp	r2, #99	; 0x63
 800a546:	f104 34ff 	add.w	r4, r4, #4294967295
 800a54a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a54e:	4631      	mov	r1, r6
 800a550:	dcf1      	bgt.n	800a536 <__exponent+0x22>
 800a552:	3130      	adds	r1, #48	; 0x30
 800a554:	f1ae 0502 	sub.w	r5, lr, #2
 800a558:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a55c:	1c44      	adds	r4, r0, #1
 800a55e:	4629      	mov	r1, r5
 800a560:	4561      	cmp	r1, ip
 800a562:	d30a      	bcc.n	800a57a <__exponent+0x66>
 800a564:	f10d 0209 	add.w	r2, sp, #9
 800a568:	eba2 020e 	sub.w	r2, r2, lr
 800a56c:	4565      	cmp	r5, ip
 800a56e:	bf88      	it	hi
 800a570:	2200      	movhi	r2, #0
 800a572:	4413      	add	r3, r2
 800a574:	1a18      	subs	r0, r3, r0
 800a576:	b003      	add	sp, #12
 800a578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a57a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a57e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a582:	e7ed      	b.n	800a560 <__exponent+0x4c>
 800a584:	2330      	movs	r3, #48	; 0x30
 800a586:	3130      	adds	r1, #48	; 0x30
 800a588:	7083      	strb	r3, [r0, #2]
 800a58a:	70c1      	strb	r1, [r0, #3]
 800a58c:	1d03      	adds	r3, r0, #4
 800a58e:	e7f1      	b.n	800a574 <__exponent+0x60>

0800a590 <_printf_float>:
 800a590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a594:	ed2d 8b02 	vpush	{d8}
 800a598:	b08d      	sub	sp, #52	; 0x34
 800a59a:	460c      	mov	r4, r1
 800a59c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a5a0:	4616      	mov	r6, r2
 800a5a2:	461f      	mov	r7, r3
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	f003 fb47 	bl	800dc38 <_localeconv_r>
 800a5aa:	f8d0 a000 	ldr.w	sl, [r0]
 800a5ae:	4650      	mov	r0, sl
 800a5b0:	f7f5 fe2e 	bl	8000210 <strlen>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	9305      	str	r3, [sp, #20]
 800a5bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a5c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a5c4:	3307      	adds	r3, #7
 800a5c6:	f023 0307 	bic.w	r3, r3, #7
 800a5ca:	f103 0208 	add.w	r2, r3, #8
 800a5ce:	f8c8 2000 	str.w	r2, [r8]
 800a5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a5da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a5de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5e2:	9307      	str	r3, [sp, #28]
 800a5e4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a5e8:	ee08 0a10 	vmov	s16, r0
 800a5ec:	4b9f      	ldr	r3, [pc, #636]	; (800a86c <_printf_float+0x2dc>)
 800a5ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f6:	f7f6 fab9 	bl	8000b6c <__aeabi_dcmpun>
 800a5fa:	bb88      	cbnz	r0, 800a660 <_printf_float+0xd0>
 800a5fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a600:	4b9a      	ldr	r3, [pc, #616]	; (800a86c <_printf_float+0x2dc>)
 800a602:	f04f 32ff 	mov.w	r2, #4294967295
 800a606:	f7f6 fa93 	bl	8000b30 <__aeabi_dcmple>
 800a60a:	bb48      	cbnz	r0, 800a660 <_printf_float+0xd0>
 800a60c:	2200      	movs	r2, #0
 800a60e:	2300      	movs	r3, #0
 800a610:	4640      	mov	r0, r8
 800a612:	4649      	mov	r1, r9
 800a614:	f7f6 fa82 	bl	8000b1c <__aeabi_dcmplt>
 800a618:	b110      	cbz	r0, 800a620 <_printf_float+0x90>
 800a61a:	232d      	movs	r3, #45	; 0x2d
 800a61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a620:	4b93      	ldr	r3, [pc, #588]	; (800a870 <_printf_float+0x2e0>)
 800a622:	4894      	ldr	r0, [pc, #592]	; (800a874 <_printf_float+0x2e4>)
 800a624:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a628:	bf94      	ite	ls
 800a62a:	4698      	movls	r8, r3
 800a62c:	4680      	movhi	r8, r0
 800a62e:	2303      	movs	r3, #3
 800a630:	6123      	str	r3, [r4, #16]
 800a632:	9b05      	ldr	r3, [sp, #20]
 800a634:	f023 0204 	bic.w	r2, r3, #4
 800a638:	6022      	str	r2, [r4, #0]
 800a63a:	f04f 0900 	mov.w	r9, #0
 800a63e:	9700      	str	r7, [sp, #0]
 800a640:	4633      	mov	r3, r6
 800a642:	aa0b      	add	r2, sp, #44	; 0x2c
 800a644:	4621      	mov	r1, r4
 800a646:	4628      	mov	r0, r5
 800a648:	f000 f9d8 	bl	800a9fc <_printf_common>
 800a64c:	3001      	adds	r0, #1
 800a64e:	f040 8090 	bne.w	800a772 <_printf_float+0x1e2>
 800a652:	f04f 30ff 	mov.w	r0, #4294967295
 800a656:	b00d      	add	sp, #52	; 0x34
 800a658:	ecbd 8b02 	vpop	{d8}
 800a65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a660:	4642      	mov	r2, r8
 800a662:	464b      	mov	r3, r9
 800a664:	4640      	mov	r0, r8
 800a666:	4649      	mov	r1, r9
 800a668:	f7f6 fa80 	bl	8000b6c <__aeabi_dcmpun>
 800a66c:	b140      	cbz	r0, 800a680 <_printf_float+0xf0>
 800a66e:	464b      	mov	r3, r9
 800a670:	2b00      	cmp	r3, #0
 800a672:	bfbc      	itt	lt
 800a674:	232d      	movlt	r3, #45	; 0x2d
 800a676:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a67a:	487f      	ldr	r0, [pc, #508]	; (800a878 <_printf_float+0x2e8>)
 800a67c:	4b7f      	ldr	r3, [pc, #508]	; (800a87c <_printf_float+0x2ec>)
 800a67e:	e7d1      	b.n	800a624 <_printf_float+0x94>
 800a680:	6863      	ldr	r3, [r4, #4]
 800a682:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a686:	9206      	str	r2, [sp, #24]
 800a688:	1c5a      	adds	r2, r3, #1
 800a68a:	d13f      	bne.n	800a70c <_printf_float+0x17c>
 800a68c:	2306      	movs	r3, #6
 800a68e:	6063      	str	r3, [r4, #4]
 800a690:	9b05      	ldr	r3, [sp, #20]
 800a692:	6861      	ldr	r1, [r4, #4]
 800a694:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a698:	2300      	movs	r3, #0
 800a69a:	9303      	str	r3, [sp, #12]
 800a69c:	ab0a      	add	r3, sp, #40	; 0x28
 800a69e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a6a2:	ab09      	add	r3, sp, #36	; 0x24
 800a6a4:	ec49 8b10 	vmov	d0, r8, r9
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	6022      	str	r2, [r4, #0]
 800a6ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f7ff fecd 	bl	800a450 <__cvt>
 800a6b6:	9b06      	ldr	r3, [sp, #24]
 800a6b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6ba:	2b47      	cmp	r3, #71	; 0x47
 800a6bc:	4680      	mov	r8, r0
 800a6be:	d108      	bne.n	800a6d2 <_printf_float+0x142>
 800a6c0:	1cc8      	adds	r0, r1, #3
 800a6c2:	db02      	blt.n	800a6ca <_printf_float+0x13a>
 800a6c4:	6863      	ldr	r3, [r4, #4]
 800a6c6:	4299      	cmp	r1, r3
 800a6c8:	dd41      	ble.n	800a74e <_printf_float+0x1be>
 800a6ca:	f1ab 0b02 	sub.w	fp, fp, #2
 800a6ce:	fa5f fb8b 	uxtb.w	fp, fp
 800a6d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6d6:	d820      	bhi.n	800a71a <_printf_float+0x18a>
 800a6d8:	3901      	subs	r1, #1
 800a6da:	465a      	mov	r2, fp
 800a6dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6e0:	9109      	str	r1, [sp, #36]	; 0x24
 800a6e2:	f7ff ff17 	bl	800a514 <__exponent>
 800a6e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6e8:	1813      	adds	r3, r2, r0
 800a6ea:	2a01      	cmp	r2, #1
 800a6ec:	4681      	mov	r9, r0
 800a6ee:	6123      	str	r3, [r4, #16]
 800a6f0:	dc02      	bgt.n	800a6f8 <_printf_float+0x168>
 800a6f2:	6822      	ldr	r2, [r4, #0]
 800a6f4:	07d2      	lsls	r2, r2, #31
 800a6f6:	d501      	bpl.n	800a6fc <_printf_float+0x16c>
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	6123      	str	r3, [r4, #16]
 800a6fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a700:	2b00      	cmp	r3, #0
 800a702:	d09c      	beq.n	800a63e <_printf_float+0xae>
 800a704:	232d      	movs	r3, #45	; 0x2d
 800a706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a70a:	e798      	b.n	800a63e <_printf_float+0xae>
 800a70c:	9a06      	ldr	r2, [sp, #24]
 800a70e:	2a47      	cmp	r2, #71	; 0x47
 800a710:	d1be      	bne.n	800a690 <_printf_float+0x100>
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1bc      	bne.n	800a690 <_printf_float+0x100>
 800a716:	2301      	movs	r3, #1
 800a718:	e7b9      	b.n	800a68e <_printf_float+0xfe>
 800a71a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a71e:	d118      	bne.n	800a752 <_printf_float+0x1c2>
 800a720:	2900      	cmp	r1, #0
 800a722:	6863      	ldr	r3, [r4, #4]
 800a724:	dd0b      	ble.n	800a73e <_printf_float+0x1ae>
 800a726:	6121      	str	r1, [r4, #16]
 800a728:	b913      	cbnz	r3, 800a730 <_printf_float+0x1a0>
 800a72a:	6822      	ldr	r2, [r4, #0]
 800a72c:	07d0      	lsls	r0, r2, #31
 800a72e:	d502      	bpl.n	800a736 <_printf_float+0x1a6>
 800a730:	3301      	adds	r3, #1
 800a732:	440b      	add	r3, r1
 800a734:	6123      	str	r3, [r4, #16]
 800a736:	65a1      	str	r1, [r4, #88]	; 0x58
 800a738:	f04f 0900 	mov.w	r9, #0
 800a73c:	e7de      	b.n	800a6fc <_printf_float+0x16c>
 800a73e:	b913      	cbnz	r3, 800a746 <_printf_float+0x1b6>
 800a740:	6822      	ldr	r2, [r4, #0]
 800a742:	07d2      	lsls	r2, r2, #31
 800a744:	d501      	bpl.n	800a74a <_printf_float+0x1ba>
 800a746:	3302      	adds	r3, #2
 800a748:	e7f4      	b.n	800a734 <_printf_float+0x1a4>
 800a74a:	2301      	movs	r3, #1
 800a74c:	e7f2      	b.n	800a734 <_printf_float+0x1a4>
 800a74e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a754:	4299      	cmp	r1, r3
 800a756:	db05      	blt.n	800a764 <_printf_float+0x1d4>
 800a758:	6823      	ldr	r3, [r4, #0]
 800a75a:	6121      	str	r1, [r4, #16]
 800a75c:	07d8      	lsls	r0, r3, #31
 800a75e:	d5ea      	bpl.n	800a736 <_printf_float+0x1a6>
 800a760:	1c4b      	adds	r3, r1, #1
 800a762:	e7e7      	b.n	800a734 <_printf_float+0x1a4>
 800a764:	2900      	cmp	r1, #0
 800a766:	bfd4      	ite	le
 800a768:	f1c1 0202 	rsble	r2, r1, #2
 800a76c:	2201      	movgt	r2, #1
 800a76e:	4413      	add	r3, r2
 800a770:	e7e0      	b.n	800a734 <_printf_float+0x1a4>
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	055a      	lsls	r2, r3, #21
 800a776:	d407      	bmi.n	800a788 <_printf_float+0x1f8>
 800a778:	6923      	ldr	r3, [r4, #16]
 800a77a:	4642      	mov	r2, r8
 800a77c:	4631      	mov	r1, r6
 800a77e:	4628      	mov	r0, r5
 800a780:	47b8      	blx	r7
 800a782:	3001      	adds	r0, #1
 800a784:	d12c      	bne.n	800a7e0 <_printf_float+0x250>
 800a786:	e764      	b.n	800a652 <_printf_float+0xc2>
 800a788:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a78c:	f240 80e0 	bls.w	800a950 <_printf_float+0x3c0>
 800a790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a794:	2200      	movs	r2, #0
 800a796:	2300      	movs	r3, #0
 800a798:	f7f6 f9b6 	bl	8000b08 <__aeabi_dcmpeq>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d034      	beq.n	800a80a <_printf_float+0x27a>
 800a7a0:	4a37      	ldr	r2, [pc, #220]	; (800a880 <_printf_float+0x2f0>)
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	47b8      	blx	r7
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	f43f af51 	beq.w	800a652 <_printf_float+0xc2>
 800a7b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	db02      	blt.n	800a7be <_printf_float+0x22e>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	07d8      	lsls	r0, r3, #31
 800a7bc:	d510      	bpl.n	800a7e0 <_printf_float+0x250>
 800a7be:	ee18 3a10 	vmov	r3, s16
 800a7c2:	4652      	mov	r2, sl
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	47b8      	blx	r7
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	f43f af41 	beq.w	800a652 <_printf_float+0xc2>
 800a7d0:	f04f 0800 	mov.w	r8, #0
 800a7d4:	f104 091a 	add.w	r9, r4, #26
 800a7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	4543      	cmp	r3, r8
 800a7de:	dc09      	bgt.n	800a7f4 <_printf_float+0x264>
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	079b      	lsls	r3, r3, #30
 800a7e4:	f100 8105 	bmi.w	800a9f2 <_printf_float+0x462>
 800a7e8:	68e0      	ldr	r0, [r4, #12]
 800a7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ec:	4298      	cmp	r0, r3
 800a7ee:	bfb8      	it	lt
 800a7f0:	4618      	movlt	r0, r3
 800a7f2:	e730      	b.n	800a656 <_printf_float+0xc6>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	464a      	mov	r2, r9
 800a7f8:	4631      	mov	r1, r6
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	47b8      	blx	r7
 800a7fe:	3001      	adds	r0, #1
 800a800:	f43f af27 	beq.w	800a652 <_printf_float+0xc2>
 800a804:	f108 0801 	add.w	r8, r8, #1
 800a808:	e7e6      	b.n	800a7d8 <_printf_float+0x248>
 800a80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	dc39      	bgt.n	800a884 <_printf_float+0x2f4>
 800a810:	4a1b      	ldr	r2, [pc, #108]	; (800a880 <_printf_float+0x2f0>)
 800a812:	2301      	movs	r3, #1
 800a814:	4631      	mov	r1, r6
 800a816:	4628      	mov	r0, r5
 800a818:	47b8      	blx	r7
 800a81a:	3001      	adds	r0, #1
 800a81c:	f43f af19 	beq.w	800a652 <_printf_float+0xc2>
 800a820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a824:	4313      	orrs	r3, r2
 800a826:	d102      	bne.n	800a82e <_printf_float+0x29e>
 800a828:	6823      	ldr	r3, [r4, #0]
 800a82a:	07d9      	lsls	r1, r3, #31
 800a82c:	d5d8      	bpl.n	800a7e0 <_printf_float+0x250>
 800a82e:	ee18 3a10 	vmov	r3, s16
 800a832:	4652      	mov	r2, sl
 800a834:	4631      	mov	r1, r6
 800a836:	4628      	mov	r0, r5
 800a838:	47b8      	blx	r7
 800a83a:	3001      	adds	r0, #1
 800a83c:	f43f af09 	beq.w	800a652 <_printf_float+0xc2>
 800a840:	f04f 0900 	mov.w	r9, #0
 800a844:	f104 0a1a 	add.w	sl, r4, #26
 800a848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84a:	425b      	negs	r3, r3
 800a84c:	454b      	cmp	r3, r9
 800a84e:	dc01      	bgt.n	800a854 <_printf_float+0x2c4>
 800a850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a852:	e792      	b.n	800a77a <_printf_float+0x1ea>
 800a854:	2301      	movs	r3, #1
 800a856:	4652      	mov	r2, sl
 800a858:	4631      	mov	r1, r6
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b8      	blx	r7
 800a85e:	3001      	adds	r0, #1
 800a860:	f43f aef7 	beq.w	800a652 <_printf_float+0xc2>
 800a864:	f109 0901 	add.w	r9, r9, #1
 800a868:	e7ee      	b.n	800a848 <_printf_float+0x2b8>
 800a86a:	bf00      	nop
 800a86c:	7fefffff 	.word	0x7fefffff
 800a870:	08010528 	.word	0x08010528
 800a874:	0801052c 	.word	0x0801052c
 800a878:	08010534 	.word	0x08010534
 800a87c:	08010530 	.word	0x08010530
 800a880:	08010991 	.word	0x08010991
 800a884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a886:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a888:	429a      	cmp	r2, r3
 800a88a:	bfa8      	it	ge
 800a88c:	461a      	movge	r2, r3
 800a88e:	2a00      	cmp	r2, #0
 800a890:	4691      	mov	r9, r2
 800a892:	dc37      	bgt.n	800a904 <_printf_float+0x374>
 800a894:	f04f 0b00 	mov.w	fp, #0
 800a898:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a89c:	f104 021a 	add.w	r2, r4, #26
 800a8a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8a2:	9305      	str	r3, [sp, #20]
 800a8a4:	eba3 0309 	sub.w	r3, r3, r9
 800a8a8:	455b      	cmp	r3, fp
 800a8aa:	dc33      	bgt.n	800a914 <_printf_float+0x384>
 800a8ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	db3b      	blt.n	800a92c <_printf_float+0x39c>
 800a8b4:	6823      	ldr	r3, [r4, #0]
 800a8b6:	07da      	lsls	r2, r3, #31
 800a8b8:	d438      	bmi.n	800a92c <_printf_float+0x39c>
 800a8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8bc:	9a05      	ldr	r2, [sp, #20]
 800a8be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8c0:	1a9a      	subs	r2, r3, r2
 800a8c2:	eba3 0901 	sub.w	r9, r3, r1
 800a8c6:	4591      	cmp	r9, r2
 800a8c8:	bfa8      	it	ge
 800a8ca:	4691      	movge	r9, r2
 800a8cc:	f1b9 0f00 	cmp.w	r9, #0
 800a8d0:	dc35      	bgt.n	800a93e <_printf_float+0x3ae>
 800a8d2:	f04f 0800 	mov.w	r8, #0
 800a8d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8da:	f104 0a1a 	add.w	sl, r4, #26
 800a8de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8e2:	1a9b      	subs	r3, r3, r2
 800a8e4:	eba3 0309 	sub.w	r3, r3, r9
 800a8e8:	4543      	cmp	r3, r8
 800a8ea:	f77f af79 	ble.w	800a7e0 <_printf_float+0x250>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	4652      	mov	r2, sl
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	47b8      	blx	r7
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	f43f aeaa 	beq.w	800a652 <_printf_float+0xc2>
 800a8fe:	f108 0801 	add.w	r8, r8, #1
 800a902:	e7ec      	b.n	800a8de <_printf_float+0x34e>
 800a904:	4613      	mov	r3, r2
 800a906:	4631      	mov	r1, r6
 800a908:	4642      	mov	r2, r8
 800a90a:	4628      	mov	r0, r5
 800a90c:	47b8      	blx	r7
 800a90e:	3001      	adds	r0, #1
 800a910:	d1c0      	bne.n	800a894 <_printf_float+0x304>
 800a912:	e69e      	b.n	800a652 <_printf_float+0xc2>
 800a914:	2301      	movs	r3, #1
 800a916:	4631      	mov	r1, r6
 800a918:	4628      	mov	r0, r5
 800a91a:	9205      	str	r2, [sp, #20]
 800a91c:	47b8      	blx	r7
 800a91e:	3001      	adds	r0, #1
 800a920:	f43f ae97 	beq.w	800a652 <_printf_float+0xc2>
 800a924:	9a05      	ldr	r2, [sp, #20]
 800a926:	f10b 0b01 	add.w	fp, fp, #1
 800a92a:	e7b9      	b.n	800a8a0 <_printf_float+0x310>
 800a92c:	ee18 3a10 	vmov	r3, s16
 800a930:	4652      	mov	r2, sl
 800a932:	4631      	mov	r1, r6
 800a934:	4628      	mov	r0, r5
 800a936:	47b8      	blx	r7
 800a938:	3001      	adds	r0, #1
 800a93a:	d1be      	bne.n	800a8ba <_printf_float+0x32a>
 800a93c:	e689      	b.n	800a652 <_printf_float+0xc2>
 800a93e:	9a05      	ldr	r2, [sp, #20]
 800a940:	464b      	mov	r3, r9
 800a942:	4442      	add	r2, r8
 800a944:	4631      	mov	r1, r6
 800a946:	4628      	mov	r0, r5
 800a948:	47b8      	blx	r7
 800a94a:	3001      	adds	r0, #1
 800a94c:	d1c1      	bne.n	800a8d2 <_printf_float+0x342>
 800a94e:	e680      	b.n	800a652 <_printf_float+0xc2>
 800a950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a952:	2a01      	cmp	r2, #1
 800a954:	dc01      	bgt.n	800a95a <_printf_float+0x3ca>
 800a956:	07db      	lsls	r3, r3, #31
 800a958:	d538      	bpl.n	800a9cc <_printf_float+0x43c>
 800a95a:	2301      	movs	r3, #1
 800a95c:	4642      	mov	r2, r8
 800a95e:	4631      	mov	r1, r6
 800a960:	4628      	mov	r0, r5
 800a962:	47b8      	blx	r7
 800a964:	3001      	adds	r0, #1
 800a966:	f43f ae74 	beq.w	800a652 <_printf_float+0xc2>
 800a96a:	ee18 3a10 	vmov	r3, s16
 800a96e:	4652      	mov	r2, sl
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f ae6b 	beq.w	800a652 <_printf_float+0xc2>
 800a97c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a980:	2200      	movs	r2, #0
 800a982:	2300      	movs	r3, #0
 800a984:	f7f6 f8c0 	bl	8000b08 <__aeabi_dcmpeq>
 800a988:	b9d8      	cbnz	r0, 800a9c2 <_printf_float+0x432>
 800a98a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a98c:	f108 0201 	add.w	r2, r8, #1
 800a990:	3b01      	subs	r3, #1
 800a992:	4631      	mov	r1, r6
 800a994:	4628      	mov	r0, r5
 800a996:	47b8      	blx	r7
 800a998:	3001      	adds	r0, #1
 800a99a:	d10e      	bne.n	800a9ba <_printf_float+0x42a>
 800a99c:	e659      	b.n	800a652 <_printf_float+0xc2>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	4652      	mov	r2, sl
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	47b8      	blx	r7
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	f43f ae52 	beq.w	800a652 <_printf_float+0xc2>
 800a9ae:	f108 0801 	add.w	r8, r8, #1
 800a9b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	4543      	cmp	r3, r8
 800a9b8:	dcf1      	bgt.n	800a99e <_printf_float+0x40e>
 800a9ba:	464b      	mov	r3, r9
 800a9bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9c0:	e6dc      	b.n	800a77c <_printf_float+0x1ec>
 800a9c2:	f04f 0800 	mov.w	r8, #0
 800a9c6:	f104 0a1a 	add.w	sl, r4, #26
 800a9ca:	e7f2      	b.n	800a9b2 <_printf_float+0x422>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	4642      	mov	r2, r8
 800a9d0:	e7df      	b.n	800a992 <_printf_float+0x402>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	464a      	mov	r2, r9
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	4628      	mov	r0, r5
 800a9da:	47b8      	blx	r7
 800a9dc:	3001      	adds	r0, #1
 800a9de:	f43f ae38 	beq.w	800a652 <_printf_float+0xc2>
 800a9e2:	f108 0801 	add.w	r8, r8, #1
 800a9e6:	68e3      	ldr	r3, [r4, #12]
 800a9e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9ea:	1a5b      	subs	r3, r3, r1
 800a9ec:	4543      	cmp	r3, r8
 800a9ee:	dcf0      	bgt.n	800a9d2 <_printf_float+0x442>
 800a9f0:	e6fa      	b.n	800a7e8 <_printf_float+0x258>
 800a9f2:	f04f 0800 	mov.w	r8, #0
 800a9f6:	f104 0919 	add.w	r9, r4, #25
 800a9fa:	e7f4      	b.n	800a9e6 <_printf_float+0x456>

0800a9fc <_printf_common>:
 800a9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa00:	4616      	mov	r6, r2
 800aa02:	4699      	mov	r9, r3
 800aa04:	688a      	ldr	r2, [r1, #8]
 800aa06:	690b      	ldr	r3, [r1, #16]
 800aa08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	bfb8      	it	lt
 800aa10:	4613      	movlt	r3, r2
 800aa12:	6033      	str	r3, [r6, #0]
 800aa14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa18:	4607      	mov	r7, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	b10a      	cbz	r2, 800aa22 <_printf_common+0x26>
 800aa1e:	3301      	adds	r3, #1
 800aa20:	6033      	str	r3, [r6, #0]
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	0699      	lsls	r1, r3, #26
 800aa26:	bf42      	ittt	mi
 800aa28:	6833      	ldrmi	r3, [r6, #0]
 800aa2a:	3302      	addmi	r3, #2
 800aa2c:	6033      	strmi	r3, [r6, #0]
 800aa2e:	6825      	ldr	r5, [r4, #0]
 800aa30:	f015 0506 	ands.w	r5, r5, #6
 800aa34:	d106      	bne.n	800aa44 <_printf_common+0x48>
 800aa36:	f104 0a19 	add.w	sl, r4, #25
 800aa3a:	68e3      	ldr	r3, [r4, #12]
 800aa3c:	6832      	ldr	r2, [r6, #0]
 800aa3e:	1a9b      	subs	r3, r3, r2
 800aa40:	42ab      	cmp	r3, r5
 800aa42:	dc26      	bgt.n	800aa92 <_printf_common+0x96>
 800aa44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa48:	1e13      	subs	r3, r2, #0
 800aa4a:	6822      	ldr	r2, [r4, #0]
 800aa4c:	bf18      	it	ne
 800aa4e:	2301      	movne	r3, #1
 800aa50:	0692      	lsls	r2, r2, #26
 800aa52:	d42b      	bmi.n	800aaac <_printf_common+0xb0>
 800aa54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa58:	4649      	mov	r1, r9
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	47c0      	blx	r8
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d01e      	beq.n	800aaa0 <_printf_common+0xa4>
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	68e5      	ldr	r5, [r4, #12]
 800aa66:	6832      	ldr	r2, [r6, #0]
 800aa68:	f003 0306 	and.w	r3, r3, #6
 800aa6c:	2b04      	cmp	r3, #4
 800aa6e:	bf08      	it	eq
 800aa70:	1aad      	subeq	r5, r5, r2
 800aa72:	68a3      	ldr	r3, [r4, #8]
 800aa74:	6922      	ldr	r2, [r4, #16]
 800aa76:	bf0c      	ite	eq
 800aa78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa7c:	2500      	movne	r5, #0
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	bfc4      	itt	gt
 800aa82:	1a9b      	subgt	r3, r3, r2
 800aa84:	18ed      	addgt	r5, r5, r3
 800aa86:	2600      	movs	r6, #0
 800aa88:	341a      	adds	r4, #26
 800aa8a:	42b5      	cmp	r5, r6
 800aa8c:	d11a      	bne.n	800aac4 <_printf_common+0xc8>
 800aa8e:	2000      	movs	r0, #0
 800aa90:	e008      	b.n	800aaa4 <_printf_common+0xa8>
 800aa92:	2301      	movs	r3, #1
 800aa94:	4652      	mov	r2, sl
 800aa96:	4649      	mov	r1, r9
 800aa98:	4638      	mov	r0, r7
 800aa9a:	47c0      	blx	r8
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	d103      	bne.n	800aaa8 <_printf_common+0xac>
 800aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa8:	3501      	adds	r5, #1
 800aaaa:	e7c6      	b.n	800aa3a <_printf_common+0x3e>
 800aaac:	18e1      	adds	r1, r4, r3
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	2030      	movs	r0, #48	; 0x30
 800aab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aab6:	4422      	add	r2, r4
 800aab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aabc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aac0:	3302      	adds	r3, #2
 800aac2:	e7c7      	b.n	800aa54 <_printf_common+0x58>
 800aac4:	2301      	movs	r3, #1
 800aac6:	4622      	mov	r2, r4
 800aac8:	4649      	mov	r1, r9
 800aaca:	4638      	mov	r0, r7
 800aacc:	47c0      	blx	r8
 800aace:	3001      	adds	r0, #1
 800aad0:	d0e6      	beq.n	800aaa0 <_printf_common+0xa4>
 800aad2:	3601      	adds	r6, #1
 800aad4:	e7d9      	b.n	800aa8a <_printf_common+0x8e>
	...

0800aad8 <_printf_i>:
 800aad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aadc:	7e0f      	ldrb	r7, [r1, #24]
 800aade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aae0:	2f78      	cmp	r7, #120	; 0x78
 800aae2:	4691      	mov	r9, r2
 800aae4:	4680      	mov	r8, r0
 800aae6:	460c      	mov	r4, r1
 800aae8:	469a      	mov	sl, r3
 800aaea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aaee:	d807      	bhi.n	800ab00 <_printf_i+0x28>
 800aaf0:	2f62      	cmp	r7, #98	; 0x62
 800aaf2:	d80a      	bhi.n	800ab0a <_printf_i+0x32>
 800aaf4:	2f00      	cmp	r7, #0
 800aaf6:	f000 80d8 	beq.w	800acaa <_printf_i+0x1d2>
 800aafa:	2f58      	cmp	r7, #88	; 0x58
 800aafc:	f000 80a3 	beq.w	800ac46 <_printf_i+0x16e>
 800ab00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab08:	e03a      	b.n	800ab80 <_printf_i+0xa8>
 800ab0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab0e:	2b15      	cmp	r3, #21
 800ab10:	d8f6      	bhi.n	800ab00 <_printf_i+0x28>
 800ab12:	a101      	add	r1, pc, #4	; (adr r1, 800ab18 <_printf_i+0x40>)
 800ab14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab18:	0800ab71 	.word	0x0800ab71
 800ab1c:	0800ab85 	.word	0x0800ab85
 800ab20:	0800ab01 	.word	0x0800ab01
 800ab24:	0800ab01 	.word	0x0800ab01
 800ab28:	0800ab01 	.word	0x0800ab01
 800ab2c:	0800ab01 	.word	0x0800ab01
 800ab30:	0800ab85 	.word	0x0800ab85
 800ab34:	0800ab01 	.word	0x0800ab01
 800ab38:	0800ab01 	.word	0x0800ab01
 800ab3c:	0800ab01 	.word	0x0800ab01
 800ab40:	0800ab01 	.word	0x0800ab01
 800ab44:	0800ac91 	.word	0x0800ac91
 800ab48:	0800abb5 	.word	0x0800abb5
 800ab4c:	0800ac73 	.word	0x0800ac73
 800ab50:	0800ab01 	.word	0x0800ab01
 800ab54:	0800ab01 	.word	0x0800ab01
 800ab58:	0800acb3 	.word	0x0800acb3
 800ab5c:	0800ab01 	.word	0x0800ab01
 800ab60:	0800abb5 	.word	0x0800abb5
 800ab64:	0800ab01 	.word	0x0800ab01
 800ab68:	0800ab01 	.word	0x0800ab01
 800ab6c:	0800ac7b 	.word	0x0800ac7b
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	1d1a      	adds	r2, r3, #4
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	602a      	str	r2, [r5, #0]
 800ab78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab80:	2301      	movs	r3, #1
 800ab82:	e0a3      	b.n	800accc <_printf_i+0x1f4>
 800ab84:	6820      	ldr	r0, [r4, #0]
 800ab86:	6829      	ldr	r1, [r5, #0]
 800ab88:	0606      	lsls	r6, r0, #24
 800ab8a:	f101 0304 	add.w	r3, r1, #4
 800ab8e:	d50a      	bpl.n	800aba6 <_printf_i+0xce>
 800ab90:	680e      	ldr	r6, [r1, #0]
 800ab92:	602b      	str	r3, [r5, #0]
 800ab94:	2e00      	cmp	r6, #0
 800ab96:	da03      	bge.n	800aba0 <_printf_i+0xc8>
 800ab98:	232d      	movs	r3, #45	; 0x2d
 800ab9a:	4276      	negs	r6, r6
 800ab9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aba0:	485e      	ldr	r0, [pc, #376]	; (800ad1c <_printf_i+0x244>)
 800aba2:	230a      	movs	r3, #10
 800aba4:	e019      	b.n	800abda <_printf_i+0x102>
 800aba6:	680e      	ldr	r6, [r1, #0]
 800aba8:	602b      	str	r3, [r5, #0]
 800abaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abae:	bf18      	it	ne
 800abb0:	b236      	sxthne	r6, r6
 800abb2:	e7ef      	b.n	800ab94 <_printf_i+0xbc>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	6820      	ldr	r0, [r4, #0]
 800abb8:	1d19      	adds	r1, r3, #4
 800abba:	6029      	str	r1, [r5, #0]
 800abbc:	0601      	lsls	r1, r0, #24
 800abbe:	d501      	bpl.n	800abc4 <_printf_i+0xec>
 800abc0:	681e      	ldr	r6, [r3, #0]
 800abc2:	e002      	b.n	800abca <_printf_i+0xf2>
 800abc4:	0646      	lsls	r6, r0, #25
 800abc6:	d5fb      	bpl.n	800abc0 <_printf_i+0xe8>
 800abc8:	881e      	ldrh	r6, [r3, #0]
 800abca:	4854      	ldr	r0, [pc, #336]	; (800ad1c <_printf_i+0x244>)
 800abcc:	2f6f      	cmp	r7, #111	; 0x6f
 800abce:	bf0c      	ite	eq
 800abd0:	2308      	moveq	r3, #8
 800abd2:	230a      	movne	r3, #10
 800abd4:	2100      	movs	r1, #0
 800abd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abda:	6865      	ldr	r5, [r4, #4]
 800abdc:	60a5      	str	r5, [r4, #8]
 800abde:	2d00      	cmp	r5, #0
 800abe0:	bfa2      	ittt	ge
 800abe2:	6821      	ldrge	r1, [r4, #0]
 800abe4:	f021 0104 	bicge.w	r1, r1, #4
 800abe8:	6021      	strge	r1, [r4, #0]
 800abea:	b90e      	cbnz	r6, 800abf0 <_printf_i+0x118>
 800abec:	2d00      	cmp	r5, #0
 800abee:	d04d      	beq.n	800ac8c <_printf_i+0x1b4>
 800abf0:	4615      	mov	r5, r2
 800abf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800abf6:	fb03 6711 	mls	r7, r3, r1, r6
 800abfa:	5dc7      	ldrb	r7, [r0, r7]
 800abfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac00:	4637      	mov	r7, r6
 800ac02:	42bb      	cmp	r3, r7
 800ac04:	460e      	mov	r6, r1
 800ac06:	d9f4      	bls.n	800abf2 <_printf_i+0x11a>
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d10b      	bne.n	800ac24 <_printf_i+0x14c>
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	07de      	lsls	r6, r3, #31
 800ac10:	d508      	bpl.n	800ac24 <_printf_i+0x14c>
 800ac12:	6923      	ldr	r3, [r4, #16]
 800ac14:	6861      	ldr	r1, [r4, #4]
 800ac16:	4299      	cmp	r1, r3
 800ac18:	bfde      	ittt	le
 800ac1a:	2330      	movle	r3, #48	; 0x30
 800ac1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac24:	1b52      	subs	r2, r2, r5
 800ac26:	6122      	str	r2, [r4, #16]
 800ac28:	f8cd a000 	str.w	sl, [sp]
 800ac2c:	464b      	mov	r3, r9
 800ac2e:	aa03      	add	r2, sp, #12
 800ac30:	4621      	mov	r1, r4
 800ac32:	4640      	mov	r0, r8
 800ac34:	f7ff fee2 	bl	800a9fc <_printf_common>
 800ac38:	3001      	adds	r0, #1
 800ac3a:	d14c      	bne.n	800acd6 <_printf_i+0x1fe>
 800ac3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac40:	b004      	add	sp, #16
 800ac42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac46:	4835      	ldr	r0, [pc, #212]	; (800ad1c <_printf_i+0x244>)
 800ac48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac4c:	6829      	ldr	r1, [r5, #0]
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac54:	6029      	str	r1, [r5, #0]
 800ac56:	061d      	lsls	r5, r3, #24
 800ac58:	d514      	bpl.n	800ac84 <_printf_i+0x1ac>
 800ac5a:	07df      	lsls	r7, r3, #31
 800ac5c:	bf44      	itt	mi
 800ac5e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac62:	6023      	strmi	r3, [r4, #0]
 800ac64:	b91e      	cbnz	r6, 800ac6e <_printf_i+0x196>
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	f023 0320 	bic.w	r3, r3, #32
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	2310      	movs	r3, #16
 800ac70:	e7b0      	b.n	800abd4 <_printf_i+0xfc>
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	f043 0320 	orr.w	r3, r3, #32
 800ac78:	6023      	str	r3, [r4, #0]
 800ac7a:	2378      	movs	r3, #120	; 0x78
 800ac7c:	4828      	ldr	r0, [pc, #160]	; (800ad20 <_printf_i+0x248>)
 800ac7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac82:	e7e3      	b.n	800ac4c <_printf_i+0x174>
 800ac84:	0659      	lsls	r1, r3, #25
 800ac86:	bf48      	it	mi
 800ac88:	b2b6      	uxthmi	r6, r6
 800ac8a:	e7e6      	b.n	800ac5a <_printf_i+0x182>
 800ac8c:	4615      	mov	r5, r2
 800ac8e:	e7bb      	b.n	800ac08 <_printf_i+0x130>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	6826      	ldr	r6, [r4, #0]
 800ac94:	6961      	ldr	r1, [r4, #20]
 800ac96:	1d18      	adds	r0, r3, #4
 800ac98:	6028      	str	r0, [r5, #0]
 800ac9a:	0635      	lsls	r5, r6, #24
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	d501      	bpl.n	800aca4 <_printf_i+0x1cc>
 800aca0:	6019      	str	r1, [r3, #0]
 800aca2:	e002      	b.n	800acaa <_printf_i+0x1d2>
 800aca4:	0670      	lsls	r0, r6, #25
 800aca6:	d5fb      	bpl.n	800aca0 <_printf_i+0x1c8>
 800aca8:	8019      	strh	r1, [r3, #0]
 800acaa:	2300      	movs	r3, #0
 800acac:	6123      	str	r3, [r4, #16]
 800acae:	4615      	mov	r5, r2
 800acb0:	e7ba      	b.n	800ac28 <_printf_i+0x150>
 800acb2:	682b      	ldr	r3, [r5, #0]
 800acb4:	1d1a      	adds	r2, r3, #4
 800acb6:	602a      	str	r2, [r5, #0]
 800acb8:	681d      	ldr	r5, [r3, #0]
 800acba:	6862      	ldr	r2, [r4, #4]
 800acbc:	2100      	movs	r1, #0
 800acbe:	4628      	mov	r0, r5
 800acc0:	f7f5 faae 	bl	8000220 <memchr>
 800acc4:	b108      	cbz	r0, 800acca <_printf_i+0x1f2>
 800acc6:	1b40      	subs	r0, r0, r5
 800acc8:	6060      	str	r0, [r4, #4]
 800acca:	6863      	ldr	r3, [r4, #4]
 800accc:	6123      	str	r3, [r4, #16]
 800acce:	2300      	movs	r3, #0
 800acd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acd4:	e7a8      	b.n	800ac28 <_printf_i+0x150>
 800acd6:	6923      	ldr	r3, [r4, #16]
 800acd8:	462a      	mov	r2, r5
 800acda:	4649      	mov	r1, r9
 800acdc:	4640      	mov	r0, r8
 800acde:	47d0      	blx	sl
 800ace0:	3001      	adds	r0, #1
 800ace2:	d0ab      	beq.n	800ac3c <_printf_i+0x164>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	079b      	lsls	r3, r3, #30
 800ace8:	d413      	bmi.n	800ad12 <_printf_i+0x23a>
 800acea:	68e0      	ldr	r0, [r4, #12]
 800acec:	9b03      	ldr	r3, [sp, #12]
 800acee:	4298      	cmp	r0, r3
 800acf0:	bfb8      	it	lt
 800acf2:	4618      	movlt	r0, r3
 800acf4:	e7a4      	b.n	800ac40 <_printf_i+0x168>
 800acf6:	2301      	movs	r3, #1
 800acf8:	4632      	mov	r2, r6
 800acfa:	4649      	mov	r1, r9
 800acfc:	4640      	mov	r0, r8
 800acfe:	47d0      	blx	sl
 800ad00:	3001      	adds	r0, #1
 800ad02:	d09b      	beq.n	800ac3c <_printf_i+0x164>
 800ad04:	3501      	adds	r5, #1
 800ad06:	68e3      	ldr	r3, [r4, #12]
 800ad08:	9903      	ldr	r1, [sp, #12]
 800ad0a:	1a5b      	subs	r3, r3, r1
 800ad0c:	42ab      	cmp	r3, r5
 800ad0e:	dcf2      	bgt.n	800acf6 <_printf_i+0x21e>
 800ad10:	e7eb      	b.n	800acea <_printf_i+0x212>
 800ad12:	2500      	movs	r5, #0
 800ad14:	f104 0619 	add.w	r6, r4, #25
 800ad18:	e7f5      	b.n	800ad06 <_printf_i+0x22e>
 800ad1a:	bf00      	nop
 800ad1c:	08010538 	.word	0x08010538
 800ad20:	08010549 	.word	0x08010549

0800ad24 <_scanf_float>:
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	b087      	sub	sp, #28
 800ad2a:	4617      	mov	r7, r2
 800ad2c:	9303      	str	r3, [sp, #12]
 800ad2e:	688b      	ldr	r3, [r1, #8]
 800ad30:	1e5a      	subs	r2, r3, #1
 800ad32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ad36:	bf83      	ittte	hi
 800ad38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ad3c:	195b      	addhi	r3, r3, r5
 800ad3e:	9302      	strhi	r3, [sp, #8]
 800ad40:	2300      	movls	r3, #0
 800ad42:	bf86      	itte	hi
 800ad44:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ad48:	608b      	strhi	r3, [r1, #8]
 800ad4a:	9302      	strls	r3, [sp, #8]
 800ad4c:	680b      	ldr	r3, [r1, #0]
 800ad4e:	468b      	mov	fp, r1
 800ad50:	2500      	movs	r5, #0
 800ad52:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ad56:	f84b 3b1c 	str.w	r3, [fp], #28
 800ad5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ad5e:	4680      	mov	r8, r0
 800ad60:	460c      	mov	r4, r1
 800ad62:	465e      	mov	r6, fp
 800ad64:	46aa      	mov	sl, r5
 800ad66:	46a9      	mov	r9, r5
 800ad68:	9501      	str	r5, [sp, #4]
 800ad6a:	68a2      	ldr	r2, [r4, #8]
 800ad6c:	b152      	cbz	r2, 800ad84 <_scanf_float+0x60>
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2b4e      	cmp	r3, #78	; 0x4e
 800ad74:	d864      	bhi.n	800ae40 <_scanf_float+0x11c>
 800ad76:	2b40      	cmp	r3, #64	; 0x40
 800ad78:	d83c      	bhi.n	800adf4 <_scanf_float+0xd0>
 800ad7a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ad7e:	b2c8      	uxtb	r0, r1
 800ad80:	280e      	cmp	r0, #14
 800ad82:	d93a      	bls.n	800adfa <_scanf_float+0xd6>
 800ad84:	f1b9 0f00 	cmp.w	r9, #0
 800ad88:	d003      	beq.n	800ad92 <_scanf_float+0x6e>
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad96:	f1ba 0f01 	cmp.w	sl, #1
 800ad9a:	f200 8113 	bhi.w	800afc4 <_scanf_float+0x2a0>
 800ad9e:	455e      	cmp	r6, fp
 800ada0:	f200 8105 	bhi.w	800afae <_scanf_float+0x28a>
 800ada4:	2501      	movs	r5, #1
 800ada6:	4628      	mov	r0, r5
 800ada8:	b007      	add	sp, #28
 800adaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800adb2:	2a0d      	cmp	r2, #13
 800adb4:	d8e6      	bhi.n	800ad84 <_scanf_float+0x60>
 800adb6:	a101      	add	r1, pc, #4	; (adr r1, 800adbc <_scanf_float+0x98>)
 800adb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800adbc:	0800aefb 	.word	0x0800aefb
 800adc0:	0800ad85 	.word	0x0800ad85
 800adc4:	0800ad85 	.word	0x0800ad85
 800adc8:	0800ad85 	.word	0x0800ad85
 800adcc:	0800af5b 	.word	0x0800af5b
 800add0:	0800af33 	.word	0x0800af33
 800add4:	0800ad85 	.word	0x0800ad85
 800add8:	0800ad85 	.word	0x0800ad85
 800addc:	0800af09 	.word	0x0800af09
 800ade0:	0800ad85 	.word	0x0800ad85
 800ade4:	0800ad85 	.word	0x0800ad85
 800ade8:	0800ad85 	.word	0x0800ad85
 800adec:	0800ad85 	.word	0x0800ad85
 800adf0:	0800aec1 	.word	0x0800aec1
 800adf4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800adf8:	e7db      	b.n	800adb2 <_scanf_float+0x8e>
 800adfa:	290e      	cmp	r1, #14
 800adfc:	d8c2      	bhi.n	800ad84 <_scanf_float+0x60>
 800adfe:	a001      	add	r0, pc, #4	; (adr r0, 800ae04 <_scanf_float+0xe0>)
 800ae00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae04:	0800aeb3 	.word	0x0800aeb3
 800ae08:	0800ad85 	.word	0x0800ad85
 800ae0c:	0800aeb3 	.word	0x0800aeb3
 800ae10:	0800af47 	.word	0x0800af47
 800ae14:	0800ad85 	.word	0x0800ad85
 800ae18:	0800ae61 	.word	0x0800ae61
 800ae1c:	0800ae9d 	.word	0x0800ae9d
 800ae20:	0800ae9d 	.word	0x0800ae9d
 800ae24:	0800ae9d 	.word	0x0800ae9d
 800ae28:	0800ae9d 	.word	0x0800ae9d
 800ae2c:	0800ae9d 	.word	0x0800ae9d
 800ae30:	0800ae9d 	.word	0x0800ae9d
 800ae34:	0800ae9d 	.word	0x0800ae9d
 800ae38:	0800ae9d 	.word	0x0800ae9d
 800ae3c:	0800ae9d 	.word	0x0800ae9d
 800ae40:	2b6e      	cmp	r3, #110	; 0x6e
 800ae42:	d809      	bhi.n	800ae58 <_scanf_float+0x134>
 800ae44:	2b60      	cmp	r3, #96	; 0x60
 800ae46:	d8b2      	bhi.n	800adae <_scanf_float+0x8a>
 800ae48:	2b54      	cmp	r3, #84	; 0x54
 800ae4a:	d077      	beq.n	800af3c <_scanf_float+0x218>
 800ae4c:	2b59      	cmp	r3, #89	; 0x59
 800ae4e:	d199      	bne.n	800ad84 <_scanf_float+0x60>
 800ae50:	2d07      	cmp	r5, #7
 800ae52:	d197      	bne.n	800ad84 <_scanf_float+0x60>
 800ae54:	2508      	movs	r5, #8
 800ae56:	e029      	b.n	800aeac <_scanf_float+0x188>
 800ae58:	2b74      	cmp	r3, #116	; 0x74
 800ae5a:	d06f      	beq.n	800af3c <_scanf_float+0x218>
 800ae5c:	2b79      	cmp	r3, #121	; 0x79
 800ae5e:	e7f6      	b.n	800ae4e <_scanf_float+0x12a>
 800ae60:	6821      	ldr	r1, [r4, #0]
 800ae62:	05c8      	lsls	r0, r1, #23
 800ae64:	d51a      	bpl.n	800ae9c <_scanf_float+0x178>
 800ae66:	9b02      	ldr	r3, [sp, #8]
 800ae68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ae6c:	6021      	str	r1, [r4, #0]
 800ae6e:	f109 0901 	add.w	r9, r9, #1
 800ae72:	b11b      	cbz	r3, 800ae7c <_scanf_float+0x158>
 800ae74:	3b01      	subs	r3, #1
 800ae76:	3201      	adds	r2, #1
 800ae78:	9302      	str	r3, [sp, #8]
 800ae7a:	60a2      	str	r2, [r4, #8]
 800ae7c:	68a3      	ldr	r3, [r4, #8]
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	60a3      	str	r3, [r4, #8]
 800ae82:	6923      	ldr	r3, [r4, #16]
 800ae84:	3301      	adds	r3, #1
 800ae86:	6123      	str	r3, [r4, #16]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	607b      	str	r3, [r7, #4]
 800ae90:	f340 8084 	ble.w	800af9c <_scanf_float+0x278>
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	3301      	adds	r3, #1
 800ae98:	603b      	str	r3, [r7, #0]
 800ae9a:	e766      	b.n	800ad6a <_scanf_float+0x46>
 800ae9c:	eb1a 0f05 	cmn.w	sl, r5
 800aea0:	f47f af70 	bne.w	800ad84 <_scanf_float+0x60>
 800aea4:	6822      	ldr	r2, [r4, #0]
 800aea6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aeaa:	6022      	str	r2, [r4, #0]
 800aeac:	f806 3b01 	strb.w	r3, [r6], #1
 800aeb0:	e7e4      	b.n	800ae7c <_scanf_float+0x158>
 800aeb2:	6822      	ldr	r2, [r4, #0]
 800aeb4:	0610      	lsls	r0, r2, #24
 800aeb6:	f57f af65 	bpl.w	800ad84 <_scanf_float+0x60>
 800aeba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aebe:	e7f4      	b.n	800aeaa <_scanf_float+0x186>
 800aec0:	f1ba 0f00 	cmp.w	sl, #0
 800aec4:	d10e      	bne.n	800aee4 <_scanf_float+0x1c0>
 800aec6:	f1b9 0f00 	cmp.w	r9, #0
 800aeca:	d10e      	bne.n	800aeea <_scanf_float+0x1c6>
 800aecc:	6822      	ldr	r2, [r4, #0]
 800aece:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aed2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aed6:	d108      	bne.n	800aeea <_scanf_float+0x1c6>
 800aed8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aedc:	6022      	str	r2, [r4, #0]
 800aede:	f04f 0a01 	mov.w	sl, #1
 800aee2:	e7e3      	b.n	800aeac <_scanf_float+0x188>
 800aee4:	f1ba 0f02 	cmp.w	sl, #2
 800aee8:	d055      	beq.n	800af96 <_scanf_float+0x272>
 800aeea:	2d01      	cmp	r5, #1
 800aeec:	d002      	beq.n	800aef4 <_scanf_float+0x1d0>
 800aeee:	2d04      	cmp	r5, #4
 800aef0:	f47f af48 	bne.w	800ad84 <_scanf_float+0x60>
 800aef4:	3501      	adds	r5, #1
 800aef6:	b2ed      	uxtb	r5, r5
 800aef8:	e7d8      	b.n	800aeac <_scanf_float+0x188>
 800aefa:	f1ba 0f01 	cmp.w	sl, #1
 800aefe:	f47f af41 	bne.w	800ad84 <_scanf_float+0x60>
 800af02:	f04f 0a02 	mov.w	sl, #2
 800af06:	e7d1      	b.n	800aeac <_scanf_float+0x188>
 800af08:	b97d      	cbnz	r5, 800af2a <_scanf_float+0x206>
 800af0a:	f1b9 0f00 	cmp.w	r9, #0
 800af0e:	f47f af3c 	bne.w	800ad8a <_scanf_float+0x66>
 800af12:	6822      	ldr	r2, [r4, #0]
 800af14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af1c:	f47f af39 	bne.w	800ad92 <_scanf_float+0x6e>
 800af20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af24:	6022      	str	r2, [r4, #0]
 800af26:	2501      	movs	r5, #1
 800af28:	e7c0      	b.n	800aeac <_scanf_float+0x188>
 800af2a:	2d03      	cmp	r5, #3
 800af2c:	d0e2      	beq.n	800aef4 <_scanf_float+0x1d0>
 800af2e:	2d05      	cmp	r5, #5
 800af30:	e7de      	b.n	800aef0 <_scanf_float+0x1cc>
 800af32:	2d02      	cmp	r5, #2
 800af34:	f47f af26 	bne.w	800ad84 <_scanf_float+0x60>
 800af38:	2503      	movs	r5, #3
 800af3a:	e7b7      	b.n	800aeac <_scanf_float+0x188>
 800af3c:	2d06      	cmp	r5, #6
 800af3e:	f47f af21 	bne.w	800ad84 <_scanf_float+0x60>
 800af42:	2507      	movs	r5, #7
 800af44:	e7b2      	b.n	800aeac <_scanf_float+0x188>
 800af46:	6822      	ldr	r2, [r4, #0]
 800af48:	0591      	lsls	r1, r2, #22
 800af4a:	f57f af1b 	bpl.w	800ad84 <_scanf_float+0x60>
 800af4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800af52:	6022      	str	r2, [r4, #0]
 800af54:	f8cd 9004 	str.w	r9, [sp, #4]
 800af58:	e7a8      	b.n	800aeac <_scanf_float+0x188>
 800af5a:	6822      	ldr	r2, [r4, #0]
 800af5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800af60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800af64:	d006      	beq.n	800af74 <_scanf_float+0x250>
 800af66:	0550      	lsls	r0, r2, #21
 800af68:	f57f af0c 	bpl.w	800ad84 <_scanf_float+0x60>
 800af6c:	f1b9 0f00 	cmp.w	r9, #0
 800af70:	f43f af0f 	beq.w	800ad92 <_scanf_float+0x6e>
 800af74:	0591      	lsls	r1, r2, #22
 800af76:	bf58      	it	pl
 800af78:	9901      	ldrpl	r1, [sp, #4]
 800af7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af7e:	bf58      	it	pl
 800af80:	eba9 0101 	subpl.w	r1, r9, r1
 800af84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800af88:	bf58      	it	pl
 800af8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800af8e:	6022      	str	r2, [r4, #0]
 800af90:	f04f 0900 	mov.w	r9, #0
 800af94:	e78a      	b.n	800aeac <_scanf_float+0x188>
 800af96:	f04f 0a03 	mov.w	sl, #3
 800af9a:	e787      	b.n	800aeac <_scanf_float+0x188>
 800af9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800afa0:	4639      	mov	r1, r7
 800afa2:	4640      	mov	r0, r8
 800afa4:	4798      	blx	r3
 800afa6:	2800      	cmp	r0, #0
 800afa8:	f43f aedf 	beq.w	800ad6a <_scanf_float+0x46>
 800afac:	e6ea      	b.n	800ad84 <_scanf_float+0x60>
 800afae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afb6:	463a      	mov	r2, r7
 800afb8:	4640      	mov	r0, r8
 800afba:	4798      	blx	r3
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	6123      	str	r3, [r4, #16]
 800afc2:	e6ec      	b.n	800ad9e <_scanf_float+0x7a>
 800afc4:	1e6b      	subs	r3, r5, #1
 800afc6:	2b06      	cmp	r3, #6
 800afc8:	d825      	bhi.n	800b016 <_scanf_float+0x2f2>
 800afca:	2d02      	cmp	r5, #2
 800afcc:	d836      	bhi.n	800b03c <_scanf_float+0x318>
 800afce:	455e      	cmp	r6, fp
 800afd0:	f67f aee8 	bls.w	800ada4 <_scanf_float+0x80>
 800afd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afd8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afdc:	463a      	mov	r2, r7
 800afde:	4640      	mov	r0, r8
 800afe0:	4798      	blx	r3
 800afe2:	6923      	ldr	r3, [r4, #16]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	6123      	str	r3, [r4, #16]
 800afe8:	e7f1      	b.n	800afce <_scanf_float+0x2aa>
 800afea:	9802      	ldr	r0, [sp, #8]
 800afec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aff0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aff4:	9002      	str	r0, [sp, #8]
 800aff6:	463a      	mov	r2, r7
 800aff8:	4640      	mov	r0, r8
 800affa:	4798      	blx	r3
 800affc:	6923      	ldr	r3, [r4, #16]
 800affe:	3b01      	subs	r3, #1
 800b000:	6123      	str	r3, [r4, #16]
 800b002:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b006:	fa5f fa8a 	uxtb.w	sl, sl
 800b00a:	f1ba 0f02 	cmp.w	sl, #2
 800b00e:	d1ec      	bne.n	800afea <_scanf_float+0x2c6>
 800b010:	3d03      	subs	r5, #3
 800b012:	b2ed      	uxtb	r5, r5
 800b014:	1b76      	subs	r6, r6, r5
 800b016:	6823      	ldr	r3, [r4, #0]
 800b018:	05da      	lsls	r2, r3, #23
 800b01a:	d52f      	bpl.n	800b07c <_scanf_float+0x358>
 800b01c:	055b      	lsls	r3, r3, #21
 800b01e:	d510      	bpl.n	800b042 <_scanf_float+0x31e>
 800b020:	455e      	cmp	r6, fp
 800b022:	f67f aebf 	bls.w	800ada4 <_scanf_float+0x80>
 800b026:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b02a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b02e:	463a      	mov	r2, r7
 800b030:	4640      	mov	r0, r8
 800b032:	4798      	blx	r3
 800b034:	6923      	ldr	r3, [r4, #16]
 800b036:	3b01      	subs	r3, #1
 800b038:	6123      	str	r3, [r4, #16]
 800b03a:	e7f1      	b.n	800b020 <_scanf_float+0x2fc>
 800b03c:	46aa      	mov	sl, r5
 800b03e:	9602      	str	r6, [sp, #8]
 800b040:	e7df      	b.n	800b002 <_scanf_float+0x2de>
 800b042:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b046:	6923      	ldr	r3, [r4, #16]
 800b048:	2965      	cmp	r1, #101	; 0x65
 800b04a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b04e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b052:	6123      	str	r3, [r4, #16]
 800b054:	d00c      	beq.n	800b070 <_scanf_float+0x34c>
 800b056:	2945      	cmp	r1, #69	; 0x45
 800b058:	d00a      	beq.n	800b070 <_scanf_float+0x34c>
 800b05a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b05e:	463a      	mov	r2, r7
 800b060:	4640      	mov	r0, r8
 800b062:	4798      	blx	r3
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	1eb5      	subs	r5, r6, #2
 800b06e:	6123      	str	r3, [r4, #16]
 800b070:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b074:	463a      	mov	r2, r7
 800b076:	4640      	mov	r0, r8
 800b078:	4798      	blx	r3
 800b07a:	462e      	mov	r6, r5
 800b07c:	6825      	ldr	r5, [r4, #0]
 800b07e:	f015 0510 	ands.w	r5, r5, #16
 800b082:	d159      	bne.n	800b138 <_scanf_float+0x414>
 800b084:	7035      	strb	r5, [r6, #0]
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b08c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b090:	d11b      	bne.n	800b0ca <_scanf_float+0x3a6>
 800b092:	9b01      	ldr	r3, [sp, #4]
 800b094:	454b      	cmp	r3, r9
 800b096:	eba3 0209 	sub.w	r2, r3, r9
 800b09a:	d123      	bne.n	800b0e4 <_scanf_float+0x3c0>
 800b09c:	2200      	movs	r2, #0
 800b09e:	4659      	mov	r1, fp
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	f001 f88b 	bl	800c1bc <_strtod_r>
 800b0a6:	6822      	ldr	r2, [r4, #0]
 800b0a8:	9b03      	ldr	r3, [sp, #12]
 800b0aa:	f012 0f02 	tst.w	r2, #2
 800b0ae:	ec57 6b10 	vmov	r6, r7, d0
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	d021      	beq.n	800b0fa <_scanf_float+0x3d6>
 800b0b6:	9903      	ldr	r1, [sp, #12]
 800b0b8:	1d1a      	adds	r2, r3, #4
 800b0ba:	600a      	str	r2, [r1, #0]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	e9c3 6700 	strd	r6, r7, [r3]
 800b0c2:	68e3      	ldr	r3, [r4, #12]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	60e3      	str	r3, [r4, #12]
 800b0c8:	e66d      	b.n	800ada6 <_scanf_float+0x82>
 800b0ca:	9b04      	ldr	r3, [sp, #16]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0e5      	beq.n	800b09c <_scanf_float+0x378>
 800b0d0:	9905      	ldr	r1, [sp, #20]
 800b0d2:	230a      	movs	r3, #10
 800b0d4:	462a      	mov	r2, r5
 800b0d6:	3101      	adds	r1, #1
 800b0d8:	4640      	mov	r0, r8
 800b0da:	f001 f8f7 	bl	800c2cc <_strtol_r>
 800b0de:	9b04      	ldr	r3, [sp, #16]
 800b0e0:	9e05      	ldr	r6, [sp, #20]
 800b0e2:	1ac2      	subs	r2, r0, r3
 800b0e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b0e8:	429e      	cmp	r6, r3
 800b0ea:	bf28      	it	cs
 800b0ec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b0f0:	4912      	ldr	r1, [pc, #72]	; (800b13c <_scanf_float+0x418>)
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f000 f998 	bl	800b428 <siprintf>
 800b0f8:	e7d0      	b.n	800b09c <_scanf_float+0x378>
 800b0fa:	9903      	ldr	r1, [sp, #12]
 800b0fc:	f012 0f04 	tst.w	r2, #4
 800b100:	f103 0204 	add.w	r2, r3, #4
 800b104:	600a      	str	r2, [r1, #0]
 800b106:	d1d9      	bne.n	800b0bc <_scanf_float+0x398>
 800b108:	f8d3 8000 	ldr.w	r8, [r3]
 800b10c:	ee10 2a10 	vmov	r2, s0
 800b110:	ee10 0a10 	vmov	r0, s0
 800b114:	463b      	mov	r3, r7
 800b116:	4639      	mov	r1, r7
 800b118:	f7f5 fd28 	bl	8000b6c <__aeabi_dcmpun>
 800b11c:	b128      	cbz	r0, 800b12a <_scanf_float+0x406>
 800b11e:	4808      	ldr	r0, [pc, #32]	; (800b140 <_scanf_float+0x41c>)
 800b120:	f000 f97c 	bl	800b41c <nanf>
 800b124:	ed88 0a00 	vstr	s0, [r8]
 800b128:	e7cb      	b.n	800b0c2 <_scanf_float+0x39e>
 800b12a:	4630      	mov	r0, r6
 800b12c:	4639      	mov	r1, r7
 800b12e:	f7f5 fd7b 	bl	8000c28 <__aeabi_d2f>
 800b132:	f8c8 0000 	str.w	r0, [r8]
 800b136:	e7c4      	b.n	800b0c2 <_scanf_float+0x39e>
 800b138:	2500      	movs	r5, #0
 800b13a:	e634      	b.n	800ada6 <_scanf_float+0x82>
 800b13c:	0801055a 	.word	0x0801055a
 800b140:	080109e3 	.word	0x080109e3

0800b144 <iprintf>:
 800b144:	b40f      	push	{r0, r1, r2, r3}
 800b146:	4b0a      	ldr	r3, [pc, #40]	; (800b170 <iprintf+0x2c>)
 800b148:	b513      	push	{r0, r1, r4, lr}
 800b14a:	681c      	ldr	r4, [r3, #0]
 800b14c:	b124      	cbz	r4, 800b158 <iprintf+0x14>
 800b14e:	69a3      	ldr	r3, [r4, #24]
 800b150:	b913      	cbnz	r3, 800b158 <iprintf+0x14>
 800b152:	4620      	mov	r0, r4
 800b154:	f002 f946 	bl	800d3e4 <__sinit>
 800b158:	ab05      	add	r3, sp, #20
 800b15a:	9a04      	ldr	r2, [sp, #16]
 800b15c:	68a1      	ldr	r1, [r4, #8]
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	4620      	mov	r0, r4
 800b162:	f003 ff21 	bl	800efa8 <_vfiprintf_r>
 800b166:	b002      	add	sp, #8
 800b168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b16c:	b004      	add	sp, #16
 800b16e:	4770      	bx	lr
 800b170:	2000000c 	.word	0x2000000c

0800b174 <_puts_r>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	460e      	mov	r6, r1
 800b178:	4605      	mov	r5, r0
 800b17a:	b118      	cbz	r0, 800b184 <_puts_r+0x10>
 800b17c:	6983      	ldr	r3, [r0, #24]
 800b17e:	b90b      	cbnz	r3, 800b184 <_puts_r+0x10>
 800b180:	f002 f930 	bl	800d3e4 <__sinit>
 800b184:	69ab      	ldr	r3, [r5, #24]
 800b186:	68ac      	ldr	r4, [r5, #8]
 800b188:	b913      	cbnz	r3, 800b190 <_puts_r+0x1c>
 800b18a:	4628      	mov	r0, r5
 800b18c:	f002 f92a 	bl	800d3e4 <__sinit>
 800b190:	4b2c      	ldr	r3, [pc, #176]	; (800b244 <_puts_r+0xd0>)
 800b192:	429c      	cmp	r4, r3
 800b194:	d120      	bne.n	800b1d8 <_puts_r+0x64>
 800b196:	686c      	ldr	r4, [r5, #4]
 800b198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b19a:	07db      	lsls	r3, r3, #31
 800b19c:	d405      	bmi.n	800b1aa <_puts_r+0x36>
 800b19e:	89a3      	ldrh	r3, [r4, #12]
 800b1a0:	0598      	lsls	r0, r3, #22
 800b1a2:	d402      	bmi.n	800b1aa <_puts_r+0x36>
 800b1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1a6:	f002 fd4c 	bl	800dc42 <__retarget_lock_acquire_recursive>
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	0719      	lsls	r1, r3, #28
 800b1ae:	d51d      	bpl.n	800b1ec <_puts_r+0x78>
 800b1b0:	6923      	ldr	r3, [r4, #16]
 800b1b2:	b1db      	cbz	r3, 800b1ec <_puts_r+0x78>
 800b1b4:	3e01      	subs	r6, #1
 800b1b6:	68a3      	ldr	r3, [r4, #8]
 800b1b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	60a3      	str	r3, [r4, #8]
 800b1c0:	bb39      	cbnz	r1, 800b212 <_puts_r+0x9e>
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	da38      	bge.n	800b238 <_puts_r+0xc4>
 800b1c6:	4622      	mov	r2, r4
 800b1c8:	210a      	movs	r1, #10
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f001 f880 	bl	800c2d0 <__swbuf_r>
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d011      	beq.n	800b1f8 <_puts_r+0x84>
 800b1d4:	250a      	movs	r5, #10
 800b1d6:	e011      	b.n	800b1fc <_puts_r+0x88>
 800b1d8:	4b1b      	ldr	r3, [pc, #108]	; (800b248 <_puts_r+0xd4>)
 800b1da:	429c      	cmp	r4, r3
 800b1dc:	d101      	bne.n	800b1e2 <_puts_r+0x6e>
 800b1de:	68ac      	ldr	r4, [r5, #8]
 800b1e0:	e7da      	b.n	800b198 <_puts_r+0x24>
 800b1e2:	4b1a      	ldr	r3, [pc, #104]	; (800b24c <_puts_r+0xd8>)
 800b1e4:	429c      	cmp	r4, r3
 800b1e6:	bf08      	it	eq
 800b1e8:	68ec      	ldreq	r4, [r5, #12]
 800b1ea:	e7d5      	b.n	800b198 <_puts_r+0x24>
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f001 f8d2 	bl	800c398 <__swsetup_r>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d0dd      	beq.n	800b1b4 <_puts_r+0x40>
 800b1f8:	f04f 35ff 	mov.w	r5, #4294967295
 800b1fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1fe:	07da      	lsls	r2, r3, #31
 800b200:	d405      	bmi.n	800b20e <_puts_r+0x9a>
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	059b      	lsls	r3, r3, #22
 800b206:	d402      	bmi.n	800b20e <_puts_r+0x9a>
 800b208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b20a:	f002 fd1b 	bl	800dc44 <__retarget_lock_release_recursive>
 800b20e:	4628      	mov	r0, r5
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	2b00      	cmp	r3, #0
 800b214:	da04      	bge.n	800b220 <_puts_r+0xac>
 800b216:	69a2      	ldr	r2, [r4, #24]
 800b218:	429a      	cmp	r2, r3
 800b21a:	dc06      	bgt.n	800b22a <_puts_r+0xb6>
 800b21c:	290a      	cmp	r1, #10
 800b21e:	d004      	beq.n	800b22a <_puts_r+0xb6>
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	6022      	str	r2, [r4, #0]
 800b226:	7019      	strb	r1, [r3, #0]
 800b228:	e7c5      	b.n	800b1b6 <_puts_r+0x42>
 800b22a:	4622      	mov	r2, r4
 800b22c:	4628      	mov	r0, r5
 800b22e:	f001 f84f 	bl	800c2d0 <__swbuf_r>
 800b232:	3001      	adds	r0, #1
 800b234:	d1bf      	bne.n	800b1b6 <_puts_r+0x42>
 800b236:	e7df      	b.n	800b1f8 <_puts_r+0x84>
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	250a      	movs	r5, #10
 800b23c:	1c5a      	adds	r2, r3, #1
 800b23e:	6022      	str	r2, [r4, #0]
 800b240:	701d      	strb	r5, [r3, #0]
 800b242:	e7db      	b.n	800b1fc <_puts_r+0x88>
 800b244:	08010764 	.word	0x08010764
 800b248:	08010784 	.word	0x08010784
 800b24c:	08010744 	.word	0x08010744

0800b250 <puts>:
 800b250:	4b02      	ldr	r3, [pc, #8]	; (800b25c <puts+0xc>)
 800b252:	4601      	mov	r1, r0
 800b254:	6818      	ldr	r0, [r3, #0]
 800b256:	f7ff bf8d 	b.w	800b174 <_puts_r>
 800b25a:	bf00      	nop
 800b25c:	2000000c 	.word	0x2000000c

0800b260 <iscanf>:
 800b260:	b40f      	push	{r0, r1, r2, r3}
 800b262:	4b0a      	ldr	r3, [pc, #40]	; (800b28c <iscanf+0x2c>)
 800b264:	b513      	push	{r0, r1, r4, lr}
 800b266:	681c      	ldr	r4, [r3, #0]
 800b268:	b124      	cbz	r4, 800b274 <iscanf+0x14>
 800b26a:	69a3      	ldr	r3, [r4, #24]
 800b26c:	b913      	cbnz	r3, 800b274 <iscanf+0x14>
 800b26e:	4620      	mov	r0, r4
 800b270:	f002 f8b8 	bl	800d3e4 <__sinit>
 800b274:	ab05      	add	r3, sp, #20
 800b276:	9a04      	ldr	r2, [sp, #16]
 800b278:	6861      	ldr	r1, [r4, #4]
 800b27a:	9301      	str	r3, [sp, #4]
 800b27c:	4620      	mov	r0, r4
 800b27e:	f004 f969 	bl	800f554 <_vfiscanf_r>
 800b282:	b002      	add	sp, #8
 800b284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b288:	b004      	add	sp, #16
 800b28a:	4770      	bx	lr
 800b28c:	2000000c 	.word	0x2000000c

0800b290 <setvbuf>:
 800b290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b294:	461d      	mov	r5, r3
 800b296:	4b5d      	ldr	r3, [pc, #372]	; (800b40c <setvbuf+0x17c>)
 800b298:	681f      	ldr	r7, [r3, #0]
 800b29a:	4604      	mov	r4, r0
 800b29c:	460e      	mov	r6, r1
 800b29e:	4690      	mov	r8, r2
 800b2a0:	b127      	cbz	r7, 800b2ac <setvbuf+0x1c>
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	b913      	cbnz	r3, 800b2ac <setvbuf+0x1c>
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	f002 f89c 	bl	800d3e4 <__sinit>
 800b2ac:	4b58      	ldr	r3, [pc, #352]	; (800b410 <setvbuf+0x180>)
 800b2ae:	429c      	cmp	r4, r3
 800b2b0:	d167      	bne.n	800b382 <setvbuf+0xf2>
 800b2b2:	687c      	ldr	r4, [r7, #4]
 800b2b4:	f1b8 0f02 	cmp.w	r8, #2
 800b2b8:	d006      	beq.n	800b2c8 <setvbuf+0x38>
 800b2ba:	f1b8 0f01 	cmp.w	r8, #1
 800b2be:	f200 809f 	bhi.w	800b400 <setvbuf+0x170>
 800b2c2:	2d00      	cmp	r5, #0
 800b2c4:	f2c0 809c 	blt.w	800b400 <setvbuf+0x170>
 800b2c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2ca:	07db      	lsls	r3, r3, #31
 800b2cc:	d405      	bmi.n	800b2da <setvbuf+0x4a>
 800b2ce:	89a3      	ldrh	r3, [r4, #12]
 800b2d0:	0598      	lsls	r0, r3, #22
 800b2d2:	d402      	bmi.n	800b2da <setvbuf+0x4a>
 800b2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2d6:	f002 fcb4 	bl	800dc42 <__retarget_lock_acquire_recursive>
 800b2da:	4621      	mov	r1, r4
 800b2dc:	4638      	mov	r0, r7
 800b2de:	f001 ffdb 	bl	800d298 <_fflush_r>
 800b2e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2e4:	b141      	cbz	r1, 800b2f8 <setvbuf+0x68>
 800b2e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2ea:	4299      	cmp	r1, r3
 800b2ec:	d002      	beq.n	800b2f4 <setvbuf+0x64>
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	f003 fa22 	bl	800e738 <_free_r>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	6363      	str	r3, [r4, #52]	; 0x34
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	61a3      	str	r3, [r4, #24]
 800b2fc:	6063      	str	r3, [r4, #4]
 800b2fe:	89a3      	ldrh	r3, [r4, #12]
 800b300:	0619      	lsls	r1, r3, #24
 800b302:	d503      	bpl.n	800b30c <setvbuf+0x7c>
 800b304:	6921      	ldr	r1, [r4, #16]
 800b306:	4638      	mov	r0, r7
 800b308:	f003 fa16 	bl	800e738 <_free_r>
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b312:	f023 0303 	bic.w	r3, r3, #3
 800b316:	f1b8 0f02 	cmp.w	r8, #2
 800b31a:	81a3      	strh	r3, [r4, #12]
 800b31c:	d06c      	beq.n	800b3f8 <setvbuf+0x168>
 800b31e:	ab01      	add	r3, sp, #4
 800b320:	466a      	mov	r2, sp
 800b322:	4621      	mov	r1, r4
 800b324:	4638      	mov	r0, r7
 800b326:	f002 fca1 	bl	800dc6c <__swhatbuf_r>
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	4318      	orrs	r0, r3
 800b32e:	81a0      	strh	r0, [r4, #12]
 800b330:	2d00      	cmp	r5, #0
 800b332:	d130      	bne.n	800b396 <setvbuf+0x106>
 800b334:	9d00      	ldr	r5, [sp, #0]
 800b336:	4628      	mov	r0, r5
 800b338:	f002 fcfe 	bl	800dd38 <malloc>
 800b33c:	4606      	mov	r6, r0
 800b33e:	2800      	cmp	r0, #0
 800b340:	d155      	bne.n	800b3ee <setvbuf+0x15e>
 800b342:	f8dd 9000 	ldr.w	r9, [sp]
 800b346:	45a9      	cmp	r9, r5
 800b348:	d14a      	bne.n	800b3e0 <setvbuf+0x150>
 800b34a:	f04f 35ff 	mov.w	r5, #4294967295
 800b34e:	2200      	movs	r2, #0
 800b350:	60a2      	str	r2, [r4, #8]
 800b352:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b356:	6022      	str	r2, [r4, #0]
 800b358:	6122      	str	r2, [r4, #16]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b360:	6162      	str	r2, [r4, #20]
 800b362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b364:	f043 0302 	orr.w	r3, r3, #2
 800b368:	07d2      	lsls	r2, r2, #31
 800b36a:	81a3      	strh	r3, [r4, #12]
 800b36c:	d405      	bmi.n	800b37a <setvbuf+0xea>
 800b36e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b372:	d102      	bne.n	800b37a <setvbuf+0xea>
 800b374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b376:	f002 fc65 	bl	800dc44 <__retarget_lock_release_recursive>
 800b37a:	4628      	mov	r0, r5
 800b37c:	b003      	add	sp, #12
 800b37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b382:	4b24      	ldr	r3, [pc, #144]	; (800b414 <setvbuf+0x184>)
 800b384:	429c      	cmp	r4, r3
 800b386:	d101      	bne.n	800b38c <setvbuf+0xfc>
 800b388:	68bc      	ldr	r4, [r7, #8]
 800b38a:	e793      	b.n	800b2b4 <setvbuf+0x24>
 800b38c:	4b22      	ldr	r3, [pc, #136]	; (800b418 <setvbuf+0x188>)
 800b38e:	429c      	cmp	r4, r3
 800b390:	bf08      	it	eq
 800b392:	68fc      	ldreq	r4, [r7, #12]
 800b394:	e78e      	b.n	800b2b4 <setvbuf+0x24>
 800b396:	2e00      	cmp	r6, #0
 800b398:	d0cd      	beq.n	800b336 <setvbuf+0xa6>
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	b913      	cbnz	r3, 800b3a4 <setvbuf+0x114>
 800b39e:	4638      	mov	r0, r7
 800b3a0:	f002 f820 	bl	800d3e4 <__sinit>
 800b3a4:	f1b8 0f01 	cmp.w	r8, #1
 800b3a8:	bf08      	it	eq
 800b3aa:	89a3      	ldrheq	r3, [r4, #12]
 800b3ac:	6026      	str	r6, [r4, #0]
 800b3ae:	bf04      	itt	eq
 800b3b0:	f043 0301 	orreq.w	r3, r3, #1
 800b3b4:	81a3      	strheq	r3, [r4, #12]
 800b3b6:	89a2      	ldrh	r2, [r4, #12]
 800b3b8:	f012 0308 	ands.w	r3, r2, #8
 800b3bc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b3c0:	d01c      	beq.n	800b3fc <setvbuf+0x16c>
 800b3c2:	07d3      	lsls	r3, r2, #31
 800b3c4:	bf41      	itttt	mi
 800b3c6:	2300      	movmi	r3, #0
 800b3c8:	426d      	negmi	r5, r5
 800b3ca:	60a3      	strmi	r3, [r4, #8]
 800b3cc:	61a5      	strmi	r5, [r4, #24]
 800b3ce:	bf58      	it	pl
 800b3d0:	60a5      	strpl	r5, [r4, #8]
 800b3d2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b3d4:	f015 0501 	ands.w	r5, r5, #1
 800b3d8:	d115      	bne.n	800b406 <setvbuf+0x176>
 800b3da:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b3de:	e7c8      	b.n	800b372 <setvbuf+0xe2>
 800b3e0:	4648      	mov	r0, r9
 800b3e2:	f002 fca9 	bl	800dd38 <malloc>
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d0ae      	beq.n	800b34a <setvbuf+0xba>
 800b3ec:	464d      	mov	r5, r9
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f4:	81a3      	strh	r3, [r4, #12]
 800b3f6:	e7d0      	b.n	800b39a <setvbuf+0x10a>
 800b3f8:	2500      	movs	r5, #0
 800b3fa:	e7a8      	b.n	800b34e <setvbuf+0xbe>
 800b3fc:	60a3      	str	r3, [r4, #8]
 800b3fe:	e7e8      	b.n	800b3d2 <setvbuf+0x142>
 800b400:	f04f 35ff 	mov.w	r5, #4294967295
 800b404:	e7b9      	b.n	800b37a <setvbuf+0xea>
 800b406:	2500      	movs	r5, #0
 800b408:	e7b7      	b.n	800b37a <setvbuf+0xea>
 800b40a:	bf00      	nop
 800b40c:	2000000c 	.word	0x2000000c
 800b410:	08010764 	.word	0x08010764
 800b414:	08010784 	.word	0x08010784
 800b418:	08010744 	.word	0x08010744

0800b41c <nanf>:
 800b41c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b424 <nanf+0x8>
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	7fc00000 	.word	0x7fc00000

0800b428 <siprintf>:
 800b428:	b40e      	push	{r1, r2, r3}
 800b42a:	b500      	push	{lr}
 800b42c:	b09c      	sub	sp, #112	; 0x70
 800b42e:	ab1d      	add	r3, sp, #116	; 0x74
 800b430:	9002      	str	r0, [sp, #8]
 800b432:	9006      	str	r0, [sp, #24]
 800b434:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b438:	4809      	ldr	r0, [pc, #36]	; (800b460 <siprintf+0x38>)
 800b43a:	9107      	str	r1, [sp, #28]
 800b43c:	9104      	str	r1, [sp, #16]
 800b43e:	4909      	ldr	r1, [pc, #36]	; (800b464 <siprintf+0x3c>)
 800b440:	f853 2b04 	ldr.w	r2, [r3], #4
 800b444:	9105      	str	r1, [sp, #20]
 800b446:	6800      	ldr	r0, [r0, #0]
 800b448:	9301      	str	r3, [sp, #4]
 800b44a:	a902      	add	r1, sp, #8
 800b44c:	f003 fab0 	bl	800e9b0 <_svfiprintf_r>
 800b450:	9b02      	ldr	r3, [sp, #8]
 800b452:	2200      	movs	r2, #0
 800b454:	701a      	strb	r2, [r3, #0]
 800b456:	b01c      	add	sp, #112	; 0x70
 800b458:	f85d eb04 	ldr.w	lr, [sp], #4
 800b45c:	b003      	add	sp, #12
 800b45e:	4770      	bx	lr
 800b460:	2000000c 	.word	0x2000000c
 800b464:	ffff0208 	.word	0xffff0208

0800b468 <siscanf>:
 800b468:	b40e      	push	{r1, r2, r3}
 800b46a:	b510      	push	{r4, lr}
 800b46c:	b09f      	sub	sp, #124	; 0x7c
 800b46e:	ac21      	add	r4, sp, #132	; 0x84
 800b470:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b474:	f854 2b04 	ldr.w	r2, [r4], #4
 800b478:	9201      	str	r2, [sp, #4]
 800b47a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b47e:	9004      	str	r0, [sp, #16]
 800b480:	9008      	str	r0, [sp, #32]
 800b482:	f7f4 fec5 	bl	8000210 <strlen>
 800b486:	4b0c      	ldr	r3, [pc, #48]	; (800b4b8 <siscanf+0x50>)
 800b488:	9005      	str	r0, [sp, #20]
 800b48a:	9009      	str	r0, [sp, #36]	; 0x24
 800b48c:	930d      	str	r3, [sp, #52]	; 0x34
 800b48e:	480b      	ldr	r0, [pc, #44]	; (800b4bc <siscanf+0x54>)
 800b490:	9a01      	ldr	r2, [sp, #4]
 800b492:	6800      	ldr	r0, [r0, #0]
 800b494:	9403      	str	r4, [sp, #12]
 800b496:	2300      	movs	r3, #0
 800b498:	9311      	str	r3, [sp, #68]	; 0x44
 800b49a:	9316      	str	r3, [sp, #88]	; 0x58
 800b49c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b4a4:	a904      	add	r1, sp, #16
 800b4a6:	4623      	mov	r3, r4
 800b4a8:	f003 fbdc 	bl	800ec64 <__ssvfiscanf_r>
 800b4ac:	b01f      	add	sp, #124	; 0x7c
 800b4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b2:	b003      	add	sp, #12
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	0800b4e3 	.word	0x0800b4e3
 800b4bc:	2000000c 	.word	0x2000000c

0800b4c0 <__sread>:
 800b4c0:	b510      	push	{r4, lr}
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c8:	f004 f9be 	bl	800f848 <_read_r>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	bfab      	itete	ge
 800b4d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4d2:	89a3      	ldrhlt	r3, [r4, #12]
 800b4d4:	181b      	addge	r3, r3, r0
 800b4d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4da:	bfac      	ite	ge
 800b4dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4de:	81a3      	strhlt	r3, [r4, #12]
 800b4e0:	bd10      	pop	{r4, pc}

0800b4e2 <__seofread>:
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	4770      	bx	lr

0800b4e6 <__swrite>:
 800b4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ea:	461f      	mov	r7, r3
 800b4ec:	898b      	ldrh	r3, [r1, #12]
 800b4ee:	05db      	lsls	r3, r3, #23
 800b4f0:	4605      	mov	r5, r0
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	4616      	mov	r6, r2
 800b4f6:	d505      	bpl.n	800b504 <__swrite+0x1e>
 800b4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	2200      	movs	r2, #0
 800b500:	f002 fba2 	bl	800dc48 <_lseek_r>
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b50a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b50e:	81a3      	strh	r3, [r4, #12]
 800b510:	4632      	mov	r2, r6
 800b512:	463b      	mov	r3, r7
 800b514:	4628      	mov	r0, r5
 800b516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b51a:	f000 bf2b 	b.w	800c374 <_write_r>

0800b51e <__sseek>:
 800b51e:	b510      	push	{r4, lr}
 800b520:	460c      	mov	r4, r1
 800b522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b526:	f002 fb8f 	bl	800dc48 <_lseek_r>
 800b52a:	1c43      	adds	r3, r0, #1
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	bf15      	itete	ne
 800b530:	6560      	strne	r0, [r4, #84]	; 0x54
 800b532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b53a:	81a3      	strheq	r3, [r4, #12]
 800b53c:	bf18      	it	ne
 800b53e:	81a3      	strhne	r3, [r4, #12]
 800b540:	bd10      	pop	{r4, pc}

0800b542 <__sclose>:
 800b542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b546:	f000 bf95 	b.w	800c474 <_close_r>

0800b54a <strstr>:
 800b54a:	780a      	ldrb	r2, [r1, #0]
 800b54c:	b570      	push	{r4, r5, r6, lr}
 800b54e:	b96a      	cbnz	r2, 800b56c <strstr+0x22>
 800b550:	bd70      	pop	{r4, r5, r6, pc}
 800b552:	429a      	cmp	r2, r3
 800b554:	d109      	bne.n	800b56a <strstr+0x20>
 800b556:	460c      	mov	r4, r1
 800b558:	4605      	mov	r5, r0
 800b55a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d0f6      	beq.n	800b550 <strstr+0x6>
 800b562:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b566:	429e      	cmp	r6, r3
 800b568:	d0f7      	beq.n	800b55a <strstr+0x10>
 800b56a:	3001      	adds	r0, #1
 800b56c:	7803      	ldrb	r3, [r0, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1ef      	bne.n	800b552 <strstr+0x8>
 800b572:	4618      	mov	r0, r3
 800b574:	e7ec      	b.n	800b550 <strstr+0x6>

0800b576 <sulp>:
 800b576:	b570      	push	{r4, r5, r6, lr}
 800b578:	4604      	mov	r4, r0
 800b57a:	460d      	mov	r5, r1
 800b57c:	ec45 4b10 	vmov	d0, r4, r5
 800b580:	4616      	mov	r6, r2
 800b582:	f002 ff73 	bl	800e46c <__ulp>
 800b586:	ec51 0b10 	vmov	r0, r1, d0
 800b58a:	b17e      	cbz	r6, 800b5ac <sulp+0x36>
 800b58c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b590:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b594:	2b00      	cmp	r3, #0
 800b596:	dd09      	ble.n	800b5ac <sulp+0x36>
 800b598:	051b      	lsls	r3, r3, #20
 800b59a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b59e:	2400      	movs	r4, #0
 800b5a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	462b      	mov	r3, r5
 800b5a8:	f7f5 f846 	bl	8000638 <__aeabi_dmul>
 800b5ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5b0 <_strtod_l>:
 800b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	ed2d 8b02 	vpush	{d8}
 800b5b8:	b09d      	sub	sp, #116	; 0x74
 800b5ba:	461f      	mov	r7, r3
 800b5bc:	2300      	movs	r3, #0
 800b5be:	9318      	str	r3, [sp, #96]	; 0x60
 800b5c0:	4ba2      	ldr	r3, [pc, #648]	; (800b84c <_strtod_l+0x29c>)
 800b5c2:	9213      	str	r2, [sp, #76]	; 0x4c
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	9305      	str	r3, [sp, #20]
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	4688      	mov	r8, r1
 800b5ce:	f7f4 fe1f 	bl	8000210 <strlen>
 800b5d2:	f04f 0a00 	mov.w	sl, #0
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	f04f 0b00 	mov.w	fp, #0
 800b5dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b5e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5e2:	781a      	ldrb	r2, [r3, #0]
 800b5e4:	2a2b      	cmp	r2, #43	; 0x2b
 800b5e6:	d04e      	beq.n	800b686 <_strtod_l+0xd6>
 800b5e8:	d83b      	bhi.n	800b662 <_strtod_l+0xb2>
 800b5ea:	2a0d      	cmp	r2, #13
 800b5ec:	d834      	bhi.n	800b658 <_strtod_l+0xa8>
 800b5ee:	2a08      	cmp	r2, #8
 800b5f0:	d834      	bhi.n	800b65c <_strtod_l+0xac>
 800b5f2:	2a00      	cmp	r2, #0
 800b5f4:	d03e      	beq.n	800b674 <_strtod_l+0xc4>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	930a      	str	r3, [sp, #40]	; 0x28
 800b5fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b5fc:	7833      	ldrb	r3, [r6, #0]
 800b5fe:	2b30      	cmp	r3, #48	; 0x30
 800b600:	f040 80b0 	bne.w	800b764 <_strtod_l+0x1b4>
 800b604:	7873      	ldrb	r3, [r6, #1]
 800b606:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b60a:	2b58      	cmp	r3, #88	; 0x58
 800b60c:	d168      	bne.n	800b6e0 <_strtod_l+0x130>
 800b60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b610:	9301      	str	r3, [sp, #4]
 800b612:	ab18      	add	r3, sp, #96	; 0x60
 800b614:	9702      	str	r7, [sp, #8]
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	4a8d      	ldr	r2, [pc, #564]	; (800b850 <_strtod_l+0x2a0>)
 800b61a:	ab19      	add	r3, sp, #100	; 0x64
 800b61c:	a917      	add	r1, sp, #92	; 0x5c
 800b61e:	4620      	mov	r0, r4
 800b620:	f002 f802 	bl	800d628 <__gethex>
 800b624:	f010 0707 	ands.w	r7, r0, #7
 800b628:	4605      	mov	r5, r0
 800b62a:	d005      	beq.n	800b638 <_strtod_l+0x88>
 800b62c:	2f06      	cmp	r7, #6
 800b62e:	d12c      	bne.n	800b68a <_strtod_l+0xda>
 800b630:	3601      	adds	r6, #1
 800b632:	2300      	movs	r3, #0
 800b634:	9617      	str	r6, [sp, #92]	; 0x5c
 800b636:	930a      	str	r3, [sp, #40]	; 0x28
 800b638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f040 8590 	bne.w	800c160 <_strtod_l+0xbb0>
 800b640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b642:	b1eb      	cbz	r3, 800b680 <_strtod_l+0xd0>
 800b644:	4652      	mov	r2, sl
 800b646:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b64a:	ec43 2b10 	vmov	d0, r2, r3
 800b64e:	b01d      	add	sp, #116	; 0x74
 800b650:	ecbd 8b02 	vpop	{d8}
 800b654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b658:	2a20      	cmp	r2, #32
 800b65a:	d1cc      	bne.n	800b5f6 <_strtod_l+0x46>
 800b65c:	3301      	adds	r3, #1
 800b65e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b660:	e7be      	b.n	800b5e0 <_strtod_l+0x30>
 800b662:	2a2d      	cmp	r2, #45	; 0x2d
 800b664:	d1c7      	bne.n	800b5f6 <_strtod_l+0x46>
 800b666:	2201      	movs	r2, #1
 800b668:	920a      	str	r2, [sp, #40]	; 0x28
 800b66a:	1c5a      	adds	r2, r3, #1
 800b66c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b66e:	785b      	ldrb	r3, [r3, #1]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1c2      	bne.n	800b5fa <_strtod_l+0x4a>
 800b674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b676:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f040 856e 	bne.w	800c15c <_strtod_l+0xbac>
 800b680:	4652      	mov	r2, sl
 800b682:	465b      	mov	r3, fp
 800b684:	e7e1      	b.n	800b64a <_strtod_l+0x9a>
 800b686:	2200      	movs	r2, #0
 800b688:	e7ee      	b.n	800b668 <_strtod_l+0xb8>
 800b68a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b68c:	b13a      	cbz	r2, 800b69e <_strtod_l+0xee>
 800b68e:	2135      	movs	r1, #53	; 0x35
 800b690:	a81a      	add	r0, sp, #104	; 0x68
 800b692:	f002 fff6 	bl	800e682 <__copybits>
 800b696:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b698:	4620      	mov	r0, r4
 800b69a:	f002 fbb5 	bl	800de08 <_Bfree>
 800b69e:	3f01      	subs	r7, #1
 800b6a0:	2f04      	cmp	r7, #4
 800b6a2:	d806      	bhi.n	800b6b2 <_strtod_l+0x102>
 800b6a4:	e8df f007 	tbb	[pc, r7]
 800b6a8:	1714030a 	.word	0x1714030a
 800b6ac:	0a          	.byte	0x0a
 800b6ad:	00          	.byte	0x00
 800b6ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b6b2:	0728      	lsls	r0, r5, #28
 800b6b4:	d5c0      	bpl.n	800b638 <_strtod_l+0x88>
 800b6b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b6ba:	e7bd      	b.n	800b638 <_strtod_l+0x88>
 800b6bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b6c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b6c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b6c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b6ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b6ce:	e7f0      	b.n	800b6b2 <_strtod_l+0x102>
 800b6d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b854 <_strtod_l+0x2a4>
 800b6d4:	e7ed      	b.n	800b6b2 <_strtod_l+0x102>
 800b6d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b6da:	f04f 3aff 	mov.w	sl, #4294967295
 800b6de:	e7e8      	b.n	800b6b2 <_strtod_l+0x102>
 800b6e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6e2:	1c5a      	adds	r2, r3, #1
 800b6e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6e6:	785b      	ldrb	r3, [r3, #1]
 800b6e8:	2b30      	cmp	r3, #48	; 0x30
 800b6ea:	d0f9      	beq.n	800b6e0 <_strtod_l+0x130>
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d0a3      	beq.n	800b638 <_strtod_l+0x88>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	f04f 0900 	mov.w	r9, #0
 800b6f6:	9304      	str	r3, [sp, #16]
 800b6f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6fa:	9308      	str	r3, [sp, #32]
 800b6fc:	f8cd 901c 	str.w	r9, [sp, #28]
 800b700:	464f      	mov	r7, r9
 800b702:	220a      	movs	r2, #10
 800b704:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b706:	7806      	ldrb	r6, [r0, #0]
 800b708:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b70c:	b2d9      	uxtb	r1, r3
 800b70e:	2909      	cmp	r1, #9
 800b710:	d92a      	bls.n	800b768 <_strtod_l+0x1b8>
 800b712:	9905      	ldr	r1, [sp, #20]
 800b714:	462a      	mov	r2, r5
 800b716:	f004 f98f 	bl	800fa38 <strncmp>
 800b71a:	b398      	cbz	r0, 800b784 <_strtod_l+0x1d4>
 800b71c:	2000      	movs	r0, #0
 800b71e:	4632      	mov	r2, r6
 800b720:	463d      	mov	r5, r7
 800b722:	9005      	str	r0, [sp, #20]
 800b724:	4603      	mov	r3, r0
 800b726:	2a65      	cmp	r2, #101	; 0x65
 800b728:	d001      	beq.n	800b72e <_strtod_l+0x17e>
 800b72a:	2a45      	cmp	r2, #69	; 0x45
 800b72c:	d118      	bne.n	800b760 <_strtod_l+0x1b0>
 800b72e:	b91d      	cbnz	r5, 800b738 <_strtod_l+0x188>
 800b730:	9a04      	ldr	r2, [sp, #16]
 800b732:	4302      	orrs	r2, r0
 800b734:	d09e      	beq.n	800b674 <_strtod_l+0xc4>
 800b736:	2500      	movs	r5, #0
 800b738:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b73c:	f108 0201 	add.w	r2, r8, #1
 800b740:	9217      	str	r2, [sp, #92]	; 0x5c
 800b742:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b746:	2a2b      	cmp	r2, #43	; 0x2b
 800b748:	d075      	beq.n	800b836 <_strtod_l+0x286>
 800b74a:	2a2d      	cmp	r2, #45	; 0x2d
 800b74c:	d07b      	beq.n	800b846 <_strtod_l+0x296>
 800b74e:	f04f 0c00 	mov.w	ip, #0
 800b752:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b756:	2909      	cmp	r1, #9
 800b758:	f240 8082 	bls.w	800b860 <_strtod_l+0x2b0>
 800b75c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b760:	2600      	movs	r6, #0
 800b762:	e09d      	b.n	800b8a0 <_strtod_l+0x2f0>
 800b764:	2300      	movs	r3, #0
 800b766:	e7c4      	b.n	800b6f2 <_strtod_l+0x142>
 800b768:	2f08      	cmp	r7, #8
 800b76a:	bfd8      	it	le
 800b76c:	9907      	ldrle	r1, [sp, #28]
 800b76e:	f100 0001 	add.w	r0, r0, #1
 800b772:	bfda      	itte	le
 800b774:	fb02 3301 	mlale	r3, r2, r1, r3
 800b778:	9307      	strle	r3, [sp, #28]
 800b77a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b77e:	3701      	adds	r7, #1
 800b780:	9017      	str	r0, [sp, #92]	; 0x5c
 800b782:	e7bf      	b.n	800b704 <_strtod_l+0x154>
 800b784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b786:	195a      	adds	r2, r3, r5
 800b788:	9217      	str	r2, [sp, #92]	; 0x5c
 800b78a:	5d5a      	ldrb	r2, [r3, r5]
 800b78c:	2f00      	cmp	r7, #0
 800b78e:	d037      	beq.n	800b800 <_strtod_l+0x250>
 800b790:	9005      	str	r0, [sp, #20]
 800b792:	463d      	mov	r5, r7
 800b794:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b798:	2b09      	cmp	r3, #9
 800b79a:	d912      	bls.n	800b7c2 <_strtod_l+0x212>
 800b79c:	2301      	movs	r3, #1
 800b79e:	e7c2      	b.n	800b726 <_strtod_l+0x176>
 800b7a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7a6:	785a      	ldrb	r2, [r3, #1]
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	2a30      	cmp	r2, #48	; 0x30
 800b7ac:	d0f8      	beq.n	800b7a0 <_strtod_l+0x1f0>
 800b7ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b7b2:	2b08      	cmp	r3, #8
 800b7b4:	f200 84d9 	bhi.w	800c16a <_strtod_l+0xbba>
 800b7b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7ba:	9005      	str	r0, [sp, #20]
 800b7bc:	2000      	movs	r0, #0
 800b7be:	9308      	str	r3, [sp, #32]
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	3a30      	subs	r2, #48	; 0x30
 800b7c4:	f100 0301 	add.w	r3, r0, #1
 800b7c8:	d014      	beq.n	800b7f4 <_strtod_l+0x244>
 800b7ca:	9905      	ldr	r1, [sp, #20]
 800b7cc:	4419      	add	r1, r3
 800b7ce:	9105      	str	r1, [sp, #20]
 800b7d0:	462b      	mov	r3, r5
 800b7d2:	eb00 0e05 	add.w	lr, r0, r5
 800b7d6:	210a      	movs	r1, #10
 800b7d8:	4573      	cmp	r3, lr
 800b7da:	d113      	bne.n	800b804 <_strtod_l+0x254>
 800b7dc:	182b      	adds	r3, r5, r0
 800b7de:	2b08      	cmp	r3, #8
 800b7e0:	f105 0501 	add.w	r5, r5, #1
 800b7e4:	4405      	add	r5, r0
 800b7e6:	dc1c      	bgt.n	800b822 <_strtod_l+0x272>
 800b7e8:	9907      	ldr	r1, [sp, #28]
 800b7ea:	230a      	movs	r3, #10
 800b7ec:	fb03 2301 	mla	r3, r3, r1, r2
 800b7f0:	9307      	str	r3, [sp, #28]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b7f6:	1c51      	adds	r1, r2, #1
 800b7f8:	9117      	str	r1, [sp, #92]	; 0x5c
 800b7fa:	7852      	ldrb	r2, [r2, #1]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	e7c9      	b.n	800b794 <_strtod_l+0x1e4>
 800b800:	4638      	mov	r0, r7
 800b802:	e7d2      	b.n	800b7aa <_strtod_l+0x1fa>
 800b804:	2b08      	cmp	r3, #8
 800b806:	dc04      	bgt.n	800b812 <_strtod_l+0x262>
 800b808:	9e07      	ldr	r6, [sp, #28]
 800b80a:	434e      	muls	r6, r1
 800b80c:	9607      	str	r6, [sp, #28]
 800b80e:	3301      	adds	r3, #1
 800b810:	e7e2      	b.n	800b7d8 <_strtod_l+0x228>
 800b812:	f103 0c01 	add.w	ip, r3, #1
 800b816:	f1bc 0f10 	cmp.w	ip, #16
 800b81a:	bfd8      	it	le
 800b81c:	fb01 f909 	mulle.w	r9, r1, r9
 800b820:	e7f5      	b.n	800b80e <_strtod_l+0x25e>
 800b822:	2d10      	cmp	r5, #16
 800b824:	bfdc      	itt	le
 800b826:	230a      	movle	r3, #10
 800b828:	fb03 2909 	mlale	r9, r3, r9, r2
 800b82c:	e7e1      	b.n	800b7f2 <_strtod_l+0x242>
 800b82e:	2300      	movs	r3, #0
 800b830:	9305      	str	r3, [sp, #20]
 800b832:	2301      	movs	r3, #1
 800b834:	e77c      	b.n	800b730 <_strtod_l+0x180>
 800b836:	f04f 0c00 	mov.w	ip, #0
 800b83a:	f108 0202 	add.w	r2, r8, #2
 800b83e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b840:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b844:	e785      	b.n	800b752 <_strtod_l+0x1a2>
 800b846:	f04f 0c01 	mov.w	ip, #1
 800b84a:	e7f6      	b.n	800b83a <_strtod_l+0x28a>
 800b84c:	0801080c 	.word	0x0801080c
 800b850:	08010560 	.word	0x08010560
 800b854:	7ff00000 	.word	0x7ff00000
 800b858:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b85a:	1c51      	adds	r1, r2, #1
 800b85c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b85e:	7852      	ldrb	r2, [r2, #1]
 800b860:	2a30      	cmp	r2, #48	; 0x30
 800b862:	d0f9      	beq.n	800b858 <_strtod_l+0x2a8>
 800b864:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b868:	2908      	cmp	r1, #8
 800b86a:	f63f af79 	bhi.w	800b760 <_strtod_l+0x1b0>
 800b86e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b872:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b874:	9206      	str	r2, [sp, #24]
 800b876:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b878:	1c51      	adds	r1, r2, #1
 800b87a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b87c:	7852      	ldrb	r2, [r2, #1]
 800b87e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b882:	2e09      	cmp	r6, #9
 800b884:	d937      	bls.n	800b8f6 <_strtod_l+0x346>
 800b886:	9e06      	ldr	r6, [sp, #24]
 800b888:	1b89      	subs	r1, r1, r6
 800b88a:	2908      	cmp	r1, #8
 800b88c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b890:	dc02      	bgt.n	800b898 <_strtod_l+0x2e8>
 800b892:	4576      	cmp	r6, lr
 800b894:	bfa8      	it	ge
 800b896:	4676      	movge	r6, lr
 800b898:	f1bc 0f00 	cmp.w	ip, #0
 800b89c:	d000      	beq.n	800b8a0 <_strtod_l+0x2f0>
 800b89e:	4276      	negs	r6, r6
 800b8a0:	2d00      	cmp	r5, #0
 800b8a2:	d14d      	bne.n	800b940 <_strtod_l+0x390>
 800b8a4:	9904      	ldr	r1, [sp, #16]
 800b8a6:	4301      	orrs	r1, r0
 800b8a8:	f47f aec6 	bne.w	800b638 <_strtod_l+0x88>
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f47f aee1 	bne.w	800b674 <_strtod_l+0xc4>
 800b8b2:	2a69      	cmp	r2, #105	; 0x69
 800b8b4:	d027      	beq.n	800b906 <_strtod_l+0x356>
 800b8b6:	dc24      	bgt.n	800b902 <_strtod_l+0x352>
 800b8b8:	2a49      	cmp	r2, #73	; 0x49
 800b8ba:	d024      	beq.n	800b906 <_strtod_l+0x356>
 800b8bc:	2a4e      	cmp	r2, #78	; 0x4e
 800b8be:	f47f aed9 	bne.w	800b674 <_strtod_l+0xc4>
 800b8c2:	499f      	ldr	r1, [pc, #636]	; (800bb40 <_strtod_l+0x590>)
 800b8c4:	a817      	add	r0, sp, #92	; 0x5c
 800b8c6:	f002 f907 	bl	800dad8 <__match>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	f43f aed2 	beq.w	800b674 <_strtod_l+0xc4>
 800b8d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	2b28      	cmp	r3, #40	; 0x28
 800b8d6:	d12d      	bne.n	800b934 <_strtod_l+0x384>
 800b8d8:	499a      	ldr	r1, [pc, #616]	; (800bb44 <_strtod_l+0x594>)
 800b8da:	aa1a      	add	r2, sp, #104	; 0x68
 800b8dc:	a817      	add	r0, sp, #92	; 0x5c
 800b8de:	f002 f90f 	bl	800db00 <__hexnan>
 800b8e2:	2805      	cmp	r0, #5
 800b8e4:	d126      	bne.n	800b934 <_strtod_l+0x384>
 800b8e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b8ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b8f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b8f4:	e6a0      	b.n	800b638 <_strtod_l+0x88>
 800b8f6:	210a      	movs	r1, #10
 800b8f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b8fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b900:	e7b9      	b.n	800b876 <_strtod_l+0x2c6>
 800b902:	2a6e      	cmp	r2, #110	; 0x6e
 800b904:	e7db      	b.n	800b8be <_strtod_l+0x30e>
 800b906:	4990      	ldr	r1, [pc, #576]	; (800bb48 <_strtod_l+0x598>)
 800b908:	a817      	add	r0, sp, #92	; 0x5c
 800b90a:	f002 f8e5 	bl	800dad8 <__match>
 800b90e:	2800      	cmp	r0, #0
 800b910:	f43f aeb0 	beq.w	800b674 <_strtod_l+0xc4>
 800b914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b916:	498d      	ldr	r1, [pc, #564]	; (800bb4c <_strtod_l+0x59c>)
 800b918:	3b01      	subs	r3, #1
 800b91a:	a817      	add	r0, sp, #92	; 0x5c
 800b91c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b91e:	f002 f8db 	bl	800dad8 <__match>
 800b922:	b910      	cbnz	r0, 800b92a <_strtod_l+0x37a>
 800b924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b926:	3301      	adds	r3, #1
 800b928:	9317      	str	r3, [sp, #92]	; 0x5c
 800b92a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bb5c <_strtod_l+0x5ac>
 800b92e:	f04f 0a00 	mov.w	sl, #0
 800b932:	e681      	b.n	800b638 <_strtod_l+0x88>
 800b934:	4886      	ldr	r0, [pc, #536]	; (800bb50 <_strtod_l+0x5a0>)
 800b936:	f004 f82f 	bl	800f998 <nan>
 800b93a:	ec5b ab10 	vmov	sl, fp, d0
 800b93e:	e67b      	b.n	800b638 <_strtod_l+0x88>
 800b940:	9b05      	ldr	r3, [sp, #20]
 800b942:	9807      	ldr	r0, [sp, #28]
 800b944:	1af3      	subs	r3, r6, r3
 800b946:	2f00      	cmp	r7, #0
 800b948:	bf08      	it	eq
 800b94a:	462f      	moveq	r7, r5
 800b94c:	2d10      	cmp	r5, #16
 800b94e:	9306      	str	r3, [sp, #24]
 800b950:	46a8      	mov	r8, r5
 800b952:	bfa8      	it	ge
 800b954:	f04f 0810 	movge.w	r8, #16
 800b958:	f7f4 fdf4 	bl	8000544 <__aeabi_ui2d>
 800b95c:	2d09      	cmp	r5, #9
 800b95e:	4682      	mov	sl, r0
 800b960:	468b      	mov	fp, r1
 800b962:	dd13      	ble.n	800b98c <_strtod_l+0x3dc>
 800b964:	4b7b      	ldr	r3, [pc, #492]	; (800bb54 <_strtod_l+0x5a4>)
 800b966:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b96a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b96e:	f7f4 fe63 	bl	8000638 <__aeabi_dmul>
 800b972:	4682      	mov	sl, r0
 800b974:	4648      	mov	r0, r9
 800b976:	468b      	mov	fp, r1
 800b978:	f7f4 fde4 	bl	8000544 <__aeabi_ui2d>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	4650      	mov	r0, sl
 800b982:	4659      	mov	r1, fp
 800b984:	f7f4 fca2 	bl	80002cc <__adddf3>
 800b988:	4682      	mov	sl, r0
 800b98a:	468b      	mov	fp, r1
 800b98c:	2d0f      	cmp	r5, #15
 800b98e:	dc38      	bgt.n	800ba02 <_strtod_l+0x452>
 800b990:	9b06      	ldr	r3, [sp, #24]
 800b992:	2b00      	cmp	r3, #0
 800b994:	f43f ae50 	beq.w	800b638 <_strtod_l+0x88>
 800b998:	dd24      	ble.n	800b9e4 <_strtod_l+0x434>
 800b99a:	2b16      	cmp	r3, #22
 800b99c:	dc0b      	bgt.n	800b9b6 <_strtod_l+0x406>
 800b99e:	496d      	ldr	r1, [pc, #436]	; (800bb54 <_strtod_l+0x5a4>)
 800b9a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9a8:	4652      	mov	r2, sl
 800b9aa:	465b      	mov	r3, fp
 800b9ac:	f7f4 fe44 	bl	8000638 <__aeabi_dmul>
 800b9b0:	4682      	mov	sl, r0
 800b9b2:	468b      	mov	fp, r1
 800b9b4:	e640      	b.n	800b638 <_strtod_l+0x88>
 800b9b6:	9a06      	ldr	r2, [sp, #24]
 800b9b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	db20      	blt.n	800ba02 <_strtod_l+0x452>
 800b9c0:	4c64      	ldr	r4, [pc, #400]	; (800bb54 <_strtod_l+0x5a4>)
 800b9c2:	f1c5 050f 	rsb	r5, r5, #15
 800b9c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b9ca:	4652      	mov	r2, sl
 800b9cc:	465b      	mov	r3, fp
 800b9ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d2:	f7f4 fe31 	bl	8000638 <__aeabi_dmul>
 800b9d6:	9b06      	ldr	r3, [sp, #24]
 800b9d8:	1b5d      	subs	r5, r3, r5
 800b9da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b9de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b9e2:	e7e3      	b.n	800b9ac <_strtod_l+0x3fc>
 800b9e4:	9b06      	ldr	r3, [sp, #24]
 800b9e6:	3316      	adds	r3, #22
 800b9e8:	db0b      	blt.n	800ba02 <_strtod_l+0x452>
 800b9ea:	9b05      	ldr	r3, [sp, #20]
 800b9ec:	1b9e      	subs	r6, r3, r6
 800b9ee:	4b59      	ldr	r3, [pc, #356]	; (800bb54 <_strtod_l+0x5a4>)
 800b9f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b9f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9f8:	4650      	mov	r0, sl
 800b9fa:	4659      	mov	r1, fp
 800b9fc:	f7f4 ff46 	bl	800088c <__aeabi_ddiv>
 800ba00:	e7d6      	b.n	800b9b0 <_strtod_l+0x400>
 800ba02:	9b06      	ldr	r3, [sp, #24]
 800ba04:	eba5 0808 	sub.w	r8, r5, r8
 800ba08:	4498      	add	r8, r3
 800ba0a:	f1b8 0f00 	cmp.w	r8, #0
 800ba0e:	dd74      	ble.n	800bafa <_strtod_l+0x54a>
 800ba10:	f018 030f 	ands.w	r3, r8, #15
 800ba14:	d00a      	beq.n	800ba2c <_strtod_l+0x47c>
 800ba16:	494f      	ldr	r1, [pc, #316]	; (800bb54 <_strtod_l+0x5a4>)
 800ba18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba1c:	4652      	mov	r2, sl
 800ba1e:	465b      	mov	r3, fp
 800ba20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba24:	f7f4 fe08 	bl	8000638 <__aeabi_dmul>
 800ba28:	4682      	mov	sl, r0
 800ba2a:	468b      	mov	fp, r1
 800ba2c:	f038 080f 	bics.w	r8, r8, #15
 800ba30:	d04f      	beq.n	800bad2 <_strtod_l+0x522>
 800ba32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ba36:	dd22      	ble.n	800ba7e <_strtod_l+0x4ce>
 800ba38:	2500      	movs	r5, #0
 800ba3a:	462e      	mov	r6, r5
 800ba3c:	9507      	str	r5, [sp, #28]
 800ba3e:	9505      	str	r5, [sp, #20]
 800ba40:	2322      	movs	r3, #34	; 0x22
 800ba42:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bb5c <_strtod_l+0x5ac>
 800ba46:	6023      	str	r3, [r4, #0]
 800ba48:	f04f 0a00 	mov.w	sl, #0
 800ba4c:	9b07      	ldr	r3, [sp, #28]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f43f adf2 	beq.w	800b638 <_strtod_l+0x88>
 800ba54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba56:	4620      	mov	r0, r4
 800ba58:	f002 f9d6 	bl	800de08 <_Bfree>
 800ba5c:	9905      	ldr	r1, [sp, #20]
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f002 f9d2 	bl	800de08 <_Bfree>
 800ba64:	4631      	mov	r1, r6
 800ba66:	4620      	mov	r0, r4
 800ba68:	f002 f9ce 	bl	800de08 <_Bfree>
 800ba6c:	9907      	ldr	r1, [sp, #28]
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f002 f9ca 	bl	800de08 <_Bfree>
 800ba74:	4629      	mov	r1, r5
 800ba76:	4620      	mov	r0, r4
 800ba78:	f002 f9c6 	bl	800de08 <_Bfree>
 800ba7c:	e5dc      	b.n	800b638 <_strtod_l+0x88>
 800ba7e:	4b36      	ldr	r3, [pc, #216]	; (800bb58 <_strtod_l+0x5a8>)
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	2300      	movs	r3, #0
 800ba84:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ba88:	4650      	mov	r0, sl
 800ba8a:	4659      	mov	r1, fp
 800ba8c:	4699      	mov	r9, r3
 800ba8e:	f1b8 0f01 	cmp.w	r8, #1
 800ba92:	dc21      	bgt.n	800bad8 <_strtod_l+0x528>
 800ba94:	b10b      	cbz	r3, 800ba9a <_strtod_l+0x4ea>
 800ba96:	4682      	mov	sl, r0
 800ba98:	468b      	mov	fp, r1
 800ba9a:	4b2f      	ldr	r3, [pc, #188]	; (800bb58 <_strtod_l+0x5a8>)
 800ba9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800baa0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800baa4:	4652      	mov	r2, sl
 800baa6:	465b      	mov	r3, fp
 800baa8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800baac:	f7f4 fdc4 	bl	8000638 <__aeabi_dmul>
 800bab0:	4b2a      	ldr	r3, [pc, #168]	; (800bb5c <_strtod_l+0x5ac>)
 800bab2:	460a      	mov	r2, r1
 800bab4:	400b      	ands	r3, r1
 800bab6:	492a      	ldr	r1, [pc, #168]	; (800bb60 <_strtod_l+0x5b0>)
 800bab8:	428b      	cmp	r3, r1
 800baba:	4682      	mov	sl, r0
 800babc:	d8bc      	bhi.n	800ba38 <_strtod_l+0x488>
 800babe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bac2:	428b      	cmp	r3, r1
 800bac4:	bf86      	itte	hi
 800bac6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bb64 <_strtod_l+0x5b4>
 800baca:	f04f 3aff 	movhi.w	sl, #4294967295
 800bace:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bad2:	2300      	movs	r3, #0
 800bad4:	9304      	str	r3, [sp, #16]
 800bad6:	e084      	b.n	800bbe2 <_strtod_l+0x632>
 800bad8:	f018 0f01 	tst.w	r8, #1
 800badc:	d005      	beq.n	800baea <_strtod_l+0x53a>
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae4:	f7f4 fda8 	bl	8000638 <__aeabi_dmul>
 800bae8:	2301      	movs	r3, #1
 800baea:	9a04      	ldr	r2, [sp, #16]
 800baec:	3208      	adds	r2, #8
 800baee:	f109 0901 	add.w	r9, r9, #1
 800baf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800baf6:	9204      	str	r2, [sp, #16]
 800baf8:	e7c9      	b.n	800ba8e <_strtod_l+0x4de>
 800bafa:	d0ea      	beq.n	800bad2 <_strtod_l+0x522>
 800bafc:	f1c8 0800 	rsb	r8, r8, #0
 800bb00:	f018 020f 	ands.w	r2, r8, #15
 800bb04:	d00a      	beq.n	800bb1c <_strtod_l+0x56c>
 800bb06:	4b13      	ldr	r3, [pc, #76]	; (800bb54 <_strtod_l+0x5a4>)
 800bb08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb0c:	4650      	mov	r0, sl
 800bb0e:	4659      	mov	r1, fp
 800bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb14:	f7f4 feba 	bl	800088c <__aeabi_ddiv>
 800bb18:	4682      	mov	sl, r0
 800bb1a:	468b      	mov	fp, r1
 800bb1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bb20:	d0d7      	beq.n	800bad2 <_strtod_l+0x522>
 800bb22:	f1b8 0f1f 	cmp.w	r8, #31
 800bb26:	dd1f      	ble.n	800bb68 <_strtod_l+0x5b8>
 800bb28:	2500      	movs	r5, #0
 800bb2a:	462e      	mov	r6, r5
 800bb2c:	9507      	str	r5, [sp, #28]
 800bb2e:	9505      	str	r5, [sp, #20]
 800bb30:	2322      	movs	r3, #34	; 0x22
 800bb32:	f04f 0a00 	mov.w	sl, #0
 800bb36:	f04f 0b00 	mov.w	fp, #0
 800bb3a:	6023      	str	r3, [r4, #0]
 800bb3c:	e786      	b.n	800ba4c <_strtod_l+0x49c>
 800bb3e:	bf00      	nop
 800bb40:	08010535 	.word	0x08010535
 800bb44:	08010574 	.word	0x08010574
 800bb48:	0801052d 	.word	0x0801052d
 800bb4c:	080106b4 	.word	0x080106b4
 800bb50:	080109e3 	.word	0x080109e3
 800bb54:	080108a8 	.word	0x080108a8
 800bb58:	08010880 	.word	0x08010880
 800bb5c:	7ff00000 	.word	0x7ff00000
 800bb60:	7ca00000 	.word	0x7ca00000
 800bb64:	7fefffff 	.word	0x7fefffff
 800bb68:	f018 0310 	ands.w	r3, r8, #16
 800bb6c:	bf18      	it	ne
 800bb6e:	236a      	movne	r3, #106	; 0x6a
 800bb70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bf20 <_strtod_l+0x970>
 800bb74:	9304      	str	r3, [sp, #16]
 800bb76:	4650      	mov	r0, sl
 800bb78:	4659      	mov	r1, fp
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f018 0f01 	tst.w	r8, #1
 800bb80:	d004      	beq.n	800bb8c <_strtod_l+0x5dc>
 800bb82:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bb86:	f7f4 fd57 	bl	8000638 <__aeabi_dmul>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bb90:	f109 0908 	add.w	r9, r9, #8
 800bb94:	d1f2      	bne.n	800bb7c <_strtod_l+0x5cc>
 800bb96:	b10b      	cbz	r3, 800bb9c <_strtod_l+0x5ec>
 800bb98:	4682      	mov	sl, r0
 800bb9a:	468b      	mov	fp, r1
 800bb9c:	9b04      	ldr	r3, [sp, #16]
 800bb9e:	b1c3      	cbz	r3, 800bbd2 <_strtod_l+0x622>
 800bba0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bba4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	4659      	mov	r1, fp
 800bbac:	dd11      	ble.n	800bbd2 <_strtod_l+0x622>
 800bbae:	2b1f      	cmp	r3, #31
 800bbb0:	f340 8124 	ble.w	800bdfc <_strtod_l+0x84c>
 800bbb4:	2b34      	cmp	r3, #52	; 0x34
 800bbb6:	bfde      	ittt	le
 800bbb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bbbc:	f04f 33ff 	movle.w	r3, #4294967295
 800bbc0:	fa03 f202 	lslle.w	r2, r3, r2
 800bbc4:	f04f 0a00 	mov.w	sl, #0
 800bbc8:	bfcc      	ite	gt
 800bbca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bbce:	ea02 0b01 	andle.w	fp, r2, r1
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4650      	mov	r0, sl
 800bbd8:	4659      	mov	r1, fp
 800bbda:	f7f4 ff95 	bl	8000b08 <__aeabi_dcmpeq>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d1a2      	bne.n	800bb28 <_strtod_l+0x578>
 800bbe2:	9b07      	ldr	r3, [sp, #28]
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	9908      	ldr	r1, [sp, #32]
 800bbe8:	462b      	mov	r3, r5
 800bbea:	463a      	mov	r2, r7
 800bbec:	4620      	mov	r0, r4
 800bbee:	f002 f973 	bl	800ded8 <__s2b>
 800bbf2:	9007      	str	r0, [sp, #28]
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	f43f af1f 	beq.w	800ba38 <_strtod_l+0x488>
 800bbfa:	9b05      	ldr	r3, [sp, #20]
 800bbfc:	1b9e      	subs	r6, r3, r6
 800bbfe:	9b06      	ldr	r3, [sp, #24]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	bfb4      	ite	lt
 800bc04:	4633      	movlt	r3, r6
 800bc06:	2300      	movge	r3, #0
 800bc08:	930c      	str	r3, [sp, #48]	; 0x30
 800bc0a:	9b06      	ldr	r3, [sp, #24]
 800bc0c:	2500      	movs	r5, #0
 800bc0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc12:	9312      	str	r3, [sp, #72]	; 0x48
 800bc14:	462e      	mov	r6, r5
 800bc16:	9b07      	ldr	r3, [sp, #28]
 800bc18:	4620      	mov	r0, r4
 800bc1a:	6859      	ldr	r1, [r3, #4]
 800bc1c:	f002 f8b4 	bl	800dd88 <_Balloc>
 800bc20:	9005      	str	r0, [sp, #20]
 800bc22:	2800      	cmp	r0, #0
 800bc24:	f43f af0c 	beq.w	800ba40 <_strtod_l+0x490>
 800bc28:	9b07      	ldr	r3, [sp, #28]
 800bc2a:	691a      	ldr	r2, [r3, #16]
 800bc2c:	3202      	adds	r2, #2
 800bc2e:	f103 010c 	add.w	r1, r3, #12
 800bc32:	0092      	lsls	r2, r2, #2
 800bc34:	300c      	adds	r0, #12
 800bc36:	f002 f899 	bl	800dd6c <memcpy>
 800bc3a:	ec4b ab10 	vmov	d0, sl, fp
 800bc3e:	aa1a      	add	r2, sp, #104	; 0x68
 800bc40:	a919      	add	r1, sp, #100	; 0x64
 800bc42:	4620      	mov	r0, r4
 800bc44:	f002 fc8e 	bl	800e564 <__d2b>
 800bc48:	ec4b ab18 	vmov	d8, sl, fp
 800bc4c:	9018      	str	r0, [sp, #96]	; 0x60
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	f43f aef6 	beq.w	800ba40 <_strtod_l+0x490>
 800bc54:	2101      	movs	r1, #1
 800bc56:	4620      	mov	r0, r4
 800bc58:	f002 f9d8 	bl	800e00c <__i2b>
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f43f aeee 	beq.w	800ba40 <_strtod_l+0x490>
 800bc64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc66:	9904      	ldr	r1, [sp, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	bfab      	itete	ge
 800bc6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bc6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bc70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bc72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bc76:	bfac      	ite	ge
 800bc78:	eb03 0902 	addge.w	r9, r3, r2
 800bc7c:	1ad7      	sublt	r7, r2, r3
 800bc7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bc80:	eba3 0801 	sub.w	r8, r3, r1
 800bc84:	4490      	add	r8, r2
 800bc86:	4ba1      	ldr	r3, [pc, #644]	; (800bf0c <_strtod_l+0x95c>)
 800bc88:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc8c:	4598      	cmp	r8, r3
 800bc8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bc92:	f280 80c7 	bge.w	800be24 <_strtod_l+0x874>
 800bc96:	eba3 0308 	sub.w	r3, r3, r8
 800bc9a:	2b1f      	cmp	r3, #31
 800bc9c:	eba2 0203 	sub.w	r2, r2, r3
 800bca0:	f04f 0101 	mov.w	r1, #1
 800bca4:	f300 80b1 	bgt.w	800be0a <_strtod_l+0x85a>
 800bca8:	fa01 f303 	lsl.w	r3, r1, r3
 800bcac:	930d      	str	r3, [sp, #52]	; 0x34
 800bcae:	2300      	movs	r3, #0
 800bcb0:	9308      	str	r3, [sp, #32]
 800bcb2:	eb09 0802 	add.w	r8, r9, r2
 800bcb6:	9b04      	ldr	r3, [sp, #16]
 800bcb8:	45c1      	cmp	r9, r8
 800bcba:	4417      	add	r7, r2
 800bcbc:	441f      	add	r7, r3
 800bcbe:	464b      	mov	r3, r9
 800bcc0:	bfa8      	it	ge
 800bcc2:	4643      	movge	r3, r8
 800bcc4:	42bb      	cmp	r3, r7
 800bcc6:	bfa8      	it	ge
 800bcc8:	463b      	movge	r3, r7
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	bfc2      	ittt	gt
 800bcce:	eba8 0803 	subgt.w	r8, r8, r3
 800bcd2:	1aff      	subgt	r7, r7, r3
 800bcd4:	eba9 0903 	subgt.w	r9, r9, r3
 800bcd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	dd17      	ble.n	800bd0e <_strtod_l+0x75e>
 800bcde:	4631      	mov	r1, r6
 800bce0:	461a      	mov	r2, r3
 800bce2:	4620      	mov	r0, r4
 800bce4:	f002 fa52 	bl	800e18c <__pow5mult>
 800bce8:	4606      	mov	r6, r0
 800bcea:	2800      	cmp	r0, #0
 800bcec:	f43f aea8 	beq.w	800ba40 <_strtod_l+0x490>
 800bcf0:	4601      	mov	r1, r0
 800bcf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f002 f99f 	bl	800e038 <__multiply>
 800bcfa:	900b      	str	r0, [sp, #44]	; 0x2c
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	f43f ae9f 	beq.w	800ba40 <_strtod_l+0x490>
 800bd02:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd04:	4620      	mov	r0, r4
 800bd06:	f002 f87f 	bl	800de08 <_Bfree>
 800bd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd0c:	9318      	str	r3, [sp, #96]	; 0x60
 800bd0e:	f1b8 0f00 	cmp.w	r8, #0
 800bd12:	f300 808c 	bgt.w	800be2e <_strtod_l+0x87e>
 800bd16:	9b06      	ldr	r3, [sp, #24]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	dd08      	ble.n	800bd2e <_strtod_l+0x77e>
 800bd1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd1e:	9905      	ldr	r1, [sp, #20]
 800bd20:	4620      	mov	r0, r4
 800bd22:	f002 fa33 	bl	800e18c <__pow5mult>
 800bd26:	9005      	str	r0, [sp, #20]
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	f43f ae89 	beq.w	800ba40 <_strtod_l+0x490>
 800bd2e:	2f00      	cmp	r7, #0
 800bd30:	dd08      	ble.n	800bd44 <_strtod_l+0x794>
 800bd32:	9905      	ldr	r1, [sp, #20]
 800bd34:	463a      	mov	r2, r7
 800bd36:	4620      	mov	r0, r4
 800bd38:	f002 fa82 	bl	800e240 <__lshift>
 800bd3c:	9005      	str	r0, [sp, #20]
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f43f ae7e 	beq.w	800ba40 <_strtod_l+0x490>
 800bd44:	f1b9 0f00 	cmp.w	r9, #0
 800bd48:	dd08      	ble.n	800bd5c <_strtod_l+0x7ac>
 800bd4a:	4631      	mov	r1, r6
 800bd4c:	464a      	mov	r2, r9
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f002 fa76 	bl	800e240 <__lshift>
 800bd54:	4606      	mov	r6, r0
 800bd56:	2800      	cmp	r0, #0
 800bd58:	f43f ae72 	beq.w	800ba40 <_strtod_l+0x490>
 800bd5c:	9a05      	ldr	r2, [sp, #20]
 800bd5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd60:	4620      	mov	r0, r4
 800bd62:	f002 faf9 	bl	800e358 <__mdiff>
 800bd66:	4605      	mov	r5, r0
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	f43f ae69 	beq.w	800ba40 <_strtod_l+0x490>
 800bd6e:	68c3      	ldr	r3, [r0, #12]
 800bd70:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd72:	2300      	movs	r3, #0
 800bd74:	60c3      	str	r3, [r0, #12]
 800bd76:	4631      	mov	r1, r6
 800bd78:	f002 fad2 	bl	800e320 <__mcmp>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	da60      	bge.n	800be42 <_strtod_l+0x892>
 800bd80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd82:	ea53 030a 	orrs.w	r3, r3, sl
 800bd86:	f040 8082 	bne.w	800be8e <_strtod_l+0x8de>
 800bd8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d17d      	bne.n	800be8e <_strtod_l+0x8de>
 800bd92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd96:	0d1b      	lsrs	r3, r3, #20
 800bd98:	051b      	lsls	r3, r3, #20
 800bd9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bd9e:	d976      	bls.n	800be8e <_strtod_l+0x8de>
 800bda0:	696b      	ldr	r3, [r5, #20]
 800bda2:	b913      	cbnz	r3, 800bdaa <_strtod_l+0x7fa>
 800bda4:	692b      	ldr	r3, [r5, #16]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	dd71      	ble.n	800be8e <_strtod_l+0x8de>
 800bdaa:	4629      	mov	r1, r5
 800bdac:	2201      	movs	r2, #1
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f002 fa46 	bl	800e240 <__lshift>
 800bdb4:	4631      	mov	r1, r6
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	f002 fab2 	bl	800e320 <__mcmp>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	dd66      	ble.n	800be8e <_strtod_l+0x8de>
 800bdc0:	9904      	ldr	r1, [sp, #16]
 800bdc2:	4a53      	ldr	r2, [pc, #332]	; (800bf10 <_strtod_l+0x960>)
 800bdc4:	465b      	mov	r3, fp
 800bdc6:	2900      	cmp	r1, #0
 800bdc8:	f000 8081 	beq.w	800bece <_strtod_l+0x91e>
 800bdcc:	ea02 010b 	and.w	r1, r2, fp
 800bdd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bdd4:	dc7b      	bgt.n	800bece <_strtod_l+0x91e>
 800bdd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bdda:	f77f aea9 	ble.w	800bb30 <_strtod_l+0x580>
 800bdde:	4b4d      	ldr	r3, [pc, #308]	; (800bf14 <_strtod_l+0x964>)
 800bde0:	4650      	mov	r0, sl
 800bde2:	4659      	mov	r1, fp
 800bde4:	2200      	movs	r2, #0
 800bde6:	f7f4 fc27 	bl	8000638 <__aeabi_dmul>
 800bdea:	460b      	mov	r3, r1
 800bdec:	4303      	orrs	r3, r0
 800bdee:	bf08      	it	eq
 800bdf0:	2322      	moveq	r3, #34	; 0x22
 800bdf2:	4682      	mov	sl, r0
 800bdf4:	468b      	mov	fp, r1
 800bdf6:	bf08      	it	eq
 800bdf8:	6023      	streq	r3, [r4, #0]
 800bdfa:	e62b      	b.n	800ba54 <_strtod_l+0x4a4>
 800bdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800be00:	fa02 f303 	lsl.w	r3, r2, r3
 800be04:	ea03 0a0a 	and.w	sl, r3, sl
 800be08:	e6e3      	b.n	800bbd2 <_strtod_l+0x622>
 800be0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800be0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800be12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800be16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800be1a:	fa01 f308 	lsl.w	r3, r1, r8
 800be1e:	9308      	str	r3, [sp, #32]
 800be20:	910d      	str	r1, [sp, #52]	; 0x34
 800be22:	e746      	b.n	800bcb2 <_strtod_l+0x702>
 800be24:	2300      	movs	r3, #0
 800be26:	9308      	str	r3, [sp, #32]
 800be28:	2301      	movs	r3, #1
 800be2a:	930d      	str	r3, [sp, #52]	; 0x34
 800be2c:	e741      	b.n	800bcb2 <_strtod_l+0x702>
 800be2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be30:	4642      	mov	r2, r8
 800be32:	4620      	mov	r0, r4
 800be34:	f002 fa04 	bl	800e240 <__lshift>
 800be38:	9018      	str	r0, [sp, #96]	; 0x60
 800be3a:	2800      	cmp	r0, #0
 800be3c:	f47f af6b 	bne.w	800bd16 <_strtod_l+0x766>
 800be40:	e5fe      	b.n	800ba40 <_strtod_l+0x490>
 800be42:	465f      	mov	r7, fp
 800be44:	d16e      	bne.n	800bf24 <_strtod_l+0x974>
 800be46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be4c:	b342      	cbz	r2, 800bea0 <_strtod_l+0x8f0>
 800be4e:	4a32      	ldr	r2, [pc, #200]	; (800bf18 <_strtod_l+0x968>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d128      	bne.n	800bea6 <_strtod_l+0x8f6>
 800be54:	9b04      	ldr	r3, [sp, #16]
 800be56:	4651      	mov	r1, sl
 800be58:	b1eb      	cbz	r3, 800be96 <_strtod_l+0x8e6>
 800be5a:	4b2d      	ldr	r3, [pc, #180]	; (800bf10 <_strtod_l+0x960>)
 800be5c:	403b      	ands	r3, r7
 800be5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800be62:	f04f 32ff 	mov.w	r2, #4294967295
 800be66:	d819      	bhi.n	800be9c <_strtod_l+0x8ec>
 800be68:	0d1b      	lsrs	r3, r3, #20
 800be6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be6e:	fa02 f303 	lsl.w	r3, r2, r3
 800be72:	4299      	cmp	r1, r3
 800be74:	d117      	bne.n	800bea6 <_strtod_l+0x8f6>
 800be76:	4b29      	ldr	r3, [pc, #164]	; (800bf1c <_strtod_l+0x96c>)
 800be78:	429f      	cmp	r7, r3
 800be7a:	d102      	bne.n	800be82 <_strtod_l+0x8d2>
 800be7c:	3101      	adds	r1, #1
 800be7e:	f43f addf 	beq.w	800ba40 <_strtod_l+0x490>
 800be82:	4b23      	ldr	r3, [pc, #140]	; (800bf10 <_strtod_l+0x960>)
 800be84:	403b      	ands	r3, r7
 800be86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800be8a:	f04f 0a00 	mov.w	sl, #0
 800be8e:	9b04      	ldr	r3, [sp, #16]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1a4      	bne.n	800bdde <_strtod_l+0x82e>
 800be94:	e5de      	b.n	800ba54 <_strtod_l+0x4a4>
 800be96:	f04f 33ff 	mov.w	r3, #4294967295
 800be9a:	e7ea      	b.n	800be72 <_strtod_l+0x8c2>
 800be9c:	4613      	mov	r3, r2
 800be9e:	e7e8      	b.n	800be72 <_strtod_l+0x8c2>
 800bea0:	ea53 030a 	orrs.w	r3, r3, sl
 800bea4:	d08c      	beq.n	800bdc0 <_strtod_l+0x810>
 800bea6:	9b08      	ldr	r3, [sp, #32]
 800bea8:	b1db      	cbz	r3, 800bee2 <_strtod_l+0x932>
 800beaa:	423b      	tst	r3, r7
 800beac:	d0ef      	beq.n	800be8e <_strtod_l+0x8de>
 800beae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beb0:	9a04      	ldr	r2, [sp, #16]
 800beb2:	4650      	mov	r0, sl
 800beb4:	4659      	mov	r1, fp
 800beb6:	b1c3      	cbz	r3, 800beea <_strtod_l+0x93a>
 800beb8:	f7ff fb5d 	bl	800b576 <sulp>
 800bebc:	4602      	mov	r2, r0
 800bebe:	460b      	mov	r3, r1
 800bec0:	ec51 0b18 	vmov	r0, r1, d8
 800bec4:	f7f4 fa02 	bl	80002cc <__adddf3>
 800bec8:	4682      	mov	sl, r0
 800beca:	468b      	mov	fp, r1
 800becc:	e7df      	b.n	800be8e <_strtod_l+0x8de>
 800bece:	4013      	ands	r3, r2
 800bed0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bed4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bed8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bedc:	f04f 3aff 	mov.w	sl, #4294967295
 800bee0:	e7d5      	b.n	800be8e <_strtod_l+0x8de>
 800bee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bee4:	ea13 0f0a 	tst.w	r3, sl
 800bee8:	e7e0      	b.n	800beac <_strtod_l+0x8fc>
 800beea:	f7ff fb44 	bl	800b576 <sulp>
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	ec51 0b18 	vmov	r0, r1, d8
 800bef6:	f7f4 f9e7 	bl	80002c8 <__aeabi_dsub>
 800befa:	2200      	movs	r2, #0
 800befc:	2300      	movs	r3, #0
 800befe:	4682      	mov	sl, r0
 800bf00:	468b      	mov	fp, r1
 800bf02:	f7f4 fe01 	bl	8000b08 <__aeabi_dcmpeq>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d0c1      	beq.n	800be8e <_strtod_l+0x8de>
 800bf0a:	e611      	b.n	800bb30 <_strtod_l+0x580>
 800bf0c:	fffffc02 	.word	0xfffffc02
 800bf10:	7ff00000 	.word	0x7ff00000
 800bf14:	39500000 	.word	0x39500000
 800bf18:	000fffff 	.word	0x000fffff
 800bf1c:	7fefffff 	.word	0x7fefffff
 800bf20:	08010588 	.word	0x08010588
 800bf24:	4631      	mov	r1, r6
 800bf26:	4628      	mov	r0, r5
 800bf28:	f002 fb78 	bl	800e61c <__ratio>
 800bf2c:	ec59 8b10 	vmov	r8, r9, d0
 800bf30:	ee10 0a10 	vmov	r0, s0
 800bf34:	2200      	movs	r2, #0
 800bf36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	f7f4 fdf8 	bl	8000b30 <__aeabi_dcmple>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d07a      	beq.n	800c03a <_strtod_l+0xa8a>
 800bf44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d04a      	beq.n	800bfe0 <_strtod_l+0xa30>
 800bf4a:	4b95      	ldr	r3, [pc, #596]	; (800c1a0 <_strtod_l+0xbf0>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c1a0 <_strtod_l+0xbf0>
 800bf56:	f04f 0800 	mov.w	r8, #0
 800bf5a:	4b92      	ldr	r3, [pc, #584]	; (800c1a4 <_strtod_l+0xbf4>)
 800bf5c:	403b      	ands	r3, r7
 800bf5e:	930d      	str	r3, [sp, #52]	; 0x34
 800bf60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf62:	4b91      	ldr	r3, [pc, #580]	; (800c1a8 <_strtod_l+0xbf8>)
 800bf64:	429a      	cmp	r2, r3
 800bf66:	f040 80b0 	bne.w	800c0ca <_strtod_l+0xb1a>
 800bf6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bf72:	ec4b ab10 	vmov	d0, sl, fp
 800bf76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf7a:	f002 fa77 	bl	800e46c <__ulp>
 800bf7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf82:	ec53 2b10 	vmov	r2, r3, d0
 800bf86:	f7f4 fb57 	bl	8000638 <__aeabi_dmul>
 800bf8a:	4652      	mov	r2, sl
 800bf8c:	465b      	mov	r3, fp
 800bf8e:	f7f4 f99d 	bl	80002cc <__adddf3>
 800bf92:	460b      	mov	r3, r1
 800bf94:	4983      	ldr	r1, [pc, #524]	; (800c1a4 <_strtod_l+0xbf4>)
 800bf96:	4a85      	ldr	r2, [pc, #532]	; (800c1ac <_strtod_l+0xbfc>)
 800bf98:	4019      	ands	r1, r3
 800bf9a:	4291      	cmp	r1, r2
 800bf9c:	4682      	mov	sl, r0
 800bf9e:	d960      	bls.n	800c062 <_strtod_l+0xab2>
 800bfa0:	ee18 3a90 	vmov	r3, s17
 800bfa4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d104      	bne.n	800bfb6 <_strtod_l+0xa06>
 800bfac:	ee18 3a10 	vmov	r3, s16
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	f43f ad45 	beq.w	800ba40 <_strtod_l+0x490>
 800bfb6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c1b8 <_strtod_l+0xc08>
 800bfba:	f04f 3aff 	mov.w	sl, #4294967295
 800bfbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f001 ff21 	bl	800de08 <_Bfree>
 800bfc6:	9905      	ldr	r1, [sp, #20]
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f001 ff1d 	bl	800de08 <_Bfree>
 800bfce:	4631      	mov	r1, r6
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f001 ff19 	bl	800de08 <_Bfree>
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f001 ff15 	bl	800de08 <_Bfree>
 800bfde:	e61a      	b.n	800bc16 <_strtod_l+0x666>
 800bfe0:	f1ba 0f00 	cmp.w	sl, #0
 800bfe4:	d11b      	bne.n	800c01e <_strtod_l+0xa6e>
 800bfe6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bfea:	b9f3      	cbnz	r3, 800c02a <_strtod_l+0xa7a>
 800bfec:	4b6c      	ldr	r3, [pc, #432]	; (800c1a0 <_strtod_l+0xbf0>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	4640      	mov	r0, r8
 800bff2:	4649      	mov	r1, r9
 800bff4:	f7f4 fd92 	bl	8000b1c <__aeabi_dcmplt>
 800bff8:	b9d0      	cbnz	r0, 800c030 <_strtod_l+0xa80>
 800bffa:	4640      	mov	r0, r8
 800bffc:	4649      	mov	r1, r9
 800bffe:	4b6c      	ldr	r3, [pc, #432]	; (800c1b0 <_strtod_l+0xc00>)
 800c000:	2200      	movs	r2, #0
 800c002:	f7f4 fb19 	bl	8000638 <__aeabi_dmul>
 800c006:	4680      	mov	r8, r0
 800c008:	4689      	mov	r9, r1
 800c00a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c00e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c012:	9315      	str	r3, [sp, #84]	; 0x54
 800c014:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c018:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c01c:	e79d      	b.n	800bf5a <_strtod_l+0x9aa>
 800c01e:	f1ba 0f01 	cmp.w	sl, #1
 800c022:	d102      	bne.n	800c02a <_strtod_l+0xa7a>
 800c024:	2f00      	cmp	r7, #0
 800c026:	f43f ad83 	beq.w	800bb30 <_strtod_l+0x580>
 800c02a:	4b62      	ldr	r3, [pc, #392]	; (800c1b4 <_strtod_l+0xc04>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	e78e      	b.n	800bf4e <_strtod_l+0x99e>
 800c030:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c1b0 <_strtod_l+0xc00>
 800c034:	f04f 0800 	mov.w	r8, #0
 800c038:	e7e7      	b.n	800c00a <_strtod_l+0xa5a>
 800c03a:	4b5d      	ldr	r3, [pc, #372]	; (800c1b0 <_strtod_l+0xc00>)
 800c03c:	4640      	mov	r0, r8
 800c03e:	4649      	mov	r1, r9
 800c040:	2200      	movs	r2, #0
 800c042:	f7f4 faf9 	bl	8000638 <__aeabi_dmul>
 800c046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c048:	4680      	mov	r8, r0
 800c04a:	4689      	mov	r9, r1
 800c04c:	b933      	cbnz	r3, 800c05c <_strtod_l+0xaac>
 800c04e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c052:	900e      	str	r0, [sp, #56]	; 0x38
 800c054:	930f      	str	r3, [sp, #60]	; 0x3c
 800c056:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c05a:	e7dd      	b.n	800c018 <_strtod_l+0xa68>
 800c05c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c060:	e7f9      	b.n	800c056 <_strtod_l+0xaa6>
 800c062:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c066:	9b04      	ldr	r3, [sp, #16]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1a8      	bne.n	800bfbe <_strtod_l+0xa0e>
 800c06c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c070:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c072:	0d1b      	lsrs	r3, r3, #20
 800c074:	051b      	lsls	r3, r3, #20
 800c076:	429a      	cmp	r2, r3
 800c078:	d1a1      	bne.n	800bfbe <_strtod_l+0xa0e>
 800c07a:	4640      	mov	r0, r8
 800c07c:	4649      	mov	r1, r9
 800c07e:	f7f4 fe3b 	bl	8000cf8 <__aeabi_d2lz>
 800c082:	f7f4 faab 	bl	80005dc <__aeabi_l2d>
 800c086:	4602      	mov	r2, r0
 800c088:	460b      	mov	r3, r1
 800c08a:	4640      	mov	r0, r8
 800c08c:	4649      	mov	r1, r9
 800c08e:	f7f4 f91b 	bl	80002c8 <__aeabi_dsub>
 800c092:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c098:	ea43 030a 	orr.w	r3, r3, sl
 800c09c:	4313      	orrs	r3, r2
 800c09e:	4680      	mov	r8, r0
 800c0a0:	4689      	mov	r9, r1
 800c0a2:	d055      	beq.n	800c150 <_strtod_l+0xba0>
 800c0a4:	a336      	add	r3, pc, #216	; (adr r3, 800c180 <_strtod_l+0xbd0>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f7f4 fd37 	bl	8000b1c <__aeabi_dcmplt>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	f47f acd0 	bne.w	800ba54 <_strtod_l+0x4a4>
 800c0b4:	a334      	add	r3, pc, #208	; (adr r3, 800c188 <_strtod_l+0xbd8>)
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	4649      	mov	r1, r9
 800c0be:	f7f4 fd4b 	bl	8000b58 <__aeabi_dcmpgt>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	f43f af7b 	beq.w	800bfbe <_strtod_l+0xa0e>
 800c0c8:	e4c4      	b.n	800ba54 <_strtod_l+0x4a4>
 800c0ca:	9b04      	ldr	r3, [sp, #16]
 800c0cc:	b333      	cbz	r3, 800c11c <_strtod_l+0xb6c>
 800c0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0d4:	d822      	bhi.n	800c11c <_strtod_l+0xb6c>
 800c0d6:	a32e      	add	r3, pc, #184	; (adr r3, 800c190 <_strtod_l+0xbe0>)
 800c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0dc:	4640      	mov	r0, r8
 800c0de:	4649      	mov	r1, r9
 800c0e0:	f7f4 fd26 	bl	8000b30 <__aeabi_dcmple>
 800c0e4:	b1a0      	cbz	r0, 800c110 <_strtod_l+0xb60>
 800c0e6:	4649      	mov	r1, r9
 800c0e8:	4640      	mov	r0, r8
 800c0ea:	f7f4 fd7d 	bl	8000be8 <__aeabi_d2uiz>
 800c0ee:	2801      	cmp	r0, #1
 800c0f0:	bf38      	it	cc
 800c0f2:	2001      	movcc	r0, #1
 800c0f4:	f7f4 fa26 	bl	8000544 <__aeabi_ui2d>
 800c0f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0fa:	4680      	mov	r8, r0
 800c0fc:	4689      	mov	r9, r1
 800c0fe:	bb23      	cbnz	r3, 800c14a <_strtod_l+0xb9a>
 800c100:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c104:	9010      	str	r0, [sp, #64]	; 0x40
 800c106:	9311      	str	r3, [sp, #68]	; 0x44
 800c108:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c10c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c114:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c118:	1a9b      	subs	r3, r3, r2
 800c11a:	9309      	str	r3, [sp, #36]	; 0x24
 800c11c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c120:	eeb0 0a48 	vmov.f32	s0, s16
 800c124:	eef0 0a68 	vmov.f32	s1, s17
 800c128:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c12c:	f002 f99e 	bl	800e46c <__ulp>
 800c130:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c134:	ec53 2b10 	vmov	r2, r3, d0
 800c138:	f7f4 fa7e 	bl	8000638 <__aeabi_dmul>
 800c13c:	ec53 2b18 	vmov	r2, r3, d8
 800c140:	f7f4 f8c4 	bl	80002cc <__adddf3>
 800c144:	4682      	mov	sl, r0
 800c146:	468b      	mov	fp, r1
 800c148:	e78d      	b.n	800c066 <_strtod_l+0xab6>
 800c14a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c14e:	e7db      	b.n	800c108 <_strtod_l+0xb58>
 800c150:	a311      	add	r3, pc, #68	; (adr r3, 800c198 <_strtod_l+0xbe8>)
 800c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c156:	f7f4 fce1 	bl	8000b1c <__aeabi_dcmplt>
 800c15a:	e7b2      	b.n	800c0c2 <_strtod_l+0xb12>
 800c15c:	2300      	movs	r3, #0
 800c15e:	930a      	str	r3, [sp, #40]	; 0x28
 800c160:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	f7ff ba6b 	b.w	800b640 <_strtod_l+0x90>
 800c16a:	2a65      	cmp	r2, #101	; 0x65
 800c16c:	f43f ab5f 	beq.w	800b82e <_strtod_l+0x27e>
 800c170:	2a45      	cmp	r2, #69	; 0x45
 800c172:	f43f ab5c 	beq.w	800b82e <_strtod_l+0x27e>
 800c176:	2301      	movs	r3, #1
 800c178:	f7ff bb94 	b.w	800b8a4 <_strtod_l+0x2f4>
 800c17c:	f3af 8000 	nop.w
 800c180:	94a03595 	.word	0x94a03595
 800c184:	3fdfffff 	.word	0x3fdfffff
 800c188:	35afe535 	.word	0x35afe535
 800c18c:	3fe00000 	.word	0x3fe00000
 800c190:	ffc00000 	.word	0xffc00000
 800c194:	41dfffff 	.word	0x41dfffff
 800c198:	94a03595 	.word	0x94a03595
 800c19c:	3fcfffff 	.word	0x3fcfffff
 800c1a0:	3ff00000 	.word	0x3ff00000
 800c1a4:	7ff00000 	.word	0x7ff00000
 800c1a8:	7fe00000 	.word	0x7fe00000
 800c1ac:	7c9fffff 	.word	0x7c9fffff
 800c1b0:	3fe00000 	.word	0x3fe00000
 800c1b4:	bff00000 	.word	0xbff00000
 800c1b8:	7fefffff 	.word	0x7fefffff

0800c1bc <_strtod_r>:
 800c1bc:	4b01      	ldr	r3, [pc, #4]	; (800c1c4 <_strtod_r+0x8>)
 800c1be:	f7ff b9f7 	b.w	800b5b0 <_strtod_l>
 800c1c2:	bf00      	nop
 800c1c4:	20000074 	.word	0x20000074

0800c1c8 <_strtol_l.constprop.0>:
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1ce:	d001      	beq.n	800c1d4 <_strtol_l.constprop.0+0xc>
 800c1d0:	2b24      	cmp	r3, #36	; 0x24
 800c1d2:	d906      	bls.n	800c1e2 <_strtol_l.constprop.0+0x1a>
 800c1d4:	f7fe f90a 	bl	800a3ec <__errno>
 800c1d8:	2316      	movs	r3, #22
 800c1da:	6003      	str	r3, [r0, #0]
 800c1dc:	2000      	movs	r0, #0
 800c1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c2c8 <_strtol_l.constprop.0+0x100>
 800c1e6:	460d      	mov	r5, r1
 800c1e8:	462e      	mov	r6, r5
 800c1ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c1f2:	f017 0708 	ands.w	r7, r7, #8
 800c1f6:	d1f7      	bne.n	800c1e8 <_strtol_l.constprop.0+0x20>
 800c1f8:	2c2d      	cmp	r4, #45	; 0x2d
 800c1fa:	d132      	bne.n	800c262 <_strtol_l.constprop.0+0x9a>
 800c1fc:	782c      	ldrb	r4, [r5, #0]
 800c1fe:	2701      	movs	r7, #1
 800c200:	1cb5      	adds	r5, r6, #2
 800c202:	2b00      	cmp	r3, #0
 800c204:	d05b      	beq.n	800c2be <_strtol_l.constprop.0+0xf6>
 800c206:	2b10      	cmp	r3, #16
 800c208:	d109      	bne.n	800c21e <_strtol_l.constprop.0+0x56>
 800c20a:	2c30      	cmp	r4, #48	; 0x30
 800c20c:	d107      	bne.n	800c21e <_strtol_l.constprop.0+0x56>
 800c20e:	782c      	ldrb	r4, [r5, #0]
 800c210:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c214:	2c58      	cmp	r4, #88	; 0x58
 800c216:	d14d      	bne.n	800c2b4 <_strtol_l.constprop.0+0xec>
 800c218:	786c      	ldrb	r4, [r5, #1]
 800c21a:	2310      	movs	r3, #16
 800c21c:	3502      	adds	r5, #2
 800c21e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c222:	f108 38ff 	add.w	r8, r8, #4294967295
 800c226:	f04f 0c00 	mov.w	ip, #0
 800c22a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c22e:	4666      	mov	r6, ip
 800c230:	fb03 8a19 	mls	sl, r3, r9, r8
 800c234:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c238:	f1be 0f09 	cmp.w	lr, #9
 800c23c:	d816      	bhi.n	800c26c <_strtol_l.constprop.0+0xa4>
 800c23e:	4674      	mov	r4, lr
 800c240:	42a3      	cmp	r3, r4
 800c242:	dd24      	ble.n	800c28e <_strtol_l.constprop.0+0xc6>
 800c244:	f1bc 0f00 	cmp.w	ip, #0
 800c248:	db1e      	blt.n	800c288 <_strtol_l.constprop.0+0xc0>
 800c24a:	45b1      	cmp	r9, r6
 800c24c:	d31c      	bcc.n	800c288 <_strtol_l.constprop.0+0xc0>
 800c24e:	d101      	bne.n	800c254 <_strtol_l.constprop.0+0x8c>
 800c250:	45a2      	cmp	sl, r4
 800c252:	db19      	blt.n	800c288 <_strtol_l.constprop.0+0xc0>
 800c254:	fb06 4603 	mla	r6, r6, r3, r4
 800c258:	f04f 0c01 	mov.w	ip, #1
 800c25c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c260:	e7e8      	b.n	800c234 <_strtol_l.constprop.0+0x6c>
 800c262:	2c2b      	cmp	r4, #43	; 0x2b
 800c264:	bf04      	itt	eq
 800c266:	782c      	ldrbeq	r4, [r5, #0]
 800c268:	1cb5      	addeq	r5, r6, #2
 800c26a:	e7ca      	b.n	800c202 <_strtol_l.constprop.0+0x3a>
 800c26c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c270:	f1be 0f19 	cmp.w	lr, #25
 800c274:	d801      	bhi.n	800c27a <_strtol_l.constprop.0+0xb2>
 800c276:	3c37      	subs	r4, #55	; 0x37
 800c278:	e7e2      	b.n	800c240 <_strtol_l.constprop.0+0x78>
 800c27a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c27e:	f1be 0f19 	cmp.w	lr, #25
 800c282:	d804      	bhi.n	800c28e <_strtol_l.constprop.0+0xc6>
 800c284:	3c57      	subs	r4, #87	; 0x57
 800c286:	e7db      	b.n	800c240 <_strtol_l.constprop.0+0x78>
 800c288:	f04f 3cff 	mov.w	ip, #4294967295
 800c28c:	e7e6      	b.n	800c25c <_strtol_l.constprop.0+0x94>
 800c28e:	f1bc 0f00 	cmp.w	ip, #0
 800c292:	da05      	bge.n	800c2a0 <_strtol_l.constprop.0+0xd8>
 800c294:	2322      	movs	r3, #34	; 0x22
 800c296:	6003      	str	r3, [r0, #0]
 800c298:	4646      	mov	r6, r8
 800c29a:	b942      	cbnz	r2, 800c2ae <_strtol_l.constprop.0+0xe6>
 800c29c:	4630      	mov	r0, r6
 800c29e:	e79e      	b.n	800c1de <_strtol_l.constprop.0+0x16>
 800c2a0:	b107      	cbz	r7, 800c2a4 <_strtol_l.constprop.0+0xdc>
 800c2a2:	4276      	negs	r6, r6
 800c2a4:	2a00      	cmp	r2, #0
 800c2a6:	d0f9      	beq.n	800c29c <_strtol_l.constprop.0+0xd4>
 800c2a8:	f1bc 0f00 	cmp.w	ip, #0
 800c2ac:	d000      	beq.n	800c2b0 <_strtol_l.constprop.0+0xe8>
 800c2ae:	1e69      	subs	r1, r5, #1
 800c2b0:	6011      	str	r1, [r2, #0]
 800c2b2:	e7f3      	b.n	800c29c <_strtol_l.constprop.0+0xd4>
 800c2b4:	2430      	movs	r4, #48	; 0x30
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d1b1      	bne.n	800c21e <_strtol_l.constprop.0+0x56>
 800c2ba:	2308      	movs	r3, #8
 800c2bc:	e7af      	b.n	800c21e <_strtol_l.constprop.0+0x56>
 800c2be:	2c30      	cmp	r4, #48	; 0x30
 800c2c0:	d0a5      	beq.n	800c20e <_strtol_l.constprop.0+0x46>
 800c2c2:	230a      	movs	r3, #10
 800c2c4:	e7ab      	b.n	800c21e <_strtol_l.constprop.0+0x56>
 800c2c6:	bf00      	nop
 800c2c8:	080105b1 	.word	0x080105b1

0800c2cc <_strtol_r>:
 800c2cc:	f7ff bf7c 	b.w	800c1c8 <_strtol_l.constprop.0>

0800c2d0 <__swbuf_r>:
 800c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d2:	460e      	mov	r6, r1
 800c2d4:	4614      	mov	r4, r2
 800c2d6:	4605      	mov	r5, r0
 800c2d8:	b118      	cbz	r0, 800c2e2 <__swbuf_r+0x12>
 800c2da:	6983      	ldr	r3, [r0, #24]
 800c2dc:	b90b      	cbnz	r3, 800c2e2 <__swbuf_r+0x12>
 800c2de:	f001 f881 	bl	800d3e4 <__sinit>
 800c2e2:	4b21      	ldr	r3, [pc, #132]	; (800c368 <__swbuf_r+0x98>)
 800c2e4:	429c      	cmp	r4, r3
 800c2e6:	d12b      	bne.n	800c340 <__swbuf_r+0x70>
 800c2e8:	686c      	ldr	r4, [r5, #4]
 800c2ea:	69a3      	ldr	r3, [r4, #24]
 800c2ec:	60a3      	str	r3, [r4, #8]
 800c2ee:	89a3      	ldrh	r3, [r4, #12]
 800c2f0:	071a      	lsls	r2, r3, #28
 800c2f2:	d52f      	bpl.n	800c354 <__swbuf_r+0x84>
 800c2f4:	6923      	ldr	r3, [r4, #16]
 800c2f6:	b36b      	cbz	r3, 800c354 <__swbuf_r+0x84>
 800c2f8:	6923      	ldr	r3, [r4, #16]
 800c2fa:	6820      	ldr	r0, [r4, #0]
 800c2fc:	1ac0      	subs	r0, r0, r3
 800c2fe:	6963      	ldr	r3, [r4, #20]
 800c300:	b2f6      	uxtb	r6, r6
 800c302:	4283      	cmp	r3, r0
 800c304:	4637      	mov	r7, r6
 800c306:	dc04      	bgt.n	800c312 <__swbuf_r+0x42>
 800c308:	4621      	mov	r1, r4
 800c30a:	4628      	mov	r0, r5
 800c30c:	f000 ffc4 	bl	800d298 <_fflush_r>
 800c310:	bb30      	cbnz	r0, 800c360 <__swbuf_r+0x90>
 800c312:	68a3      	ldr	r3, [r4, #8]
 800c314:	3b01      	subs	r3, #1
 800c316:	60a3      	str	r3, [r4, #8]
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	1c5a      	adds	r2, r3, #1
 800c31c:	6022      	str	r2, [r4, #0]
 800c31e:	701e      	strb	r6, [r3, #0]
 800c320:	6963      	ldr	r3, [r4, #20]
 800c322:	3001      	adds	r0, #1
 800c324:	4283      	cmp	r3, r0
 800c326:	d004      	beq.n	800c332 <__swbuf_r+0x62>
 800c328:	89a3      	ldrh	r3, [r4, #12]
 800c32a:	07db      	lsls	r3, r3, #31
 800c32c:	d506      	bpl.n	800c33c <__swbuf_r+0x6c>
 800c32e:	2e0a      	cmp	r6, #10
 800c330:	d104      	bne.n	800c33c <__swbuf_r+0x6c>
 800c332:	4621      	mov	r1, r4
 800c334:	4628      	mov	r0, r5
 800c336:	f000 ffaf 	bl	800d298 <_fflush_r>
 800c33a:	b988      	cbnz	r0, 800c360 <__swbuf_r+0x90>
 800c33c:	4638      	mov	r0, r7
 800c33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c340:	4b0a      	ldr	r3, [pc, #40]	; (800c36c <__swbuf_r+0x9c>)
 800c342:	429c      	cmp	r4, r3
 800c344:	d101      	bne.n	800c34a <__swbuf_r+0x7a>
 800c346:	68ac      	ldr	r4, [r5, #8]
 800c348:	e7cf      	b.n	800c2ea <__swbuf_r+0x1a>
 800c34a:	4b09      	ldr	r3, [pc, #36]	; (800c370 <__swbuf_r+0xa0>)
 800c34c:	429c      	cmp	r4, r3
 800c34e:	bf08      	it	eq
 800c350:	68ec      	ldreq	r4, [r5, #12]
 800c352:	e7ca      	b.n	800c2ea <__swbuf_r+0x1a>
 800c354:	4621      	mov	r1, r4
 800c356:	4628      	mov	r0, r5
 800c358:	f000 f81e 	bl	800c398 <__swsetup_r>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d0cb      	beq.n	800c2f8 <__swbuf_r+0x28>
 800c360:	f04f 37ff 	mov.w	r7, #4294967295
 800c364:	e7ea      	b.n	800c33c <__swbuf_r+0x6c>
 800c366:	bf00      	nop
 800c368:	08010764 	.word	0x08010764
 800c36c:	08010784 	.word	0x08010784
 800c370:	08010744 	.word	0x08010744

0800c374 <_write_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d07      	ldr	r5, [pc, #28]	; (800c394 <_write_r+0x20>)
 800c378:	4604      	mov	r4, r0
 800c37a:	4608      	mov	r0, r1
 800c37c:	4611      	mov	r1, r2
 800c37e:	2200      	movs	r2, #0
 800c380:	602a      	str	r2, [r5, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	f7f5 ffef 	bl	8002366 <_write>
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	d102      	bne.n	800c392 <_write_r+0x1e>
 800c38c:	682b      	ldr	r3, [r5, #0]
 800c38e:	b103      	cbz	r3, 800c392 <_write_r+0x1e>
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	200004dc 	.word	0x200004dc

0800c398 <__swsetup_r>:
 800c398:	4b32      	ldr	r3, [pc, #200]	; (800c464 <__swsetup_r+0xcc>)
 800c39a:	b570      	push	{r4, r5, r6, lr}
 800c39c:	681d      	ldr	r5, [r3, #0]
 800c39e:	4606      	mov	r6, r0
 800c3a0:	460c      	mov	r4, r1
 800c3a2:	b125      	cbz	r5, 800c3ae <__swsetup_r+0x16>
 800c3a4:	69ab      	ldr	r3, [r5, #24]
 800c3a6:	b913      	cbnz	r3, 800c3ae <__swsetup_r+0x16>
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	f001 f81b 	bl	800d3e4 <__sinit>
 800c3ae:	4b2e      	ldr	r3, [pc, #184]	; (800c468 <__swsetup_r+0xd0>)
 800c3b0:	429c      	cmp	r4, r3
 800c3b2:	d10f      	bne.n	800c3d4 <__swsetup_r+0x3c>
 800c3b4:	686c      	ldr	r4, [r5, #4]
 800c3b6:	89a3      	ldrh	r3, [r4, #12]
 800c3b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3bc:	0719      	lsls	r1, r3, #28
 800c3be:	d42c      	bmi.n	800c41a <__swsetup_r+0x82>
 800c3c0:	06dd      	lsls	r5, r3, #27
 800c3c2:	d411      	bmi.n	800c3e8 <__swsetup_r+0x50>
 800c3c4:	2309      	movs	r3, #9
 800c3c6:	6033      	str	r3, [r6, #0]
 800c3c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3cc:	81a3      	strh	r3, [r4, #12]
 800c3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d2:	e03e      	b.n	800c452 <__swsetup_r+0xba>
 800c3d4:	4b25      	ldr	r3, [pc, #148]	; (800c46c <__swsetup_r+0xd4>)
 800c3d6:	429c      	cmp	r4, r3
 800c3d8:	d101      	bne.n	800c3de <__swsetup_r+0x46>
 800c3da:	68ac      	ldr	r4, [r5, #8]
 800c3dc:	e7eb      	b.n	800c3b6 <__swsetup_r+0x1e>
 800c3de:	4b24      	ldr	r3, [pc, #144]	; (800c470 <__swsetup_r+0xd8>)
 800c3e0:	429c      	cmp	r4, r3
 800c3e2:	bf08      	it	eq
 800c3e4:	68ec      	ldreq	r4, [r5, #12]
 800c3e6:	e7e6      	b.n	800c3b6 <__swsetup_r+0x1e>
 800c3e8:	0758      	lsls	r0, r3, #29
 800c3ea:	d512      	bpl.n	800c412 <__swsetup_r+0x7a>
 800c3ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3ee:	b141      	cbz	r1, 800c402 <__swsetup_r+0x6a>
 800c3f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3f4:	4299      	cmp	r1, r3
 800c3f6:	d002      	beq.n	800c3fe <__swsetup_r+0x66>
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	f002 f99d 	bl	800e738 <_free_r>
 800c3fe:	2300      	movs	r3, #0
 800c400:	6363      	str	r3, [r4, #52]	; 0x34
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c408:	81a3      	strh	r3, [r4, #12]
 800c40a:	2300      	movs	r3, #0
 800c40c:	6063      	str	r3, [r4, #4]
 800c40e:	6923      	ldr	r3, [r4, #16]
 800c410:	6023      	str	r3, [r4, #0]
 800c412:	89a3      	ldrh	r3, [r4, #12]
 800c414:	f043 0308 	orr.w	r3, r3, #8
 800c418:	81a3      	strh	r3, [r4, #12]
 800c41a:	6923      	ldr	r3, [r4, #16]
 800c41c:	b94b      	cbnz	r3, 800c432 <__swsetup_r+0x9a>
 800c41e:	89a3      	ldrh	r3, [r4, #12]
 800c420:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c428:	d003      	beq.n	800c432 <__swsetup_r+0x9a>
 800c42a:	4621      	mov	r1, r4
 800c42c:	4630      	mov	r0, r6
 800c42e:	f001 fc43 	bl	800dcb8 <__smakebuf_r>
 800c432:	89a0      	ldrh	r0, [r4, #12]
 800c434:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c438:	f010 0301 	ands.w	r3, r0, #1
 800c43c:	d00a      	beq.n	800c454 <__swsetup_r+0xbc>
 800c43e:	2300      	movs	r3, #0
 800c440:	60a3      	str	r3, [r4, #8]
 800c442:	6963      	ldr	r3, [r4, #20]
 800c444:	425b      	negs	r3, r3
 800c446:	61a3      	str	r3, [r4, #24]
 800c448:	6923      	ldr	r3, [r4, #16]
 800c44a:	b943      	cbnz	r3, 800c45e <__swsetup_r+0xc6>
 800c44c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c450:	d1ba      	bne.n	800c3c8 <__swsetup_r+0x30>
 800c452:	bd70      	pop	{r4, r5, r6, pc}
 800c454:	0781      	lsls	r1, r0, #30
 800c456:	bf58      	it	pl
 800c458:	6963      	ldrpl	r3, [r4, #20]
 800c45a:	60a3      	str	r3, [r4, #8]
 800c45c:	e7f4      	b.n	800c448 <__swsetup_r+0xb0>
 800c45e:	2000      	movs	r0, #0
 800c460:	e7f7      	b.n	800c452 <__swsetup_r+0xba>
 800c462:	bf00      	nop
 800c464:	2000000c 	.word	0x2000000c
 800c468:	08010764 	.word	0x08010764
 800c46c:	08010784 	.word	0x08010784
 800c470:	08010744 	.word	0x08010744

0800c474 <_close_r>:
 800c474:	b538      	push	{r3, r4, r5, lr}
 800c476:	4d06      	ldr	r5, [pc, #24]	; (800c490 <_close_r+0x1c>)
 800c478:	2300      	movs	r3, #0
 800c47a:	4604      	mov	r4, r0
 800c47c:	4608      	mov	r0, r1
 800c47e:	602b      	str	r3, [r5, #0]
 800c480:	f7f5 ff8d 	bl	800239e <_close>
 800c484:	1c43      	adds	r3, r0, #1
 800c486:	d102      	bne.n	800c48e <_close_r+0x1a>
 800c488:	682b      	ldr	r3, [r5, #0]
 800c48a:	b103      	cbz	r3, 800c48e <_close_r+0x1a>
 800c48c:	6023      	str	r3, [r4, #0]
 800c48e:	bd38      	pop	{r3, r4, r5, pc}
 800c490:	200004dc 	.word	0x200004dc

0800c494 <quorem>:
 800c494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c498:	6903      	ldr	r3, [r0, #16]
 800c49a:	690c      	ldr	r4, [r1, #16]
 800c49c:	42a3      	cmp	r3, r4
 800c49e:	4607      	mov	r7, r0
 800c4a0:	f2c0 8081 	blt.w	800c5a6 <quorem+0x112>
 800c4a4:	3c01      	subs	r4, #1
 800c4a6:	f101 0814 	add.w	r8, r1, #20
 800c4aa:	f100 0514 	add.w	r5, r0, #20
 800c4ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4b2:	9301      	str	r3, [sp, #4]
 800c4b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c4b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c4c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c4c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c4cc:	d331      	bcc.n	800c532 <quorem+0x9e>
 800c4ce:	f04f 0e00 	mov.w	lr, #0
 800c4d2:	4640      	mov	r0, r8
 800c4d4:	46ac      	mov	ip, r5
 800c4d6:	46f2      	mov	sl, lr
 800c4d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800c4dc:	b293      	uxth	r3, r2
 800c4de:	fb06 e303 	mla	r3, r6, r3, lr
 800c4e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	ebaa 0303 	sub.w	r3, sl, r3
 800c4ec:	f8dc a000 	ldr.w	sl, [ip]
 800c4f0:	0c12      	lsrs	r2, r2, #16
 800c4f2:	fa13 f38a 	uxtah	r3, r3, sl
 800c4f6:	fb06 e202 	mla	r2, r6, r2, lr
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	9b00      	ldr	r3, [sp, #0]
 800c4fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c502:	b292      	uxth	r2, r2
 800c504:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c50c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c510:	4581      	cmp	r9, r0
 800c512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c516:	f84c 3b04 	str.w	r3, [ip], #4
 800c51a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c51e:	d2db      	bcs.n	800c4d8 <quorem+0x44>
 800c520:	f855 300b 	ldr.w	r3, [r5, fp]
 800c524:	b92b      	cbnz	r3, 800c532 <quorem+0x9e>
 800c526:	9b01      	ldr	r3, [sp, #4]
 800c528:	3b04      	subs	r3, #4
 800c52a:	429d      	cmp	r5, r3
 800c52c:	461a      	mov	r2, r3
 800c52e:	d32e      	bcc.n	800c58e <quorem+0xfa>
 800c530:	613c      	str	r4, [r7, #16]
 800c532:	4638      	mov	r0, r7
 800c534:	f001 fef4 	bl	800e320 <__mcmp>
 800c538:	2800      	cmp	r0, #0
 800c53a:	db24      	blt.n	800c586 <quorem+0xf2>
 800c53c:	3601      	adds	r6, #1
 800c53e:	4628      	mov	r0, r5
 800c540:	f04f 0c00 	mov.w	ip, #0
 800c544:	f858 2b04 	ldr.w	r2, [r8], #4
 800c548:	f8d0 e000 	ldr.w	lr, [r0]
 800c54c:	b293      	uxth	r3, r2
 800c54e:	ebac 0303 	sub.w	r3, ip, r3
 800c552:	0c12      	lsrs	r2, r2, #16
 800c554:	fa13 f38e 	uxtah	r3, r3, lr
 800c558:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c55c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c560:	b29b      	uxth	r3, r3
 800c562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c566:	45c1      	cmp	r9, r8
 800c568:	f840 3b04 	str.w	r3, [r0], #4
 800c56c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c570:	d2e8      	bcs.n	800c544 <quorem+0xb0>
 800c572:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c57a:	b922      	cbnz	r2, 800c586 <quorem+0xf2>
 800c57c:	3b04      	subs	r3, #4
 800c57e:	429d      	cmp	r5, r3
 800c580:	461a      	mov	r2, r3
 800c582:	d30a      	bcc.n	800c59a <quorem+0x106>
 800c584:	613c      	str	r4, [r7, #16]
 800c586:	4630      	mov	r0, r6
 800c588:	b003      	add	sp, #12
 800c58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58e:	6812      	ldr	r2, [r2, #0]
 800c590:	3b04      	subs	r3, #4
 800c592:	2a00      	cmp	r2, #0
 800c594:	d1cc      	bne.n	800c530 <quorem+0x9c>
 800c596:	3c01      	subs	r4, #1
 800c598:	e7c7      	b.n	800c52a <quorem+0x96>
 800c59a:	6812      	ldr	r2, [r2, #0]
 800c59c:	3b04      	subs	r3, #4
 800c59e:	2a00      	cmp	r2, #0
 800c5a0:	d1f0      	bne.n	800c584 <quorem+0xf0>
 800c5a2:	3c01      	subs	r4, #1
 800c5a4:	e7eb      	b.n	800c57e <quorem+0xea>
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	e7ee      	b.n	800c588 <quorem+0xf4>
 800c5aa:	0000      	movs	r0, r0
 800c5ac:	0000      	movs	r0, r0
	...

0800c5b0 <_dtoa_r>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	ed2d 8b04 	vpush	{d8-d9}
 800c5b8:	ec57 6b10 	vmov	r6, r7, d0
 800c5bc:	b093      	sub	sp, #76	; 0x4c
 800c5be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c5c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c5c4:	9106      	str	r1, [sp, #24]
 800c5c6:	ee10 aa10 	vmov	sl, s0
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c5ce:	930c      	str	r3, [sp, #48]	; 0x30
 800c5d0:	46bb      	mov	fp, r7
 800c5d2:	b975      	cbnz	r5, 800c5f2 <_dtoa_r+0x42>
 800c5d4:	2010      	movs	r0, #16
 800c5d6:	f001 fbaf 	bl	800dd38 <malloc>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	6260      	str	r0, [r4, #36]	; 0x24
 800c5de:	b920      	cbnz	r0, 800c5ea <_dtoa_r+0x3a>
 800c5e0:	4ba7      	ldr	r3, [pc, #668]	; (800c880 <_dtoa_r+0x2d0>)
 800c5e2:	21ea      	movs	r1, #234	; 0xea
 800c5e4:	48a7      	ldr	r0, [pc, #668]	; (800c884 <_dtoa_r+0x2d4>)
 800c5e6:	f003 fb8f 	bl	800fd08 <__assert_func>
 800c5ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c5ee:	6005      	str	r5, [r0, #0]
 800c5f0:	60c5      	str	r5, [r0, #12]
 800c5f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5f4:	6819      	ldr	r1, [r3, #0]
 800c5f6:	b151      	cbz	r1, 800c60e <_dtoa_r+0x5e>
 800c5f8:	685a      	ldr	r2, [r3, #4]
 800c5fa:	604a      	str	r2, [r1, #4]
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	4093      	lsls	r3, r2
 800c600:	608b      	str	r3, [r1, #8]
 800c602:	4620      	mov	r0, r4
 800c604:	f001 fc00 	bl	800de08 <_Bfree>
 800c608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c60a:	2200      	movs	r2, #0
 800c60c:	601a      	str	r2, [r3, #0]
 800c60e:	1e3b      	subs	r3, r7, #0
 800c610:	bfaa      	itet	ge
 800c612:	2300      	movge	r3, #0
 800c614:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c618:	f8c8 3000 	strge.w	r3, [r8]
 800c61c:	4b9a      	ldr	r3, [pc, #616]	; (800c888 <_dtoa_r+0x2d8>)
 800c61e:	bfbc      	itt	lt
 800c620:	2201      	movlt	r2, #1
 800c622:	f8c8 2000 	strlt.w	r2, [r8]
 800c626:	ea33 030b 	bics.w	r3, r3, fp
 800c62a:	d11b      	bne.n	800c664 <_dtoa_r+0xb4>
 800c62c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c62e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c632:	6013      	str	r3, [r2, #0]
 800c634:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c638:	4333      	orrs	r3, r6
 800c63a:	f000 8592 	beq.w	800d162 <_dtoa_r+0xbb2>
 800c63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c640:	b963      	cbnz	r3, 800c65c <_dtoa_r+0xac>
 800c642:	4b92      	ldr	r3, [pc, #584]	; (800c88c <_dtoa_r+0x2dc>)
 800c644:	e022      	b.n	800c68c <_dtoa_r+0xdc>
 800c646:	4b92      	ldr	r3, [pc, #584]	; (800c890 <_dtoa_r+0x2e0>)
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	3308      	adds	r3, #8
 800c64c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c64e:	6013      	str	r3, [r2, #0]
 800c650:	9801      	ldr	r0, [sp, #4]
 800c652:	b013      	add	sp, #76	; 0x4c
 800c654:	ecbd 8b04 	vpop	{d8-d9}
 800c658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65c:	4b8b      	ldr	r3, [pc, #556]	; (800c88c <_dtoa_r+0x2dc>)
 800c65e:	9301      	str	r3, [sp, #4]
 800c660:	3303      	adds	r3, #3
 800c662:	e7f3      	b.n	800c64c <_dtoa_r+0x9c>
 800c664:	2200      	movs	r2, #0
 800c666:	2300      	movs	r3, #0
 800c668:	4650      	mov	r0, sl
 800c66a:	4659      	mov	r1, fp
 800c66c:	f7f4 fa4c 	bl	8000b08 <__aeabi_dcmpeq>
 800c670:	ec4b ab19 	vmov	d9, sl, fp
 800c674:	4680      	mov	r8, r0
 800c676:	b158      	cbz	r0, 800c690 <_dtoa_r+0xe0>
 800c678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c67a:	2301      	movs	r3, #1
 800c67c:	6013      	str	r3, [r2, #0]
 800c67e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c680:	2b00      	cmp	r3, #0
 800c682:	f000 856b 	beq.w	800d15c <_dtoa_r+0xbac>
 800c686:	4883      	ldr	r0, [pc, #524]	; (800c894 <_dtoa_r+0x2e4>)
 800c688:	6018      	str	r0, [r3, #0]
 800c68a:	1e43      	subs	r3, r0, #1
 800c68c:	9301      	str	r3, [sp, #4]
 800c68e:	e7df      	b.n	800c650 <_dtoa_r+0xa0>
 800c690:	ec4b ab10 	vmov	d0, sl, fp
 800c694:	aa10      	add	r2, sp, #64	; 0x40
 800c696:	a911      	add	r1, sp, #68	; 0x44
 800c698:	4620      	mov	r0, r4
 800c69a:	f001 ff63 	bl	800e564 <__d2b>
 800c69e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c6a2:	ee08 0a10 	vmov	s16, r0
 800c6a6:	2d00      	cmp	r5, #0
 800c6a8:	f000 8084 	beq.w	800c7b4 <_dtoa_r+0x204>
 800c6ac:	ee19 3a90 	vmov	r3, s19
 800c6b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c6b8:	4656      	mov	r6, sl
 800c6ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c6be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c6c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c6c6:	4b74      	ldr	r3, [pc, #464]	; (800c898 <_dtoa_r+0x2e8>)
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	4639      	mov	r1, r7
 800c6ce:	f7f3 fdfb 	bl	80002c8 <__aeabi_dsub>
 800c6d2:	a365      	add	r3, pc, #404	; (adr r3, 800c868 <_dtoa_r+0x2b8>)
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	f7f3 ffae 	bl	8000638 <__aeabi_dmul>
 800c6dc:	a364      	add	r3, pc, #400	; (adr r3, 800c870 <_dtoa_r+0x2c0>)
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	f7f3 fdf3 	bl	80002cc <__adddf3>
 800c6e6:	4606      	mov	r6, r0
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	460f      	mov	r7, r1
 800c6ec:	f7f3 ff3a 	bl	8000564 <__aeabi_i2d>
 800c6f0:	a361      	add	r3, pc, #388	; (adr r3, 800c878 <_dtoa_r+0x2c8>)
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	f7f3 ff9f 	bl	8000638 <__aeabi_dmul>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4630      	mov	r0, r6
 800c700:	4639      	mov	r1, r7
 800c702:	f7f3 fde3 	bl	80002cc <__adddf3>
 800c706:	4606      	mov	r6, r0
 800c708:	460f      	mov	r7, r1
 800c70a:	f7f4 fa45 	bl	8000b98 <__aeabi_d2iz>
 800c70e:	2200      	movs	r2, #0
 800c710:	9000      	str	r0, [sp, #0]
 800c712:	2300      	movs	r3, #0
 800c714:	4630      	mov	r0, r6
 800c716:	4639      	mov	r1, r7
 800c718:	f7f4 fa00 	bl	8000b1c <__aeabi_dcmplt>
 800c71c:	b150      	cbz	r0, 800c734 <_dtoa_r+0x184>
 800c71e:	9800      	ldr	r0, [sp, #0]
 800c720:	f7f3 ff20 	bl	8000564 <__aeabi_i2d>
 800c724:	4632      	mov	r2, r6
 800c726:	463b      	mov	r3, r7
 800c728:	f7f4 f9ee 	bl	8000b08 <__aeabi_dcmpeq>
 800c72c:	b910      	cbnz	r0, 800c734 <_dtoa_r+0x184>
 800c72e:	9b00      	ldr	r3, [sp, #0]
 800c730:	3b01      	subs	r3, #1
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	9b00      	ldr	r3, [sp, #0]
 800c736:	2b16      	cmp	r3, #22
 800c738:	d85a      	bhi.n	800c7f0 <_dtoa_r+0x240>
 800c73a:	9a00      	ldr	r2, [sp, #0]
 800c73c:	4b57      	ldr	r3, [pc, #348]	; (800c89c <_dtoa_r+0x2ec>)
 800c73e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c746:	ec51 0b19 	vmov	r0, r1, d9
 800c74a:	f7f4 f9e7 	bl	8000b1c <__aeabi_dcmplt>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d050      	beq.n	800c7f4 <_dtoa_r+0x244>
 800c752:	9b00      	ldr	r3, [sp, #0]
 800c754:	3b01      	subs	r3, #1
 800c756:	9300      	str	r3, [sp, #0]
 800c758:	2300      	movs	r3, #0
 800c75a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c75c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c75e:	1b5d      	subs	r5, r3, r5
 800c760:	1e6b      	subs	r3, r5, #1
 800c762:	9305      	str	r3, [sp, #20]
 800c764:	bf45      	ittet	mi
 800c766:	f1c5 0301 	rsbmi	r3, r5, #1
 800c76a:	9304      	strmi	r3, [sp, #16]
 800c76c:	2300      	movpl	r3, #0
 800c76e:	2300      	movmi	r3, #0
 800c770:	bf4c      	ite	mi
 800c772:	9305      	strmi	r3, [sp, #20]
 800c774:	9304      	strpl	r3, [sp, #16]
 800c776:	9b00      	ldr	r3, [sp, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	db3d      	blt.n	800c7f8 <_dtoa_r+0x248>
 800c77c:	9b05      	ldr	r3, [sp, #20]
 800c77e:	9a00      	ldr	r2, [sp, #0]
 800c780:	920a      	str	r2, [sp, #40]	; 0x28
 800c782:	4413      	add	r3, r2
 800c784:	9305      	str	r3, [sp, #20]
 800c786:	2300      	movs	r3, #0
 800c788:	9307      	str	r3, [sp, #28]
 800c78a:	9b06      	ldr	r3, [sp, #24]
 800c78c:	2b09      	cmp	r3, #9
 800c78e:	f200 8089 	bhi.w	800c8a4 <_dtoa_r+0x2f4>
 800c792:	2b05      	cmp	r3, #5
 800c794:	bfc4      	itt	gt
 800c796:	3b04      	subgt	r3, #4
 800c798:	9306      	strgt	r3, [sp, #24]
 800c79a:	9b06      	ldr	r3, [sp, #24]
 800c79c:	f1a3 0302 	sub.w	r3, r3, #2
 800c7a0:	bfcc      	ite	gt
 800c7a2:	2500      	movgt	r5, #0
 800c7a4:	2501      	movle	r5, #1
 800c7a6:	2b03      	cmp	r3, #3
 800c7a8:	f200 8087 	bhi.w	800c8ba <_dtoa_r+0x30a>
 800c7ac:	e8df f003 	tbb	[pc, r3]
 800c7b0:	59383a2d 	.word	0x59383a2d
 800c7b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c7b8:	441d      	add	r5, r3
 800c7ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c7be:	2b20      	cmp	r3, #32
 800c7c0:	bfc1      	itttt	gt
 800c7c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c7c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c7ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800c7ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c7d2:	bfda      	itte	le
 800c7d4:	f1c3 0320 	rsble	r3, r3, #32
 800c7d8:	fa06 f003 	lslle.w	r0, r6, r3
 800c7dc:	4318      	orrgt	r0, r3
 800c7de:	f7f3 feb1 	bl	8000544 <__aeabi_ui2d>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	4606      	mov	r6, r0
 800c7e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c7ea:	3d01      	subs	r5, #1
 800c7ec:	930e      	str	r3, [sp, #56]	; 0x38
 800c7ee:	e76a      	b.n	800c6c6 <_dtoa_r+0x116>
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e7b2      	b.n	800c75a <_dtoa_r+0x1aa>
 800c7f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c7f6:	e7b1      	b.n	800c75c <_dtoa_r+0x1ac>
 800c7f8:	9b04      	ldr	r3, [sp, #16]
 800c7fa:	9a00      	ldr	r2, [sp, #0]
 800c7fc:	1a9b      	subs	r3, r3, r2
 800c7fe:	9304      	str	r3, [sp, #16]
 800c800:	4253      	negs	r3, r2
 800c802:	9307      	str	r3, [sp, #28]
 800c804:	2300      	movs	r3, #0
 800c806:	930a      	str	r3, [sp, #40]	; 0x28
 800c808:	e7bf      	b.n	800c78a <_dtoa_r+0x1da>
 800c80a:	2300      	movs	r3, #0
 800c80c:	9308      	str	r3, [sp, #32]
 800c80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c810:	2b00      	cmp	r3, #0
 800c812:	dc55      	bgt.n	800c8c0 <_dtoa_r+0x310>
 800c814:	2301      	movs	r3, #1
 800c816:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c81a:	461a      	mov	r2, r3
 800c81c:	9209      	str	r2, [sp, #36]	; 0x24
 800c81e:	e00c      	b.n	800c83a <_dtoa_r+0x28a>
 800c820:	2301      	movs	r3, #1
 800c822:	e7f3      	b.n	800c80c <_dtoa_r+0x25c>
 800c824:	2300      	movs	r3, #0
 800c826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c828:	9308      	str	r3, [sp, #32]
 800c82a:	9b00      	ldr	r3, [sp, #0]
 800c82c:	4413      	add	r3, r2
 800c82e:	9302      	str	r3, [sp, #8]
 800c830:	3301      	adds	r3, #1
 800c832:	2b01      	cmp	r3, #1
 800c834:	9303      	str	r3, [sp, #12]
 800c836:	bfb8      	it	lt
 800c838:	2301      	movlt	r3, #1
 800c83a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c83c:	2200      	movs	r2, #0
 800c83e:	6042      	str	r2, [r0, #4]
 800c840:	2204      	movs	r2, #4
 800c842:	f102 0614 	add.w	r6, r2, #20
 800c846:	429e      	cmp	r6, r3
 800c848:	6841      	ldr	r1, [r0, #4]
 800c84a:	d93d      	bls.n	800c8c8 <_dtoa_r+0x318>
 800c84c:	4620      	mov	r0, r4
 800c84e:	f001 fa9b 	bl	800dd88 <_Balloc>
 800c852:	9001      	str	r0, [sp, #4]
 800c854:	2800      	cmp	r0, #0
 800c856:	d13b      	bne.n	800c8d0 <_dtoa_r+0x320>
 800c858:	4b11      	ldr	r3, [pc, #68]	; (800c8a0 <_dtoa_r+0x2f0>)
 800c85a:	4602      	mov	r2, r0
 800c85c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c860:	e6c0      	b.n	800c5e4 <_dtoa_r+0x34>
 800c862:	2301      	movs	r3, #1
 800c864:	e7df      	b.n	800c826 <_dtoa_r+0x276>
 800c866:	bf00      	nop
 800c868:	636f4361 	.word	0x636f4361
 800c86c:	3fd287a7 	.word	0x3fd287a7
 800c870:	8b60c8b3 	.word	0x8b60c8b3
 800c874:	3fc68a28 	.word	0x3fc68a28
 800c878:	509f79fb 	.word	0x509f79fb
 800c87c:	3fd34413 	.word	0x3fd34413
 800c880:	080106be 	.word	0x080106be
 800c884:	080106d5 	.word	0x080106d5
 800c888:	7ff00000 	.word	0x7ff00000
 800c88c:	080106ba 	.word	0x080106ba
 800c890:	080106b1 	.word	0x080106b1
 800c894:	08010992 	.word	0x08010992
 800c898:	3ff80000 	.word	0x3ff80000
 800c89c:	080108a8 	.word	0x080108a8
 800c8a0:	08010730 	.word	0x08010730
 800c8a4:	2501      	movs	r5, #1
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	9306      	str	r3, [sp, #24]
 800c8aa:	9508      	str	r5, [sp, #32]
 800c8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	2312      	movs	r3, #18
 800c8b8:	e7b0      	b.n	800c81c <_dtoa_r+0x26c>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	9308      	str	r3, [sp, #32]
 800c8be:	e7f5      	b.n	800c8ac <_dtoa_r+0x2fc>
 800c8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c8c6:	e7b8      	b.n	800c83a <_dtoa_r+0x28a>
 800c8c8:	3101      	adds	r1, #1
 800c8ca:	6041      	str	r1, [r0, #4]
 800c8cc:	0052      	lsls	r2, r2, #1
 800c8ce:	e7b8      	b.n	800c842 <_dtoa_r+0x292>
 800c8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8d2:	9a01      	ldr	r2, [sp, #4]
 800c8d4:	601a      	str	r2, [r3, #0]
 800c8d6:	9b03      	ldr	r3, [sp, #12]
 800c8d8:	2b0e      	cmp	r3, #14
 800c8da:	f200 809d 	bhi.w	800ca18 <_dtoa_r+0x468>
 800c8de:	2d00      	cmp	r5, #0
 800c8e0:	f000 809a 	beq.w	800ca18 <_dtoa_r+0x468>
 800c8e4:	9b00      	ldr	r3, [sp, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	dd32      	ble.n	800c950 <_dtoa_r+0x3a0>
 800c8ea:	4ab7      	ldr	r2, [pc, #732]	; (800cbc8 <_dtoa_r+0x618>)
 800c8ec:	f003 030f 	and.w	r3, r3, #15
 800c8f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c8f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8f8:	9b00      	ldr	r3, [sp, #0]
 800c8fa:	05d8      	lsls	r0, r3, #23
 800c8fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c900:	d516      	bpl.n	800c930 <_dtoa_r+0x380>
 800c902:	4bb2      	ldr	r3, [pc, #712]	; (800cbcc <_dtoa_r+0x61c>)
 800c904:	ec51 0b19 	vmov	r0, r1, d9
 800c908:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c90c:	f7f3 ffbe 	bl	800088c <__aeabi_ddiv>
 800c910:	f007 070f 	and.w	r7, r7, #15
 800c914:	4682      	mov	sl, r0
 800c916:	468b      	mov	fp, r1
 800c918:	2503      	movs	r5, #3
 800c91a:	4eac      	ldr	r6, [pc, #688]	; (800cbcc <_dtoa_r+0x61c>)
 800c91c:	b957      	cbnz	r7, 800c934 <_dtoa_r+0x384>
 800c91e:	4642      	mov	r2, r8
 800c920:	464b      	mov	r3, r9
 800c922:	4650      	mov	r0, sl
 800c924:	4659      	mov	r1, fp
 800c926:	f7f3 ffb1 	bl	800088c <__aeabi_ddiv>
 800c92a:	4682      	mov	sl, r0
 800c92c:	468b      	mov	fp, r1
 800c92e:	e028      	b.n	800c982 <_dtoa_r+0x3d2>
 800c930:	2502      	movs	r5, #2
 800c932:	e7f2      	b.n	800c91a <_dtoa_r+0x36a>
 800c934:	07f9      	lsls	r1, r7, #31
 800c936:	d508      	bpl.n	800c94a <_dtoa_r+0x39a>
 800c938:	4640      	mov	r0, r8
 800c93a:	4649      	mov	r1, r9
 800c93c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c940:	f7f3 fe7a 	bl	8000638 <__aeabi_dmul>
 800c944:	3501      	adds	r5, #1
 800c946:	4680      	mov	r8, r0
 800c948:	4689      	mov	r9, r1
 800c94a:	107f      	asrs	r7, r7, #1
 800c94c:	3608      	adds	r6, #8
 800c94e:	e7e5      	b.n	800c91c <_dtoa_r+0x36c>
 800c950:	f000 809b 	beq.w	800ca8a <_dtoa_r+0x4da>
 800c954:	9b00      	ldr	r3, [sp, #0]
 800c956:	4f9d      	ldr	r7, [pc, #628]	; (800cbcc <_dtoa_r+0x61c>)
 800c958:	425e      	negs	r6, r3
 800c95a:	4b9b      	ldr	r3, [pc, #620]	; (800cbc8 <_dtoa_r+0x618>)
 800c95c:	f006 020f 	and.w	r2, r6, #15
 800c960:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	ec51 0b19 	vmov	r0, r1, d9
 800c96c:	f7f3 fe64 	bl	8000638 <__aeabi_dmul>
 800c970:	1136      	asrs	r6, r6, #4
 800c972:	4682      	mov	sl, r0
 800c974:	468b      	mov	fp, r1
 800c976:	2300      	movs	r3, #0
 800c978:	2502      	movs	r5, #2
 800c97a:	2e00      	cmp	r6, #0
 800c97c:	d17a      	bne.n	800ca74 <_dtoa_r+0x4c4>
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1d3      	bne.n	800c92a <_dtoa_r+0x37a>
 800c982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c984:	2b00      	cmp	r3, #0
 800c986:	f000 8082 	beq.w	800ca8e <_dtoa_r+0x4de>
 800c98a:	4b91      	ldr	r3, [pc, #580]	; (800cbd0 <_dtoa_r+0x620>)
 800c98c:	2200      	movs	r2, #0
 800c98e:	4650      	mov	r0, sl
 800c990:	4659      	mov	r1, fp
 800c992:	f7f4 f8c3 	bl	8000b1c <__aeabi_dcmplt>
 800c996:	2800      	cmp	r0, #0
 800c998:	d079      	beq.n	800ca8e <_dtoa_r+0x4de>
 800c99a:	9b03      	ldr	r3, [sp, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d076      	beq.n	800ca8e <_dtoa_r+0x4de>
 800c9a0:	9b02      	ldr	r3, [sp, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	dd36      	ble.n	800ca14 <_dtoa_r+0x464>
 800c9a6:	9b00      	ldr	r3, [sp, #0]
 800c9a8:	4650      	mov	r0, sl
 800c9aa:	4659      	mov	r1, fp
 800c9ac:	1e5f      	subs	r7, r3, #1
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	4b88      	ldr	r3, [pc, #544]	; (800cbd4 <_dtoa_r+0x624>)
 800c9b2:	f7f3 fe41 	bl	8000638 <__aeabi_dmul>
 800c9b6:	9e02      	ldr	r6, [sp, #8]
 800c9b8:	4682      	mov	sl, r0
 800c9ba:	468b      	mov	fp, r1
 800c9bc:	3501      	adds	r5, #1
 800c9be:	4628      	mov	r0, r5
 800c9c0:	f7f3 fdd0 	bl	8000564 <__aeabi_i2d>
 800c9c4:	4652      	mov	r2, sl
 800c9c6:	465b      	mov	r3, fp
 800c9c8:	f7f3 fe36 	bl	8000638 <__aeabi_dmul>
 800c9cc:	4b82      	ldr	r3, [pc, #520]	; (800cbd8 <_dtoa_r+0x628>)
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f7f3 fc7c 	bl	80002cc <__adddf3>
 800c9d4:	46d0      	mov	r8, sl
 800c9d6:	46d9      	mov	r9, fp
 800c9d8:	4682      	mov	sl, r0
 800c9da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c9de:	2e00      	cmp	r6, #0
 800c9e0:	d158      	bne.n	800ca94 <_dtoa_r+0x4e4>
 800c9e2:	4b7e      	ldr	r3, [pc, #504]	; (800cbdc <_dtoa_r+0x62c>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	4640      	mov	r0, r8
 800c9e8:	4649      	mov	r1, r9
 800c9ea:	f7f3 fc6d 	bl	80002c8 <__aeabi_dsub>
 800c9ee:	4652      	mov	r2, sl
 800c9f0:	465b      	mov	r3, fp
 800c9f2:	4680      	mov	r8, r0
 800c9f4:	4689      	mov	r9, r1
 800c9f6:	f7f4 f8af 	bl	8000b58 <__aeabi_dcmpgt>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	f040 8295 	bne.w	800cf2a <_dtoa_r+0x97a>
 800ca00:	4652      	mov	r2, sl
 800ca02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ca06:	4640      	mov	r0, r8
 800ca08:	4649      	mov	r1, r9
 800ca0a:	f7f4 f887 	bl	8000b1c <__aeabi_dcmplt>
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	f040 8289 	bne.w	800cf26 <_dtoa_r+0x976>
 800ca14:	ec5b ab19 	vmov	sl, fp, d9
 800ca18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f2c0 8148 	blt.w	800ccb0 <_dtoa_r+0x700>
 800ca20:	9a00      	ldr	r2, [sp, #0]
 800ca22:	2a0e      	cmp	r2, #14
 800ca24:	f300 8144 	bgt.w	800ccb0 <_dtoa_r+0x700>
 800ca28:	4b67      	ldr	r3, [pc, #412]	; (800cbc8 <_dtoa_r+0x618>)
 800ca2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f280 80d5 	bge.w	800cbe4 <_dtoa_r+0x634>
 800ca3a:	9b03      	ldr	r3, [sp, #12]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f300 80d1 	bgt.w	800cbe4 <_dtoa_r+0x634>
 800ca42:	f040 826f 	bne.w	800cf24 <_dtoa_r+0x974>
 800ca46:	4b65      	ldr	r3, [pc, #404]	; (800cbdc <_dtoa_r+0x62c>)
 800ca48:	2200      	movs	r2, #0
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	4649      	mov	r1, r9
 800ca4e:	f7f3 fdf3 	bl	8000638 <__aeabi_dmul>
 800ca52:	4652      	mov	r2, sl
 800ca54:	465b      	mov	r3, fp
 800ca56:	f7f4 f875 	bl	8000b44 <__aeabi_dcmpge>
 800ca5a:	9e03      	ldr	r6, [sp, #12]
 800ca5c:	4637      	mov	r7, r6
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	f040 8245 	bne.w	800ceee <_dtoa_r+0x93e>
 800ca64:	9d01      	ldr	r5, [sp, #4]
 800ca66:	2331      	movs	r3, #49	; 0x31
 800ca68:	f805 3b01 	strb.w	r3, [r5], #1
 800ca6c:	9b00      	ldr	r3, [sp, #0]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	e240      	b.n	800cef6 <_dtoa_r+0x946>
 800ca74:	07f2      	lsls	r2, r6, #31
 800ca76:	d505      	bpl.n	800ca84 <_dtoa_r+0x4d4>
 800ca78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca7c:	f7f3 fddc 	bl	8000638 <__aeabi_dmul>
 800ca80:	3501      	adds	r5, #1
 800ca82:	2301      	movs	r3, #1
 800ca84:	1076      	asrs	r6, r6, #1
 800ca86:	3708      	adds	r7, #8
 800ca88:	e777      	b.n	800c97a <_dtoa_r+0x3ca>
 800ca8a:	2502      	movs	r5, #2
 800ca8c:	e779      	b.n	800c982 <_dtoa_r+0x3d2>
 800ca8e:	9f00      	ldr	r7, [sp, #0]
 800ca90:	9e03      	ldr	r6, [sp, #12]
 800ca92:	e794      	b.n	800c9be <_dtoa_r+0x40e>
 800ca94:	9901      	ldr	r1, [sp, #4]
 800ca96:	4b4c      	ldr	r3, [pc, #304]	; (800cbc8 <_dtoa_r+0x618>)
 800ca98:	4431      	add	r1, r6
 800ca9a:	910d      	str	r1, [sp, #52]	; 0x34
 800ca9c:	9908      	ldr	r1, [sp, #32]
 800ca9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800caa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800caa6:	2900      	cmp	r1, #0
 800caa8:	d043      	beq.n	800cb32 <_dtoa_r+0x582>
 800caaa:	494d      	ldr	r1, [pc, #308]	; (800cbe0 <_dtoa_r+0x630>)
 800caac:	2000      	movs	r0, #0
 800caae:	f7f3 feed 	bl	800088c <__aeabi_ddiv>
 800cab2:	4652      	mov	r2, sl
 800cab4:	465b      	mov	r3, fp
 800cab6:	f7f3 fc07 	bl	80002c8 <__aeabi_dsub>
 800caba:	9d01      	ldr	r5, [sp, #4]
 800cabc:	4682      	mov	sl, r0
 800cabe:	468b      	mov	fp, r1
 800cac0:	4649      	mov	r1, r9
 800cac2:	4640      	mov	r0, r8
 800cac4:	f7f4 f868 	bl	8000b98 <__aeabi_d2iz>
 800cac8:	4606      	mov	r6, r0
 800caca:	f7f3 fd4b 	bl	8000564 <__aeabi_i2d>
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	4640      	mov	r0, r8
 800cad4:	4649      	mov	r1, r9
 800cad6:	f7f3 fbf7 	bl	80002c8 <__aeabi_dsub>
 800cada:	3630      	adds	r6, #48	; 0x30
 800cadc:	f805 6b01 	strb.w	r6, [r5], #1
 800cae0:	4652      	mov	r2, sl
 800cae2:	465b      	mov	r3, fp
 800cae4:	4680      	mov	r8, r0
 800cae6:	4689      	mov	r9, r1
 800cae8:	f7f4 f818 	bl	8000b1c <__aeabi_dcmplt>
 800caec:	2800      	cmp	r0, #0
 800caee:	d163      	bne.n	800cbb8 <_dtoa_r+0x608>
 800caf0:	4642      	mov	r2, r8
 800caf2:	464b      	mov	r3, r9
 800caf4:	4936      	ldr	r1, [pc, #216]	; (800cbd0 <_dtoa_r+0x620>)
 800caf6:	2000      	movs	r0, #0
 800caf8:	f7f3 fbe6 	bl	80002c8 <__aeabi_dsub>
 800cafc:	4652      	mov	r2, sl
 800cafe:	465b      	mov	r3, fp
 800cb00:	f7f4 f80c 	bl	8000b1c <__aeabi_dcmplt>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	f040 80b5 	bne.w	800cc74 <_dtoa_r+0x6c4>
 800cb0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb0c:	429d      	cmp	r5, r3
 800cb0e:	d081      	beq.n	800ca14 <_dtoa_r+0x464>
 800cb10:	4b30      	ldr	r3, [pc, #192]	; (800cbd4 <_dtoa_r+0x624>)
 800cb12:	2200      	movs	r2, #0
 800cb14:	4650      	mov	r0, sl
 800cb16:	4659      	mov	r1, fp
 800cb18:	f7f3 fd8e 	bl	8000638 <__aeabi_dmul>
 800cb1c:	4b2d      	ldr	r3, [pc, #180]	; (800cbd4 <_dtoa_r+0x624>)
 800cb1e:	4682      	mov	sl, r0
 800cb20:	468b      	mov	fp, r1
 800cb22:	4640      	mov	r0, r8
 800cb24:	4649      	mov	r1, r9
 800cb26:	2200      	movs	r2, #0
 800cb28:	f7f3 fd86 	bl	8000638 <__aeabi_dmul>
 800cb2c:	4680      	mov	r8, r0
 800cb2e:	4689      	mov	r9, r1
 800cb30:	e7c6      	b.n	800cac0 <_dtoa_r+0x510>
 800cb32:	4650      	mov	r0, sl
 800cb34:	4659      	mov	r1, fp
 800cb36:	f7f3 fd7f 	bl	8000638 <__aeabi_dmul>
 800cb3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb3c:	9d01      	ldr	r5, [sp, #4]
 800cb3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb40:	4682      	mov	sl, r0
 800cb42:	468b      	mov	fp, r1
 800cb44:	4649      	mov	r1, r9
 800cb46:	4640      	mov	r0, r8
 800cb48:	f7f4 f826 	bl	8000b98 <__aeabi_d2iz>
 800cb4c:	4606      	mov	r6, r0
 800cb4e:	f7f3 fd09 	bl	8000564 <__aeabi_i2d>
 800cb52:	3630      	adds	r6, #48	; 0x30
 800cb54:	4602      	mov	r2, r0
 800cb56:	460b      	mov	r3, r1
 800cb58:	4640      	mov	r0, r8
 800cb5a:	4649      	mov	r1, r9
 800cb5c:	f7f3 fbb4 	bl	80002c8 <__aeabi_dsub>
 800cb60:	f805 6b01 	strb.w	r6, [r5], #1
 800cb64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb66:	429d      	cmp	r5, r3
 800cb68:	4680      	mov	r8, r0
 800cb6a:	4689      	mov	r9, r1
 800cb6c:	f04f 0200 	mov.w	r2, #0
 800cb70:	d124      	bne.n	800cbbc <_dtoa_r+0x60c>
 800cb72:	4b1b      	ldr	r3, [pc, #108]	; (800cbe0 <_dtoa_r+0x630>)
 800cb74:	4650      	mov	r0, sl
 800cb76:	4659      	mov	r1, fp
 800cb78:	f7f3 fba8 	bl	80002cc <__adddf3>
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	460b      	mov	r3, r1
 800cb80:	4640      	mov	r0, r8
 800cb82:	4649      	mov	r1, r9
 800cb84:	f7f3 ffe8 	bl	8000b58 <__aeabi_dcmpgt>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d173      	bne.n	800cc74 <_dtoa_r+0x6c4>
 800cb8c:	4652      	mov	r2, sl
 800cb8e:	465b      	mov	r3, fp
 800cb90:	4913      	ldr	r1, [pc, #76]	; (800cbe0 <_dtoa_r+0x630>)
 800cb92:	2000      	movs	r0, #0
 800cb94:	f7f3 fb98 	bl	80002c8 <__aeabi_dsub>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	4640      	mov	r0, r8
 800cb9e:	4649      	mov	r1, r9
 800cba0:	f7f3 ffbc 	bl	8000b1c <__aeabi_dcmplt>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	f43f af35 	beq.w	800ca14 <_dtoa_r+0x464>
 800cbaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cbac:	1e6b      	subs	r3, r5, #1
 800cbae:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cbb4:	2b30      	cmp	r3, #48	; 0x30
 800cbb6:	d0f8      	beq.n	800cbaa <_dtoa_r+0x5fa>
 800cbb8:	9700      	str	r7, [sp, #0]
 800cbba:	e049      	b.n	800cc50 <_dtoa_r+0x6a0>
 800cbbc:	4b05      	ldr	r3, [pc, #20]	; (800cbd4 <_dtoa_r+0x624>)
 800cbbe:	f7f3 fd3b 	bl	8000638 <__aeabi_dmul>
 800cbc2:	4680      	mov	r8, r0
 800cbc4:	4689      	mov	r9, r1
 800cbc6:	e7bd      	b.n	800cb44 <_dtoa_r+0x594>
 800cbc8:	080108a8 	.word	0x080108a8
 800cbcc:	08010880 	.word	0x08010880
 800cbd0:	3ff00000 	.word	0x3ff00000
 800cbd4:	40240000 	.word	0x40240000
 800cbd8:	401c0000 	.word	0x401c0000
 800cbdc:	40140000 	.word	0x40140000
 800cbe0:	3fe00000 	.word	0x3fe00000
 800cbe4:	9d01      	ldr	r5, [sp, #4]
 800cbe6:	4656      	mov	r6, sl
 800cbe8:	465f      	mov	r7, fp
 800cbea:	4642      	mov	r2, r8
 800cbec:	464b      	mov	r3, r9
 800cbee:	4630      	mov	r0, r6
 800cbf0:	4639      	mov	r1, r7
 800cbf2:	f7f3 fe4b 	bl	800088c <__aeabi_ddiv>
 800cbf6:	f7f3 ffcf 	bl	8000b98 <__aeabi_d2iz>
 800cbfa:	4682      	mov	sl, r0
 800cbfc:	f7f3 fcb2 	bl	8000564 <__aeabi_i2d>
 800cc00:	4642      	mov	r2, r8
 800cc02:	464b      	mov	r3, r9
 800cc04:	f7f3 fd18 	bl	8000638 <__aeabi_dmul>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	4639      	mov	r1, r7
 800cc10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cc14:	f7f3 fb58 	bl	80002c8 <__aeabi_dsub>
 800cc18:	f805 6b01 	strb.w	r6, [r5], #1
 800cc1c:	9e01      	ldr	r6, [sp, #4]
 800cc1e:	9f03      	ldr	r7, [sp, #12]
 800cc20:	1bae      	subs	r6, r5, r6
 800cc22:	42b7      	cmp	r7, r6
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	d135      	bne.n	800cc96 <_dtoa_r+0x6e6>
 800cc2a:	f7f3 fb4f 	bl	80002cc <__adddf3>
 800cc2e:	4642      	mov	r2, r8
 800cc30:	464b      	mov	r3, r9
 800cc32:	4606      	mov	r6, r0
 800cc34:	460f      	mov	r7, r1
 800cc36:	f7f3 ff8f 	bl	8000b58 <__aeabi_dcmpgt>
 800cc3a:	b9d0      	cbnz	r0, 800cc72 <_dtoa_r+0x6c2>
 800cc3c:	4642      	mov	r2, r8
 800cc3e:	464b      	mov	r3, r9
 800cc40:	4630      	mov	r0, r6
 800cc42:	4639      	mov	r1, r7
 800cc44:	f7f3 ff60 	bl	8000b08 <__aeabi_dcmpeq>
 800cc48:	b110      	cbz	r0, 800cc50 <_dtoa_r+0x6a0>
 800cc4a:	f01a 0f01 	tst.w	sl, #1
 800cc4e:	d110      	bne.n	800cc72 <_dtoa_r+0x6c2>
 800cc50:	4620      	mov	r0, r4
 800cc52:	ee18 1a10 	vmov	r1, s16
 800cc56:	f001 f8d7 	bl	800de08 <_Bfree>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	9800      	ldr	r0, [sp, #0]
 800cc5e:	702b      	strb	r3, [r5, #0]
 800cc60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc62:	3001      	adds	r0, #1
 800cc64:	6018      	str	r0, [r3, #0]
 800cc66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f43f acf1 	beq.w	800c650 <_dtoa_r+0xa0>
 800cc6e:	601d      	str	r5, [r3, #0]
 800cc70:	e4ee      	b.n	800c650 <_dtoa_r+0xa0>
 800cc72:	9f00      	ldr	r7, [sp, #0]
 800cc74:	462b      	mov	r3, r5
 800cc76:	461d      	mov	r5, r3
 800cc78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc7c:	2a39      	cmp	r2, #57	; 0x39
 800cc7e:	d106      	bne.n	800cc8e <_dtoa_r+0x6de>
 800cc80:	9a01      	ldr	r2, [sp, #4]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d1f7      	bne.n	800cc76 <_dtoa_r+0x6c6>
 800cc86:	9901      	ldr	r1, [sp, #4]
 800cc88:	2230      	movs	r2, #48	; 0x30
 800cc8a:	3701      	adds	r7, #1
 800cc8c:	700a      	strb	r2, [r1, #0]
 800cc8e:	781a      	ldrb	r2, [r3, #0]
 800cc90:	3201      	adds	r2, #1
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	e790      	b.n	800cbb8 <_dtoa_r+0x608>
 800cc96:	4ba6      	ldr	r3, [pc, #664]	; (800cf30 <_dtoa_r+0x980>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f7f3 fccd 	bl	8000638 <__aeabi_dmul>
 800cc9e:	2200      	movs	r2, #0
 800cca0:	2300      	movs	r3, #0
 800cca2:	4606      	mov	r6, r0
 800cca4:	460f      	mov	r7, r1
 800cca6:	f7f3 ff2f 	bl	8000b08 <__aeabi_dcmpeq>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d09d      	beq.n	800cbea <_dtoa_r+0x63a>
 800ccae:	e7cf      	b.n	800cc50 <_dtoa_r+0x6a0>
 800ccb0:	9a08      	ldr	r2, [sp, #32]
 800ccb2:	2a00      	cmp	r2, #0
 800ccb4:	f000 80d7 	beq.w	800ce66 <_dtoa_r+0x8b6>
 800ccb8:	9a06      	ldr	r2, [sp, #24]
 800ccba:	2a01      	cmp	r2, #1
 800ccbc:	f300 80ba 	bgt.w	800ce34 <_dtoa_r+0x884>
 800ccc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccc2:	2a00      	cmp	r2, #0
 800ccc4:	f000 80b2 	beq.w	800ce2c <_dtoa_r+0x87c>
 800ccc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cccc:	9e07      	ldr	r6, [sp, #28]
 800ccce:	9d04      	ldr	r5, [sp, #16]
 800ccd0:	9a04      	ldr	r2, [sp, #16]
 800ccd2:	441a      	add	r2, r3
 800ccd4:	9204      	str	r2, [sp, #16]
 800ccd6:	9a05      	ldr	r2, [sp, #20]
 800ccd8:	2101      	movs	r1, #1
 800ccda:	441a      	add	r2, r3
 800ccdc:	4620      	mov	r0, r4
 800ccde:	9205      	str	r2, [sp, #20]
 800cce0:	f001 f994 	bl	800e00c <__i2b>
 800cce4:	4607      	mov	r7, r0
 800cce6:	2d00      	cmp	r5, #0
 800cce8:	dd0c      	ble.n	800cd04 <_dtoa_r+0x754>
 800ccea:	9b05      	ldr	r3, [sp, #20]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	dd09      	ble.n	800cd04 <_dtoa_r+0x754>
 800ccf0:	42ab      	cmp	r3, r5
 800ccf2:	9a04      	ldr	r2, [sp, #16]
 800ccf4:	bfa8      	it	ge
 800ccf6:	462b      	movge	r3, r5
 800ccf8:	1ad2      	subs	r2, r2, r3
 800ccfa:	9204      	str	r2, [sp, #16]
 800ccfc:	9a05      	ldr	r2, [sp, #20]
 800ccfe:	1aed      	subs	r5, r5, r3
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	9305      	str	r3, [sp, #20]
 800cd04:	9b07      	ldr	r3, [sp, #28]
 800cd06:	b31b      	cbz	r3, 800cd50 <_dtoa_r+0x7a0>
 800cd08:	9b08      	ldr	r3, [sp, #32]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f000 80af 	beq.w	800ce6e <_dtoa_r+0x8be>
 800cd10:	2e00      	cmp	r6, #0
 800cd12:	dd13      	ble.n	800cd3c <_dtoa_r+0x78c>
 800cd14:	4639      	mov	r1, r7
 800cd16:	4632      	mov	r2, r6
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f001 fa37 	bl	800e18c <__pow5mult>
 800cd1e:	ee18 2a10 	vmov	r2, s16
 800cd22:	4601      	mov	r1, r0
 800cd24:	4607      	mov	r7, r0
 800cd26:	4620      	mov	r0, r4
 800cd28:	f001 f986 	bl	800e038 <__multiply>
 800cd2c:	ee18 1a10 	vmov	r1, s16
 800cd30:	4680      	mov	r8, r0
 800cd32:	4620      	mov	r0, r4
 800cd34:	f001 f868 	bl	800de08 <_Bfree>
 800cd38:	ee08 8a10 	vmov	s16, r8
 800cd3c:	9b07      	ldr	r3, [sp, #28]
 800cd3e:	1b9a      	subs	r2, r3, r6
 800cd40:	d006      	beq.n	800cd50 <_dtoa_r+0x7a0>
 800cd42:	ee18 1a10 	vmov	r1, s16
 800cd46:	4620      	mov	r0, r4
 800cd48:	f001 fa20 	bl	800e18c <__pow5mult>
 800cd4c:	ee08 0a10 	vmov	s16, r0
 800cd50:	2101      	movs	r1, #1
 800cd52:	4620      	mov	r0, r4
 800cd54:	f001 f95a 	bl	800e00c <__i2b>
 800cd58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	4606      	mov	r6, r0
 800cd5e:	f340 8088 	ble.w	800ce72 <_dtoa_r+0x8c2>
 800cd62:	461a      	mov	r2, r3
 800cd64:	4601      	mov	r1, r0
 800cd66:	4620      	mov	r0, r4
 800cd68:	f001 fa10 	bl	800e18c <__pow5mult>
 800cd6c:	9b06      	ldr	r3, [sp, #24]
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	4606      	mov	r6, r0
 800cd72:	f340 8081 	ble.w	800ce78 <_dtoa_r+0x8c8>
 800cd76:	f04f 0800 	mov.w	r8, #0
 800cd7a:	6933      	ldr	r3, [r6, #16]
 800cd7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cd80:	6918      	ldr	r0, [r3, #16]
 800cd82:	f001 f8f3 	bl	800df6c <__hi0bits>
 800cd86:	f1c0 0020 	rsb	r0, r0, #32
 800cd8a:	9b05      	ldr	r3, [sp, #20]
 800cd8c:	4418      	add	r0, r3
 800cd8e:	f010 001f 	ands.w	r0, r0, #31
 800cd92:	f000 8092 	beq.w	800ceba <_dtoa_r+0x90a>
 800cd96:	f1c0 0320 	rsb	r3, r0, #32
 800cd9a:	2b04      	cmp	r3, #4
 800cd9c:	f340 808a 	ble.w	800ceb4 <_dtoa_r+0x904>
 800cda0:	f1c0 001c 	rsb	r0, r0, #28
 800cda4:	9b04      	ldr	r3, [sp, #16]
 800cda6:	4403      	add	r3, r0
 800cda8:	9304      	str	r3, [sp, #16]
 800cdaa:	9b05      	ldr	r3, [sp, #20]
 800cdac:	4403      	add	r3, r0
 800cdae:	4405      	add	r5, r0
 800cdb0:	9305      	str	r3, [sp, #20]
 800cdb2:	9b04      	ldr	r3, [sp, #16]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	dd07      	ble.n	800cdc8 <_dtoa_r+0x818>
 800cdb8:	ee18 1a10 	vmov	r1, s16
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f001 fa3e 	bl	800e240 <__lshift>
 800cdc4:	ee08 0a10 	vmov	s16, r0
 800cdc8:	9b05      	ldr	r3, [sp, #20]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	dd05      	ble.n	800cdda <_dtoa_r+0x82a>
 800cdce:	4631      	mov	r1, r6
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f001 fa34 	bl	800e240 <__lshift>
 800cdd8:	4606      	mov	r6, r0
 800cdda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d06e      	beq.n	800cebe <_dtoa_r+0x90e>
 800cde0:	ee18 0a10 	vmov	r0, s16
 800cde4:	4631      	mov	r1, r6
 800cde6:	f001 fa9b 	bl	800e320 <__mcmp>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	da67      	bge.n	800cebe <_dtoa_r+0x90e>
 800cdee:	9b00      	ldr	r3, [sp, #0]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	ee18 1a10 	vmov	r1, s16
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	220a      	movs	r2, #10
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f001 f825 	bl	800de4c <__multadd>
 800ce02:	9b08      	ldr	r3, [sp, #32]
 800ce04:	ee08 0a10 	vmov	s16, r0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 81b1 	beq.w	800d170 <_dtoa_r+0xbc0>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	4639      	mov	r1, r7
 800ce12:	220a      	movs	r2, #10
 800ce14:	4620      	mov	r0, r4
 800ce16:	f001 f819 	bl	800de4c <__multadd>
 800ce1a:	9b02      	ldr	r3, [sp, #8]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	4607      	mov	r7, r0
 800ce20:	f300 808e 	bgt.w	800cf40 <_dtoa_r+0x990>
 800ce24:	9b06      	ldr	r3, [sp, #24]
 800ce26:	2b02      	cmp	r3, #2
 800ce28:	dc51      	bgt.n	800cece <_dtoa_r+0x91e>
 800ce2a:	e089      	b.n	800cf40 <_dtoa_r+0x990>
 800ce2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce32:	e74b      	b.n	800cccc <_dtoa_r+0x71c>
 800ce34:	9b03      	ldr	r3, [sp, #12]
 800ce36:	1e5e      	subs	r6, r3, #1
 800ce38:	9b07      	ldr	r3, [sp, #28]
 800ce3a:	42b3      	cmp	r3, r6
 800ce3c:	bfbf      	itttt	lt
 800ce3e:	9b07      	ldrlt	r3, [sp, #28]
 800ce40:	9607      	strlt	r6, [sp, #28]
 800ce42:	1af2      	sublt	r2, r6, r3
 800ce44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ce46:	bfb6      	itet	lt
 800ce48:	189b      	addlt	r3, r3, r2
 800ce4a:	1b9e      	subge	r6, r3, r6
 800ce4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ce4e:	9b03      	ldr	r3, [sp, #12]
 800ce50:	bfb8      	it	lt
 800ce52:	2600      	movlt	r6, #0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	bfb7      	itett	lt
 800ce58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ce5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ce60:	1a9d      	sublt	r5, r3, r2
 800ce62:	2300      	movlt	r3, #0
 800ce64:	e734      	b.n	800ccd0 <_dtoa_r+0x720>
 800ce66:	9e07      	ldr	r6, [sp, #28]
 800ce68:	9d04      	ldr	r5, [sp, #16]
 800ce6a:	9f08      	ldr	r7, [sp, #32]
 800ce6c:	e73b      	b.n	800cce6 <_dtoa_r+0x736>
 800ce6e:	9a07      	ldr	r2, [sp, #28]
 800ce70:	e767      	b.n	800cd42 <_dtoa_r+0x792>
 800ce72:	9b06      	ldr	r3, [sp, #24]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	dc18      	bgt.n	800ceaa <_dtoa_r+0x8fa>
 800ce78:	f1ba 0f00 	cmp.w	sl, #0
 800ce7c:	d115      	bne.n	800ceaa <_dtoa_r+0x8fa>
 800ce7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce82:	b993      	cbnz	r3, 800ceaa <_dtoa_r+0x8fa>
 800ce84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce88:	0d1b      	lsrs	r3, r3, #20
 800ce8a:	051b      	lsls	r3, r3, #20
 800ce8c:	b183      	cbz	r3, 800ceb0 <_dtoa_r+0x900>
 800ce8e:	9b04      	ldr	r3, [sp, #16]
 800ce90:	3301      	adds	r3, #1
 800ce92:	9304      	str	r3, [sp, #16]
 800ce94:	9b05      	ldr	r3, [sp, #20]
 800ce96:	3301      	adds	r3, #1
 800ce98:	9305      	str	r3, [sp, #20]
 800ce9a:	f04f 0801 	mov.w	r8, #1
 800ce9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f47f af6a 	bne.w	800cd7a <_dtoa_r+0x7ca>
 800cea6:	2001      	movs	r0, #1
 800cea8:	e76f      	b.n	800cd8a <_dtoa_r+0x7da>
 800ceaa:	f04f 0800 	mov.w	r8, #0
 800ceae:	e7f6      	b.n	800ce9e <_dtoa_r+0x8ee>
 800ceb0:	4698      	mov	r8, r3
 800ceb2:	e7f4      	b.n	800ce9e <_dtoa_r+0x8ee>
 800ceb4:	f43f af7d 	beq.w	800cdb2 <_dtoa_r+0x802>
 800ceb8:	4618      	mov	r0, r3
 800ceba:	301c      	adds	r0, #28
 800cebc:	e772      	b.n	800cda4 <_dtoa_r+0x7f4>
 800cebe:	9b03      	ldr	r3, [sp, #12]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	dc37      	bgt.n	800cf34 <_dtoa_r+0x984>
 800cec4:	9b06      	ldr	r3, [sp, #24]
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	dd34      	ble.n	800cf34 <_dtoa_r+0x984>
 800ceca:	9b03      	ldr	r3, [sp, #12]
 800cecc:	9302      	str	r3, [sp, #8]
 800cece:	9b02      	ldr	r3, [sp, #8]
 800ced0:	b96b      	cbnz	r3, 800ceee <_dtoa_r+0x93e>
 800ced2:	4631      	mov	r1, r6
 800ced4:	2205      	movs	r2, #5
 800ced6:	4620      	mov	r0, r4
 800ced8:	f000 ffb8 	bl	800de4c <__multadd>
 800cedc:	4601      	mov	r1, r0
 800cede:	4606      	mov	r6, r0
 800cee0:	ee18 0a10 	vmov	r0, s16
 800cee4:	f001 fa1c 	bl	800e320 <__mcmp>
 800cee8:	2800      	cmp	r0, #0
 800ceea:	f73f adbb 	bgt.w	800ca64 <_dtoa_r+0x4b4>
 800ceee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cef0:	9d01      	ldr	r5, [sp, #4]
 800cef2:	43db      	mvns	r3, r3
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	f04f 0800 	mov.w	r8, #0
 800cefa:	4631      	mov	r1, r6
 800cefc:	4620      	mov	r0, r4
 800cefe:	f000 ff83 	bl	800de08 <_Bfree>
 800cf02:	2f00      	cmp	r7, #0
 800cf04:	f43f aea4 	beq.w	800cc50 <_dtoa_r+0x6a0>
 800cf08:	f1b8 0f00 	cmp.w	r8, #0
 800cf0c:	d005      	beq.n	800cf1a <_dtoa_r+0x96a>
 800cf0e:	45b8      	cmp	r8, r7
 800cf10:	d003      	beq.n	800cf1a <_dtoa_r+0x96a>
 800cf12:	4641      	mov	r1, r8
 800cf14:	4620      	mov	r0, r4
 800cf16:	f000 ff77 	bl	800de08 <_Bfree>
 800cf1a:	4639      	mov	r1, r7
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	f000 ff73 	bl	800de08 <_Bfree>
 800cf22:	e695      	b.n	800cc50 <_dtoa_r+0x6a0>
 800cf24:	2600      	movs	r6, #0
 800cf26:	4637      	mov	r7, r6
 800cf28:	e7e1      	b.n	800ceee <_dtoa_r+0x93e>
 800cf2a:	9700      	str	r7, [sp, #0]
 800cf2c:	4637      	mov	r7, r6
 800cf2e:	e599      	b.n	800ca64 <_dtoa_r+0x4b4>
 800cf30:	40240000 	.word	0x40240000
 800cf34:	9b08      	ldr	r3, [sp, #32]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f000 80ca 	beq.w	800d0d0 <_dtoa_r+0xb20>
 800cf3c:	9b03      	ldr	r3, [sp, #12]
 800cf3e:	9302      	str	r3, [sp, #8]
 800cf40:	2d00      	cmp	r5, #0
 800cf42:	dd05      	ble.n	800cf50 <_dtoa_r+0x9a0>
 800cf44:	4639      	mov	r1, r7
 800cf46:	462a      	mov	r2, r5
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f001 f979 	bl	800e240 <__lshift>
 800cf4e:	4607      	mov	r7, r0
 800cf50:	f1b8 0f00 	cmp.w	r8, #0
 800cf54:	d05b      	beq.n	800d00e <_dtoa_r+0xa5e>
 800cf56:	6879      	ldr	r1, [r7, #4]
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f000 ff15 	bl	800dd88 <_Balloc>
 800cf5e:	4605      	mov	r5, r0
 800cf60:	b928      	cbnz	r0, 800cf6e <_dtoa_r+0x9be>
 800cf62:	4b87      	ldr	r3, [pc, #540]	; (800d180 <_dtoa_r+0xbd0>)
 800cf64:	4602      	mov	r2, r0
 800cf66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cf6a:	f7ff bb3b 	b.w	800c5e4 <_dtoa_r+0x34>
 800cf6e:	693a      	ldr	r2, [r7, #16]
 800cf70:	3202      	adds	r2, #2
 800cf72:	0092      	lsls	r2, r2, #2
 800cf74:	f107 010c 	add.w	r1, r7, #12
 800cf78:	300c      	adds	r0, #12
 800cf7a:	f000 fef7 	bl	800dd6c <memcpy>
 800cf7e:	2201      	movs	r2, #1
 800cf80:	4629      	mov	r1, r5
 800cf82:	4620      	mov	r0, r4
 800cf84:	f001 f95c 	bl	800e240 <__lshift>
 800cf88:	9b01      	ldr	r3, [sp, #4]
 800cf8a:	f103 0901 	add.w	r9, r3, #1
 800cf8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cf92:	4413      	add	r3, r2
 800cf94:	9305      	str	r3, [sp, #20]
 800cf96:	f00a 0301 	and.w	r3, sl, #1
 800cf9a:	46b8      	mov	r8, r7
 800cf9c:	9304      	str	r3, [sp, #16]
 800cf9e:	4607      	mov	r7, r0
 800cfa0:	4631      	mov	r1, r6
 800cfa2:	ee18 0a10 	vmov	r0, s16
 800cfa6:	f7ff fa75 	bl	800c494 <quorem>
 800cfaa:	4641      	mov	r1, r8
 800cfac:	9002      	str	r0, [sp, #8]
 800cfae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cfb2:	ee18 0a10 	vmov	r0, s16
 800cfb6:	f001 f9b3 	bl	800e320 <__mcmp>
 800cfba:	463a      	mov	r2, r7
 800cfbc:	9003      	str	r0, [sp, #12]
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f001 f9c9 	bl	800e358 <__mdiff>
 800cfc6:	68c2      	ldr	r2, [r0, #12]
 800cfc8:	f109 3bff 	add.w	fp, r9, #4294967295
 800cfcc:	4605      	mov	r5, r0
 800cfce:	bb02      	cbnz	r2, 800d012 <_dtoa_r+0xa62>
 800cfd0:	4601      	mov	r1, r0
 800cfd2:	ee18 0a10 	vmov	r0, s16
 800cfd6:	f001 f9a3 	bl	800e320 <__mcmp>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	4629      	mov	r1, r5
 800cfde:	4620      	mov	r0, r4
 800cfe0:	9207      	str	r2, [sp, #28]
 800cfe2:	f000 ff11 	bl	800de08 <_Bfree>
 800cfe6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cfea:	ea43 0102 	orr.w	r1, r3, r2
 800cfee:	9b04      	ldr	r3, [sp, #16]
 800cff0:	430b      	orrs	r3, r1
 800cff2:	464d      	mov	r5, r9
 800cff4:	d10f      	bne.n	800d016 <_dtoa_r+0xa66>
 800cff6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cffa:	d02a      	beq.n	800d052 <_dtoa_r+0xaa2>
 800cffc:	9b03      	ldr	r3, [sp, #12]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	dd02      	ble.n	800d008 <_dtoa_r+0xa58>
 800d002:	9b02      	ldr	r3, [sp, #8]
 800d004:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d008:	f88b a000 	strb.w	sl, [fp]
 800d00c:	e775      	b.n	800cefa <_dtoa_r+0x94a>
 800d00e:	4638      	mov	r0, r7
 800d010:	e7ba      	b.n	800cf88 <_dtoa_r+0x9d8>
 800d012:	2201      	movs	r2, #1
 800d014:	e7e2      	b.n	800cfdc <_dtoa_r+0xa2c>
 800d016:	9b03      	ldr	r3, [sp, #12]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	db04      	blt.n	800d026 <_dtoa_r+0xa76>
 800d01c:	9906      	ldr	r1, [sp, #24]
 800d01e:	430b      	orrs	r3, r1
 800d020:	9904      	ldr	r1, [sp, #16]
 800d022:	430b      	orrs	r3, r1
 800d024:	d122      	bne.n	800d06c <_dtoa_r+0xabc>
 800d026:	2a00      	cmp	r2, #0
 800d028:	ddee      	ble.n	800d008 <_dtoa_r+0xa58>
 800d02a:	ee18 1a10 	vmov	r1, s16
 800d02e:	2201      	movs	r2, #1
 800d030:	4620      	mov	r0, r4
 800d032:	f001 f905 	bl	800e240 <__lshift>
 800d036:	4631      	mov	r1, r6
 800d038:	ee08 0a10 	vmov	s16, r0
 800d03c:	f001 f970 	bl	800e320 <__mcmp>
 800d040:	2800      	cmp	r0, #0
 800d042:	dc03      	bgt.n	800d04c <_dtoa_r+0xa9c>
 800d044:	d1e0      	bne.n	800d008 <_dtoa_r+0xa58>
 800d046:	f01a 0f01 	tst.w	sl, #1
 800d04a:	d0dd      	beq.n	800d008 <_dtoa_r+0xa58>
 800d04c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d050:	d1d7      	bne.n	800d002 <_dtoa_r+0xa52>
 800d052:	2339      	movs	r3, #57	; 0x39
 800d054:	f88b 3000 	strb.w	r3, [fp]
 800d058:	462b      	mov	r3, r5
 800d05a:	461d      	mov	r5, r3
 800d05c:	3b01      	subs	r3, #1
 800d05e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d062:	2a39      	cmp	r2, #57	; 0x39
 800d064:	d071      	beq.n	800d14a <_dtoa_r+0xb9a>
 800d066:	3201      	adds	r2, #1
 800d068:	701a      	strb	r2, [r3, #0]
 800d06a:	e746      	b.n	800cefa <_dtoa_r+0x94a>
 800d06c:	2a00      	cmp	r2, #0
 800d06e:	dd07      	ble.n	800d080 <_dtoa_r+0xad0>
 800d070:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d074:	d0ed      	beq.n	800d052 <_dtoa_r+0xaa2>
 800d076:	f10a 0301 	add.w	r3, sl, #1
 800d07a:	f88b 3000 	strb.w	r3, [fp]
 800d07e:	e73c      	b.n	800cefa <_dtoa_r+0x94a>
 800d080:	9b05      	ldr	r3, [sp, #20]
 800d082:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d086:	4599      	cmp	r9, r3
 800d088:	d047      	beq.n	800d11a <_dtoa_r+0xb6a>
 800d08a:	ee18 1a10 	vmov	r1, s16
 800d08e:	2300      	movs	r3, #0
 800d090:	220a      	movs	r2, #10
 800d092:	4620      	mov	r0, r4
 800d094:	f000 feda 	bl	800de4c <__multadd>
 800d098:	45b8      	cmp	r8, r7
 800d09a:	ee08 0a10 	vmov	s16, r0
 800d09e:	f04f 0300 	mov.w	r3, #0
 800d0a2:	f04f 020a 	mov.w	r2, #10
 800d0a6:	4641      	mov	r1, r8
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	d106      	bne.n	800d0ba <_dtoa_r+0xb0a>
 800d0ac:	f000 fece 	bl	800de4c <__multadd>
 800d0b0:	4680      	mov	r8, r0
 800d0b2:	4607      	mov	r7, r0
 800d0b4:	f109 0901 	add.w	r9, r9, #1
 800d0b8:	e772      	b.n	800cfa0 <_dtoa_r+0x9f0>
 800d0ba:	f000 fec7 	bl	800de4c <__multadd>
 800d0be:	4639      	mov	r1, r7
 800d0c0:	4680      	mov	r8, r0
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	220a      	movs	r2, #10
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f000 fec0 	bl	800de4c <__multadd>
 800d0cc:	4607      	mov	r7, r0
 800d0ce:	e7f1      	b.n	800d0b4 <_dtoa_r+0xb04>
 800d0d0:	9b03      	ldr	r3, [sp, #12]
 800d0d2:	9302      	str	r3, [sp, #8]
 800d0d4:	9d01      	ldr	r5, [sp, #4]
 800d0d6:	ee18 0a10 	vmov	r0, s16
 800d0da:	4631      	mov	r1, r6
 800d0dc:	f7ff f9da 	bl	800c494 <quorem>
 800d0e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d0e4:	9b01      	ldr	r3, [sp, #4]
 800d0e6:	f805 ab01 	strb.w	sl, [r5], #1
 800d0ea:	1aea      	subs	r2, r5, r3
 800d0ec:	9b02      	ldr	r3, [sp, #8]
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	dd09      	ble.n	800d106 <_dtoa_r+0xb56>
 800d0f2:	ee18 1a10 	vmov	r1, s16
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	220a      	movs	r2, #10
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f000 fea6 	bl	800de4c <__multadd>
 800d100:	ee08 0a10 	vmov	s16, r0
 800d104:	e7e7      	b.n	800d0d6 <_dtoa_r+0xb26>
 800d106:	9b02      	ldr	r3, [sp, #8]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	bfc8      	it	gt
 800d10c:	461d      	movgt	r5, r3
 800d10e:	9b01      	ldr	r3, [sp, #4]
 800d110:	bfd8      	it	le
 800d112:	2501      	movle	r5, #1
 800d114:	441d      	add	r5, r3
 800d116:	f04f 0800 	mov.w	r8, #0
 800d11a:	ee18 1a10 	vmov	r1, s16
 800d11e:	2201      	movs	r2, #1
 800d120:	4620      	mov	r0, r4
 800d122:	f001 f88d 	bl	800e240 <__lshift>
 800d126:	4631      	mov	r1, r6
 800d128:	ee08 0a10 	vmov	s16, r0
 800d12c:	f001 f8f8 	bl	800e320 <__mcmp>
 800d130:	2800      	cmp	r0, #0
 800d132:	dc91      	bgt.n	800d058 <_dtoa_r+0xaa8>
 800d134:	d102      	bne.n	800d13c <_dtoa_r+0xb8c>
 800d136:	f01a 0f01 	tst.w	sl, #1
 800d13a:	d18d      	bne.n	800d058 <_dtoa_r+0xaa8>
 800d13c:	462b      	mov	r3, r5
 800d13e:	461d      	mov	r5, r3
 800d140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d144:	2a30      	cmp	r2, #48	; 0x30
 800d146:	d0fa      	beq.n	800d13e <_dtoa_r+0xb8e>
 800d148:	e6d7      	b.n	800cefa <_dtoa_r+0x94a>
 800d14a:	9a01      	ldr	r2, [sp, #4]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d184      	bne.n	800d05a <_dtoa_r+0xaaa>
 800d150:	9b00      	ldr	r3, [sp, #0]
 800d152:	3301      	adds	r3, #1
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	2331      	movs	r3, #49	; 0x31
 800d158:	7013      	strb	r3, [r2, #0]
 800d15a:	e6ce      	b.n	800cefa <_dtoa_r+0x94a>
 800d15c:	4b09      	ldr	r3, [pc, #36]	; (800d184 <_dtoa_r+0xbd4>)
 800d15e:	f7ff ba95 	b.w	800c68c <_dtoa_r+0xdc>
 800d162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d164:	2b00      	cmp	r3, #0
 800d166:	f47f aa6e 	bne.w	800c646 <_dtoa_r+0x96>
 800d16a:	4b07      	ldr	r3, [pc, #28]	; (800d188 <_dtoa_r+0xbd8>)
 800d16c:	f7ff ba8e 	b.w	800c68c <_dtoa_r+0xdc>
 800d170:	9b02      	ldr	r3, [sp, #8]
 800d172:	2b00      	cmp	r3, #0
 800d174:	dcae      	bgt.n	800d0d4 <_dtoa_r+0xb24>
 800d176:	9b06      	ldr	r3, [sp, #24]
 800d178:	2b02      	cmp	r3, #2
 800d17a:	f73f aea8 	bgt.w	800cece <_dtoa_r+0x91e>
 800d17e:	e7a9      	b.n	800d0d4 <_dtoa_r+0xb24>
 800d180:	08010730 	.word	0x08010730
 800d184:	08010991 	.word	0x08010991
 800d188:	080106b1 	.word	0x080106b1

0800d18c <__sflush_r>:
 800d18c:	898a      	ldrh	r2, [r1, #12]
 800d18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d192:	4605      	mov	r5, r0
 800d194:	0710      	lsls	r0, r2, #28
 800d196:	460c      	mov	r4, r1
 800d198:	d458      	bmi.n	800d24c <__sflush_r+0xc0>
 800d19a:	684b      	ldr	r3, [r1, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	dc05      	bgt.n	800d1ac <__sflush_r+0x20>
 800d1a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	dc02      	bgt.n	800d1ac <__sflush_r+0x20>
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1ae:	2e00      	cmp	r6, #0
 800d1b0:	d0f9      	beq.n	800d1a6 <__sflush_r+0x1a>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1b8:	682f      	ldr	r7, [r5, #0]
 800d1ba:	602b      	str	r3, [r5, #0]
 800d1bc:	d032      	beq.n	800d224 <__sflush_r+0x98>
 800d1be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1c0:	89a3      	ldrh	r3, [r4, #12]
 800d1c2:	075a      	lsls	r2, r3, #29
 800d1c4:	d505      	bpl.n	800d1d2 <__sflush_r+0x46>
 800d1c6:	6863      	ldr	r3, [r4, #4]
 800d1c8:	1ac0      	subs	r0, r0, r3
 800d1ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1cc:	b10b      	cbz	r3, 800d1d2 <__sflush_r+0x46>
 800d1ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1d0:	1ac0      	subs	r0, r0, r3
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1d8:	6a21      	ldr	r1, [r4, #32]
 800d1da:	4628      	mov	r0, r5
 800d1dc:	47b0      	blx	r6
 800d1de:	1c43      	adds	r3, r0, #1
 800d1e0:	89a3      	ldrh	r3, [r4, #12]
 800d1e2:	d106      	bne.n	800d1f2 <__sflush_r+0x66>
 800d1e4:	6829      	ldr	r1, [r5, #0]
 800d1e6:	291d      	cmp	r1, #29
 800d1e8:	d82c      	bhi.n	800d244 <__sflush_r+0xb8>
 800d1ea:	4a2a      	ldr	r2, [pc, #168]	; (800d294 <__sflush_r+0x108>)
 800d1ec:	40ca      	lsrs	r2, r1
 800d1ee:	07d6      	lsls	r6, r2, #31
 800d1f0:	d528      	bpl.n	800d244 <__sflush_r+0xb8>
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	6062      	str	r2, [r4, #4]
 800d1f6:	04d9      	lsls	r1, r3, #19
 800d1f8:	6922      	ldr	r2, [r4, #16]
 800d1fa:	6022      	str	r2, [r4, #0]
 800d1fc:	d504      	bpl.n	800d208 <__sflush_r+0x7c>
 800d1fe:	1c42      	adds	r2, r0, #1
 800d200:	d101      	bne.n	800d206 <__sflush_r+0x7a>
 800d202:	682b      	ldr	r3, [r5, #0]
 800d204:	b903      	cbnz	r3, 800d208 <__sflush_r+0x7c>
 800d206:	6560      	str	r0, [r4, #84]	; 0x54
 800d208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d20a:	602f      	str	r7, [r5, #0]
 800d20c:	2900      	cmp	r1, #0
 800d20e:	d0ca      	beq.n	800d1a6 <__sflush_r+0x1a>
 800d210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d214:	4299      	cmp	r1, r3
 800d216:	d002      	beq.n	800d21e <__sflush_r+0x92>
 800d218:	4628      	mov	r0, r5
 800d21a:	f001 fa8d 	bl	800e738 <_free_r>
 800d21e:	2000      	movs	r0, #0
 800d220:	6360      	str	r0, [r4, #52]	; 0x34
 800d222:	e7c1      	b.n	800d1a8 <__sflush_r+0x1c>
 800d224:	6a21      	ldr	r1, [r4, #32]
 800d226:	2301      	movs	r3, #1
 800d228:	4628      	mov	r0, r5
 800d22a:	47b0      	blx	r6
 800d22c:	1c41      	adds	r1, r0, #1
 800d22e:	d1c7      	bne.n	800d1c0 <__sflush_r+0x34>
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d0c4      	beq.n	800d1c0 <__sflush_r+0x34>
 800d236:	2b1d      	cmp	r3, #29
 800d238:	d001      	beq.n	800d23e <__sflush_r+0xb2>
 800d23a:	2b16      	cmp	r3, #22
 800d23c:	d101      	bne.n	800d242 <__sflush_r+0xb6>
 800d23e:	602f      	str	r7, [r5, #0]
 800d240:	e7b1      	b.n	800d1a6 <__sflush_r+0x1a>
 800d242:	89a3      	ldrh	r3, [r4, #12]
 800d244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d248:	81a3      	strh	r3, [r4, #12]
 800d24a:	e7ad      	b.n	800d1a8 <__sflush_r+0x1c>
 800d24c:	690f      	ldr	r7, [r1, #16]
 800d24e:	2f00      	cmp	r7, #0
 800d250:	d0a9      	beq.n	800d1a6 <__sflush_r+0x1a>
 800d252:	0793      	lsls	r3, r2, #30
 800d254:	680e      	ldr	r6, [r1, #0]
 800d256:	bf08      	it	eq
 800d258:	694b      	ldreq	r3, [r1, #20]
 800d25a:	600f      	str	r7, [r1, #0]
 800d25c:	bf18      	it	ne
 800d25e:	2300      	movne	r3, #0
 800d260:	eba6 0807 	sub.w	r8, r6, r7
 800d264:	608b      	str	r3, [r1, #8]
 800d266:	f1b8 0f00 	cmp.w	r8, #0
 800d26a:	dd9c      	ble.n	800d1a6 <__sflush_r+0x1a>
 800d26c:	6a21      	ldr	r1, [r4, #32]
 800d26e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d270:	4643      	mov	r3, r8
 800d272:	463a      	mov	r2, r7
 800d274:	4628      	mov	r0, r5
 800d276:	47b0      	blx	r6
 800d278:	2800      	cmp	r0, #0
 800d27a:	dc06      	bgt.n	800d28a <__sflush_r+0xfe>
 800d27c:	89a3      	ldrh	r3, [r4, #12]
 800d27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d282:	81a3      	strh	r3, [r4, #12]
 800d284:	f04f 30ff 	mov.w	r0, #4294967295
 800d288:	e78e      	b.n	800d1a8 <__sflush_r+0x1c>
 800d28a:	4407      	add	r7, r0
 800d28c:	eba8 0800 	sub.w	r8, r8, r0
 800d290:	e7e9      	b.n	800d266 <__sflush_r+0xda>
 800d292:	bf00      	nop
 800d294:	20400001 	.word	0x20400001

0800d298 <_fflush_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	690b      	ldr	r3, [r1, #16]
 800d29c:	4605      	mov	r5, r0
 800d29e:	460c      	mov	r4, r1
 800d2a0:	b913      	cbnz	r3, 800d2a8 <_fflush_r+0x10>
 800d2a2:	2500      	movs	r5, #0
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	b118      	cbz	r0, 800d2b2 <_fflush_r+0x1a>
 800d2aa:	6983      	ldr	r3, [r0, #24]
 800d2ac:	b90b      	cbnz	r3, 800d2b2 <_fflush_r+0x1a>
 800d2ae:	f000 f899 	bl	800d3e4 <__sinit>
 800d2b2:	4b14      	ldr	r3, [pc, #80]	; (800d304 <_fflush_r+0x6c>)
 800d2b4:	429c      	cmp	r4, r3
 800d2b6:	d11b      	bne.n	800d2f0 <_fflush_r+0x58>
 800d2b8:	686c      	ldr	r4, [r5, #4]
 800d2ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d0ef      	beq.n	800d2a2 <_fflush_r+0xa>
 800d2c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d2c4:	07d0      	lsls	r0, r2, #31
 800d2c6:	d404      	bmi.n	800d2d2 <_fflush_r+0x3a>
 800d2c8:	0599      	lsls	r1, r3, #22
 800d2ca:	d402      	bmi.n	800d2d2 <_fflush_r+0x3a>
 800d2cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2ce:	f000 fcb8 	bl	800dc42 <__retarget_lock_acquire_recursive>
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	4621      	mov	r1, r4
 800d2d6:	f7ff ff59 	bl	800d18c <__sflush_r>
 800d2da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2dc:	07da      	lsls	r2, r3, #31
 800d2de:	4605      	mov	r5, r0
 800d2e0:	d4e0      	bmi.n	800d2a4 <_fflush_r+0xc>
 800d2e2:	89a3      	ldrh	r3, [r4, #12]
 800d2e4:	059b      	lsls	r3, r3, #22
 800d2e6:	d4dd      	bmi.n	800d2a4 <_fflush_r+0xc>
 800d2e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2ea:	f000 fcab 	bl	800dc44 <__retarget_lock_release_recursive>
 800d2ee:	e7d9      	b.n	800d2a4 <_fflush_r+0xc>
 800d2f0:	4b05      	ldr	r3, [pc, #20]	; (800d308 <_fflush_r+0x70>)
 800d2f2:	429c      	cmp	r4, r3
 800d2f4:	d101      	bne.n	800d2fa <_fflush_r+0x62>
 800d2f6:	68ac      	ldr	r4, [r5, #8]
 800d2f8:	e7df      	b.n	800d2ba <_fflush_r+0x22>
 800d2fa:	4b04      	ldr	r3, [pc, #16]	; (800d30c <_fflush_r+0x74>)
 800d2fc:	429c      	cmp	r4, r3
 800d2fe:	bf08      	it	eq
 800d300:	68ec      	ldreq	r4, [r5, #12]
 800d302:	e7da      	b.n	800d2ba <_fflush_r+0x22>
 800d304:	08010764 	.word	0x08010764
 800d308:	08010784 	.word	0x08010784
 800d30c:	08010744 	.word	0x08010744

0800d310 <fflush>:
 800d310:	4601      	mov	r1, r0
 800d312:	b920      	cbnz	r0, 800d31e <fflush+0xe>
 800d314:	4b04      	ldr	r3, [pc, #16]	; (800d328 <fflush+0x18>)
 800d316:	4905      	ldr	r1, [pc, #20]	; (800d32c <fflush+0x1c>)
 800d318:	6818      	ldr	r0, [r3, #0]
 800d31a:	f000 b8fe 	b.w	800d51a <_fwalk_reent>
 800d31e:	4b04      	ldr	r3, [pc, #16]	; (800d330 <fflush+0x20>)
 800d320:	6818      	ldr	r0, [r3, #0]
 800d322:	f7ff bfb9 	b.w	800d298 <_fflush_r>
 800d326:	bf00      	nop
 800d328:	08010524 	.word	0x08010524
 800d32c:	0800d299 	.word	0x0800d299
 800d330:	2000000c 	.word	0x2000000c

0800d334 <std>:
 800d334:	2300      	movs	r3, #0
 800d336:	b510      	push	{r4, lr}
 800d338:	4604      	mov	r4, r0
 800d33a:	e9c0 3300 	strd	r3, r3, [r0]
 800d33e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d342:	6083      	str	r3, [r0, #8]
 800d344:	8181      	strh	r1, [r0, #12]
 800d346:	6643      	str	r3, [r0, #100]	; 0x64
 800d348:	81c2      	strh	r2, [r0, #14]
 800d34a:	6183      	str	r3, [r0, #24]
 800d34c:	4619      	mov	r1, r3
 800d34e:	2208      	movs	r2, #8
 800d350:	305c      	adds	r0, #92	; 0x5c
 800d352:	f7fd f875 	bl	800a440 <memset>
 800d356:	4b05      	ldr	r3, [pc, #20]	; (800d36c <std+0x38>)
 800d358:	6263      	str	r3, [r4, #36]	; 0x24
 800d35a:	4b05      	ldr	r3, [pc, #20]	; (800d370 <std+0x3c>)
 800d35c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d35e:	4b05      	ldr	r3, [pc, #20]	; (800d374 <std+0x40>)
 800d360:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d362:	4b05      	ldr	r3, [pc, #20]	; (800d378 <std+0x44>)
 800d364:	6224      	str	r4, [r4, #32]
 800d366:	6323      	str	r3, [r4, #48]	; 0x30
 800d368:	bd10      	pop	{r4, pc}
 800d36a:	bf00      	nop
 800d36c:	0800b4c1 	.word	0x0800b4c1
 800d370:	0800b4e7 	.word	0x0800b4e7
 800d374:	0800b51f 	.word	0x0800b51f
 800d378:	0800b543 	.word	0x0800b543

0800d37c <_cleanup_r>:
 800d37c:	4901      	ldr	r1, [pc, #4]	; (800d384 <_cleanup_r+0x8>)
 800d37e:	f000 b8cc 	b.w	800d51a <_fwalk_reent>
 800d382:	bf00      	nop
 800d384:	0800d299 	.word	0x0800d299

0800d388 <__sfmoreglue>:
 800d388:	b570      	push	{r4, r5, r6, lr}
 800d38a:	2268      	movs	r2, #104	; 0x68
 800d38c:	1e4d      	subs	r5, r1, #1
 800d38e:	4355      	muls	r5, r2
 800d390:	460e      	mov	r6, r1
 800d392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d396:	f001 fa3b 	bl	800e810 <_malloc_r>
 800d39a:	4604      	mov	r4, r0
 800d39c:	b140      	cbz	r0, 800d3b0 <__sfmoreglue+0x28>
 800d39e:	2100      	movs	r1, #0
 800d3a0:	e9c0 1600 	strd	r1, r6, [r0]
 800d3a4:	300c      	adds	r0, #12
 800d3a6:	60a0      	str	r0, [r4, #8]
 800d3a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d3ac:	f7fd f848 	bl	800a440 <memset>
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	bd70      	pop	{r4, r5, r6, pc}

0800d3b4 <__sfp_lock_acquire>:
 800d3b4:	4801      	ldr	r0, [pc, #4]	; (800d3bc <__sfp_lock_acquire+0x8>)
 800d3b6:	f000 bc44 	b.w	800dc42 <__retarget_lock_acquire_recursive>
 800d3ba:	bf00      	nop
 800d3bc:	200004d1 	.word	0x200004d1

0800d3c0 <__sfp_lock_release>:
 800d3c0:	4801      	ldr	r0, [pc, #4]	; (800d3c8 <__sfp_lock_release+0x8>)
 800d3c2:	f000 bc3f 	b.w	800dc44 <__retarget_lock_release_recursive>
 800d3c6:	bf00      	nop
 800d3c8:	200004d1 	.word	0x200004d1

0800d3cc <__sinit_lock_acquire>:
 800d3cc:	4801      	ldr	r0, [pc, #4]	; (800d3d4 <__sinit_lock_acquire+0x8>)
 800d3ce:	f000 bc38 	b.w	800dc42 <__retarget_lock_acquire_recursive>
 800d3d2:	bf00      	nop
 800d3d4:	200004d2 	.word	0x200004d2

0800d3d8 <__sinit_lock_release>:
 800d3d8:	4801      	ldr	r0, [pc, #4]	; (800d3e0 <__sinit_lock_release+0x8>)
 800d3da:	f000 bc33 	b.w	800dc44 <__retarget_lock_release_recursive>
 800d3de:	bf00      	nop
 800d3e0:	200004d2 	.word	0x200004d2

0800d3e4 <__sinit>:
 800d3e4:	b510      	push	{r4, lr}
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	f7ff fff0 	bl	800d3cc <__sinit_lock_acquire>
 800d3ec:	69a3      	ldr	r3, [r4, #24]
 800d3ee:	b11b      	cbz	r3, 800d3f8 <__sinit+0x14>
 800d3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3f4:	f7ff bff0 	b.w	800d3d8 <__sinit_lock_release>
 800d3f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d3fc:	6523      	str	r3, [r4, #80]	; 0x50
 800d3fe:	4b13      	ldr	r3, [pc, #76]	; (800d44c <__sinit+0x68>)
 800d400:	4a13      	ldr	r2, [pc, #76]	; (800d450 <__sinit+0x6c>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	62a2      	str	r2, [r4, #40]	; 0x28
 800d406:	42a3      	cmp	r3, r4
 800d408:	bf04      	itt	eq
 800d40a:	2301      	moveq	r3, #1
 800d40c:	61a3      	streq	r3, [r4, #24]
 800d40e:	4620      	mov	r0, r4
 800d410:	f000 f820 	bl	800d454 <__sfp>
 800d414:	6060      	str	r0, [r4, #4]
 800d416:	4620      	mov	r0, r4
 800d418:	f000 f81c 	bl	800d454 <__sfp>
 800d41c:	60a0      	str	r0, [r4, #8]
 800d41e:	4620      	mov	r0, r4
 800d420:	f000 f818 	bl	800d454 <__sfp>
 800d424:	2200      	movs	r2, #0
 800d426:	60e0      	str	r0, [r4, #12]
 800d428:	2104      	movs	r1, #4
 800d42a:	6860      	ldr	r0, [r4, #4]
 800d42c:	f7ff ff82 	bl	800d334 <std>
 800d430:	68a0      	ldr	r0, [r4, #8]
 800d432:	2201      	movs	r2, #1
 800d434:	2109      	movs	r1, #9
 800d436:	f7ff ff7d 	bl	800d334 <std>
 800d43a:	68e0      	ldr	r0, [r4, #12]
 800d43c:	2202      	movs	r2, #2
 800d43e:	2112      	movs	r1, #18
 800d440:	f7ff ff78 	bl	800d334 <std>
 800d444:	2301      	movs	r3, #1
 800d446:	61a3      	str	r3, [r4, #24]
 800d448:	e7d2      	b.n	800d3f0 <__sinit+0xc>
 800d44a:	bf00      	nop
 800d44c:	08010524 	.word	0x08010524
 800d450:	0800d37d 	.word	0x0800d37d

0800d454 <__sfp>:
 800d454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d456:	4607      	mov	r7, r0
 800d458:	f7ff ffac 	bl	800d3b4 <__sfp_lock_acquire>
 800d45c:	4b1e      	ldr	r3, [pc, #120]	; (800d4d8 <__sfp+0x84>)
 800d45e:	681e      	ldr	r6, [r3, #0]
 800d460:	69b3      	ldr	r3, [r6, #24]
 800d462:	b913      	cbnz	r3, 800d46a <__sfp+0x16>
 800d464:	4630      	mov	r0, r6
 800d466:	f7ff ffbd 	bl	800d3e4 <__sinit>
 800d46a:	3648      	adds	r6, #72	; 0x48
 800d46c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d470:	3b01      	subs	r3, #1
 800d472:	d503      	bpl.n	800d47c <__sfp+0x28>
 800d474:	6833      	ldr	r3, [r6, #0]
 800d476:	b30b      	cbz	r3, 800d4bc <__sfp+0x68>
 800d478:	6836      	ldr	r6, [r6, #0]
 800d47a:	e7f7      	b.n	800d46c <__sfp+0x18>
 800d47c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d480:	b9d5      	cbnz	r5, 800d4b8 <__sfp+0x64>
 800d482:	4b16      	ldr	r3, [pc, #88]	; (800d4dc <__sfp+0x88>)
 800d484:	60e3      	str	r3, [r4, #12]
 800d486:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d48a:	6665      	str	r5, [r4, #100]	; 0x64
 800d48c:	f000 fbd8 	bl	800dc40 <__retarget_lock_init_recursive>
 800d490:	f7ff ff96 	bl	800d3c0 <__sfp_lock_release>
 800d494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d49c:	6025      	str	r5, [r4, #0]
 800d49e:	61a5      	str	r5, [r4, #24]
 800d4a0:	2208      	movs	r2, #8
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d4a8:	f7fc ffca 	bl	800a440 <memset>
 800d4ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d4b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4b8:	3468      	adds	r4, #104	; 0x68
 800d4ba:	e7d9      	b.n	800d470 <__sfp+0x1c>
 800d4bc:	2104      	movs	r1, #4
 800d4be:	4638      	mov	r0, r7
 800d4c0:	f7ff ff62 	bl	800d388 <__sfmoreglue>
 800d4c4:	4604      	mov	r4, r0
 800d4c6:	6030      	str	r0, [r6, #0]
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d1d5      	bne.n	800d478 <__sfp+0x24>
 800d4cc:	f7ff ff78 	bl	800d3c0 <__sfp_lock_release>
 800d4d0:	230c      	movs	r3, #12
 800d4d2:	603b      	str	r3, [r7, #0]
 800d4d4:	e7ee      	b.n	800d4b4 <__sfp+0x60>
 800d4d6:	bf00      	nop
 800d4d8:	08010524 	.word	0x08010524
 800d4dc:	ffff0001 	.word	0xffff0001

0800d4e0 <_fwalk>:
 800d4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e4:	460f      	mov	r7, r1
 800d4e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d4ea:	2600      	movs	r6, #0
 800d4ec:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800d4f0:	f1b8 0801 	subs.w	r8, r8, #1
 800d4f4:	d505      	bpl.n	800d502 <_fwalk+0x22>
 800d4f6:	6824      	ldr	r4, [r4, #0]
 800d4f8:	2c00      	cmp	r4, #0
 800d4fa:	d1f7      	bne.n	800d4ec <_fwalk+0xc>
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d502:	89ab      	ldrh	r3, [r5, #12]
 800d504:	2b01      	cmp	r3, #1
 800d506:	d906      	bls.n	800d516 <_fwalk+0x36>
 800d508:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d50c:	3301      	adds	r3, #1
 800d50e:	d002      	beq.n	800d516 <_fwalk+0x36>
 800d510:	4628      	mov	r0, r5
 800d512:	47b8      	blx	r7
 800d514:	4306      	orrs	r6, r0
 800d516:	3568      	adds	r5, #104	; 0x68
 800d518:	e7ea      	b.n	800d4f0 <_fwalk+0x10>

0800d51a <_fwalk_reent>:
 800d51a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d51e:	4606      	mov	r6, r0
 800d520:	4688      	mov	r8, r1
 800d522:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d526:	2700      	movs	r7, #0
 800d528:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d52c:	f1b9 0901 	subs.w	r9, r9, #1
 800d530:	d505      	bpl.n	800d53e <_fwalk_reent+0x24>
 800d532:	6824      	ldr	r4, [r4, #0]
 800d534:	2c00      	cmp	r4, #0
 800d536:	d1f7      	bne.n	800d528 <_fwalk_reent+0xe>
 800d538:	4638      	mov	r0, r7
 800d53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d53e:	89ab      	ldrh	r3, [r5, #12]
 800d540:	2b01      	cmp	r3, #1
 800d542:	d907      	bls.n	800d554 <_fwalk_reent+0x3a>
 800d544:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d548:	3301      	adds	r3, #1
 800d54a:	d003      	beq.n	800d554 <_fwalk_reent+0x3a>
 800d54c:	4629      	mov	r1, r5
 800d54e:	4630      	mov	r0, r6
 800d550:	47c0      	blx	r8
 800d552:	4307      	orrs	r7, r0
 800d554:	3568      	adds	r5, #104	; 0x68
 800d556:	e7e9      	b.n	800d52c <_fwalk_reent+0x12>

0800d558 <rshift>:
 800d558:	6903      	ldr	r3, [r0, #16]
 800d55a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d55e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d562:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d566:	f100 0414 	add.w	r4, r0, #20
 800d56a:	dd45      	ble.n	800d5f8 <rshift+0xa0>
 800d56c:	f011 011f 	ands.w	r1, r1, #31
 800d570:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d574:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d578:	d10c      	bne.n	800d594 <rshift+0x3c>
 800d57a:	f100 0710 	add.w	r7, r0, #16
 800d57e:	4629      	mov	r1, r5
 800d580:	42b1      	cmp	r1, r6
 800d582:	d334      	bcc.n	800d5ee <rshift+0x96>
 800d584:	1a9b      	subs	r3, r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	1eea      	subs	r2, r5, #3
 800d58a:	4296      	cmp	r6, r2
 800d58c:	bf38      	it	cc
 800d58e:	2300      	movcc	r3, #0
 800d590:	4423      	add	r3, r4
 800d592:	e015      	b.n	800d5c0 <rshift+0x68>
 800d594:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d598:	f1c1 0820 	rsb	r8, r1, #32
 800d59c:	40cf      	lsrs	r7, r1
 800d59e:	f105 0e04 	add.w	lr, r5, #4
 800d5a2:	46a1      	mov	r9, r4
 800d5a4:	4576      	cmp	r6, lr
 800d5a6:	46f4      	mov	ip, lr
 800d5a8:	d815      	bhi.n	800d5d6 <rshift+0x7e>
 800d5aa:	1a9a      	subs	r2, r3, r2
 800d5ac:	0092      	lsls	r2, r2, #2
 800d5ae:	3a04      	subs	r2, #4
 800d5b0:	3501      	adds	r5, #1
 800d5b2:	42ae      	cmp	r6, r5
 800d5b4:	bf38      	it	cc
 800d5b6:	2200      	movcc	r2, #0
 800d5b8:	18a3      	adds	r3, r4, r2
 800d5ba:	50a7      	str	r7, [r4, r2]
 800d5bc:	b107      	cbz	r7, 800d5c0 <rshift+0x68>
 800d5be:	3304      	adds	r3, #4
 800d5c0:	1b1a      	subs	r2, r3, r4
 800d5c2:	42a3      	cmp	r3, r4
 800d5c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d5c8:	bf08      	it	eq
 800d5ca:	2300      	moveq	r3, #0
 800d5cc:	6102      	str	r2, [r0, #16]
 800d5ce:	bf08      	it	eq
 800d5d0:	6143      	streq	r3, [r0, #20]
 800d5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5d6:	f8dc c000 	ldr.w	ip, [ip]
 800d5da:	fa0c fc08 	lsl.w	ip, ip, r8
 800d5de:	ea4c 0707 	orr.w	r7, ip, r7
 800d5e2:	f849 7b04 	str.w	r7, [r9], #4
 800d5e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d5ea:	40cf      	lsrs	r7, r1
 800d5ec:	e7da      	b.n	800d5a4 <rshift+0x4c>
 800d5ee:	f851 cb04 	ldr.w	ip, [r1], #4
 800d5f2:	f847 cf04 	str.w	ip, [r7, #4]!
 800d5f6:	e7c3      	b.n	800d580 <rshift+0x28>
 800d5f8:	4623      	mov	r3, r4
 800d5fa:	e7e1      	b.n	800d5c0 <rshift+0x68>

0800d5fc <__hexdig_fun>:
 800d5fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d600:	2b09      	cmp	r3, #9
 800d602:	d802      	bhi.n	800d60a <__hexdig_fun+0xe>
 800d604:	3820      	subs	r0, #32
 800d606:	b2c0      	uxtb	r0, r0
 800d608:	4770      	bx	lr
 800d60a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d60e:	2b05      	cmp	r3, #5
 800d610:	d801      	bhi.n	800d616 <__hexdig_fun+0x1a>
 800d612:	3847      	subs	r0, #71	; 0x47
 800d614:	e7f7      	b.n	800d606 <__hexdig_fun+0xa>
 800d616:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d61a:	2b05      	cmp	r3, #5
 800d61c:	d801      	bhi.n	800d622 <__hexdig_fun+0x26>
 800d61e:	3827      	subs	r0, #39	; 0x27
 800d620:	e7f1      	b.n	800d606 <__hexdig_fun+0xa>
 800d622:	2000      	movs	r0, #0
 800d624:	4770      	bx	lr
	...

0800d628 <__gethex>:
 800d628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62c:	ed2d 8b02 	vpush	{d8}
 800d630:	b089      	sub	sp, #36	; 0x24
 800d632:	ee08 0a10 	vmov	s16, r0
 800d636:	9304      	str	r3, [sp, #16]
 800d638:	4bb4      	ldr	r3, [pc, #720]	; (800d90c <__gethex+0x2e4>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	9301      	str	r3, [sp, #4]
 800d63e:	4618      	mov	r0, r3
 800d640:	468b      	mov	fp, r1
 800d642:	4690      	mov	r8, r2
 800d644:	f7f2 fde4 	bl	8000210 <strlen>
 800d648:	9b01      	ldr	r3, [sp, #4]
 800d64a:	f8db 2000 	ldr.w	r2, [fp]
 800d64e:	4403      	add	r3, r0
 800d650:	4682      	mov	sl, r0
 800d652:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d656:	9305      	str	r3, [sp, #20]
 800d658:	1c93      	adds	r3, r2, #2
 800d65a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d65e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d662:	32fe      	adds	r2, #254	; 0xfe
 800d664:	18d1      	adds	r1, r2, r3
 800d666:	461f      	mov	r7, r3
 800d668:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d66c:	9100      	str	r1, [sp, #0]
 800d66e:	2830      	cmp	r0, #48	; 0x30
 800d670:	d0f8      	beq.n	800d664 <__gethex+0x3c>
 800d672:	f7ff ffc3 	bl	800d5fc <__hexdig_fun>
 800d676:	4604      	mov	r4, r0
 800d678:	2800      	cmp	r0, #0
 800d67a:	d13a      	bne.n	800d6f2 <__gethex+0xca>
 800d67c:	9901      	ldr	r1, [sp, #4]
 800d67e:	4652      	mov	r2, sl
 800d680:	4638      	mov	r0, r7
 800d682:	f002 f9d9 	bl	800fa38 <strncmp>
 800d686:	4605      	mov	r5, r0
 800d688:	2800      	cmp	r0, #0
 800d68a:	d168      	bne.n	800d75e <__gethex+0x136>
 800d68c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d690:	eb07 060a 	add.w	r6, r7, sl
 800d694:	f7ff ffb2 	bl	800d5fc <__hexdig_fun>
 800d698:	2800      	cmp	r0, #0
 800d69a:	d062      	beq.n	800d762 <__gethex+0x13a>
 800d69c:	4633      	mov	r3, r6
 800d69e:	7818      	ldrb	r0, [r3, #0]
 800d6a0:	2830      	cmp	r0, #48	; 0x30
 800d6a2:	461f      	mov	r7, r3
 800d6a4:	f103 0301 	add.w	r3, r3, #1
 800d6a8:	d0f9      	beq.n	800d69e <__gethex+0x76>
 800d6aa:	f7ff ffa7 	bl	800d5fc <__hexdig_fun>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	fab0 f480 	clz	r4, r0
 800d6b4:	0964      	lsrs	r4, r4, #5
 800d6b6:	4635      	mov	r5, r6
 800d6b8:	9300      	str	r3, [sp, #0]
 800d6ba:	463a      	mov	r2, r7
 800d6bc:	4616      	mov	r6, r2
 800d6be:	3201      	adds	r2, #1
 800d6c0:	7830      	ldrb	r0, [r6, #0]
 800d6c2:	f7ff ff9b 	bl	800d5fc <__hexdig_fun>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d1f8      	bne.n	800d6bc <__gethex+0x94>
 800d6ca:	9901      	ldr	r1, [sp, #4]
 800d6cc:	4652      	mov	r2, sl
 800d6ce:	4630      	mov	r0, r6
 800d6d0:	f002 f9b2 	bl	800fa38 <strncmp>
 800d6d4:	b980      	cbnz	r0, 800d6f8 <__gethex+0xd0>
 800d6d6:	b94d      	cbnz	r5, 800d6ec <__gethex+0xc4>
 800d6d8:	eb06 050a 	add.w	r5, r6, sl
 800d6dc:	462a      	mov	r2, r5
 800d6de:	4616      	mov	r6, r2
 800d6e0:	3201      	adds	r2, #1
 800d6e2:	7830      	ldrb	r0, [r6, #0]
 800d6e4:	f7ff ff8a 	bl	800d5fc <__hexdig_fun>
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	d1f8      	bne.n	800d6de <__gethex+0xb6>
 800d6ec:	1bad      	subs	r5, r5, r6
 800d6ee:	00ad      	lsls	r5, r5, #2
 800d6f0:	e004      	b.n	800d6fc <__gethex+0xd4>
 800d6f2:	2400      	movs	r4, #0
 800d6f4:	4625      	mov	r5, r4
 800d6f6:	e7e0      	b.n	800d6ba <__gethex+0x92>
 800d6f8:	2d00      	cmp	r5, #0
 800d6fa:	d1f7      	bne.n	800d6ec <__gethex+0xc4>
 800d6fc:	7833      	ldrb	r3, [r6, #0]
 800d6fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d702:	2b50      	cmp	r3, #80	; 0x50
 800d704:	d13b      	bne.n	800d77e <__gethex+0x156>
 800d706:	7873      	ldrb	r3, [r6, #1]
 800d708:	2b2b      	cmp	r3, #43	; 0x2b
 800d70a:	d02c      	beq.n	800d766 <__gethex+0x13e>
 800d70c:	2b2d      	cmp	r3, #45	; 0x2d
 800d70e:	d02e      	beq.n	800d76e <__gethex+0x146>
 800d710:	1c71      	adds	r1, r6, #1
 800d712:	f04f 0900 	mov.w	r9, #0
 800d716:	7808      	ldrb	r0, [r1, #0]
 800d718:	f7ff ff70 	bl	800d5fc <__hexdig_fun>
 800d71c:	1e43      	subs	r3, r0, #1
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b18      	cmp	r3, #24
 800d722:	d82c      	bhi.n	800d77e <__gethex+0x156>
 800d724:	f1a0 0210 	sub.w	r2, r0, #16
 800d728:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d72c:	f7ff ff66 	bl	800d5fc <__hexdig_fun>
 800d730:	1e43      	subs	r3, r0, #1
 800d732:	b2db      	uxtb	r3, r3
 800d734:	2b18      	cmp	r3, #24
 800d736:	d91d      	bls.n	800d774 <__gethex+0x14c>
 800d738:	f1b9 0f00 	cmp.w	r9, #0
 800d73c:	d000      	beq.n	800d740 <__gethex+0x118>
 800d73e:	4252      	negs	r2, r2
 800d740:	4415      	add	r5, r2
 800d742:	f8cb 1000 	str.w	r1, [fp]
 800d746:	b1e4      	cbz	r4, 800d782 <__gethex+0x15a>
 800d748:	9b00      	ldr	r3, [sp, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	bf14      	ite	ne
 800d74e:	2700      	movne	r7, #0
 800d750:	2706      	moveq	r7, #6
 800d752:	4638      	mov	r0, r7
 800d754:	b009      	add	sp, #36	; 0x24
 800d756:	ecbd 8b02 	vpop	{d8}
 800d75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d75e:	463e      	mov	r6, r7
 800d760:	4625      	mov	r5, r4
 800d762:	2401      	movs	r4, #1
 800d764:	e7ca      	b.n	800d6fc <__gethex+0xd4>
 800d766:	f04f 0900 	mov.w	r9, #0
 800d76a:	1cb1      	adds	r1, r6, #2
 800d76c:	e7d3      	b.n	800d716 <__gethex+0xee>
 800d76e:	f04f 0901 	mov.w	r9, #1
 800d772:	e7fa      	b.n	800d76a <__gethex+0x142>
 800d774:	230a      	movs	r3, #10
 800d776:	fb03 0202 	mla	r2, r3, r2, r0
 800d77a:	3a10      	subs	r2, #16
 800d77c:	e7d4      	b.n	800d728 <__gethex+0x100>
 800d77e:	4631      	mov	r1, r6
 800d780:	e7df      	b.n	800d742 <__gethex+0x11a>
 800d782:	1bf3      	subs	r3, r6, r7
 800d784:	3b01      	subs	r3, #1
 800d786:	4621      	mov	r1, r4
 800d788:	2b07      	cmp	r3, #7
 800d78a:	dc0b      	bgt.n	800d7a4 <__gethex+0x17c>
 800d78c:	ee18 0a10 	vmov	r0, s16
 800d790:	f000 fafa 	bl	800dd88 <_Balloc>
 800d794:	4604      	mov	r4, r0
 800d796:	b940      	cbnz	r0, 800d7aa <__gethex+0x182>
 800d798:	4b5d      	ldr	r3, [pc, #372]	; (800d910 <__gethex+0x2e8>)
 800d79a:	4602      	mov	r2, r0
 800d79c:	21de      	movs	r1, #222	; 0xde
 800d79e:	485d      	ldr	r0, [pc, #372]	; (800d914 <__gethex+0x2ec>)
 800d7a0:	f002 fab2 	bl	800fd08 <__assert_func>
 800d7a4:	3101      	adds	r1, #1
 800d7a6:	105b      	asrs	r3, r3, #1
 800d7a8:	e7ee      	b.n	800d788 <__gethex+0x160>
 800d7aa:	f100 0914 	add.w	r9, r0, #20
 800d7ae:	f04f 0b00 	mov.w	fp, #0
 800d7b2:	f1ca 0301 	rsb	r3, sl, #1
 800d7b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d7ba:	f8cd b000 	str.w	fp, [sp]
 800d7be:	9306      	str	r3, [sp, #24]
 800d7c0:	42b7      	cmp	r7, r6
 800d7c2:	d340      	bcc.n	800d846 <__gethex+0x21e>
 800d7c4:	9802      	ldr	r0, [sp, #8]
 800d7c6:	9b00      	ldr	r3, [sp, #0]
 800d7c8:	f840 3b04 	str.w	r3, [r0], #4
 800d7cc:	eba0 0009 	sub.w	r0, r0, r9
 800d7d0:	1080      	asrs	r0, r0, #2
 800d7d2:	0146      	lsls	r6, r0, #5
 800d7d4:	6120      	str	r0, [r4, #16]
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f000 fbc8 	bl	800df6c <__hi0bits>
 800d7dc:	1a30      	subs	r0, r6, r0
 800d7de:	f8d8 6000 	ldr.w	r6, [r8]
 800d7e2:	42b0      	cmp	r0, r6
 800d7e4:	dd63      	ble.n	800d8ae <__gethex+0x286>
 800d7e6:	1b87      	subs	r7, r0, r6
 800d7e8:	4639      	mov	r1, r7
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f000 ff6c 	bl	800e6c8 <__any_on>
 800d7f0:	4682      	mov	sl, r0
 800d7f2:	b1a8      	cbz	r0, 800d820 <__gethex+0x1f8>
 800d7f4:	1e7b      	subs	r3, r7, #1
 800d7f6:	1159      	asrs	r1, r3, #5
 800d7f8:	f003 021f 	and.w	r2, r3, #31
 800d7fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d800:	f04f 0a01 	mov.w	sl, #1
 800d804:	fa0a f202 	lsl.w	r2, sl, r2
 800d808:	420a      	tst	r2, r1
 800d80a:	d009      	beq.n	800d820 <__gethex+0x1f8>
 800d80c:	4553      	cmp	r3, sl
 800d80e:	dd05      	ble.n	800d81c <__gethex+0x1f4>
 800d810:	1eb9      	subs	r1, r7, #2
 800d812:	4620      	mov	r0, r4
 800d814:	f000 ff58 	bl	800e6c8 <__any_on>
 800d818:	2800      	cmp	r0, #0
 800d81a:	d145      	bne.n	800d8a8 <__gethex+0x280>
 800d81c:	f04f 0a02 	mov.w	sl, #2
 800d820:	4639      	mov	r1, r7
 800d822:	4620      	mov	r0, r4
 800d824:	f7ff fe98 	bl	800d558 <rshift>
 800d828:	443d      	add	r5, r7
 800d82a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d82e:	42ab      	cmp	r3, r5
 800d830:	da4c      	bge.n	800d8cc <__gethex+0x2a4>
 800d832:	ee18 0a10 	vmov	r0, s16
 800d836:	4621      	mov	r1, r4
 800d838:	f000 fae6 	bl	800de08 <_Bfree>
 800d83c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d83e:	2300      	movs	r3, #0
 800d840:	6013      	str	r3, [r2, #0]
 800d842:	27a3      	movs	r7, #163	; 0xa3
 800d844:	e785      	b.n	800d752 <__gethex+0x12a>
 800d846:	1e73      	subs	r3, r6, #1
 800d848:	9a05      	ldr	r2, [sp, #20]
 800d84a:	9303      	str	r3, [sp, #12]
 800d84c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d850:	4293      	cmp	r3, r2
 800d852:	d019      	beq.n	800d888 <__gethex+0x260>
 800d854:	f1bb 0f20 	cmp.w	fp, #32
 800d858:	d107      	bne.n	800d86a <__gethex+0x242>
 800d85a:	9b02      	ldr	r3, [sp, #8]
 800d85c:	9a00      	ldr	r2, [sp, #0]
 800d85e:	f843 2b04 	str.w	r2, [r3], #4
 800d862:	9302      	str	r3, [sp, #8]
 800d864:	2300      	movs	r3, #0
 800d866:	9300      	str	r3, [sp, #0]
 800d868:	469b      	mov	fp, r3
 800d86a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d86e:	f7ff fec5 	bl	800d5fc <__hexdig_fun>
 800d872:	9b00      	ldr	r3, [sp, #0]
 800d874:	f000 000f 	and.w	r0, r0, #15
 800d878:	fa00 f00b 	lsl.w	r0, r0, fp
 800d87c:	4303      	orrs	r3, r0
 800d87e:	9300      	str	r3, [sp, #0]
 800d880:	f10b 0b04 	add.w	fp, fp, #4
 800d884:	9b03      	ldr	r3, [sp, #12]
 800d886:	e00d      	b.n	800d8a4 <__gethex+0x27c>
 800d888:	9b03      	ldr	r3, [sp, #12]
 800d88a:	9a06      	ldr	r2, [sp, #24]
 800d88c:	4413      	add	r3, r2
 800d88e:	42bb      	cmp	r3, r7
 800d890:	d3e0      	bcc.n	800d854 <__gethex+0x22c>
 800d892:	4618      	mov	r0, r3
 800d894:	9901      	ldr	r1, [sp, #4]
 800d896:	9307      	str	r3, [sp, #28]
 800d898:	4652      	mov	r2, sl
 800d89a:	f002 f8cd 	bl	800fa38 <strncmp>
 800d89e:	9b07      	ldr	r3, [sp, #28]
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	d1d7      	bne.n	800d854 <__gethex+0x22c>
 800d8a4:	461e      	mov	r6, r3
 800d8a6:	e78b      	b.n	800d7c0 <__gethex+0x198>
 800d8a8:	f04f 0a03 	mov.w	sl, #3
 800d8ac:	e7b8      	b.n	800d820 <__gethex+0x1f8>
 800d8ae:	da0a      	bge.n	800d8c6 <__gethex+0x29e>
 800d8b0:	1a37      	subs	r7, r6, r0
 800d8b2:	4621      	mov	r1, r4
 800d8b4:	ee18 0a10 	vmov	r0, s16
 800d8b8:	463a      	mov	r2, r7
 800d8ba:	f000 fcc1 	bl	800e240 <__lshift>
 800d8be:	1bed      	subs	r5, r5, r7
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	f100 0914 	add.w	r9, r0, #20
 800d8c6:	f04f 0a00 	mov.w	sl, #0
 800d8ca:	e7ae      	b.n	800d82a <__gethex+0x202>
 800d8cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d8d0:	42a8      	cmp	r0, r5
 800d8d2:	dd72      	ble.n	800d9ba <__gethex+0x392>
 800d8d4:	1b45      	subs	r5, r0, r5
 800d8d6:	42ae      	cmp	r6, r5
 800d8d8:	dc36      	bgt.n	800d948 <__gethex+0x320>
 800d8da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	d02a      	beq.n	800d938 <__gethex+0x310>
 800d8e2:	2b03      	cmp	r3, #3
 800d8e4:	d02c      	beq.n	800d940 <__gethex+0x318>
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d11c      	bne.n	800d924 <__gethex+0x2fc>
 800d8ea:	42ae      	cmp	r6, r5
 800d8ec:	d11a      	bne.n	800d924 <__gethex+0x2fc>
 800d8ee:	2e01      	cmp	r6, #1
 800d8f0:	d112      	bne.n	800d918 <__gethex+0x2f0>
 800d8f2:	9a04      	ldr	r2, [sp, #16]
 800d8f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d8f8:	6013      	str	r3, [r2, #0]
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	6123      	str	r3, [r4, #16]
 800d8fe:	f8c9 3000 	str.w	r3, [r9]
 800d902:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d904:	2762      	movs	r7, #98	; 0x62
 800d906:	601c      	str	r4, [r3, #0]
 800d908:	e723      	b.n	800d752 <__gethex+0x12a>
 800d90a:	bf00      	nop
 800d90c:	0801080c 	.word	0x0801080c
 800d910:	08010730 	.word	0x08010730
 800d914:	080107a4 	.word	0x080107a4
 800d918:	1e71      	subs	r1, r6, #1
 800d91a:	4620      	mov	r0, r4
 800d91c:	f000 fed4 	bl	800e6c8 <__any_on>
 800d920:	2800      	cmp	r0, #0
 800d922:	d1e6      	bne.n	800d8f2 <__gethex+0x2ca>
 800d924:	ee18 0a10 	vmov	r0, s16
 800d928:	4621      	mov	r1, r4
 800d92a:	f000 fa6d 	bl	800de08 <_Bfree>
 800d92e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d930:	2300      	movs	r3, #0
 800d932:	6013      	str	r3, [r2, #0]
 800d934:	2750      	movs	r7, #80	; 0x50
 800d936:	e70c      	b.n	800d752 <__gethex+0x12a>
 800d938:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1f2      	bne.n	800d924 <__gethex+0x2fc>
 800d93e:	e7d8      	b.n	800d8f2 <__gethex+0x2ca>
 800d940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d942:	2b00      	cmp	r3, #0
 800d944:	d1d5      	bne.n	800d8f2 <__gethex+0x2ca>
 800d946:	e7ed      	b.n	800d924 <__gethex+0x2fc>
 800d948:	1e6f      	subs	r7, r5, #1
 800d94a:	f1ba 0f00 	cmp.w	sl, #0
 800d94e:	d131      	bne.n	800d9b4 <__gethex+0x38c>
 800d950:	b127      	cbz	r7, 800d95c <__gethex+0x334>
 800d952:	4639      	mov	r1, r7
 800d954:	4620      	mov	r0, r4
 800d956:	f000 feb7 	bl	800e6c8 <__any_on>
 800d95a:	4682      	mov	sl, r0
 800d95c:	117b      	asrs	r3, r7, #5
 800d95e:	2101      	movs	r1, #1
 800d960:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d964:	f007 071f 	and.w	r7, r7, #31
 800d968:	fa01 f707 	lsl.w	r7, r1, r7
 800d96c:	421f      	tst	r7, r3
 800d96e:	4629      	mov	r1, r5
 800d970:	4620      	mov	r0, r4
 800d972:	bf18      	it	ne
 800d974:	f04a 0a02 	orrne.w	sl, sl, #2
 800d978:	1b76      	subs	r6, r6, r5
 800d97a:	f7ff fded 	bl	800d558 <rshift>
 800d97e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d982:	2702      	movs	r7, #2
 800d984:	f1ba 0f00 	cmp.w	sl, #0
 800d988:	d048      	beq.n	800da1c <__gethex+0x3f4>
 800d98a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d015      	beq.n	800d9be <__gethex+0x396>
 800d992:	2b03      	cmp	r3, #3
 800d994:	d017      	beq.n	800d9c6 <__gethex+0x39e>
 800d996:	2b01      	cmp	r3, #1
 800d998:	d109      	bne.n	800d9ae <__gethex+0x386>
 800d99a:	f01a 0f02 	tst.w	sl, #2
 800d99e:	d006      	beq.n	800d9ae <__gethex+0x386>
 800d9a0:	f8d9 0000 	ldr.w	r0, [r9]
 800d9a4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d9a8:	f01a 0f01 	tst.w	sl, #1
 800d9ac:	d10e      	bne.n	800d9cc <__gethex+0x3a4>
 800d9ae:	f047 0710 	orr.w	r7, r7, #16
 800d9b2:	e033      	b.n	800da1c <__gethex+0x3f4>
 800d9b4:	f04f 0a01 	mov.w	sl, #1
 800d9b8:	e7d0      	b.n	800d95c <__gethex+0x334>
 800d9ba:	2701      	movs	r7, #1
 800d9bc:	e7e2      	b.n	800d984 <__gethex+0x35c>
 800d9be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9c0:	f1c3 0301 	rsb	r3, r3, #1
 800d9c4:	9315      	str	r3, [sp, #84]	; 0x54
 800d9c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d0f0      	beq.n	800d9ae <__gethex+0x386>
 800d9cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d9d0:	f104 0314 	add.w	r3, r4, #20
 800d9d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d9d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d9dc:	f04f 0c00 	mov.w	ip, #0
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d9ea:	d01c      	beq.n	800da26 <__gethex+0x3fe>
 800d9ec:	3201      	adds	r2, #1
 800d9ee:	6002      	str	r2, [r0, #0]
 800d9f0:	2f02      	cmp	r7, #2
 800d9f2:	f104 0314 	add.w	r3, r4, #20
 800d9f6:	d13f      	bne.n	800da78 <__gethex+0x450>
 800d9f8:	f8d8 2000 	ldr.w	r2, [r8]
 800d9fc:	3a01      	subs	r2, #1
 800d9fe:	42b2      	cmp	r2, r6
 800da00:	d10a      	bne.n	800da18 <__gethex+0x3f0>
 800da02:	1171      	asrs	r1, r6, #5
 800da04:	2201      	movs	r2, #1
 800da06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da0a:	f006 061f 	and.w	r6, r6, #31
 800da0e:	fa02 f606 	lsl.w	r6, r2, r6
 800da12:	421e      	tst	r6, r3
 800da14:	bf18      	it	ne
 800da16:	4617      	movne	r7, r2
 800da18:	f047 0720 	orr.w	r7, r7, #32
 800da1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da1e:	601c      	str	r4, [r3, #0]
 800da20:	9b04      	ldr	r3, [sp, #16]
 800da22:	601d      	str	r5, [r3, #0]
 800da24:	e695      	b.n	800d752 <__gethex+0x12a>
 800da26:	4299      	cmp	r1, r3
 800da28:	f843 cc04 	str.w	ip, [r3, #-4]
 800da2c:	d8d8      	bhi.n	800d9e0 <__gethex+0x3b8>
 800da2e:	68a3      	ldr	r3, [r4, #8]
 800da30:	459b      	cmp	fp, r3
 800da32:	db19      	blt.n	800da68 <__gethex+0x440>
 800da34:	6861      	ldr	r1, [r4, #4]
 800da36:	ee18 0a10 	vmov	r0, s16
 800da3a:	3101      	adds	r1, #1
 800da3c:	f000 f9a4 	bl	800dd88 <_Balloc>
 800da40:	4681      	mov	r9, r0
 800da42:	b918      	cbnz	r0, 800da4c <__gethex+0x424>
 800da44:	4b1a      	ldr	r3, [pc, #104]	; (800dab0 <__gethex+0x488>)
 800da46:	4602      	mov	r2, r0
 800da48:	2184      	movs	r1, #132	; 0x84
 800da4a:	e6a8      	b.n	800d79e <__gethex+0x176>
 800da4c:	6922      	ldr	r2, [r4, #16]
 800da4e:	3202      	adds	r2, #2
 800da50:	f104 010c 	add.w	r1, r4, #12
 800da54:	0092      	lsls	r2, r2, #2
 800da56:	300c      	adds	r0, #12
 800da58:	f000 f988 	bl	800dd6c <memcpy>
 800da5c:	4621      	mov	r1, r4
 800da5e:	ee18 0a10 	vmov	r0, s16
 800da62:	f000 f9d1 	bl	800de08 <_Bfree>
 800da66:	464c      	mov	r4, r9
 800da68:	6923      	ldr	r3, [r4, #16]
 800da6a:	1c5a      	adds	r2, r3, #1
 800da6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da70:	6122      	str	r2, [r4, #16]
 800da72:	2201      	movs	r2, #1
 800da74:	615a      	str	r2, [r3, #20]
 800da76:	e7bb      	b.n	800d9f0 <__gethex+0x3c8>
 800da78:	6922      	ldr	r2, [r4, #16]
 800da7a:	455a      	cmp	r2, fp
 800da7c:	dd0b      	ble.n	800da96 <__gethex+0x46e>
 800da7e:	2101      	movs	r1, #1
 800da80:	4620      	mov	r0, r4
 800da82:	f7ff fd69 	bl	800d558 <rshift>
 800da86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da8a:	3501      	adds	r5, #1
 800da8c:	42ab      	cmp	r3, r5
 800da8e:	f6ff aed0 	blt.w	800d832 <__gethex+0x20a>
 800da92:	2701      	movs	r7, #1
 800da94:	e7c0      	b.n	800da18 <__gethex+0x3f0>
 800da96:	f016 061f 	ands.w	r6, r6, #31
 800da9a:	d0fa      	beq.n	800da92 <__gethex+0x46a>
 800da9c:	4453      	add	r3, sl
 800da9e:	f1c6 0620 	rsb	r6, r6, #32
 800daa2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800daa6:	f000 fa61 	bl	800df6c <__hi0bits>
 800daaa:	42b0      	cmp	r0, r6
 800daac:	dbe7      	blt.n	800da7e <__gethex+0x456>
 800daae:	e7f0      	b.n	800da92 <__gethex+0x46a>
 800dab0:	08010730 	.word	0x08010730

0800dab4 <L_shift>:
 800dab4:	f1c2 0208 	rsb	r2, r2, #8
 800dab8:	0092      	lsls	r2, r2, #2
 800daba:	b570      	push	{r4, r5, r6, lr}
 800dabc:	f1c2 0620 	rsb	r6, r2, #32
 800dac0:	6843      	ldr	r3, [r0, #4]
 800dac2:	6804      	ldr	r4, [r0, #0]
 800dac4:	fa03 f506 	lsl.w	r5, r3, r6
 800dac8:	432c      	orrs	r4, r5
 800daca:	40d3      	lsrs	r3, r2
 800dacc:	6004      	str	r4, [r0, #0]
 800dace:	f840 3f04 	str.w	r3, [r0, #4]!
 800dad2:	4288      	cmp	r0, r1
 800dad4:	d3f4      	bcc.n	800dac0 <L_shift+0xc>
 800dad6:	bd70      	pop	{r4, r5, r6, pc}

0800dad8 <__match>:
 800dad8:	b530      	push	{r4, r5, lr}
 800dada:	6803      	ldr	r3, [r0, #0]
 800dadc:	3301      	adds	r3, #1
 800dade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dae2:	b914      	cbnz	r4, 800daea <__match+0x12>
 800dae4:	6003      	str	r3, [r0, #0]
 800dae6:	2001      	movs	r0, #1
 800dae8:	bd30      	pop	{r4, r5, pc}
 800daea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800daf2:	2d19      	cmp	r5, #25
 800daf4:	bf98      	it	ls
 800daf6:	3220      	addls	r2, #32
 800daf8:	42a2      	cmp	r2, r4
 800dafa:	d0f0      	beq.n	800dade <__match+0x6>
 800dafc:	2000      	movs	r0, #0
 800dafe:	e7f3      	b.n	800dae8 <__match+0x10>

0800db00 <__hexnan>:
 800db00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db04:	680b      	ldr	r3, [r1, #0]
 800db06:	115e      	asrs	r6, r3, #5
 800db08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db0c:	f013 031f 	ands.w	r3, r3, #31
 800db10:	b087      	sub	sp, #28
 800db12:	bf18      	it	ne
 800db14:	3604      	addne	r6, #4
 800db16:	2500      	movs	r5, #0
 800db18:	1f37      	subs	r7, r6, #4
 800db1a:	4690      	mov	r8, r2
 800db1c:	6802      	ldr	r2, [r0, #0]
 800db1e:	9301      	str	r3, [sp, #4]
 800db20:	4682      	mov	sl, r0
 800db22:	f846 5c04 	str.w	r5, [r6, #-4]
 800db26:	46b9      	mov	r9, r7
 800db28:	463c      	mov	r4, r7
 800db2a:	9502      	str	r5, [sp, #8]
 800db2c:	46ab      	mov	fp, r5
 800db2e:	7851      	ldrb	r1, [r2, #1]
 800db30:	1c53      	adds	r3, r2, #1
 800db32:	9303      	str	r3, [sp, #12]
 800db34:	b341      	cbz	r1, 800db88 <__hexnan+0x88>
 800db36:	4608      	mov	r0, r1
 800db38:	9205      	str	r2, [sp, #20]
 800db3a:	9104      	str	r1, [sp, #16]
 800db3c:	f7ff fd5e 	bl	800d5fc <__hexdig_fun>
 800db40:	2800      	cmp	r0, #0
 800db42:	d14f      	bne.n	800dbe4 <__hexnan+0xe4>
 800db44:	9904      	ldr	r1, [sp, #16]
 800db46:	9a05      	ldr	r2, [sp, #20]
 800db48:	2920      	cmp	r1, #32
 800db4a:	d818      	bhi.n	800db7e <__hexnan+0x7e>
 800db4c:	9b02      	ldr	r3, [sp, #8]
 800db4e:	459b      	cmp	fp, r3
 800db50:	dd13      	ble.n	800db7a <__hexnan+0x7a>
 800db52:	454c      	cmp	r4, r9
 800db54:	d206      	bcs.n	800db64 <__hexnan+0x64>
 800db56:	2d07      	cmp	r5, #7
 800db58:	dc04      	bgt.n	800db64 <__hexnan+0x64>
 800db5a:	462a      	mov	r2, r5
 800db5c:	4649      	mov	r1, r9
 800db5e:	4620      	mov	r0, r4
 800db60:	f7ff ffa8 	bl	800dab4 <L_shift>
 800db64:	4544      	cmp	r4, r8
 800db66:	d950      	bls.n	800dc0a <__hexnan+0x10a>
 800db68:	2300      	movs	r3, #0
 800db6a:	f1a4 0904 	sub.w	r9, r4, #4
 800db6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800db72:	f8cd b008 	str.w	fp, [sp, #8]
 800db76:	464c      	mov	r4, r9
 800db78:	461d      	mov	r5, r3
 800db7a:	9a03      	ldr	r2, [sp, #12]
 800db7c:	e7d7      	b.n	800db2e <__hexnan+0x2e>
 800db7e:	2929      	cmp	r1, #41	; 0x29
 800db80:	d156      	bne.n	800dc30 <__hexnan+0x130>
 800db82:	3202      	adds	r2, #2
 800db84:	f8ca 2000 	str.w	r2, [sl]
 800db88:	f1bb 0f00 	cmp.w	fp, #0
 800db8c:	d050      	beq.n	800dc30 <__hexnan+0x130>
 800db8e:	454c      	cmp	r4, r9
 800db90:	d206      	bcs.n	800dba0 <__hexnan+0xa0>
 800db92:	2d07      	cmp	r5, #7
 800db94:	dc04      	bgt.n	800dba0 <__hexnan+0xa0>
 800db96:	462a      	mov	r2, r5
 800db98:	4649      	mov	r1, r9
 800db9a:	4620      	mov	r0, r4
 800db9c:	f7ff ff8a 	bl	800dab4 <L_shift>
 800dba0:	4544      	cmp	r4, r8
 800dba2:	d934      	bls.n	800dc0e <__hexnan+0x10e>
 800dba4:	f1a8 0204 	sub.w	r2, r8, #4
 800dba8:	4623      	mov	r3, r4
 800dbaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800dbae:	f842 1f04 	str.w	r1, [r2, #4]!
 800dbb2:	429f      	cmp	r7, r3
 800dbb4:	d2f9      	bcs.n	800dbaa <__hexnan+0xaa>
 800dbb6:	1b3b      	subs	r3, r7, r4
 800dbb8:	f023 0303 	bic.w	r3, r3, #3
 800dbbc:	3304      	adds	r3, #4
 800dbbe:	3401      	adds	r4, #1
 800dbc0:	3e03      	subs	r6, #3
 800dbc2:	42b4      	cmp	r4, r6
 800dbc4:	bf88      	it	hi
 800dbc6:	2304      	movhi	r3, #4
 800dbc8:	4443      	add	r3, r8
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f843 2b04 	str.w	r2, [r3], #4
 800dbd0:	429f      	cmp	r7, r3
 800dbd2:	d2fb      	bcs.n	800dbcc <__hexnan+0xcc>
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	b91b      	cbnz	r3, 800dbe0 <__hexnan+0xe0>
 800dbd8:	4547      	cmp	r7, r8
 800dbda:	d127      	bne.n	800dc2c <__hexnan+0x12c>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	603b      	str	r3, [r7, #0]
 800dbe0:	2005      	movs	r0, #5
 800dbe2:	e026      	b.n	800dc32 <__hexnan+0x132>
 800dbe4:	3501      	adds	r5, #1
 800dbe6:	2d08      	cmp	r5, #8
 800dbe8:	f10b 0b01 	add.w	fp, fp, #1
 800dbec:	dd06      	ble.n	800dbfc <__hexnan+0xfc>
 800dbee:	4544      	cmp	r4, r8
 800dbf0:	d9c3      	bls.n	800db7a <__hexnan+0x7a>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbf8:	2501      	movs	r5, #1
 800dbfa:	3c04      	subs	r4, #4
 800dbfc:	6822      	ldr	r2, [r4, #0]
 800dbfe:	f000 000f 	and.w	r0, r0, #15
 800dc02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dc06:	6022      	str	r2, [r4, #0]
 800dc08:	e7b7      	b.n	800db7a <__hexnan+0x7a>
 800dc0a:	2508      	movs	r5, #8
 800dc0c:	e7b5      	b.n	800db7a <__hexnan+0x7a>
 800dc0e:	9b01      	ldr	r3, [sp, #4]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d0df      	beq.n	800dbd4 <__hexnan+0xd4>
 800dc14:	f04f 32ff 	mov.w	r2, #4294967295
 800dc18:	f1c3 0320 	rsb	r3, r3, #32
 800dc1c:	fa22 f303 	lsr.w	r3, r2, r3
 800dc20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dc24:	401a      	ands	r2, r3
 800dc26:	f846 2c04 	str.w	r2, [r6, #-4]
 800dc2a:	e7d3      	b.n	800dbd4 <__hexnan+0xd4>
 800dc2c:	3f04      	subs	r7, #4
 800dc2e:	e7d1      	b.n	800dbd4 <__hexnan+0xd4>
 800dc30:	2004      	movs	r0, #4
 800dc32:	b007      	add	sp, #28
 800dc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc38 <_localeconv_r>:
 800dc38:	4800      	ldr	r0, [pc, #0]	; (800dc3c <_localeconv_r+0x4>)
 800dc3a:	4770      	bx	lr
 800dc3c:	20000164 	.word	0x20000164

0800dc40 <__retarget_lock_init_recursive>:
 800dc40:	4770      	bx	lr

0800dc42 <__retarget_lock_acquire_recursive>:
 800dc42:	4770      	bx	lr

0800dc44 <__retarget_lock_release_recursive>:
 800dc44:	4770      	bx	lr
	...

0800dc48 <_lseek_r>:
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	4d07      	ldr	r5, [pc, #28]	; (800dc68 <_lseek_r+0x20>)
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	4608      	mov	r0, r1
 800dc50:	4611      	mov	r1, r2
 800dc52:	2200      	movs	r2, #0
 800dc54:	602a      	str	r2, [r5, #0]
 800dc56:	461a      	mov	r2, r3
 800dc58:	f7f4 fbc8 	bl	80023ec <_lseek>
 800dc5c:	1c43      	adds	r3, r0, #1
 800dc5e:	d102      	bne.n	800dc66 <_lseek_r+0x1e>
 800dc60:	682b      	ldr	r3, [r5, #0]
 800dc62:	b103      	cbz	r3, 800dc66 <_lseek_r+0x1e>
 800dc64:	6023      	str	r3, [r4, #0]
 800dc66:	bd38      	pop	{r3, r4, r5, pc}
 800dc68:	200004dc 	.word	0x200004dc

0800dc6c <__swhatbuf_r>:
 800dc6c:	b570      	push	{r4, r5, r6, lr}
 800dc6e:	460e      	mov	r6, r1
 800dc70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc74:	2900      	cmp	r1, #0
 800dc76:	b096      	sub	sp, #88	; 0x58
 800dc78:	4614      	mov	r4, r2
 800dc7a:	461d      	mov	r5, r3
 800dc7c:	da08      	bge.n	800dc90 <__swhatbuf_r+0x24>
 800dc7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dc82:	2200      	movs	r2, #0
 800dc84:	602a      	str	r2, [r5, #0]
 800dc86:	061a      	lsls	r2, r3, #24
 800dc88:	d410      	bmi.n	800dcac <__swhatbuf_r+0x40>
 800dc8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc8e:	e00e      	b.n	800dcae <__swhatbuf_r+0x42>
 800dc90:	466a      	mov	r2, sp
 800dc92:	f002 f869 	bl	800fd68 <_fstat_r>
 800dc96:	2800      	cmp	r0, #0
 800dc98:	dbf1      	blt.n	800dc7e <__swhatbuf_r+0x12>
 800dc9a:	9a01      	ldr	r2, [sp, #4]
 800dc9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dca0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dca4:	425a      	negs	r2, r3
 800dca6:	415a      	adcs	r2, r3
 800dca8:	602a      	str	r2, [r5, #0]
 800dcaa:	e7ee      	b.n	800dc8a <__swhatbuf_r+0x1e>
 800dcac:	2340      	movs	r3, #64	; 0x40
 800dcae:	2000      	movs	r0, #0
 800dcb0:	6023      	str	r3, [r4, #0]
 800dcb2:	b016      	add	sp, #88	; 0x58
 800dcb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dcb8 <__smakebuf_r>:
 800dcb8:	898b      	ldrh	r3, [r1, #12]
 800dcba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcbc:	079d      	lsls	r5, r3, #30
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	460c      	mov	r4, r1
 800dcc2:	d507      	bpl.n	800dcd4 <__smakebuf_r+0x1c>
 800dcc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	6123      	str	r3, [r4, #16]
 800dccc:	2301      	movs	r3, #1
 800dcce:	6163      	str	r3, [r4, #20]
 800dcd0:	b002      	add	sp, #8
 800dcd2:	bd70      	pop	{r4, r5, r6, pc}
 800dcd4:	ab01      	add	r3, sp, #4
 800dcd6:	466a      	mov	r2, sp
 800dcd8:	f7ff ffc8 	bl	800dc6c <__swhatbuf_r>
 800dcdc:	9900      	ldr	r1, [sp, #0]
 800dcde:	4605      	mov	r5, r0
 800dce0:	4630      	mov	r0, r6
 800dce2:	f000 fd95 	bl	800e810 <_malloc_r>
 800dce6:	b948      	cbnz	r0, 800dcfc <__smakebuf_r+0x44>
 800dce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcec:	059a      	lsls	r2, r3, #22
 800dcee:	d4ef      	bmi.n	800dcd0 <__smakebuf_r+0x18>
 800dcf0:	f023 0303 	bic.w	r3, r3, #3
 800dcf4:	f043 0302 	orr.w	r3, r3, #2
 800dcf8:	81a3      	strh	r3, [r4, #12]
 800dcfa:	e7e3      	b.n	800dcc4 <__smakebuf_r+0xc>
 800dcfc:	4b0d      	ldr	r3, [pc, #52]	; (800dd34 <__smakebuf_r+0x7c>)
 800dcfe:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd00:	89a3      	ldrh	r3, [r4, #12]
 800dd02:	6020      	str	r0, [r4, #0]
 800dd04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd08:	81a3      	strh	r3, [r4, #12]
 800dd0a:	9b00      	ldr	r3, [sp, #0]
 800dd0c:	6163      	str	r3, [r4, #20]
 800dd0e:	9b01      	ldr	r3, [sp, #4]
 800dd10:	6120      	str	r0, [r4, #16]
 800dd12:	b15b      	cbz	r3, 800dd2c <__smakebuf_r+0x74>
 800dd14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd18:	4630      	mov	r0, r6
 800dd1a:	f002 f837 	bl	800fd8c <_isatty_r>
 800dd1e:	b128      	cbz	r0, 800dd2c <__smakebuf_r+0x74>
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	f023 0303 	bic.w	r3, r3, #3
 800dd26:	f043 0301 	orr.w	r3, r3, #1
 800dd2a:	81a3      	strh	r3, [r4, #12]
 800dd2c:	89a0      	ldrh	r0, [r4, #12]
 800dd2e:	4305      	orrs	r5, r0
 800dd30:	81a5      	strh	r5, [r4, #12]
 800dd32:	e7cd      	b.n	800dcd0 <__smakebuf_r+0x18>
 800dd34:	0800d37d 	.word	0x0800d37d

0800dd38 <malloc>:
 800dd38:	4b02      	ldr	r3, [pc, #8]	; (800dd44 <malloc+0xc>)
 800dd3a:	4601      	mov	r1, r0
 800dd3c:	6818      	ldr	r0, [r3, #0]
 800dd3e:	f000 bd67 	b.w	800e810 <_malloc_r>
 800dd42:	bf00      	nop
 800dd44:	2000000c 	.word	0x2000000c

0800dd48 <__ascii_mbtowc>:
 800dd48:	b082      	sub	sp, #8
 800dd4a:	b901      	cbnz	r1, 800dd4e <__ascii_mbtowc+0x6>
 800dd4c:	a901      	add	r1, sp, #4
 800dd4e:	b142      	cbz	r2, 800dd62 <__ascii_mbtowc+0x1a>
 800dd50:	b14b      	cbz	r3, 800dd66 <__ascii_mbtowc+0x1e>
 800dd52:	7813      	ldrb	r3, [r2, #0]
 800dd54:	600b      	str	r3, [r1, #0]
 800dd56:	7812      	ldrb	r2, [r2, #0]
 800dd58:	1e10      	subs	r0, r2, #0
 800dd5a:	bf18      	it	ne
 800dd5c:	2001      	movne	r0, #1
 800dd5e:	b002      	add	sp, #8
 800dd60:	4770      	bx	lr
 800dd62:	4610      	mov	r0, r2
 800dd64:	e7fb      	b.n	800dd5e <__ascii_mbtowc+0x16>
 800dd66:	f06f 0001 	mvn.w	r0, #1
 800dd6a:	e7f8      	b.n	800dd5e <__ascii_mbtowc+0x16>

0800dd6c <memcpy>:
 800dd6c:	440a      	add	r2, r1
 800dd6e:	4291      	cmp	r1, r2
 800dd70:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd74:	d100      	bne.n	800dd78 <memcpy+0xc>
 800dd76:	4770      	bx	lr
 800dd78:	b510      	push	{r4, lr}
 800dd7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd82:	4291      	cmp	r1, r2
 800dd84:	d1f9      	bne.n	800dd7a <memcpy+0xe>
 800dd86:	bd10      	pop	{r4, pc}

0800dd88 <_Balloc>:
 800dd88:	b570      	push	{r4, r5, r6, lr}
 800dd8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	460d      	mov	r5, r1
 800dd90:	b976      	cbnz	r6, 800ddb0 <_Balloc+0x28>
 800dd92:	2010      	movs	r0, #16
 800dd94:	f7ff ffd0 	bl	800dd38 <malloc>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	6260      	str	r0, [r4, #36]	; 0x24
 800dd9c:	b920      	cbnz	r0, 800dda8 <_Balloc+0x20>
 800dd9e:	4b18      	ldr	r3, [pc, #96]	; (800de00 <_Balloc+0x78>)
 800dda0:	4818      	ldr	r0, [pc, #96]	; (800de04 <_Balloc+0x7c>)
 800dda2:	2166      	movs	r1, #102	; 0x66
 800dda4:	f001 ffb0 	bl	800fd08 <__assert_func>
 800dda8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddac:	6006      	str	r6, [r0, #0]
 800ddae:	60c6      	str	r6, [r0, #12]
 800ddb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ddb2:	68f3      	ldr	r3, [r6, #12]
 800ddb4:	b183      	cbz	r3, 800ddd8 <_Balloc+0x50>
 800ddb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ddbe:	b9b8      	cbnz	r0, 800ddf0 <_Balloc+0x68>
 800ddc0:	2101      	movs	r1, #1
 800ddc2:	fa01 f605 	lsl.w	r6, r1, r5
 800ddc6:	1d72      	adds	r2, r6, #5
 800ddc8:	0092      	lsls	r2, r2, #2
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f000 fc9d 	bl	800e70a <_calloc_r>
 800ddd0:	b160      	cbz	r0, 800ddec <_Balloc+0x64>
 800ddd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ddd6:	e00e      	b.n	800ddf6 <_Balloc+0x6e>
 800ddd8:	2221      	movs	r2, #33	; 0x21
 800ddda:	2104      	movs	r1, #4
 800dddc:	4620      	mov	r0, r4
 800ddde:	f000 fc94 	bl	800e70a <_calloc_r>
 800dde2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dde4:	60f0      	str	r0, [r6, #12]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1e4      	bne.n	800ddb6 <_Balloc+0x2e>
 800ddec:	2000      	movs	r0, #0
 800ddee:	bd70      	pop	{r4, r5, r6, pc}
 800ddf0:	6802      	ldr	r2, [r0, #0]
 800ddf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ddfc:	e7f7      	b.n	800ddee <_Balloc+0x66>
 800ddfe:	bf00      	nop
 800de00:	080106be 	.word	0x080106be
 800de04:	08010820 	.word	0x08010820

0800de08 <_Bfree>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de0c:	4605      	mov	r5, r0
 800de0e:	460c      	mov	r4, r1
 800de10:	b976      	cbnz	r6, 800de30 <_Bfree+0x28>
 800de12:	2010      	movs	r0, #16
 800de14:	f7ff ff90 	bl	800dd38 <malloc>
 800de18:	4602      	mov	r2, r0
 800de1a:	6268      	str	r0, [r5, #36]	; 0x24
 800de1c:	b920      	cbnz	r0, 800de28 <_Bfree+0x20>
 800de1e:	4b09      	ldr	r3, [pc, #36]	; (800de44 <_Bfree+0x3c>)
 800de20:	4809      	ldr	r0, [pc, #36]	; (800de48 <_Bfree+0x40>)
 800de22:	218a      	movs	r1, #138	; 0x8a
 800de24:	f001 ff70 	bl	800fd08 <__assert_func>
 800de28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de2c:	6006      	str	r6, [r0, #0]
 800de2e:	60c6      	str	r6, [r0, #12]
 800de30:	b13c      	cbz	r4, 800de42 <_Bfree+0x3a>
 800de32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800de34:	6862      	ldr	r2, [r4, #4]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de3c:	6021      	str	r1, [r4, #0]
 800de3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de42:	bd70      	pop	{r4, r5, r6, pc}
 800de44:	080106be 	.word	0x080106be
 800de48:	08010820 	.word	0x08010820

0800de4c <__multadd>:
 800de4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de50:	690d      	ldr	r5, [r1, #16]
 800de52:	4607      	mov	r7, r0
 800de54:	460c      	mov	r4, r1
 800de56:	461e      	mov	r6, r3
 800de58:	f101 0c14 	add.w	ip, r1, #20
 800de5c:	2000      	movs	r0, #0
 800de5e:	f8dc 3000 	ldr.w	r3, [ip]
 800de62:	b299      	uxth	r1, r3
 800de64:	fb02 6101 	mla	r1, r2, r1, r6
 800de68:	0c1e      	lsrs	r6, r3, #16
 800de6a:	0c0b      	lsrs	r3, r1, #16
 800de6c:	fb02 3306 	mla	r3, r2, r6, r3
 800de70:	b289      	uxth	r1, r1
 800de72:	3001      	adds	r0, #1
 800de74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de78:	4285      	cmp	r5, r0
 800de7a:	f84c 1b04 	str.w	r1, [ip], #4
 800de7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de82:	dcec      	bgt.n	800de5e <__multadd+0x12>
 800de84:	b30e      	cbz	r6, 800deca <__multadd+0x7e>
 800de86:	68a3      	ldr	r3, [r4, #8]
 800de88:	42ab      	cmp	r3, r5
 800de8a:	dc19      	bgt.n	800dec0 <__multadd+0x74>
 800de8c:	6861      	ldr	r1, [r4, #4]
 800de8e:	4638      	mov	r0, r7
 800de90:	3101      	adds	r1, #1
 800de92:	f7ff ff79 	bl	800dd88 <_Balloc>
 800de96:	4680      	mov	r8, r0
 800de98:	b928      	cbnz	r0, 800dea6 <__multadd+0x5a>
 800de9a:	4602      	mov	r2, r0
 800de9c:	4b0c      	ldr	r3, [pc, #48]	; (800ded0 <__multadd+0x84>)
 800de9e:	480d      	ldr	r0, [pc, #52]	; (800ded4 <__multadd+0x88>)
 800dea0:	21b5      	movs	r1, #181	; 0xb5
 800dea2:	f001 ff31 	bl	800fd08 <__assert_func>
 800dea6:	6922      	ldr	r2, [r4, #16]
 800dea8:	3202      	adds	r2, #2
 800deaa:	f104 010c 	add.w	r1, r4, #12
 800deae:	0092      	lsls	r2, r2, #2
 800deb0:	300c      	adds	r0, #12
 800deb2:	f7ff ff5b 	bl	800dd6c <memcpy>
 800deb6:	4621      	mov	r1, r4
 800deb8:	4638      	mov	r0, r7
 800deba:	f7ff ffa5 	bl	800de08 <_Bfree>
 800debe:	4644      	mov	r4, r8
 800dec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dec4:	3501      	adds	r5, #1
 800dec6:	615e      	str	r6, [r3, #20]
 800dec8:	6125      	str	r5, [r4, #16]
 800deca:	4620      	mov	r0, r4
 800decc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded0:	08010730 	.word	0x08010730
 800ded4:	08010820 	.word	0x08010820

0800ded8 <__s2b>:
 800ded8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dedc:	460c      	mov	r4, r1
 800dede:	4615      	mov	r5, r2
 800dee0:	461f      	mov	r7, r3
 800dee2:	2209      	movs	r2, #9
 800dee4:	3308      	adds	r3, #8
 800dee6:	4606      	mov	r6, r0
 800dee8:	fb93 f3f2 	sdiv	r3, r3, r2
 800deec:	2100      	movs	r1, #0
 800deee:	2201      	movs	r2, #1
 800def0:	429a      	cmp	r2, r3
 800def2:	db09      	blt.n	800df08 <__s2b+0x30>
 800def4:	4630      	mov	r0, r6
 800def6:	f7ff ff47 	bl	800dd88 <_Balloc>
 800defa:	b940      	cbnz	r0, 800df0e <__s2b+0x36>
 800defc:	4602      	mov	r2, r0
 800defe:	4b19      	ldr	r3, [pc, #100]	; (800df64 <__s2b+0x8c>)
 800df00:	4819      	ldr	r0, [pc, #100]	; (800df68 <__s2b+0x90>)
 800df02:	21ce      	movs	r1, #206	; 0xce
 800df04:	f001 ff00 	bl	800fd08 <__assert_func>
 800df08:	0052      	lsls	r2, r2, #1
 800df0a:	3101      	adds	r1, #1
 800df0c:	e7f0      	b.n	800def0 <__s2b+0x18>
 800df0e:	9b08      	ldr	r3, [sp, #32]
 800df10:	6143      	str	r3, [r0, #20]
 800df12:	2d09      	cmp	r5, #9
 800df14:	f04f 0301 	mov.w	r3, #1
 800df18:	6103      	str	r3, [r0, #16]
 800df1a:	dd16      	ble.n	800df4a <__s2b+0x72>
 800df1c:	f104 0909 	add.w	r9, r4, #9
 800df20:	46c8      	mov	r8, r9
 800df22:	442c      	add	r4, r5
 800df24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800df28:	4601      	mov	r1, r0
 800df2a:	3b30      	subs	r3, #48	; 0x30
 800df2c:	220a      	movs	r2, #10
 800df2e:	4630      	mov	r0, r6
 800df30:	f7ff ff8c 	bl	800de4c <__multadd>
 800df34:	45a0      	cmp	r8, r4
 800df36:	d1f5      	bne.n	800df24 <__s2b+0x4c>
 800df38:	f1a5 0408 	sub.w	r4, r5, #8
 800df3c:	444c      	add	r4, r9
 800df3e:	1b2d      	subs	r5, r5, r4
 800df40:	1963      	adds	r3, r4, r5
 800df42:	42bb      	cmp	r3, r7
 800df44:	db04      	blt.n	800df50 <__s2b+0x78>
 800df46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df4a:	340a      	adds	r4, #10
 800df4c:	2509      	movs	r5, #9
 800df4e:	e7f6      	b.n	800df3e <__s2b+0x66>
 800df50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df54:	4601      	mov	r1, r0
 800df56:	3b30      	subs	r3, #48	; 0x30
 800df58:	220a      	movs	r2, #10
 800df5a:	4630      	mov	r0, r6
 800df5c:	f7ff ff76 	bl	800de4c <__multadd>
 800df60:	e7ee      	b.n	800df40 <__s2b+0x68>
 800df62:	bf00      	nop
 800df64:	08010730 	.word	0x08010730
 800df68:	08010820 	.word	0x08010820

0800df6c <__hi0bits>:
 800df6c:	0c03      	lsrs	r3, r0, #16
 800df6e:	041b      	lsls	r3, r3, #16
 800df70:	b9d3      	cbnz	r3, 800dfa8 <__hi0bits+0x3c>
 800df72:	0400      	lsls	r0, r0, #16
 800df74:	2310      	movs	r3, #16
 800df76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800df7a:	bf04      	itt	eq
 800df7c:	0200      	lsleq	r0, r0, #8
 800df7e:	3308      	addeq	r3, #8
 800df80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800df84:	bf04      	itt	eq
 800df86:	0100      	lsleq	r0, r0, #4
 800df88:	3304      	addeq	r3, #4
 800df8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800df8e:	bf04      	itt	eq
 800df90:	0080      	lsleq	r0, r0, #2
 800df92:	3302      	addeq	r3, #2
 800df94:	2800      	cmp	r0, #0
 800df96:	db05      	blt.n	800dfa4 <__hi0bits+0x38>
 800df98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800df9c:	f103 0301 	add.w	r3, r3, #1
 800dfa0:	bf08      	it	eq
 800dfa2:	2320      	moveq	r3, #32
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	4770      	bx	lr
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	e7e4      	b.n	800df76 <__hi0bits+0xa>

0800dfac <__lo0bits>:
 800dfac:	6803      	ldr	r3, [r0, #0]
 800dfae:	f013 0207 	ands.w	r2, r3, #7
 800dfb2:	4601      	mov	r1, r0
 800dfb4:	d00b      	beq.n	800dfce <__lo0bits+0x22>
 800dfb6:	07da      	lsls	r2, r3, #31
 800dfb8:	d423      	bmi.n	800e002 <__lo0bits+0x56>
 800dfba:	0798      	lsls	r0, r3, #30
 800dfbc:	bf49      	itett	mi
 800dfbe:	085b      	lsrmi	r3, r3, #1
 800dfc0:	089b      	lsrpl	r3, r3, #2
 800dfc2:	2001      	movmi	r0, #1
 800dfc4:	600b      	strmi	r3, [r1, #0]
 800dfc6:	bf5c      	itt	pl
 800dfc8:	600b      	strpl	r3, [r1, #0]
 800dfca:	2002      	movpl	r0, #2
 800dfcc:	4770      	bx	lr
 800dfce:	b298      	uxth	r0, r3
 800dfd0:	b9a8      	cbnz	r0, 800dffe <__lo0bits+0x52>
 800dfd2:	0c1b      	lsrs	r3, r3, #16
 800dfd4:	2010      	movs	r0, #16
 800dfd6:	b2da      	uxtb	r2, r3
 800dfd8:	b90a      	cbnz	r2, 800dfde <__lo0bits+0x32>
 800dfda:	3008      	adds	r0, #8
 800dfdc:	0a1b      	lsrs	r3, r3, #8
 800dfde:	071a      	lsls	r2, r3, #28
 800dfe0:	bf04      	itt	eq
 800dfe2:	091b      	lsreq	r3, r3, #4
 800dfe4:	3004      	addeq	r0, #4
 800dfe6:	079a      	lsls	r2, r3, #30
 800dfe8:	bf04      	itt	eq
 800dfea:	089b      	lsreq	r3, r3, #2
 800dfec:	3002      	addeq	r0, #2
 800dfee:	07da      	lsls	r2, r3, #31
 800dff0:	d403      	bmi.n	800dffa <__lo0bits+0x4e>
 800dff2:	085b      	lsrs	r3, r3, #1
 800dff4:	f100 0001 	add.w	r0, r0, #1
 800dff8:	d005      	beq.n	800e006 <__lo0bits+0x5a>
 800dffa:	600b      	str	r3, [r1, #0]
 800dffc:	4770      	bx	lr
 800dffe:	4610      	mov	r0, r2
 800e000:	e7e9      	b.n	800dfd6 <__lo0bits+0x2a>
 800e002:	2000      	movs	r0, #0
 800e004:	4770      	bx	lr
 800e006:	2020      	movs	r0, #32
 800e008:	4770      	bx	lr
	...

0800e00c <__i2b>:
 800e00c:	b510      	push	{r4, lr}
 800e00e:	460c      	mov	r4, r1
 800e010:	2101      	movs	r1, #1
 800e012:	f7ff feb9 	bl	800dd88 <_Balloc>
 800e016:	4602      	mov	r2, r0
 800e018:	b928      	cbnz	r0, 800e026 <__i2b+0x1a>
 800e01a:	4b05      	ldr	r3, [pc, #20]	; (800e030 <__i2b+0x24>)
 800e01c:	4805      	ldr	r0, [pc, #20]	; (800e034 <__i2b+0x28>)
 800e01e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e022:	f001 fe71 	bl	800fd08 <__assert_func>
 800e026:	2301      	movs	r3, #1
 800e028:	6144      	str	r4, [r0, #20]
 800e02a:	6103      	str	r3, [r0, #16]
 800e02c:	bd10      	pop	{r4, pc}
 800e02e:	bf00      	nop
 800e030:	08010730 	.word	0x08010730
 800e034:	08010820 	.word	0x08010820

0800e038 <__multiply>:
 800e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03c:	4691      	mov	r9, r2
 800e03e:	690a      	ldr	r2, [r1, #16]
 800e040:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e044:	429a      	cmp	r2, r3
 800e046:	bfb8      	it	lt
 800e048:	460b      	movlt	r3, r1
 800e04a:	460c      	mov	r4, r1
 800e04c:	bfbc      	itt	lt
 800e04e:	464c      	movlt	r4, r9
 800e050:	4699      	movlt	r9, r3
 800e052:	6927      	ldr	r7, [r4, #16]
 800e054:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e058:	68a3      	ldr	r3, [r4, #8]
 800e05a:	6861      	ldr	r1, [r4, #4]
 800e05c:	eb07 060a 	add.w	r6, r7, sl
 800e060:	42b3      	cmp	r3, r6
 800e062:	b085      	sub	sp, #20
 800e064:	bfb8      	it	lt
 800e066:	3101      	addlt	r1, #1
 800e068:	f7ff fe8e 	bl	800dd88 <_Balloc>
 800e06c:	b930      	cbnz	r0, 800e07c <__multiply+0x44>
 800e06e:	4602      	mov	r2, r0
 800e070:	4b44      	ldr	r3, [pc, #272]	; (800e184 <__multiply+0x14c>)
 800e072:	4845      	ldr	r0, [pc, #276]	; (800e188 <__multiply+0x150>)
 800e074:	f240 115d 	movw	r1, #349	; 0x15d
 800e078:	f001 fe46 	bl	800fd08 <__assert_func>
 800e07c:	f100 0514 	add.w	r5, r0, #20
 800e080:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e084:	462b      	mov	r3, r5
 800e086:	2200      	movs	r2, #0
 800e088:	4543      	cmp	r3, r8
 800e08a:	d321      	bcc.n	800e0d0 <__multiply+0x98>
 800e08c:	f104 0314 	add.w	r3, r4, #20
 800e090:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e094:	f109 0314 	add.w	r3, r9, #20
 800e098:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e09c:	9202      	str	r2, [sp, #8]
 800e09e:	1b3a      	subs	r2, r7, r4
 800e0a0:	3a15      	subs	r2, #21
 800e0a2:	f022 0203 	bic.w	r2, r2, #3
 800e0a6:	3204      	adds	r2, #4
 800e0a8:	f104 0115 	add.w	r1, r4, #21
 800e0ac:	428f      	cmp	r7, r1
 800e0ae:	bf38      	it	cc
 800e0b0:	2204      	movcc	r2, #4
 800e0b2:	9201      	str	r2, [sp, #4]
 800e0b4:	9a02      	ldr	r2, [sp, #8]
 800e0b6:	9303      	str	r3, [sp, #12]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d80c      	bhi.n	800e0d6 <__multiply+0x9e>
 800e0bc:	2e00      	cmp	r6, #0
 800e0be:	dd03      	ble.n	800e0c8 <__multiply+0x90>
 800e0c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d05a      	beq.n	800e17e <__multiply+0x146>
 800e0c8:	6106      	str	r6, [r0, #16]
 800e0ca:	b005      	add	sp, #20
 800e0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d0:	f843 2b04 	str.w	r2, [r3], #4
 800e0d4:	e7d8      	b.n	800e088 <__multiply+0x50>
 800e0d6:	f8b3 a000 	ldrh.w	sl, [r3]
 800e0da:	f1ba 0f00 	cmp.w	sl, #0
 800e0de:	d024      	beq.n	800e12a <__multiply+0xf2>
 800e0e0:	f104 0e14 	add.w	lr, r4, #20
 800e0e4:	46a9      	mov	r9, r5
 800e0e6:	f04f 0c00 	mov.w	ip, #0
 800e0ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e0ee:	f8d9 1000 	ldr.w	r1, [r9]
 800e0f2:	fa1f fb82 	uxth.w	fp, r2
 800e0f6:	b289      	uxth	r1, r1
 800e0f8:	fb0a 110b 	mla	r1, sl, fp, r1
 800e0fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e100:	f8d9 2000 	ldr.w	r2, [r9]
 800e104:	4461      	add	r1, ip
 800e106:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e10a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e10e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e112:	b289      	uxth	r1, r1
 800e114:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e118:	4577      	cmp	r7, lr
 800e11a:	f849 1b04 	str.w	r1, [r9], #4
 800e11e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e122:	d8e2      	bhi.n	800e0ea <__multiply+0xb2>
 800e124:	9a01      	ldr	r2, [sp, #4]
 800e126:	f845 c002 	str.w	ip, [r5, r2]
 800e12a:	9a03      	ldr	r2, [sp, #12]
 800e12c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e130:	3304      	adds	r3, #4
 800e132:	f1b9 0f00 	cmp.w	r9, #0
 800e136:	d020      	beq.n	800e17a <__multiply+0x142>
 800e138:	6829      	ldr	r1, [r5, #0]
 800e13a:	f104 0c14 	add.w	ip, r4, #20
 800e13e:	46ae      	mov	lr, r5
 800e140:	f04f 0a00 	mov.w	sl, #0
 800e144:	f8bc b000 	ldrh.w	fp, [ip]
 800e148:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e14c:	fb09 220b 	mla	r2, r9, fp, r2
 800e150:	4492      	add	sl, r2
 800e152:	b289      	uxth	r1, r1
 800e154:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e158:	f84e 1b04 	str.w	r1, [lr], #4
 800e15c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e160:	f8be 1000 	ldrh.w	r1, [lr]
 800e164:	0c12      	lsrs	r2, r2, #16
 800e166:	fb09 1102 	mla	r1, r9, r2, r1
 800e16a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e16e:	4567      	cmp	r7, ip
 800e170:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e174:	d8e6      	bhi.n	800e144 <__multiply+0x10c>
 800e176:	9a01      	ldr	r2, [sp, #4]
 800e178:	50a9      	str	r1, [r5, r2]
 800e17a:	3504      	adds	r5, #4
 800e17c:	e79a      	b.n	800e0b4 <__multiply+0x7c>
 800e17e:	3e01      	subs	r6, #1
 800e180:	e79c      	b.n	800e0bc <__multiply+0x84>
 800e182:	bf00      	nop
 800e184:	08010730 	.word	0x08010730
 800e188:	08010820 	.word	0x08010820

0800e18c <__pow5mult>:
 800e18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e190:	4615      	mov	r5, r2
 800e192:	f012 0203 	ands.w	r2, r2, #3
 800e196:	4606      	mov	r6, r0
 800e198:	460f      	mov	r7, r1
 800e19a:	d007      	beq.n	800e1ac <__pow5mult+0x20>
 800e19c:	4c25      	ldr	r4, [pc, #148]	; (800e234 <__pow5mult+0xa8>)
 800e19e:	3a01      	subs	r2, #1
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1a6:	f7ff fe51 	bl	800de4c <__multadd>
 800e1aa:	4607      	mov	r7, r0
 800e1ac:	10ad      	asrs	r5, r5, #2
 800e1ae:	d03d      	beq.n	800e22c <__pow5mult+0xa0>
 800e1b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e1b2:	b97c      	cbnz	r4, 800e1d4 <__pow5mult+0x48>
 800e1b4:	2010      	movs	r0, #16
 800e1b6:	f7ff fdbf 	bl	800dd38 <malloc>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	6270      	str	r0, [r6, #36]	; 0x24
 800e1be:	b928      	cbnz	r0, 800e1cc <__pow5mult+0x40>
 800e1c0:	4b1d      	ldr	r3, [pc, #116]	; (800e238 <__pow5mult+0xac>)
 800e1c2:	481e      	ldr	r0, [pc, #120]	; (800e23c <__pow5mult+0xb0>)
 800e1c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e1c8:	f001 fd9e 	bl	800fd08 <__assert_func>
 800e1cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1d0:	6004      	str	r4, [r0, #0]
 800e1d2:	60c4      	str	r4, [r0, #12]
 800e1d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e1d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e1dc:	b94c      	cbnz	r4, 800e1f2 <__pow5mult+0x66>
 800e1de:	f240 2171 	movw	r1, #625	; 0x271
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	f7ff ff12 	bl	800e00c <__i2b>
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	6003      	str	r3, [r0, #0]
 800e1f2:	f04f 0900 	mov.w	r9, #0
 800e1f6:	07eb      	lsls	r3, r5, #31
 800e1f8:	d50a      	bpl.n	800e210 <__pow5mult+0x84>
 800e1fa:	4639      	mov	r1, r7
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	4630      	mov	r0, r6
 800e200:	f7ff ff1a 	bl	800e038 <__multiply>
 800e204:	4639      	mov	r1, r7
 800e206:	4680      	mov	r8, r0
 800e208:	4630      	mov	r0, r6
 800e20a:	f7ff fdfd 	bl	800de08 <_Bfree>
 800e20e:	4647      	mov	r7, r8
 800e210:	106d      	asrs	r5, r5, #1
 800e212:	d00b      	beq.n	800e22c <__pow5mult+0xa0>
 800e214:	6820      	ldr	r0, [r4, #0]
 800e216:	b938      	cbnz	r0, 800e228 <__pow5mult+0x9c>
 800e218:	4622      	mov	r2, r4
 800e21a:	4621      	mov	r1, r4
 800e21c:	4630      	mov	r0, r6
 800e21e:	f7ff ff0b 	bl	800e038 <__multiply>
 800e222:	6020      	str	r0, [r4, #0]
 800e224:	f8c0 9000 	str.w	r9, [r0]
 800e228:	4604      	mov	r4, r0
 800e22a:	e7e4      	b.n	800e1f6 <__pow5mult+0x6a>
 800e22c:	4638      	mov	r0, r7
 800e22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e232:	bf00      	nop
 800e234:	08010970 	.word	0x08010970
 800e238:	080106be 	.word	0x080106be
 800e23c:	08010820 	.word	0x08010820

0800e240 <__lshift>:
 800e240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e244:	460c      	mov	r4, r1
 800e246:	6849      	ldr	r1, [r1, #4]
 800e248:	6923      	ldr	r3, [r4, #16]
 800e24a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e24e:	68a3      	ldr	r3, [r4, #8]
 800e250:	4607      	mov	r7, r0
 800e252:	4691      	mov	r9, r2
 800e254:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e258:	f108 0601 	add.w	r6, r8, #1
 800e25c:	42b3      	cmp	r3, r6
 800e25e:	db0b      	blt.n	800e278 <__lshift+0x38>
 800e260:	4638      	mov	r0, r7
 800e262:	f7ff fd91 	bl	800dd88 <_Balloc>
 800e266:	4605      	mov	r5, r0
 800e268:	b948      	cbnz	r0, 800e27e <__lshift+0x3e>
 800e26a:	4602      	mov	r2, r0
 800e26c:	4b2a      	ldr	r3, [pc, #168]	; (800e318 <__lshift+0xd8>)
 800e26e:	482b      	ldr	r0, [pc, #172]	; (800e31c <__lshift+0xdc>)
 800e270:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e274:	f001 fd48 	bl	800fd08 <__assert_func>
 800e278:	3101      	adds	r1, #1
 800e27a:	005b      	lsls	r3, r3, #1
 800e27c:	e7ee      	b.n	800e25c <__lshift+0x1c>
 800e27e:	2300      	movs	r3, #0
 800e280:	f100 0114 	add.w	r1, r0, #20
 800e284:	f100 0210 	add.w	r2, r0, #16
 800e288:	4618      	mov	r0, r3
 800e28a:	4553      	cmp	r3, sl
 800e28c:	db37      	blt.n	800e2fe <__lshift+0xbe>
 800e28e:	6920      	ldr	r0, [r4, #16]
 800e290:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e294:	f104 0314 	add.w	r3, r4, #20
 800e298:	f019 091f 	ands.w	r9, r9, #31
 800e29c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e2a4:	d02f      	beq.n	800e306 <__lshift+0xc6>
 800e2a6:	f1c9 0e20 	rsb	lr, r9, #32
 800e2aa:	468a      	mov	sl, r1
 800e2ac:	f04f 0c00 	mov.w	ip, #0
 800e2b0:	681a      	ldr	r2, [r3, #0]
 800e2b2:	fa02 f209 	lsl.w	r2, r2, r9
 800e2b6:	ea42 020c 	orr.w	r2, r2, ip
 800e2ba:	f84a 2b04 	str.w	r2, [sl], #4
 800e2be:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2c2:	4298      	cmp	r0, r3
 800e2c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e2c8:	d8f2      	bhi.n	800e2b0 <__lshift+0x70>
 800e2ca:	1b03      	subs	r3, r0, r4
 800e2cc:	3b15      	subs	r3, #21
 800e2ce:	f023 0303 	bic.w	r3, r3, #3
 800e2d2:	3304      	adds	r3, #4
 800e2d4:	f104 0215 	add.w	r2, r4, #21
 800e2d8:	4290      	cmp	r0, r2
 800e2da:	bf38      	it	cc
 800e2dc:	2304      	movcc	r3, #4
 800e2de:	f841 c003 	str.w	ip, [r1, r3]
 800e2e2:	f1bc 0f00 	cmp.w	ip, #0
 800e2e6:	d001      	beq.n	800e2ec <__lshift+0xac>
 800e2e8:	f108 0602 	add.w	r6, r8, #2
 800e2ec:	3e01      	subs	r6, #1
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	612e      	str	r6, [r5, #16]
 800e2f2:	4621      	mov	r1, r4
 800e2f4:	f7ff fd88 	bl	800de08 <_Bfree>
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800e302:	3301      	adds	r3, #1
 800e304:	e7c1      	b.n	800e28a <__lshift+0x4a>
 800e306:	3904      	subs	r1, #4
 800e308:	f853 2b04 	ldr.w	r2, [r3], #4
 800e30c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e310:	4298      	cmp	r0, r3
 800e312:	d8f9      	bhi.n	800e308 <__lshift+0xc8>
 800e314:	e7ea      	b.n	800e2ec <__lshift+0xac>
 800e316:	bf00      	nop
 800e318:	08010730 	.word	0x08010730
 800e31c:	08010820 	.word	0x08010820

0800e320 <__mcmp>:
 800e320:	b530      	push	{r4, r5, lr}
 800e322:	6902      	ldr	r2, [r0, #16]
 800e324:	690c      	ldr	r4, [r1, #16]
 800e326:	1b12      	subs	r2, r2, r4
 800e328:	d10e      	bne.n	800e348 <__mcmp+0x28>
 800e32a:	f100 0314 	add.w	r3, r0, #20
 800e32e:	3114      	adds	r1, #20
 800e330:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e334:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e338:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e33c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e340:	42a5      	cmp	r5, r4
 800e342:	d003      	beq.n	800e34c <__mcmp+0x2c>
 800e344:	d305      	bcc.n	800e352 <__mcmp+0x32>
 800e346:	2201      	movs	r2, #1
 800e348:	4610      	mov	r0, r2
 800e34a:	bd30      	pop	{r4, r5, pc}
 800e34c:	4283      	cmp	r3, r0
 800e34e:	d3f3      	bcc.n	800e338 <__mcmp+0x18>
 800e350:	e7fa      	b.n	800e348 <__mcmp+0x28>
 800e352:	f04f 32ff 	mov.w	r2, #4294967295
 800e356:	e7f7      	b.n	800e348 <__mcmp+0x28>

0800e358 <__mdiff>:
 800e358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e35c:	460c      	mov	r4, r1
 800e35e:	4606      	mov	r6, r0
 800e360:	4611      	mov	r1, r2
 800e362:	4620      	mov	r0, r4
 800e364:	4690      	mov	r8, r2
 800e366:	f7ff ffdb 	bl	800e320 <__mcmp>
 800e36a:	1e05      	subs	r5, r0, #0
 800e36c:	d110      	bne.n	800e390 <__mdiff+0x38>
 800e36e:	4629      	mov	r1, r5
 800e370:	4630      	mov	r0, r6
 800e372:	f7ff fd09 	bl	800dd88 <_Balloc>
 800e376:	b930      	cbnz	r0, 800e386 <__mdiff+0x2e>
 800e378:	4b3a      	ldr	r3, [pc, #232]	; (800e464 <__mdiff+0x10c>)
 800e37a:	4602      	mov	r2, r0
 800e37c:	f240 2132 	movw	r1, #562	; 0x232
 800e380:	4839      	ldr	r0, [pc, #228]	; (800e468 <__mdiff+0x110>)
 800e382:	f001 fcc1 	bl	800fd08 <__assert_func>
 800e386:	2301      	movs	r3, #1
 800e388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e38c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e390:	bfa4      	itt	ge
 800e392:	4643      	movge	r3, r8
 800e394:	46a0      	movge	r8, r4
 800e396:	4630      	mov	r0, r6
 800e398:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e39c:	bfa6      	itte	ge
 800e39e:	461c      	movge	r4, r3
 800e3a0:	2500      	movge	r5, #0
 800e3a2:	2501      	movlt	r5, #1
 800e3a4:	f7ff fcf0 	bl	800dd88 <_Balloc>
 800e3a8:	b920      	cbnz	r0, 800e3b4 <__mdiff+0x5c>
 800e3aa:	4b2e      	ldr	r3, [pc, #184]	; (800e464 <__mdiff+0x10c>)
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e3b2:	e7e5      	b.n	800e380 <__mdiff+0x28>
 800e3b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e3b8:	6926      	ldr	r6, [r4, #16]
 800e3ba:	60c5      	str	r5, [r0, #12]
 800e3bc:	f104 0914 	add.w	r9, r4, #20
 800e3c0:	f108 0514 	add.w	r5, r8, #20
 800e3c4:	f100 0e14 	add.w	lr, r0, #20
 800e3c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e3cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e3d0:	f108 0210 	add.w	r2, r8, #16
 800e3d4:	46f2      	mov	sl, lr
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e3dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e3e0:	fa1f f883 	uxth.w	r8, r3
 800e3e4:	fa11 f18b 	uxtah	r1, r1, fp
 800e3e8:	0c1b      	lsrs	r3, r3, #16
 800e3ea:	eba1 0808 	sub.w	r8, r1, r8
 800e3ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e3f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e3f6:	fa1f f888 	uxth.w	r8, r8
 800e3fa:	1419      	asrs	r1, r3, #16
 800e3fc:	454e      	cmp	r6, r9
 800e3fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e402:	f84a 3b04 	str.w	r3, [sl], #4
 800e406:	d8e7      	bhi.n	800e3d8 <__mdiff+0x80>
 800e408:	1b33      	subs	r3, r6, r4
 800e40a:	3b15      	subs	r3, #21
 800e40c:	f023 0303 	bic.w	r3, r3, #3
 800e410:	3304      	adds	r3, #4
 800e412:	3415      	adds	r4, #21
 800e414:	42a6      	cmp	r6, r4
 800e416:	bf38      	it	cc
 800e418:	2304      	movcc	r3, #4
 800e41a:	441d      	add	r5, r3
 800e41c:	4473      	add	r3, lr
 800e41e:	469e      	mov	lr, r3
 800e420:	462e      	mov	r6, r5
 800e422:	4566      	cmp	r6, ip
 800e424:	d30e      	bcc.n	800e444 <__mdiff+0xec>
 800e426:	f10c 0203 	add.w	r2, ip, #3
 800e42a:	1b52      	subs	r2, r2, r5
 800e42c:	f022 0203 	bic.w	r2, r2, #3
 800e430:	3d03      	subs	r5, #3
 800e432:	45ac      	cmp	ip, r5
 800e434:	bf38      	it	cc
 800e436:	2200      	movcc	r2, #0
 800e438:	441a      	add	r2, r3
 800e43a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e43e:	b17b      	cbz	r3, 800e460 <__mdiff+0x108>
 800e440:	6107      	str	r7, [r0, #16]
 800e442:	e7a3      	b.n	800e38c <__mdiff+0x34>
 800e444:	f856 8b04 	ldr.w	r8, [r6], #4
 800e448:	fa11 f288 	uxtah	r2, r1, r8
 800e44c:	1414      	asrs	r4, r2, #16
 800e44e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e452:	b292      	uxth	r2, r2
 800e454:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e458:	f84e 2b04 	str.w	r2, [lr], #4
 800e45c:	1421      	asrs	r1, r4, #16
 800e45e:	e7e0      	b.n	800e422 <__mdiff+0xca>
 800e460:	3f01      	subs	r7, #1
 800e462:	e7ea      	b.n	800e43a <__mdiff+0xe2>
 800e464:	08010730 	.word	0x08010730
 800e468:	08010820 	.word	0x08010820

0800e46c <__ulp>:
 800e46c:	b082      	sub	sp, #8
 800e46e:	ed8d 0b00 	vstr	d0, [sp]
 800e472:	9b01      	ldr	r3, [sp, #4]
 800e474:	4912      	ldr	r1, [pc, #72]	; (800e4c0 <__ulp+0x54>)
 800e476:	4019      	ands	r1, r3
 800e478:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e47c:	2900      	cmp	r1, #0
 800e47e:	dd05      	ble.n	800e48c <__ulp+0x20>
 800e480:	2200      	movs	r2, #0
 800e482:	460b      	mov	r3, r1
 800e484:	ec43 2b10 	vmov	d0, r2, r3
 800e488:	b002      	add	sp, #8
 800e48a:	4770      	bx	lr
 800e48c:	4249      	negs	r1, r1
 800e48e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e492:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e496:	f04f 0200 	mov.w	r2, #0
 800e49a:	f04f 0300 	mov.w	r3, #0
 800e49e:	da04      	bge.n	800e4aa <__ulp+0x3e>
 800e4a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e4a4:	fa41 f300 	asr.w	r3, r1, r0
 800e4a8:	e7ec      	b.n	800e484 <__ulp+0x18>
 800e4aa:	f1a0 0114 	sub.w	r1, r0, #20
 800e4ae:	291e      	cmp	r1, #30
 800e4b0:	bfda      	itte	le
 800e4b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e4b6:	fa20 f101 	lsrle.w	r1, r0, r1
 800e4ba:	2101      	movgt	r1, #1
 800e4bc:	460a      	mov	r2, r1
 800e4be:	e7e1      	b.n	800e484 <__ulp+0x18>
 800e4c0:	7ff00000 	.word	0x7ff00000

0800e4c4 <__b2d>:
 800e4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4c6:	6905      	ldr	r5, [r0, #16]
 800e4c8:	f100 0714 	add.w	r7, r0, #20
 800e4cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e4d0:	1f2e      	subs	r6, r5, #4
 800e4d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f7ff fd48 	bl	800df6c <__hi0bits>
 800e4dc:	f1c0 0320 	rsb	r3, r0, #32
 800e4e0:	280a      	cmp	r0, #10
 800e4e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e560 <__b2d+0x9c>
 800e4e6:	600b      	str	r3, [r1, #0]
 800e4e8:	dc14      	bgt.n	800e514 <__b2d+0x50>
 800e4ea:	f1c0 0e0b 	rsb	lr, r0, #11
 800e4ee:	fa24 f10e 	lsr.w	r1, r4, lr
 800e4f2:	42b7      	cmp	r7, r6
 800e4f4:	ea41 030c 	orr.w	r3, r1, ip
 800e4f8:	bf34      	ite	cc
 800e4fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e4fe:	2100      	movcs	r1, #0
 800e500:	3015      	adds	r0, #21
 800e502:	fa04 f000 	lsl.w	r0, r4, r0
 800e506:	fa21 f10e 	lsr.w	r1, r1, lr
 800e50a:	ea40 0201 	orr.w	r2, r0, r1
 800e50e:	ec43 2b10 	vmov	d0, r2, r3
 800e512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e514:	42b7      	cmp	r7, r6
 800e516:	bf3a      	itte	cc
 800e518:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e51c:	f1a5 0608 	subcc.w	r6, r5, #8
 800e520:	2100      	movcs	r1, #0
 800e522:	380b      	subs	r0, #11
 800e524:	d017      	beq.n	800e556 <__b2d+0x92>
 800e526:	f1c0 0c20 	rsb	ip, r0, #32
 800e52a:	fa04 f500 	lsl.w	r5, r4, r0
 800e52e:	42be      	cmp	r6, r7
 800e530:	fa21 f40c 	lsr.w	r4, r1, ip
 800e534:	ea45 0504 	orr.w	r5, r5, r4
 800e538:	bf8c      	ite	hi
 800e53a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e53e:	2400      	movls	r4, #0
 800e540:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e544:	fa01 f000 	lsl.w	r0, r1, r0
 800e548:	fa24 f40c 	lsr.w	r4, r4, ip
 800e54c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e550:	ea40 0204 	orr.w	r2, r0, r4
 800e554:	e7db      	b.n	800e50e <__b2d+0x4a>
 800e556:	ea44 030c 	orr.w	r3, r4, ip
 800e55a:	460a      	mov	r2, r1
 800e55c:	e7d7      	b.n	800e50e <__b2d+0x4a>
 800e55e:	bf00      	nop
 800e560:	3ff00000 	.word	0x3ff00000

0800e564 <__d2b>:
 800e564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e568:	4689      	mov	r9, r1
 800e56a:	2101      	movs	r1, #1
 800e56c:	ec57 6b10 	vmov	r6, r7, d0
 800e570:	4690      	mov	r8, r2
 800e572:	f7ff fc09 	bl	800dd88 <_Balloc>
 800e576:	4604      	mov	r4, r0
 800e578:	b930      	cbnz	r0, 800e588 <__d2b+0x24>
 800e57a:	4602      	mov	r2, r0
 800e57c:	4b25      	ldr	r3, [pc, #148]	; (800e614 <__d2b+0xb0>)
 800e57e:	4826      	ldr	r0, [pc, #152]	; (800e618 <__d2b+0xb4>)
 800e580:	f240 310a 	movw	r1, #778	; 0x30a
 800e584:	f001 fbc0 	bl	800fd08 <__assert_func>
 800e588:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e58c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e590:	bb35      	cbnz	r5, 800e5e0 <__d2b+0x7c>
 800e592:	2e00      	cmp	r6, #0
 800e594:	9301      	str	r3, [sp, #4]
 800e596:	d028      	beq.n	800e5ea <__d2b+0x86>
 800e598:	4668      	mov	r0, sp
 800e59a:	9600      	str	r6, [sp, #0]
 800e59c:	f7ff fd06 	bl	800dfac <__lo0bits>
 800e5a0:	9900      	ldr	r1, [sp, #0]
 800e5a2:	b300      	cbz	r0, 800e5e6 <__d2b+0x82>
 800e5a4:	9a01      	ldr	r2, [sp, #4]
 800e5a6:	f1c0 0320 	rsb	r3, r0, #32
 800e5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ae:	430b      	orrs	r3, r1
 800e5b0:	40c2      	lsrs	r2, r0
 800e5b2:	6163      	str	r3, [r4, #20]
 800e5b4:	9201      	str	r2, [sp, #4]
 800e5b6:	9b01      	ldr	r3, [sp, #4]
 800e5b8:	61a3      	str	r3, [r4, #24]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	bf14      	ite	ne
 800e5be:	2202      	movne	r2, #2
 800e5c0:	2201      	moveq	r2, #1
 800e5c2:	6122      	str	r2, [r4, #16]
 800e5c4:	b1d5      	cbz	r5, 800e5fc <__d2b+0x98>
 800e5c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e5ca:	4405      	add	r5, r0
 800e5cc:	f8c9 5000 	str.w	r5, [r9]
 800e5d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e5d4:	f8c8 0000 	str.w	r0, [r8]
 800e5d8:	4620      	mov	r0, r4
 800e5da:	b003      	add	sp, #12
 800e5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e5e4:	e7d5      	b.n	800e592 <__d2b+0x2e>
 800e5e6:	6161      	str	r1, [r4, #20]
 800e5e8:	e7e5      	b.n	800e5b6 <__d2b+0x52>
 800e5ea:	a801      	add	r0, sp, #4
 800e5ec:	f7ff fcde 	bl	800dfac <__lo0bits>
 800e5f0:	9b01      	ldr	r3, [sp, #4]
 800e5f2:	6163      	str	r3, [r4, #20]
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	6122      	str	r2, [r4, #16]
 800e5f8:	3020      	adds	r0, #32
 800e5fa:	e7e3      	b.n	800e5c4 <__d2b+0x60>
 800e5fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e600:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e604:	f8c9 0000 	str.w	r0, [r9]
 800e608:	6918      	ldr	r0, [r3, #16]
 800e60a:	f7ff fcaf 	bl	800df6c <__hi0bits>
 800e60e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e612:	e7df      	b.n	800e5d4 <__d2b+0x70>
 800e614:	08010730 	.word	0x08010730
 800e618:	08010820 	.word	0x08010820

0800e61c <__ratio>:
 800e61c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e620:	4688      	mov	r8, r1
 800e622:	4669      	mov	r1, sp
 800e624:	4681      	mov	r9, r0
 800e626:	f7ff ff4d 	bl	800e4c4 <__b2d>
 800e62a:	a901      	add	r1, sp, #4
 800e62c:	4640      	mov	r0, r8
 800e62e:	ec55 4b10 	vmov	r4, r5, d0
 800e632:	f7ff ff47 	bl	800e4c4 <__b2d>
 800e636:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e63a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e63e:	eba3 0c02 	sub.w	ip, r3, r2
 800e642:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e646:	1a9b      	subs	r3, r3, r2
 800e648:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e64c:	ec51 0b10 	vmov	r0, r1, d0
 800e650:	2b00      	cmp	r3, #0
 800e652:	bfd6      	itet	le
 800e654:	460a      	movle	r2, r1
 800e656:	462a      	movgt	r2, r5
 800e658:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e65c:	468b      	mov	fp, r1
 800e65e:	462f      	mov	r7, r5
 800e660:	bfd4      	ite	le
 800e662:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e666:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e66a:	4620      	mov	r0, r4
 800e66c:	ee10 2a10 	vmov	r2, s0
 800e670:	465b      	mov	r3, fp
 800e672:	4639      	mov	r1, r7
 800e674:	f7f2 f90a 	bl	800088c <__aeabi_ddiv>
 800e678:	ec41 0b10 	vmov	d0, r0, r1
 800e67c:	b003      	add	sp, #12
 800e67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e682 <__copybits>:
 800e682:	3901      	subs	r1, #1
 800e684:	b570      	push	{r4, r5, r6, lr}
 800e686:	1149      	asrs	r1, r1, #5
 800e688:	6914      	ldr	r4, [r2, #16]
 800e68a:	3101      	adds	r1, #1
 800e68c:	f102 0314 	add.w	r3, r2, #20
 800e690:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e694:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e698:	1f05      	subs	r5, r0, #4
 800e69a:	42a3      	cmp	r3, r4
 800e69c:	d30c      	bcc.n	800e6b8 <__copybits+0x36>
 800e69e:	1aa3      	subs	r3, r4, r2
 800e6a0:	3b11      	subs	r3, #17
 800e6a2:	f023 0303 	bic.w	r3, r3, #3
 800e6a6:	3211      	adds	r2, #17
 800e6a8:	42a2      	cmp	r2, r4
 800e6aa:	bf88      	it	hi
 800e6ac:	2300      	movhi	r3, #0
 800e6ae:	4418      	add	r0, r3
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	4288      	cmp	r0, r1
 800e6b4:	d305      	bcc.n	800e6c2 <__copybits+0x40>
 800e6b6:	bd70      	pop	{r4, r5, r6, pc}
 800e6b8:	f853 6b04 	ldr.w	r6, [r3], #4
 800e6bc:	f845 6f04 	str.w	r6, [r5, #4]!
 800e6c0:	e7eb      	b.n	800e69a <__copybits+0x18>
 800e6c2:	f840 3b04 	str.w	r3, [r0], #4
 800e6c6:	e7f4      	b.n	800e6b2 <__copybits+0x30>

0800e6c8 <__any_on>:
 800e6c8:	f100 0214 	add.w	r2, r0, #20
 800e6cc:	6900      	ldr	r0, [r0, #16]
 800e6ce:	114b      	asrs	r3, r1, #5
 800e6d0:	4298      	cmp	r0, r3
 800e6d2:	b510      	push	{r4, lr}
 800e6d4:	db11      	blt.n	800e6fa <__any_on+0x32>
 800e6d6:	dd0a      	ble.n	800e6ee <__any_on+0x26>
 800e6d8:	f011 011f 	ands.w	r1, r1, #31
 800e6dc:	d007      	beq.n	800e6ee <__any_on+0x26>
 800e6de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e6e2:	fa24 f001 	lsr.w	r0, r4, r1
 800e6e6:	fa00 f101 	lsl.w	r1, r0, r1
 800e6ea:	428c      	cmp	r4, r1
 800e6ec:	d10b      	bne.n	800e706 <__any_on+0x3e>
 800e6ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d803      	bhi.n	800e6fe <__any_on+0x36>
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	bd10      	pop	{r4, pc}
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	e7f7      	b.n	800e6ee <__any_on+0x26>
 800e6fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e702:	2900      	cmp	r1, #0
 800e704:	d0f5      	beq.n	800e6f2 <__any_on+0x2a>
 800e706:	2001      	movs	r0, #1
 800e708:	e7f6      	b.n	800e6f8 <__any_on+0x30>

0800e70a <_calloc_r>:
 800e70a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e70c:	fba1 2402 	umull	r2, r4, r1, r2
 800e710:	b94c      	cbnz	r4, 800e726 <_calloc_r+0x1c>
 800e712:	4611      	mov	r1, r2
 800e714:	9201      	str	r2, [sp, #4]
 800e716:	f000 f87b 	bl	800e810 <_malloc_r>
 800e71a:	9a01      	ldr	r2, [sp, #4]
 800e71c:	4605      	mov	r5, r0
 800e71e:	b930      	cbnz	r0, 800e72e <_calloc_r+0x24>
 800e720:	4628      	mov	r0, r5
 800e722:	b003      	add	sp, #12
 800e724:	bd30      	pop	{r4, r5, pc}
 800e726:	220c      	movs	r2, #12
 800e728:	6002      	str	r2, [r0, #0]
 800e72a:	2500      	movs	r5, #0
 800e72c:	e7f8      	b.n	800e720 <_calloc_r+0x16>
 800e72e:	4621      	mov	r1, r4
 800e730:	f7fb fe86 	bl	800a440 <memset>
 800e734:	e7f4      	b.n	800e720 <_calloc_r+0x16>
	...

0800e738 <_free_r>:
 800e738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e73a:	2900      	cmp	r1, #0
 800e73c:	d044      	beq.n	800e7c8 <_free_r+0x90>
 800e73e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e742:	9001      	str	r0, [sp, #4]
 800e744:	2b00      	cmp	r3, #0
 800e746:	f1a1 0404 	sub.w	r4, r1, #4
 800e74a:	bfb8      	it	lt
 800e74c:	18e4      	addlt	r4, r4, r3
 800e74e:	f001 fb47 	bl	800fde0 <__malloc_lock>
 800e752:	4a1e      	ldr	r2, [pc, #120]	; (800e7cc <_free_r+0x94>)
 800e754:	9801      	ldr	r0, [sp, #4]
 800e756:	6813      	ldr	r3, [r2, #0]
 800e758:	b933      	cbnz	r3, 800e768 <_free_r+0x30>
 800e75a:	6063      	str	r3, [r4, #4]
 800e75c:	6014      	str	r4, [r2, #0]
 800e75e:	b003      	add	sp, #12
 800e760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e764:	f001 bb42 	b.w	800fdec <__malloc_unlock>
 800e768:	42a3      	cmp	r3, r4
 800e76a:	d908      	bls.n	800e77e <_free_r+0x46>
 800e76c:	6825      	ldr	r5, [r4, #0]
 800e76e:	1961      	adds	r1, r4, r5
 800e770:	428b      	cmp	r3, r1
 800e772:	bf01      	itttt	eq
 800e774:	6819      	ldreq	r1, [r3, #0]
 800e776:	685b      	ldreq	r3, [r3, #4]
 800e778:	1949      	addeq	r1, r1, r5
 800e77a:	6021      	streq	r1, [r4, #0]
 800e77c:	e7ed      	b.n	800e75a <_free_r+0x22>
 800e77e:	461a      	mov	r2, r3
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	b10b      	cbz	r3, 800e788 <_free_r+0x50>
 800e784:	42a3      	cmp	r3, r4
 800e786:	d9fa      	bls.n	800e77e <_free_r+0x46>
 800e788:	6811      	ldr	r1, [r2, #0]
 800e78a:	1855      	adds	r5, r2, r1
 800e78c:	42a5      	cmp	r5, r4
 800e78e:	d10b      	bne.n	800e7a8 <_free_r+0x70>
 800e790:	6824      	ldr	r4, [r4, #0]
 800e792:	4421      	add	r1, r4
 800e794:	1854      	adds	r4, r2, r1
 800e796:	42a3      	cmp	r3, r4
 800e798:	6011      	str	r1, [r2, #0]
 800e79a:	d1e0      	bne.n	800e75e <_free_r+0x26>
 800e79c:	681c      	ldr	r4, [r3, #0]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	6053      	str	r3, [r2, #4]
 800e7a2:	4421      	add	r1, r4
 800e7a4:	6011      	str	r1, [r2, #0]
 800e7a6:	e7da      	b.n	800e75e <_free_r+0x26>
 800e7a8:	d902      	bls.n	800e7b0 <_free_r+0x78>
 800e7aa:	230c      	movs	r3, #12
 800e7ac:	6003      	str	r3, [r0, #0]
 800e7ae:	e7d6      	b.n	800e75e <_free_r+0x26>
 800e7b0:	6825      	ldr	r5, [r4, #0]
 800e7b2:	1961      	adds	r1, r4, r5
 800e7b4:	428b      	cmp	r3, r1
 800e7b6:	bf04      	itt	eq
 800e7b8:	6819      	ldreq	r1, [r3, #0]
 800e7ba:	685b      	ldreq	r3, [r3, #4]
 800e7bc:	6063      	str	r3, [r4, #4]
 800e7be:	bf04      	itt	eq
 800e7c0:	1949      	addeq	r1, r1, r5
 800e7c2:	6021      	streq	r1, [r4, #0]
 800e7c4:	6054      	str	r4, [r2, #4]
 800e7c6:	e7ca      	b.n	800e75e <_free_r+0x26>
 800e7c8:	b003      	add	sp, #12
 800e7ca:	bd30      	pop	{r4, r5, pc}
 800e7cc:	200004d4 	.word	0x200004d4

0800e7d0 <sbrk_aligned>:
 800e7d0:	b570      	push	{r4, r5, r6, lr}
 800e7d2:	4e0e      	ldr	r6, [pc, #56]	; (800e80c <sbrk_aligned+0x3c>)
 800e7d4:	460c      	mov	r4, r1
 800e7d6:	6831      	ldr	r1, [r6, #0]
 800e7d8:	4605      	mov	r5, r0
 800e7da:	b911      	cbnz	r1, 800e7e2 <sbrk_aligned+0x12>
 800e7dc:	f001 f8e4 	bl	800f9a8 <_sbrk_r>
 800e7e0:	6030      	str	r0, [r6, #0]
 800e7e2:	4621      	mov	r1, r4
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	f001 f8df 	bl	800f9a8 <_sbrk_r>
 800e7ea:	1c43      	adds	r3, r0, #1
 800e7ec:	d00a      	beq.n	800e804 <sbrk_aligned+0x34>
 800e7ee:	1cc4      	adds	r4, r0, #3
 800e7f0:	f024 0403 	bic.w	r4, r4, #3
 800e7f4:	42a0      	cmp	r0, r4
 800e7f6:	d007      	beq.n	800e808 <sbrk_aligned+0x38>
 800e7f8:	1a21      	subs	r1, r4, r0
 800e7fa:	4628      	mov	r0, r5
 800e7fc:	f001 f8d4 	bl	800f9a8 <_sbrk_r>
 800e800:	3001      	adds	r0, #1
 800e802:	d101      	bne.n	800e808 <sbrk_aligned+0x38>
 800e804:	f04f 34ff 	mov.w	r4, #4294967295
 800e808:	4620      	mov	r0, r4
 800e80a:	bd70      	pop	{r4, r5, r6, pc}
 800e80c:	200004d8 	.word	0x200004d8

0800e810 <_malloc_r>:
 800e810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e814:	1ccd      	adds	r5, r1, #3
 800e816:	f025 0503 	bic.w	r5, r5, #3
 800e81a:	3508      	adds	r5, #8
 800e81c:	2d0c      	cmp	r5, #12
 800e81e:	bf38      	it	cc
 800e820:	250c      	movcc	r5, #12
 800e822:	2d00      	cmp	r5, #0
 800e824:	4607      	mov	r7, r0
 800e826:	db01      	blt.n	800e82c <_malloc_r+0x1c>
 800e828:	42a9      	cmp	r1, r5
 800e82a:	d905      	bls.n	800e838 <_malloc_r+0x28>
 800e82c:	230c      	movs	r3, #12
 800e82e:	603b      	str	r3, [r7, #0]
 800e830:	2600      	movs	r6, #0
 800e832:	4630      	mov	r0, r6
 800e834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e838:	4e2e      	ldr	r6, [pc, #184]	; (800e8f4 <_malloc_r+0xe4>)
 800e83a:	f001 fad1 	bl	800fde0 <__malloc_lock>
 800e83e:	6833      	ldr	r3, [r6, #0]
 800e840:	461c      	mov	r4, r3
 800e842:	bb34      	cbnz	r4, 800e892 <_malloc_r+0x82>
 800e844:	4629      	mov	r1, r5
 800e846:	4638      	mov	r0, r7
 800e848:	f7ff ffc2 	bl	800e7d0 <sbrk_aligned>
 800e84c:	1c43      	adds	r3, r0, #1
 800e84e:	4604      	mov	r4, r0
 800e850:	d14d      	bne.n	800e8ee <_malloc_r+0xde>
 800e852:	6834      	ldr	r4, [r6, #0]
 800e854:	4626      	mov	r6, r4
 800e856:	2e00      	cmp	r6, #0
 800e858:	d140      	bne.n	800e8dc <_malloc_r+0xcc>
 800e85a:	6823      	ldr	r3, [r4, #0]
 800e85c:	4631      	mov	r1, r6
 800e85e:	4638      	mov	r0, r7
 800e860:	eb04 0803 	add.w	r8, r4, r3
 800e864:	f001 f8a0 	bl	800f9a8 <_sbrk_r>
 800e868:	4580      	cmp	r8, r0
 800e86a:	d13a      	bne.n	800e8e2 <_malloc_r+0xd2>
 800e86c:	6821      	ldr	r1, [r4, #0]
 800e86e:	3503      	adds	r5, #3
 800e870:	1a6d      	subs	r5, r5, r1
 800e872:	f025 0503 	bic.w	r5, r5, #3
 800e876:	3508      	adds	r5, #8
 800e878:	2d0c      	cmp	r5, #12
 800e87a:	bf38      	it	cc
 800e87c:	250c      	movcc	r5, #12
 800e87e:	4629      	mov	r1, r5
 800e880:	4638      	mov	r0, r7
 800e882:	f7ff ffa5 	bl	800e7d0 <sbrk_aligned>
 800e886:	3001      	adds	r0, #1
 800e888:	d02b      	beq.n	800e8e2 <_malloc_r+0xd2>
 800e88a:	6823      	ldr	r3, [r4, #0]
 800e88c:	442b      	add	r3, r5
 800e88e:	6023      	str	r3, [r4, #0]
 800e890:	e00e      	b.n	800e8b0 <_malloc_r+0xa0>
 800e892:	6822      	ldr	r2, [r4, #0]
 800e894:	1b52      	subs	r2, r2, r5
 800e896:	d41e      	bmi.n	800e8d6 <_malloc_r+0xc6>
 800e898:	2a0b      	cmp	r2, #11
 800e89a:	d916      	bls.n	800e8ca <_malloc_r+0xba>
 800e89c:	1961      	adds	r1, r4, r5
 800e89e:	42a3      	cmp	r3, r4
 800e8a0:	6025      	str	r5, [r4, #0]
 800e8a2:	bf18      	it	ne
 800e8a4:	6059      	strne	r1, [r3, #4]
 800e8a6:	6863      	ldr	r3, [r4, #4]
 800e8a8:	bf08      	it	eq
 800e8aa:	6031      	streq	r1, [r6, #0]
 800e8ac:	5162      	str	r2, [r4, r5]
 800e8ae:	604b      	str	r3, [r1, #4]
 800e8b0:	4638      	mov	r0, r7
 800e8b2:	f104 060b 	add.w	r6, r4, #11
 800e8b6:	f001 fa99 	bl	800fdec <__malloc_unlock>
 800e8ba:	f026 0607 	bic.w	r6, r6, #7
 800e8be:	1d23      	adds	r3, r4, #4
 800e8c0:	1af2      	subs	r2, r6, r3
 800e8c2:	d0b6      	beq.n	800e832 <_malloc_r+0x22>
 800e8c4:	1b9b      	subs	r3, r3, r6
 800e8c6:	50a3      	str	r3, [r4, r2]
 800e8c8:	e7b3      	b.n	800e832 <_malloc_r+0x22>
 800e8ca:	6862      	ldr	r2, [r4, #4]
 800e8cc:	42a3      	cmp	r3, r4
 800e8ce:	bf0c      	ite	eq
 800e8d0:	6032      	streq	r2, [r6, #0]
 800e8d2:	605a      	strne	r2, [r3, #4]
 800e8d4:	e7ec      	b.n	800e8b0 <_malloc_r+0xa0>
 800e8d6:	4623      	mov	r3, r4
 800e8d8:	6864      	ldr	r4, [r4, #4]
 800e8da:	e7b2      	b.n	800e842 <_malloc_r+0x32>
 800e8dc:	4634      	mov	r4, r6
 800e8de:	6876      	ldr	r6, [r6, #4]
 800e8e0:	e7b9      	b.n	800e856 <_malloc_r+0x46>
 800e8e2:	230c      	movs	r3, #12
 800e8e4:	603b      	str	r3, [r7, #0]
 800e8e6:	4638      	mov	r0, r7
 800e8e8:	f001 fa80 	bl	800fdec <__malloc_unlock>
 800e8ec:	e7a1      	b.n	800e832 <_malloc_r+0x22>
 800e8ee:	6025      	str	r5, [r4, #0]
 800e8f0:	e7de      	b.n	800e8b0 <_malloc_r+0xa0>
 800e8f2:	bf00      	nop
 800e8f4:	200004d4 	.word	0x200004d4

0800e8f8 <__ssputs_r>:
 800e8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8fc:	688e      	ldr	r6, [r1, #8]
 800e8fe:	429e      	cmp	r6, r3
 800e900:	4682      	mov	sl, r0
 800e902:	460c      	mov	r4, r1
 800e904:	4690      	mov	r8, r2
 800e906:	461f      	mov	r7, r3
 800e908:	d838      	bhi.n	800e97c <__ssputs_r+0x84>
 800e90a:	898a      	ldrh	r2, [r1, #12]
 800e90c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e910:	d032      	beq.n	800e978 <__ssputs_r+0x80>
 800e912:	6825      	ldr	r5, [r4, #0]
 800e914:	6909      	ldr	r1, [r1, #16]
 800e916:	eba5 0901 	sub.w	r9, r5, r1
 800e91a:	6965      	ldr	r5, [r4, #20]
 800e91c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e920:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e924:	3301      	adds	r3, #1
 800e926:	444b      	add	r3, r9
 800e928:	106d      	asrs	r5, r5, #1
 800e92a:	429d      	cmp	r5, r3
 800e92c:	bf38      	it	cc
 800e92e:	461d      	movcc	r5, r3
 800e930:	0553      	lsls	r3, r2, #21
 800e932:	d531      	bpl.n	800e998 <__ssputs_r+0xa0>
 800e934:	4629      	mov	r1, r5
 800e936:	f7ff ff6b 	bl	800e810 <_malloc_r>
 800e93a:	4606      	mov	r6, r0
 800e93c:	b950      	cbnz	r0, 800e954 <__ssputs_r+0x5c>
 800e93e:	230c      	movs	r3, #12
 800e940:	f8ca 3000 	str.w	r3, [sl]
 800e944:	89a3      	ldrh	r3, [r4, #12]
 800e946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e94a:	81a3      	strh	r3, [r4, #12]
 800e94c:	f04f 30ff 	mov.w	r0, #4294967295
 800e950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e954:	6921      	ldr	r1, [r4, #16]
 800e956:	464a      	mov	r2, r9
 800e958:	f7ff fa08 	bl	800dd6c <memcpy>
 800e95c:	89a3      	ldrh	r3, [r4, #12]
 800e95e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e966:	81a3      	strh	r3, [r4, #12]
 800e968:	6126      	str	r6, [r4, #16]
 800e96a:	6165      	str	r5, [r4, #20]
 800e96c:	444e      	add	r6, r9
 800e96e:	eba5 0509 	sub.w	r5, r5, r9
 800e972:	6026      	str	r6, [r4, #0]
 800e974:	60a5      	str	r5, [r4, #8]
 800e976:	463e      	mov	r6, r7
 800e978:	42be      	cmp	r6, r7
 800e97a:	d900      	bls.n	800e97e <__ssputs_r+0x86>
 800e97c:	463e      	mov	r6, r7
 800e97e:	6820      	ldr	r0, [r4, #0]
 800e980:	4632      	mov	r2, r6
 800e982:	4641      	mov	r1, r8
 800e984:	f001 fa12 	bl	800fdac <memmove>
 800e988:	68a3      	ldr	r3, [r4, #8]
 800e98a:	1b9b      	subs	r3, r3, r6
 800e98c:	60a3      	str	r3, [r4, #8]
 800e98e:	6823      	ldr	r3, [r4, #0]
 800e990:	4433      	add	r3, r6
 800e992:	6023      	str	r3, [r4, #0]
 800e994:	2000      	movs	r0, #0
 800e996:	e7db      	b.n	800e950 <__ssputs_r+0x58>
 800e998:	462a      	mov	r2, r5
 800e99a:	f001 fa2d 	bl	800fdf8 <_realloc_r>
 800e99e:	4606      	mov	r6, r0
 800e9a0:	2800      	cmp	r0, #0
 800e9a2:	d1e1      	bne.n	800e968 <__ssputs_r+0x70>
 800e9a4:	6921      	ldr	r1, [r4, #16]
 800e9a6:	4650      	mov	r0, sl
 800e9a8:	f7ff fec6 	bl	800e738 <_free_r>
 800e9ac:	e7c7      	b.n	800e93e <__ssputs_r+0x46>
	...

0800e9b0 <_svfiprintf_r>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	4698      	mov	r8, r3
 800e9b6:	898b      	ldrh	r3, [r1, #12]
 800e9b8:	061b      	lsls	r3, r3, #24
 800e9ba:	b09d      	sub	sp, #116	; 0x74
 800e9bc:	4607      	mov	r7, r0
 800e9be:	460d      	mov	r5, r1
 800e9c0:	4614      	mov	r4, r2
 800e9c2:	d50e      	bpl.n	800e9e2 <_svfiprintf_r+0x32>
 800e9c4:	690b      	ldr	r3, [r1, #16]
 800e9c6:	b963      	cbnz	r3, 800e9e2 <_svfiprintf_r+0x32>
 800e9c8:	2140      	movs	r1, #64	; 0x40
 800e9ca:	f7ff ff21 	bl	800e810 <_malloc_r>
 800e9ce:	6028      	str	r0, [r5, #0]
 800e9d0:	6128      	str	r0, [r5, #16]
 800e9d2:	b920      	cbnz	r0, 800e9de <_svfiprintf_r+0x2e>
 800e9d4:	230c      	movs	r3, #12
 800e9d6:	603b      	str	r3, [r7, #0]
 800e9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9dc:	e0d1      	b.n	800eb82 <_svfiprintf_r+0x1d2>
 800e9de:	2340      	movs	r3, #64	; 0x40
 800e9e0:	616b      	str	r3, [r5, #20]
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e9e6:	2320      	movs	r3, #32
 800e9e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9f0:	2330      	movs	r3, #48	; 0x30
 800e9f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eb9c <_svfiprintf_r+0x1ec>
 800e9f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9fa:	f04f 0901 	mov.w	r9, #1
 800e9fe:	4623      	mov	r3, r4
 800ea00:	469a      	mov	sl, r3
 800ea02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea06:	b10a      	cbz	r2, 800ea0c <_svfiprintf_r+0x5c>
 800ea08:	2a25      	cmp	r2, #37	; 0x25
 800ea0a:	d1f9      	bne.n	800ea00 <_svfiprintf_r+0x50>
 800ea0c:	ebba 0b04 	subs.w	fp, sl, r4
 800ea10:	d00b      	beq.n	800ea2a <_svfiprintf_r+0x7a>
 800ea12:	465b      	mov	r3, fp
 800ea14:	4622      	mov	r2, r4
 800ea16:	4629      	mov	r1, r5
 800ea18:	4638      	mov	r0, r7
 800ea1a:	f7ff ff6d 	bl	800e8f8 <__ssputs_r>
 800ea1e:	3001      	adds	r0, #1
 800ea20:	f000 80aa 	beq.w	800eb78 <_svfiprintf_r+0x1c8>
 800ea24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea26:	445a      	add	r2, fp
 800ea28:	9209      	str	r2, [sp, #36]	; 0x24
 800ea2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	f000 80a2 	beq.w	800eb78 <_svfiprintf_r+0x1c8>
 800ea34:	2300      	movs	r3, #0
 800ea36:	f04f 32ff 	mov.w	r2, #4294967295
 800ea3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea3e:	f10a 0a01 	add.w	sl, sl, #1
 800ea42:	9304      	str	r3, [sp, #16]
 800ea44:	9307      	str	r3, [sp, #28]
 800ea46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea4a:	931a      	str	r3, [sp, #104]	; 0x68
 800ea4c:	4654      	mov	r4, sl
 800ea4e:	2205      	movs	r2, #5
 800ea50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea54:	4851      	ldr	r0, [pc, #324]	; (800eb9c <_svfiprintf_r+0x1ec>)
 800ea56:	f7f1 fbe3 	bl	8000220 <memchr>
 800ea5a:	9a04      	ldr	r2, [sp, #16]
 800ea5c:	b9d8      	cbnz	r0, 800ea96 <_svfiprintf_r+0xe6>
 800ea5e:	06d0      	lsls	r0, r2, #27
 800ea60:	bf44      	itt	mi
 800ea62:	2320      	movmi	r3, #32
 800ea64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea68:	0711      	lsls	r1, r2, #28
 800ea6a:	bf44      	itt	mi
 800ea6c:	232b      	movmi	r3, #43	; 0x2b
 800ea6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea72:	f89a 3000 	ldrb.w	r3, [sl]
 800ea76:	2b2a      	cmp	r3, #42	; 0x2a
 800ea78:	d015      	beq.n	800eaa6 <_svfiprintf_r+0xf6>
 800ea7a:	9a07      	ldr	r2, [sp, #28]
 800ea7c:	4654      	mov	r4, sl
 800ea7e:	2000      	movs	r0, #0
 800ea80:	f04f 0c0a 	mov.w	ip, #10
 800ea84:	4621      	mov	r1, r4
 800ea86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea8a:	3b30      	subs	r3, #48	; 0x30
 800ea8c:	2b09      	cmp	r3, #9
 800ea8e:	d94e      	bls.n	800eb2e <_svfiprintf_r+0x17e>
 800ea90:	b1b0      	cbz	r0, 800eac0 <_svfiprintf_r+0x110>
 800ea92:	9207      	str	r2, [sp, #28]
 800ea94:	e014      	b.n	800eac0 <_svfiprintf_r+0x110>
 800ea96:	eba0 0308 	sub.w	r3, r0, r8
 800ea9a:	fa09 f303 	lsl.w	r3, r9, r3
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	9304      	str	r3, [sp, #16]
 800eaa2:	46a2      	mov	sl, r4
 800eaa4:	e7d2      	b.n	800ea4c <_svfiprintf_r+0x9c>
 800eaa6:	9b03      	ldr	r3, [sp, #12]
 800eaa8:	1d19      	adds	r1, r3, #4
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	9103      	str	r1, [sp, #12]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	bfbb      	ittet	lt
 800eab2:	425b      	neglt	r3, r3
 800eab4:	f042 0202 	orrlt.w	r2, r2, #2
 800eab8:	9307      	strge	r3, [sp, #28]
 800eaba:	9307      	strlt	r3, [sp, #28]
 800eabc:	bfb8      	it	lt
 800eabe:	9204      	strlt	r2, [sp, #16]
 800eac0:	7823      	ldrb	r3, [r4, #0]
 800eac2:	2b2e      	cmp	r3, #46	; 0x2e
 800eac4:	d10c      	bne.n	800eae0 <_svfiprintf_r+0x130>
 800eac6:	7863      	ldrb	r3, [r4, #1]
 800eac8:	2b2a      	cmp	r3, #42	; 0x2a
 800eaca:	d135      	bne.n	800eb38 <_svfiprintf_r+0x188>
 800eacc:	9b03      	ldr	r3, [sp, #12]
 800eace:	1d1a      	adds	r2, r3, #4
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	9203      	str	r2, [sp, #12]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	bfb8      	it	lt
 800ead8:	f04f 33ff 	movlt.w	r3, #4294967295
 800eadc:	3402      	adds	r4, #2
 800eade:	9305      	str	r3, [sp, #20]
 800eae0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ebac <_svfiprintf_r+0x1fc>
 800eae4:	7821      	ldrb	r1, [r4, #0]
 800eae6:	2203      	movs	r2, #3
 800eae8:	4650      	mov	r0, sl
 800eaea:	f7f1 fb99 	bl	8000220 <memchr>
 800eaee:	b140      	cbz	r0, 800eb02 <_svfiprintf_r+0x152>
 800eaf0:	2340      	movs	r3, #64	; 0x40
 800eaf2:	eba0 000a 	sub.w	r0, r0, sl
 800eaf6:	fa03 f000 	lsl.w	r0, r3, r0
 800eafa:	9b04      	ldr	r3, [sp, #16]
 800eafc:	4303      	orrs	r3, r0
 800eafe:	3401      	adds	r4, #1
 800eb00:	9304      	str	r3, [sp, #16]
 800eb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb06:	4826      	ldr	r0, [pc, #152]	; (800eba0 <_svfiprintf_r+0x1f0>)
 800eb08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb0c:	2206      	movs	r2, #6
 800eb0e:	f7f1 fb87 	bl	8000220 <memchr>
 800eb12:	2800      	cmp	r0, #0
 800eb14:	d038      	beq.n	800eb88 <_svfiprintf_r+0x1d8>
 800eb16:	4b23      	ldr	r3, [pc, #140]	; (800eba4 <_svfiprintf_r+0x1f4>)
 800eb18:	bb1b      	cbnz	r3, 800eb62 <_svfiprintf_r+0x1b2>
 800eb1a:	9b03      	ldr	r3, [sp, #12]
 800eb1c:	3307      	adds	r3, #7
 800eb1e:	f023 0307 	bic.w	r3, r3, #7
 800eb22:	3308      	adds	r3, #8
 800eb24:	9303      	str	r3, [sp, #12]
 800eb26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb28:	4433      	add	r3, r6
 800eb2a:	9309      	str	r3, [sp, #36]	; 0x24
 800eb2c:	e767      	b.n	800e9fe <_svfiprintf_r+0x4e>
 800eb2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb32:	460c      	mov	r4, r1
 800eb34:	2001      	movs	r0, #1
 800eb36:	e7a5      	b.n	800ea84 <_svfiprintf_r+0xd4>
 800eb38:	2300      	movs	r3, #0
 800eb3a:	3401      	adds	r4, #1
 800eb3c:	9305      	str	r3, [sp, #20]
 800eb3e:	4619      	mov	r1, r3
 800eb40:	f04f 0c0a 	mov.w	ip, #10
 800eb44:	4620      	mov	r0, r4
 800eb46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb4a:	3a30      	subs	r2, #48	; 0x30
 800eb4c:	2a09      	cmp	r2, #9
 800eb4e:	d903      	bls.n	800eb58 <_svfiprintf_r+0x1a8>
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d0c5      	beq.n	800eae0 <_svfiprintf_r+0x130>
 800eb54:	9105      	str	r1, [sp, #20]
 800eb56:	e7c3      	b.n	800eae0 <_svfiprintf_r+0x130>
 800eb58:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb5c:	4604      	mov	r4, r0
 800eb5e:	2301      	movs	r3, #1
 800eb60:	e7f0      	b.n	800eb44 <_svfiprintf_r+0x194>
 800eb62:	ab03      	add	r3, sp, #12
 800eb64:	9300      	str	r3, [sp, #0]
 800eb66:	462a      	mov	r2, r5
 800eb68:	4b0f      	ldr	r3, [pc, #60]	; (800eba8 <_svfiprintf_r+0x1f8>)
 800eb6a:	a904      	add	r1, sp, #16
 800eb6c:	4638      	mov	r0, r7
 800eb6e:	f7fb fd0f 	bl	800a590 <_printf_float>
 800eb72:	1c42      	adds	r2, r0, #1
 800eb74:	4606      	mov	r6, r0
 800eb76:	d1d6      	bne.n	800eb26 <_svfiprintf_r+0x176>
 800eb78:	89ab      	ldrh	r3, [r5, #12]
 800eb7a:	065b      	lsls	r3, r3, #25
 800eb7c:	f53f af2c 	bmi.w	800e9d8 <_svfiprintf_r+0x28>
 800eb80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb82:	b01d      	add	sp, #116	; 0x74
 800eb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb88:	ab03      	add	r3, sp, #12
 800eb8a:	9300      	str	r3, [sp, #0]
 800eb8c:	462a      	mov	r2, r5
 800eb8e:	4b06      	ldr	r3, [pc, #24]	; (800eba8 <_svfiprintf_r+0x1f8>)
 800eb90:	a904      	add	r1, sp, #16
 800eb92:	4638      	mov	r0, r7
 800eb94:	f7fb ffa0 	bl	800aad8 <_printf_i>
 800eb98:	e7eb      	b.n	800eb72 <_svfiprintf_r+0x1c2>
 800eb9a:	bf00      	nop
 800eb9c:	0801097c 	.word	0x0801097c
 800eba0:	08010986 	.word	0x08010986
 800eba4:	0800a591 	.word	0x0800a591
 800eba8:	0800e8f9 	.word	0x0800e8f9
 800ebac:	08010982 	.word	0x08010982

0800ebb0 <_sungetc_r>:
 800ebb0:	b538      	push	{r3, r4, r5, lr}
 800ebb2:	1c4b      	adds	r3, r1, #1
 800ebb4:	4614      	mov	r4, r2
 800ebb6:	d103      	bne.n	800ebc0 <_sungetc_r+0x10>
 800ebb8:	f04f 35ff 	mov.w	r5, #4294967295
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	bd38      	pop	{r3, r4, r5, pc}
 800ebc0:	8993      	ldrh	r3, [r2, #12]
 800ebc2:	f023 0320 	bic.w	r3, r3, #32
 800ebc6:	8193      	strh	r3, [r2, #12]
 800ebc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebca:	6852      	ldr	r2, [r2, #4]
 800ebcc:	b2cd      	uxtb	r5, r1
 800ebce:	b18b      	cbz	r3, 800ebf4 <_sungetc_r+0x44>
 800ebd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	dd08      	ble.n	800ebe8 <_sungetc_r+0x38>
 800ebd6:	6823      	ldr	r3, [r4, #0]
 800ebd8:	1e5a      	subs	r2, r3, #1
 800ebda:	6022      	str	r2, [r4, #0]
 800ebdc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ebe0:	6863      	ldr	r3, [r4, #4]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	6063      	str	r3, [r4, #4]
 800ebe6:	e7e9      	b.n	800ebbc <_sungetc_r+0xc>
 800ebe8:	4621      	mov	r1, r4
 800ebea:	f000 ffad 	bl	800fb48 <__submore>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d0f1      	beq.n	800ebd6 <_sungetc_r+0x26>
 800ebf2:	e7e1      	b.n	800ebb8 <_sungetc_r+0x8>
 800ebf4:	6921      	ldr	r1, [r4, #16]
 800ebf6:	6823      	ldr	r3, [r4, #0]
 800ebf8:	b151      	cbz	r1, 800ec10 <_sungetc_r+0x60>
 800ebfa:	4299      	cmp	r1, r3
 800ebfc:	d208      	bcs.n	800ec10 <_sungetc_r+0x60>
 800ebfe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ec02:	42a9      	cmp	r1, r5
 800ec04:	d104      	bne.n	800ec10 <_sungetc_r+0x60>
 800ec06:	3b01      	subs	r3, #1
 800ec08:	3201      	adds	r2, #1
 800ec0a:	6023      	str	r3, [r4, #0]
 800ec0c:	6062      	str	r2, [r4, #4]
 800ec0e:	e7d5      	b.n	800ebbc <_sungetc_r+0xc>
 800ec10:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ec14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec18:	6363      	str	r3, [r4, #52]	; 0x34
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ec1e:	4623      	mov	r3, r4
 800ec20:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ec24:	6023      	str	r3, [r4, #0]
 800ec26:	2301      	movs	r3, #1
 800ec28:	e7dc      	b.n	800ebe4 <_sungetc_r+0x34>

0800ec2a <__ssrefill_r>:
 800ec2a:	b510      	push	{r4, lr}
 800ec2c:	460c      	mov	r4, r1
 800ec2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ec30:	b169      	cbz	r1, 800ec4e <__ssrefill_r+0x24>
 800ec32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec36:	4299      	cmp	r1, r3
 800ec38:	d001      	beq.n	800ec3e <__ssrefill_r+0x14>
 800ec3a:	f7ff fd7d 	bl	800e738 <_free_r>
 800ec3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec40:	6063      	str	r3, [r4, #4]
 800ec42:	2000      	movs	r0, #0
 800ec44:	6360      	str	r0, [r4, #52]	; 0x34
 800ec46:	b113      	cbz	r3, 800ec4e <__ssrefill_r+0x24>
 800ec48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ec4a:	6023      	str	r3, [r4, #0]
 800ec4c:	bd10      	pop	{r4, pc}
 800ec4e:	6923      	ldr	r3, [r4, #16]
 800ec50:	6023      	str	r3, [r4, #0]
 800ec52:	2300      	movs	r3, #0
 800ec54:	6063      	str	r3, [r4, #4]
 800ec56:	89a3      	ldrh	r3, [r4, #12]
 800ec58:	f043 0320 	orr.w	r3, r3, #32
 800ec5c:	81a3      	strh	r3, [r4, #12]
 800ec5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec62:	e7f3      	b.n	800ec4c <__ssrefill_r+0x22>

0800ec64 <__ssvfiscanf_r>:
 800ec64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec68:	460c      	mov	r4, r1
 800ec6a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ec6e:	2100      	movs	r1, #0
 800ec70:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ec74:	49a6      	ldr	r1, [pc, #664]	; (800ef10 <__ssvfiscanf_r+0x2ac>)
 800ec76:	91a0      	str	r1, [sp, #640]	; 0x280
 800ec78:	f10d 0804 	add.w	r8, sp, #4
 800ec7c:	49a5      	ldr	r1, [pc, #660]	; (800ef14 <__ssvfiscanf_r+0x2b0>)
 800ec7e:	4fa6      	ldr	r7, [pc, #664]	; (800ef18 <__ssvfiscanf_r+0x2b4>)
 800ec80:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ef1c <__ssvfiscanf_r+0x2b8>
 800ec84:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ec88:	4606      	mov	r6, r0
 800ec8a:	91a1      	str	r1, [sp, #644]	; 0x284
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	7813      	ldrb	r3, [r2, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	f000 815a 	beq.w	800ef4a <__ssvfiscanf_r+0x2e6>
 800ec96:	5dd9      	ldrb	r1, [r3, r7]
 800ec98:	f011 0108 	ands.w	r1, r1, #8
 800ec9c:	f102 0501 	add.w	r5, r2, #1
 800eca0:	d019      	beq.n	800ecd6 <__ssvfiscanf_r+0x72>
 800eca2:	6863      	ldr	r3, [r4, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	dd0f      	ble.n	800ecc8 <__ssvfiscanf_r+0x64>
 800eca8:	6823      	ldr	r3, [r4, #0]
 800ecaa:	781a      	ldrb	r2, [r3, #0]
 800ecac:	5cba      	ldrb	r2, [r7, r2]
 800ecae:	0712      	lsls	r2, r2, #28
 800ecb0:	d401      	bmi.n	800ecb6 <__ssvfiscanf_r+0x52>
 800ecb2:	462a      	mov	r2, r5
 800ecb4:	e7eb      	b.n	800ec8e <__ssvfiscanf_r+0x2a>
 800ecb6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ecb8:	3201      	adds	r2, #1
 800ecba:	9245      	str	r2, [sp, #276]	; 0x114
 800ecbc:	6862      	ldr	r2, [r4, #4]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	3a01      	subs	r2, #1
 800ecc2:	6062      	str	r2, [r4, #4]
 800ecc4:	6023      	str	r3, [r4, #0]
 800ecc6:	e7ec      	b.n	800eca2 <__ssvfiscanf_r+0x3e>
 800ecc8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ecca:	4621      	mov	r1, r4
 800eccc:	4630      	mov	r0, r6
 800ecce:	4798      	blx	r3
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	d0e9      	beq.n	800eca8 <__ssvfiscanf_r+0x44>
 800ecd4:	e7ed      	b.n	800ecb2 <__ssvfiscanf_r+0x4e>
 800ecd6:	2b25      	cmp	r3, #37	; 0x25
 800ecd8:	d012      	beq.n	800ed00 <__ssvfiscanf_r+0x9c>
 800ecda:	469a      	mov	sl, r3
 800ecdc:	6863      	ldr	r3, [r4, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	f340 8091 	ble.w	800ee06 <__ssvfiscanf_r+0x1a2>
 800ece4:	6822      	ldr	r2, [r4, #0]
 800ece6:	7813      	ldrb	r3, [r2, #0]
 800ece8:	4553      	cmp	r3, sl
 800ecea:	f040 812e 	bne.w	800ef4a <__ssvfiscanf_r+0x2e6>
 800ecee:	6863      	ldr	r3, [r4, #4]
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	6063      	str	r3, [r4, #4]
 800ecf4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ecf6:	3201      	adds	r2, #1
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	6022      	str	r2, [r4, #0]
 800ecfc:	9345      	str	r3, [sp, #276]	; 0x114
 800ecfe:	e7d8      	b.n	800ecb2 <__ssvfiscanf_r+0x4e>
 800ed00:	9141      	str	r1, [sp, #260]	; 0x104
 800ed02:	9143      	str	r1, [sp, #268]	; 0x10c
 800ed04:	7853      	ldrb	r3, [r2, #1]
 800ed06:	2b2a      	cmp	r3, #42	; 0x2a
 800ed08:	bf02      	ittt	eq
 800ed0a:	2310      	moveq	r3, #16
 800ed0c:	1c95      	addeq	r5, r2, #2
 800ed0e:	9341      	streq	r3, [sp, #260]	; 0x104
 800ed10:	220a      	movs	r2, #10
 800ed12:	46aa      	mov	sl, r5
 800ed14:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ed18:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ed1c:	2b09      	cmp	r3, #9
 800ed1e:	d91d      	bls.n	800ed5c <__ssvfiscanf_r+0xf8>
 800ed20:	487e      	ldr	r0, [pc, #504]	; (800ef1c <__ssvfiscanf_r+0x2b8>)
 800ed22:	2203      	movs	r2, #3
 800ed24:	f7f1 fa7c 	bl	8000220 <memchr>
 800ed28:	b140      	cbz	r0, 800ed3c <__ssvfiscanf_r+0xd8>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	eba0 0009 	sub.w	r0, r0, r9
 800ed30:	fa03 f000 	lsl.w	r0, r3, r0
 800ed34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ed36:	4318      	orrs	r0, r3
 800ed38:	9041      	str	r0, [sp, #260]	; 0x104
 800ed3a:	4655      	mov	r5, sl
 800ed3c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ed40:	2b78      	cmp	r3, #120	; 0x78
 800ed42:	d806      	bhi.n	800ed52 <__ssvfiscanf_r+0xee>
 800ed44:	2b57      	cmp	r3, #87	; 0x57
 800ed46:	d810      	bhi.n	800ed6a <__ssvfiscanf_r+0x106>
 800ed48:	2b25      	cmp	r3, #37	; 0x25
 800ed4a:	d0c6      	beq.n	800ecda <__ssvfiscanf_r+0x76>
 800ed4c:	d856      	bhi.n	800edfc <__ssvfiscanf_r+0x198>
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d064      	beq.n	800ee1c <__ssvfiscanf_r+0x1b8>
 800ed52:	2303      	movs	r3, #3
 800ed54:	9347      	str	r3, [sp, #284]	; 0x11c
 800ed56:	230a      	movs	r3, #10
 800ed58:	9342      	str	r3, [sp, #264]	; 0x108
 800ed5a:	e071      	b.n	800ee40 <__ssvfiscanf_r+0x1dc>
 800ed5c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ed5e:	fb02 1103 	mla	r1, r2, r3, r1
 800ed62:	3930      	subs	r1, #48	; 0x30
 800ed64:	9143      	str	r1, [sp, #268]	; 0x10c
 800ed66:	4655      	mov	r5, sl
 800ed68:	e7d3      	b.n	800ed12 <__ssvfiscanf_r+0xae>
 800ed6a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ed6e:	2a20      	cmp	r2, #32
 800ed70:	d8ef      	bhi.n	800ed52 <__ssvfiscanf_r+0xee>
 800ed72:	a101      	add	r1, pc, #4	; (adr r1, 800ed78 <__ssvfiscanf_r+0x114>)
 800ed74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ed78:	0800ee2b 	.word	0x0800ee2b
 800ed7c:	0800ed53 	.word	0x0800ed53
 800ed80:	0800ed53 	.word	0x0800ed53
 800ed84:	0800ee89 	.word	0x0800ee89
 800ed88:	0800ed53 	.word	0x0800ed53
 800ed8c:	0800ed53 	.word	0x0800ed53
 800ed90:	0800ed53 	.word	0x0800ed53
 800ed94:	0800ed53 	.word	0x0800ed53
 800ed98:	0800ed53 	.word	0x0800ed53
 800ed9c:	0800ed53 	.word	0x0800ed53
 800eda0:	0800ed53 	.word	0x0800ed53
 800eda4:	0800ee9f 	.word	0x0800ee9f
 800eda8:	0800ee75 	.word	0x0800ee75
 800edac:	0800ee03 	.word	0x0800ee03
 800edb0:	0800ee03 	.word	0x0800ee03
 800edb4:	0800ee03 	.word	0x0800ee03
 800edb8:	0800ed53 	.word	0x0800ed53
 800edbc:	0800ee79 	.word	0x0800ee79
 800edc0:	0800ed53 	.word	0x0800ed53
 800edc4:	0800ed53 	.word	0x0800ed53
 800edc8:	0800ed53 	.word	0x0800ed53
 800edcc:	0800ed53 	.word	0x0800ed53
 800edd0:	0800eeaf 	.word	0x0800eeaf
 800edd4:	0800ee81 	.word	0x0800ee81
 800edd8:	0800ee23 	.word	0x0800ee23
 800eddc:	0800ed53 	.word	0x0800ed53
 800ede0:	0800ed53 	.word	0x0800ed53
 800ede4:	0800eeab 	.word	0x0800eeab
 800ede8:	0800ed53 	.word	0x0800ed53
 800edec:	0800ee75 	.word	0x0800ee75
 800edf0:	0800ed53 	.word	0x0800ed53
 800edf4:	0800ed53 	.word	0x0800ed53
 800edf8:	0800ee2b 	.word	0x0800ee2b
 800edfc:	3b45      	subs	r3, #69	; 0x45
 800edfe:	2b02      	cmp	r3, #2
 800ee00:	d8a7      	bhi.n	800ed52 <__ssvfiscanf_r+0xee>
 800ee02:	2305      	movs	r3, #5
 800ee04:	e01b      	b.n	800ee3e <__ssvfiscanf_r+0x1da>
 800ee06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ee08:	4621      	mov	r1, r4
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	4798      	blx	r3
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	f43f af68 	beq.w	800ece4 <__ssvfiscanf_r+0x80>
 800ee14:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ee16:	2800      	cmp	r0, #0
 800ee18:	f040 808d 	bne.w	800ef36 <__ssvfiscanf_r+0x2d2>
 800ee1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee20:	e08f      	b.n	800ef42 <__ssvfiscanf_r+0x2de>
 800ee22:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ee24:	f042 0220 	orr.w	r2, r2, #32
 800ee28:	9241      	str	r2, [sp, #260]	; 0x104
 800ee2a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ee2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ee30:	9241      	str	r2, [sp, #260]	; 0x104
 800ee32:	2210      	movs	r2, #16
 800ee34:	2b6f      	cmp	r3, #111	; 0x6f
 800ee36:	9242      	str	r2, [sp, #264]	; 0x108
 800ee38:	bf34      	ite	cc
 800ee3a:	2303      	movcc	r3, #3
 800ee3c:	2304      	movcs	r3, #4
 800ee3e:	9347      	str	r3, [sp, #284]	; 0x11c
 800ee40:	6863      	ldr	r3, [r4, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	dd42      	ble.n	800eecc <__ssvfiscanf_r+0x268>
 800ee46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ee48:	0659      	lsls	r1, r3, #25
 800ee4a:	d404      	bmi.n	800ee56 <__ssvfiscanf_r+0x1f2>
 800ee4c:	6823      	ldr	r3, [r4, #0]
 800ee4e:	781a      	ldrb	r2, [r3, #0]
 800ee50:	5cba      	ldrb	r2, [r7, r2]
 800ee52:	0712      	lsls	r2, r2, #28
 800ee54:	d441      	bmi.n	800eeda <__ssvfiscanf_r+0x276>
 800ee56:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ee58:	2b02      	cmp	r3, #2
 800ee5a:	dc50      	bgt.n	800eefe <__ssvfiscanf_r+0x29a>
 800ee5c:	466b      	mov	r3, sp
 800ee5e:	4622      	mov	r2, r4
 800ee60:	a941      	add	r1, sp, #260	; 0x104
 800ee62:	4630      	mov	r0, r6
 800ee64:	f000 fb9e 	bl	800f5a4 <_scanf_chars>
 800ee68:	2801      	cmp	r0, #1
 800ee6a:	d06e      	beq.n	800ef4a <__ssvfiscanf_r+0x2e6>
 800ee6c:	2802      	cmp	r0, #2
 800ee6e:	f47f af20 	bne.w	800ecb2 <__ssvfiscanf_r+0x4e>
 800ee72:	e7cf      	b.n	800ee14 <__ssvfiscanf_r+0x1b0>
 800ee74:	220a      	movs	r2, #10
 800ee76:	e7dd      	b.n	800ee34 <__ssvfiscanf_r+0x1d0>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	9342      	str	r3, [sp, #264]	; 0x108
 800ee7c:	2303      	movs	r3, #3
 800ee7e:	e7de      	b.n	800ee3e <__ssvfiscanf_r+0x1da>
 800ee80:	2308      	movs	r3, #8
 800ee82:	9342      	str	r3, [sp, #264]	; 0x108
 800ee84:	2304      	movs	r3, #4
 800ee86:	e7da      	b.n	800ee3e <__ssvfiscanf_r+0x1da>
 800ee88:	4629      	mov	r1, r5
 800ee8a:	4640      	mov	r0, r8
 800ee8c:	f000 fd9c 	bl	800f9c8 <__sccl>
 800ee90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ee92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee96:	9341      	str	r3, [sp, #260]	; 0x104
 800ee98:	4605      	mov	r5, r0
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e7cf      	b.n	800ee3e <__ssvfiscanf_r+0x1da>
 800ee9e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800eea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eea4:	9341      	str	r3, [sp, #260]	; 0x104
 800eea6:	2300      	movs	r3, #0
 800eea8:	e7c9      	b.n	800ee3e <__ssvfiscanf_r+0x1da>
 800eeaa:	2302      	movs	r3, #2
 800eeac:	e7c7      	b.n	800ee3e <__ssvfiscanf_r+0x1da>
 800eeae:	9841      	ldr	r0, [sp, #260]	; 0x104
 800eeb0:	06c3      	lsls	r3, r0, #27
 800eeb2:	f53f aefe 	bmi.w	800ecb2 <__ssvfiscanf_r+0x4e>
 800eeb6:	9b00      	ldr	r3, [sp, #0]
 800eeb8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800eeba:	1d19      	adds	r1, r3, #4
 800eebc:	9100      	str	r1, [sp, #0]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	f010 0f01 	tst.w	r0, #1
 800eec4:	bf14      	ite	ne
 800eec6:	801a      	strhne	r2, [r3, #0]
 800eec8:	601a      	streq	r2, [r3, #0]
 800eeca:	e6f2      	b.n	800ecb2 <__ssvfiscanf_r+0x4e>
 800eecc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800eece:	4621      	mov	r1, r4
 800eed0:	4630      	mov	r0, r6
 800eed2:	4798      	blx	r3
 800eed4:	2800      	cmp	r0, #0
 800eed6:	d0b6      	beq.n	800ee46 <__ssvfiscanf_r+0x1e2>
 800eed8:	e79c      	b.n	800ee14 <__ssvfiscanf_r+0x1b0>
 800eeda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800eedc:	3201      	adds	r2, #1
 800eede:	9245      	str	r2, [sp, #276]	; 0x114
 800eee0:	6862      	ldr	r2, [r4, #4]
 800eee2:	3a01      	subs	r2, #1
 800eee4:	2a00      	cmp	r2, #0
 800eee6:	6062      	str	r2, [r4, #4]
 800eee8:	dd02      	ble.n	800eef0 <__ssvfiscanf_r+0x28c>
 800eeea:	3301      	adds	r3, #1
 800eeec:	6023      	str	r3, [r4, #0]
 800eeee:	e7ad      	b.n	800ee4c <__ssvfiscanf_r+0x1e8>
 800eef0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800eef2:	4621      	mov	r1, r4
 800eef4:	4630      	mov	r0, r6
 800eef6:	4798      	blx	r3
 800eef8:	2800      	cmp	r0, #0
 800eefa:	d0a7      	beq.n	800ee4c <__ssvfiscanf_r+0x1e8>
 800eefc:	e78a      	b.n	800ee14 <__ssvfiscanf_r+0x1b0>
 800eefe:	2b04      	cmp	r3, #4
 800ef00:	dc0e      	bgt.n	800ef20 <__ssvfiscanf_r+0x2bc>
 800ef02:	466b      	mov	r3, sp
 800ef04:	4622      	mov	r2, r4
 800ef06:	a941      	add	r1, sp, #260	; 0x104
 800ef08:	4630      	mov	r0, r6
 800ef0a:	f000 fba5 	bl	800f658 <_scanf_i>
 800ef0e:	e7ab      	b.n	800ee68 <__ssvfiscanf_r+0x204>
 800ef10:	0800ebb1 	.word	0x0800ebb1
 800ef14:	0800ec2b 	.word	0x0800ec2b
 800ef18:	080105b1 	.word	0x080105b1
 800ef1c:	08010982 	.word	0x08010982
 800ef20:	4b0b      	ldr	r3, [pc, #44]	; (800ef50 <__ssvfiscanf_r+0x2ec>)
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	f43f aec5 	beq.w	800ecb2 <__ssvfiscanf_r+0x4e>
 800ef28:	466b      	mov	r3, sp
 800ef2a:	4622      	mov	r2, r4
 800ef2c:	a941      	add	r1, sp, #260	; 0x104
 800ef2e:	4630      	mov	r0, r6
 800ef30:	f7fb fef8 	bl	800ad24 <_scanf_float>
 800ef34:	e798      	b.n	800ee68 <__ssvfiscanf_r+0x204>
 800ef36:	89a3      	ldrh	r3, [r4, #12]
 800ef38:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ef3c:	bf18      	it	ne
 800ef3e:	f04f 30ff 	movne.w	r0, #4294967295
 800ef42:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ef46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef4a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ef4c:	e7f9      	b.n	800ef42 <__ssvfiscanf_r+0x2de>
 800ef4e:	bf00      	nop
 800ef50:	0800ad25 	.word	0x0800ad25

0800ef54 <__sfputc_r>:
 800ef54:	6893      	ldr	r3, [r2, #8]
 800ef56:	3b01      	subs	r3, #1
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	b410      	push	{r4}
 800ef5c:	6093      	str	r3, [r2, #8]
 800ef5e:	da08      	bge.n	800ef72 <__sfputc_r+0x1e>
 800ef60:	6994      	ldr	r4, [r2, #24]
 800ef62:	42a3      	cmp	r3, r4
 800ef64:	db01      	blt.n	800ef6a <__sfputc_r+0x16>
 800ef66:	290a      	cmp	r1, #10
 800ef68:	d103      	bne.n	800ef72 <__sfputc_r+0x1e>
 800ef6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef6e:	f7fd b9af 	b.w	800c2d0 <__swbuf_r>
 800ef72:	6813      	ldr	r3, [r2, #0]
 800ef74:	1c58      	adds	r0, r3, #1
 800ef76:	6010      	str	r0, [r2, #0]
 800ef78:	7019      	strb	r1, [r3, #0]
 800ef7a:	4608      	mov	r0, r1
 800ef7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef80:	4770      	bx	lr

0800ef82 <__sfputs_r>:
 800ef82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef84:	4606      	mov	r6, r0
 800ef86:	460f      	mov	r7, r1
 800ef88:	4614      	mov	r4, r2
 800ef8a:	18d5      	adds	r5, r2, r3
 800ef8c:	42ac      	cmp	r4, r5
 800ef8e:	d101      	bne.n	800ef94 <__sfputs_r+0x12>
 800ef90:	2000      	movs	r0, #0
 800ef92:	e007      	b.n	800efa4 <__sfputs_r+0x22>
 800ef94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef98:	463a      	mov	r2, r7
 800ef9a:	4630      	mov	r0, r6
 800ef9c:	f7ff ffda 	bl	800ef54 <__sfputc_r>
 800efa0:	1c43      	adds	r3, r0, #1
 800efa2:	d1f3      	bne.n	800ef8c <__sfputs_r+0xa>
 800efa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800efa8 <_vfiprintf_r>:
 800efa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efac:	460d      	mov	r5, r1
 800efae:	b09d      	sub	sp, #116	; 0x74
 800efb0:	4614      	mov	r4, r2
 800efb2:	4698      	mov	r8, r3
 800efb4:	4606      	mov	r6, r0
 800efb6:	b118      	cbz	r0, 800efc0 <_vfiprintf_r+0x18>
 800efb8:	6983      	ldr	r3, [r0, #24]
 800efba:	b90b      	cbnz	r3, 800efc0 <_vfiprintf_r+0x18>
 800efbc:	f7fe fa12 	bl	800d3e4 <__sinit>
 800efc0:	4b89      	ldr	r3, [pc, #548]	; (800f1e8 <_vfiprintf_r+0x240>)
 800efc2:	429d      	cmp	r5, r3
 800efc4:	d11b      	bne.n	800effe <_vfiprintf_r+0x56>
 800efc6:	6875      	ldr	r5, [r6, #4]
 800efc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efca:	07d9      	lsls	r1, r3, #31
 800efcc:	d405      	bmi.n	800efda <_vfiprintf_r+0x32>
 800efce:	89ab      	ldrh	r3, [r5, #12]
 800efd0:	059a      	lsls	r2, r3, #22
 800efd2:	d402      	bmi.n	800efda <_vfiprintf_r+0x32>
 800efd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efd6:	f7fe fe34 	bl	800dc42 <__retarget_lock_acquire_recursive>
 800efda:	89ab      	ldrh	r3, [r5, #12]
 800efdc:	071b      	lsls	r3, r3, #28
 800efde:	d501      	bpl.n	800efe4 <_vfiprintf_r+0x3c>
 800efe0:	692b      	ldr	r3, [r5, #16]
 800efe2:	b9eb      	cbnz	r3, 800f020 <_vfiprintf_r+0x78>
 800efe4:	4629      	mov	r1, r5
 800efe6:	4630      	mov	r0, r6
 800efe8:	f7fd f9d6 	bl	800c398 <__swsetup_r>
 800efec:	b1c0      	cbz	r0, 800f020 <_vfiprintf_r+0x78>
 800efee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eff0:	07dc      	lsls	r4, r3, #31
 800eff2:	d50e      	bpl.n	800f012 <_vfiprintf_r+0x6a>
 800eff4:	f04f 30ff 	mov.w	r0, #4294967295
 800eff8:	b01d      	add	sp, #116	; 0x74
 800effa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800effe:	4b7b      	ldr	r3, [pc, #492]	; (800f1ec <_vfiprintf_r+0x244>)
 800f000:	429d      	cmp	r5, r3
 800f002:	d101      	bne.n	800f008 <_vfiprintf_r+0x60>
 800f004:	68b5      	ldr	r5, [r6, #8]
 800f006:	e7df      	b.n	800efc8 <_vfiprintf_r+0x20>
 800f008:	4b79      	ldr	r3, [pc, #484]	; (800f1f0 <_vfiprintf_r+0x248>)
 800f00a:	429d      	cmp	r5, r3
 800f00c:	bf08      	it	eq
 800f00e:	68f5      	ldreq	r5, [r6, #12]
 800f010:	e7da      	b.n	800efc8 <_vfiprintf_r+0x20>
 800f012:	89ab      	ldrh	r3, [r5, #12]
 800f014:	0598      	lsls	r0, r3, #22
 800f016:	d4ed      	bmi.n	800eff4 <_vfiprintf_r+0x4c>
 800f018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f01a:	f7fe fe13 	bl	800dc44 <__retarget_lock_release_recursive>
 800f01e:	e7e9      	b.n	800eff4 <_vfiprintf_r+0x4c>
 800f020:	2300      	movs	r3, #0
 800f022:	9309      	str	r3, [sp, #36]	; 0x24
 800f024:	2320      	movs	r3, #32
 800f026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f02a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f02e:	2330      	movs	r3, #48	; 0x30
 800f030:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f1f4 <_vfiprintf_r+0x24c>
 800f034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f038:	f04f 0901 	mov.w	r9, #1
 800f03c:	4623      	mov	r3, r4
 800f03e:	469a      	mov	sl, r3
 800f040:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f044:	b10a      	cbz	r2, 800f04a <_vfiprintf_r+0xa2>
 800f046:	2a25      	cmp	r2, #37	; 0x25
 800f048:	d1f9      	bne.n	800f03e <_vfiprintf_r+0x96>
 800f04a:	ebba 0b04 	subs.w	fp, sl, r4
 800f04e:	d00b      	beq.n	800f068 <_vfiprintf_r+0xc0>
 800f050:	465b      	mov	r3, fp
 800f052:	4622      	mov	r2, r4
 800f054:	4629      	mov	r1, r5
 800f056:	4630      	mov	r0, r6
 800f058:	f7ff ff93 	bl	800ef82 <__sfputs_r>
 800f05c:	3001      	adds	r0, #1
 800f05e:	f000 80aa 	beq.w	800f1b6 <_vfiprintf_r+0x20e>
 800f062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f064:	445a      	add	r2, fp
 800f066:	9209      	str	r2, [sp, #36]	; 0x24
 800f068:	f89a 3000 	ldrb.w	r3, [sl]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f000 80a2 	beq.w	800f1b6 <_vfiprintf_r+0x20e>
 800f072:	2300      	movs	r3, #0
 800f074:	f04f 32ff 	mov.w	r2, #4294967295
 800f078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f07c:	f10a 0a01 	add.w	sl, sl, #1
 800f080:	9304      	str	r3, [sp, #16]
 800f082:	9307      	str	r3, [sp, #28]
 800f084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f088:	931a      	str	r3, [sp, #104]	; 0x68
 800f08a:	4654      	mov	r4, sl
 800f08c:	2205      	movs	r2, #5
 800f08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f092:	4858      	ldr	r0, [pc, #352]	; (800f1f4 <_vfiprintf_r+0x24c>)
 800f094:	f7f1 f8c4 	bl	8000220 <memchr>
 800f098:	9a04      	ldr	r2, [sp, #16]
 800f09a:	b9d8      	cbnz	r0, 800f0d4 <_vfiprintf_r+0x12c>
 800f09c:	06d1      	lsls	r1, r2, #27
 800f09e:	bf44      	itt	mi
 800f0a0:	2320      	movmi	r3, #32
 800f0a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0a6:	0713      	lsls	r3, r2, #28
 800f0a8:	bf44      	itt	mi
 800f0aa:	232b      	movmi	r3, #43	; 0x2b
 800f0ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0b0:	f89a 3000 	ldrb.w	r3, [sl]
 800f0b4:	2b2a      	cmp	r3, #42	; 0x2a
 800f0b6:	d015      	beq.n	800f0e4 <_vfiprintf_r+0x13c>
 800f0b8:	9a07      	ldr	r2, [sp, #28]
 800f0ba:	4654      	mov	r4, sl
 800f0bc:	2000      	movs	r0, #0
 800f0be:	f04f 0c0a 	mov.w	ip, #10
 800f0c2:	4621      	mov	r1, r4
 800f0c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0c8:	3b30      	subs	r3, #48	; 0x30
 800f0ca:	2b09      	cmp	r3, #9
 800f0cc:	d94e      	bls.n	800f16c <_vfiprintf_r+0x1c4>
 800f0ce:	b1b0      	cbz	r0, 800f0fe <_vfiprintf_r+0x156>
 800f0d0:	9207      	str	r2, [sp, #28]
 800f0d2:	e014      	b.n	800f0fe <_vfiprintf_r+0x156>
 800f0d4:	eba0 0308 	sub.w	r3, r0, r8
 800f0d8:	fa09 f303 	lsl.w	r3, r9, r3
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	9304      	str	r3, [sp, #16]
 800f0e0:	46a2      	mov	sl, r4
 800f0e2:	e7d2      	b.n	800f08a <_vfiprintf_r+0xe2>
 800f0e4:	9b03      	ldr	r3, [sp, #12]
 800f0e6:	1d19      	adds	r1, r3, #4
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	9103      	str	r1, [sp, #12]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	bfbb      	ittet	lt
 800f0f0:	425b      	neglt	r3, r3
 800f0f2:	f042 0202 	orrlt.w	r2, r2, #2
 800f0f6:	9307      	strge	r3, [sp, #28]
 800f0f8:	9307      	strlt	r3, [sp, #28]
 800f0fa:	bfb8      	it	lt
 800f0fc:	9204      	strlt	r2, [sp, #16]
 800f0fe:	7823      	ldrb	r3, [r4, #0]
 800f100:	2b2e      	cmp	r3, #46	; 0x2e
 800f102:	d10c      	bne.n	800f11e <_vfiprintf_r+0x176>
 800f104:	7863      	ldrb	r3, [r4, #1]
 800f106:	2b2a      	cmp	r3, #42	; 0x2a
 800f108:	d135      	bne.n	800f176 <_vfiprintf_r+0x1ce>
 800f10a:	9b03      	ldr	r3, [sp, #12]
 800f10c:	1d1a      	adds	r2, r3, #4
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	9203      	str	r2, [sp, #12]
 800f112:	2b00      	cmp	r3, #0
 800f114:	bfb8      	it	lt
 800f116:	f04f 33ff 	movlt.w	r3, #4294967295
 800f11a:	3402      	adds	r4, #2
 800f11c:	9305      	str	r3, [sp, #20]
 800f11e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f204 <_vfiprintf_r+0x25c>
 800f122:	7821      	ldrb	r1, [r4, #0]
 800f124:	2203      	movs	r2, #3
 800f126:	4650      	mov	r0, sl
 800f128:	f7f1 f87a 	bl	8000220 <memchr>
 800f12c:	b140      	cbz	r0, 800f140 <_vfiprintf_r+0x198>
 800f12e:	2340      	movs	r3, #64	; 0x40
 800f130:	eba0 000a 	sub.w	r0, r0, sl
 800f134:	fa03 f000 	lsl.w	r0, r3, r0
 800f138:	9b04      	ldr	r3, [sp, #16]
 800f13a:	4303      	orrs	r3, r0
 800f13c:	3401      	adds	r4, #1
 800f13e:	9304      	str	r3, [sp, #16]
 800f140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f144:	482c      	ldr	r0, [pc, #176]	; (800f1f8 <_vfiprintf_r+0x250>)
 800f146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f14a:	2206      	movs	r2, #6
 800f14c:	f7f1 f868 	bl	8000220 <memchr>
 800f150:	2800      	cmp	r0, #0
 800f152:	d03f      	beq.n	800f1d4 <_vfiprintf_r+0x22c>
 800f154:	4b29      	ldr	r3, [pc, #164]	; (800f1fc <_vfiprintf_r+0x254>)
 800f156:	bb1b      	cbnz	r3, 800f1a0 <_vfiprintf_r+0x1f8>
 800f158:	9b03      	ldr	r3, [sp, #12]
 800f15a:	3307      	adds	r3, #7
 800f15c:	f023 0307 	bic.w	r3, r3, #7
 800f160:	3308      	adds	r3, #8
 800f162:	9303      	str	r3, [sp, #12]
 800f164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f166:	443b      	add	r3, r7
 800f168:	9309      	str	r3, [sp, #36]	; 0x24
 800f16a:	e767      	b.n	800f03c <_vfiprintf_r+0x94>
 800f16c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f170:	460c      	mov	r4, r1
 800f172:	2001      	movs	r0, #1
 800f174:	e7a5      	b.n	800f0c2 <_vfiprintf_r+0x11a>
 800f176:	2300      	movs	r3, #0
 800f178:	3401      	adds	r4, #1
 800f17a:	9305      	str	r3, [sp, #20]
 800f17c:	4619      	mov	r1, r3
 800f17e:	f04f 0c0a 	mov.w	ip, #10
 800f182:	4620      	mov	r0, r4
 800f184:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f188:	3a30      	subs	r2, #48	; 0x30
 800f18a:	2a09      	cmp	r2, #9
 800f18c:	d903      	bls.n	800f196 <_vfiprintf_r+0x1ee>
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d0c5      	beq.n	800f11e <_vfiprintf_r+0x176>
 800f192:	9105      	str	r1, [sp, #20]
 800f194:	e7c3      	b.n	800f11e <_vfiprintf_r+0x176>
 800f196:	fb0c 2101 	mla	r1, ip, r1, r2
 800f19a:	4604      	mov	r4, r0
 800f19c:	2301      	movs	r3, #1
 800f19e:	e7f0      	b.n	800f182 <_vfiprintf_r+0x1da>
 800f1a0:	ab03      	add	r3, sp, #12
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	462a      	mov	r2, r5
 800f1a6:	4b16      	ldr	r3, [pc, #88]	; (800f200 <_vfiprintf_r+0x258>)
 800f1a8:	a904      	add	r1, sp, #16
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	f7fb f9f0 	bl	800a590 <_printf_float>
 800f1b0:	4607      	mov	r7, r0
 800f1b2:	1c78      	adds	r0, r7, #1
 800f1b4:	d1d6      	bne.n	800f164 <_vfiprintf_r+0x1bc>
 800f1b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1b8:	07d9      	lsls	r1, r3, #31
 800f1ba:	d405      	bmi.n	800f1c8 <_vfiprintf_r+0x220>
 800f1bc:	89ab      	ldrh	r3, [r5, #12]
 800f1be:	059a      	lsls	r2, r3, #22
 800f1c0:	d402      	bmi.n	800f1c8 <_vfiprintf_r+0x220>
 800f1c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1c4:	f7fe fd3e 	bl	800dc44 <__retarget_lock_release_recursive>
 800f1c8:	89ab      	ldrh	r3, [r5, #12]
 800f1ca:	065b      	lsls	r3, r3, #25
 800f1cc:	f53f af12 	bmi.w	800eff4 <_vfiprintf_r+0x4c>
 800f1d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1d2:	e711      	b.n	800eff8 <_vfiprintf_r+0x50>
 800f1d4:	ab03      	add	r3, sp, #12
 800f1d6:	9300      	str	r3, [sp, #0]
 800f1d8:	462a      	mov	r2, r5
 800f1da:	4b09      	ldr	r3, [pc, #36]	; (800f200 <_vfiprintf_r+0x258>)
 800f1dc:	a904      	add	r1, sp, #16
 800f1de:	4630      	mov	r0, r6
 800f1e0:	f7fb fc7a 	bl	800aad8 <_printf_i>
 800f1e4:	e7e4      	b.n	800f1b0 <_vfiprintf_r+0x208>
 800f1e6:	bf00      	nop
 800f1e8:	08010764 	.word	0x08010764
 800f1ec:	08010784 	.word	0x08010784
 800f1f0:	08010744 	.word	0x08010744
 800f1f4:	0801097c 	.word	0x0801097c
 800f1f8:	08010986 	.word	0x08010986
 800f1fc:	0800a591 	.word	0x0800a591
 800f200:	0800ef83 	.word	0x0800ef83
 800f204:	08010982 	.word	0x08010982

0800f208 <__svfiscanf_r>:
 800f208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f20c:	461d      	mov	r5, r3
 800f20e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f210:	07df      	lsls	r7, r3, #31
 800f212:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f216:	4606      	mov	r6, r0
 800f218:	460c      	mov	r4, r1
 800f21a:	4692      	mov	sl, r2
 800f21c:	d405      	bmi.n	800f22a <__svfiscanf_r+0x22>
 800f21e:	898b      	ldrh	r3, [r1, #12]
 800f220:	0598      	lsls	r0, r3, #22
 800f222:	d402      	bmi.n	800f22a <__svfiscanf_r+0x22>
 800f224:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800f226:	f7fe fd0c 	bl	800dc42 <__retarget_lock_acquire_recursive>
 800f22a:	2300      	movs	r3, #0
 800f22c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800f230:	4ba6      	ldr	r3, [pc, #664]	; (800f4cc <__svfiscanf_r+0x2c4>)
 800f232:	93a0      	str	r3, [sp, #640]	; 0x280
 800f234:	f10d 0804 	add.w	r8, sp, #4
 800f238:	4ba5      	ldr	r3, [pc, #660]	; (800f4d0 <__svfiscanf_r+0x2c8>)
 800f23a:	4fa6      	ldr	r7, [pc, #664]	; (800f4d4 <__svfiscanf_r+0x2cc>)
 800f23c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f4d8 <__svfiscanf_r+0x2d0>
 800f240:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f244:	93a1      	str	r3, [sp, #644]	; 0x284
 800f246:	9500      	str	r5, [sp, #0]
 800f248:	f89a 3000 	ldrb.w	r3, [sl]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f000 8173 	beq.w	800f538 <__svfiscanf_r+0x330>
 800f252:	5dd9      	ldrb	r1, [r3, r7]
 800f254:	f011 0108 	ands.w	r1, r1, #8
 800f258:	f10a 0501 	add.w	r5, sl, #1
 800f25c:	d019      	beq.n	800f292 <__svfiscanf_r+0x8a>
 800f25e:	6863      	ldr	r3, [r4, #4]
 800f260:	2b00      	cmp	r3, #0
 800f262:	dd0f      	ble.n	800f284 <__svfiscanf_r+0x7c>
 800f264:	6823      	ldr	r3, [r4, #0]
 800f266:	781a      	ldrb	r2, [r3, #0]
 800f268:	5cba      	ldrb	r2, [r7, r2]
 800f26a:	0711      	lsls	r1, r2, #28
 800f26c:	d401      	bmi.n	800f272 <__svfiscanf_r+0x6a>
 800f26e:	46aa      	mov	sl, r5
 800f270:	e7ea      	b.n	800f248 <__svfiscanf_r+0x40>
 800f272:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f274:	3201      	adds	r2, #1
 800f276:	9245      	str	r2, [sp, #276]	; 0x114
 800f278:	6862      	ldr	r2, [r4, #4]
 800f27a:	3301      	adds	r3, #1
 800f27c:	3a01      	subs	r2, #1
 800f27e:	6062      	str	r2, [r4, #4]
 800f280:	6023      	str	r3, [r4, #0]
 800f282:	e7ec      	b.n	800f25e <__svfiscanf_r+0x56>
 800f284:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f286:	4621      	mov	r1, r4
 800f288:	4630      	mov	r0, r6
 800f28a:	4798      	blx	r3
 800f28c:	2800      	cmp	r0, #0
 800f28e:	d0e9      	beq.n	800f264 <__svfiscanf_r+0x5c>
 800f290:	e7ed      	b.n	800f26e <__svfiscanf_r+0x66>
 800f292:	2b25      	cmp	r3, #37	; 0x25
 800f294:	d012      	beq.n	800f2bc <__svfiscanf_r+0xb4>
 800f296:	469a      	mov	sl, r3
 800f298:	6863      	ldr	r3, [r4, #4]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f340 8095 	ble.w	800f3ca <__svfiscanf_r+0x1c2>
 800f2a0:	6822      	ldr	r2, [r4, #0]
 800f2a2:	7813      	ldrb	r3, [r2, #0]
 800f2a4:	4553      	cmp	r3, sl
 800f2a6:	f040 8147 	bne.w	800f538 <__svfiscanf_r+0x330>
 800f2aa:	6863      	ldr	r3, [r4, #4]
 800f2ac:	3b01      	subs	r3, #1
 800f2ae:	6063      	str	r3, [r4, #4]
 800f2b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f2b2:	3201      	adds	r2, #1
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	6022      	str	r2, [r4, #0]
 800f2b8:	9345      	str	r3, [sp, #276]	; 0x114
 800f2ba:	e7d8      	b.n	800f26e <__svfiscanf_r+0x66>
 800f2bc:	9141      	str	r1, [sp, #260]	; 0x104
 800f2be:	9143      	str	r1, [sp, #268]	; 0x10c
 800f2c0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800f2c4:	2b2a      	cmp	r3, #42	; 0x2a
 800f2c6:	bf02      	ittt	eq
 800f2c8:	2310      	moveq	r3, #16
 800f2ca:	9341      	streq	r3, [sp, #260]	; 0x104
 800f2cc:	f10a 0502 	addeq.w	r5, sl, #2
 800f2d0:	220a      	movs	r2, #10
 800f2d2:	46aa      	mov	sl, r5
 800f2d4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f2d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f2dc:	2b09      	cmp	r3, #9
 800f2de:	d91e      	bls.n	800f31e <__svfiscanf_r+0x116>
 800f2e0:	487d      	ldr	r0, [pc, #500]	; (800f4d8 <__svfiscanf_r+0x2d0>)
 800f2e2:	2203      	movs	r2, #3
 800f2e4:	f7f0 ff9c 	bl	8000220 <memchr>
 800f2e8:	b140      	cbz	r0, 800f2fc <__svfiscanf_r+0xf4>
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	eba0 0009 	sub.w	r0, r0, r9
 800f2f0:	fa03 f000 	lsl.w	r0, r3, r0
 800f2f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f2f6:	4318      	orrs	r0, r3
 800f2f8:	9041      	str	r0, [sp, #260]	; 0x104
 800f2fa:	4655      	mov	r5, sl
 800f2fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f300:	2b78      	cmp	r3, #120	; 0x78
 800f302:	d807      	bhi.n	800f314 <__svfiscanf_r+0x10c>
 800f304:	2b57      	cmp	r3, #87	; 0x57
 800f306:	d811      	bhi.n	800f32c <__svfiscanf_r+0x124>
 800f308:	2b25      	cmp	r3, #37	; 0x25
 800f30a:	d0c4      	beq.n	800f296 <__svfiscanf_r+0x8e>
 800f30c:	d858      	bhi.n	800f3c0 <__svfiscanf_r+0x1b8>
 800f30e:	2b00      	cmp	r3, #0
 800f310:	f000 80c8 	beq.w	800f4a4 <__svfiscanf_r+0x29c>
 800f314:	2303      	movs	r3, #3
 800f316:	9347      	str	r3, [sp, #284]	; 0x11c
 800f318:	230a      	movs	r3, #10
 800f31a:	9342      	str	r3, [sp, #264]	; 0x108
 800f31c:	e07c      	b.n	800f418 <__svfiscanf_r+0x210>
 800f31e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f320:	fb02 1103 	mla	r1, r2, r3, r1
 800f324:	3930      	subs	r1, #48	; 0x30
 800f326:	9143      	str	r1, [sp, #268]	; 0x10c
 800f328:	4655      	mov	r5, sl
 800f32a:	e7d2      	b.n	800f2d2 <__svfiscanf_r+0xca>
 800f32c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f330:	2a20      	cmp	r2, #32
 800f332:	d8ef      	bhi.n	800f314 <__svfiscanf_r+0x10c>
 800f334:	a101      	add	r1, pc, #4	; (adr r1, 800f33c <__svfiscanf_r+0x134>)
 800f336:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f33a:	bf00      	nop
 800f33c:	0800f403 	.word	0x0800f403
 800f340:	0800f315 	.word	0x0800f315
 800f344:	0800f315 	.word	0x0800f315
 800f348:	0800f461 	.word	0x0800f461
 800f34c:	0800f315 	.word	0x0800f315
 800f350:	0800f315 	.word	0x0800f315
 800f354:	0800f315 	.word	0x0800f315
 800f358:	0800f315 	.word	0x0800f315
 800f35c:	0800f315 	.word	0x0800f315
 800f360:	0800f315 	.word	0x0800f315
 800f364:	0800f315 	.word	0x0800f315
 800f368:	0800f477 	.word	0x0800f477
 800f36c:	0800f44d 	.word	0x0800f44d
 800f370:	0800f3c7 	.word	0x0800f3c7
 800f374:	0800f3c7 	.word	0x0800f3c7
 800f378:	0800f3c7 	.word	0x0800f3c7
 800f37c:	0800f315 	.word	0x0800f315
 800f380:	0800f451 	.word	0x0800f451
 800f384:	0800f315 	.word	0x0800f315
 800f388:	0800f315 	.word	0x0800f315
 800f38c:	0800f315 	.word	0x0800f315
 800f390:	0800f315 	.word	0x0800f315
 800f394:	0800f487 	.word	0x0800f487
 800f398:	0800f459 	.word	0x0800f459
 800f39c:	0800f3fb 	.word	0x0800f3fb
 800f3a0:	0800f315 	.word	0x0800f315
 800f3a4:	0800f315 	.word	0x0800f315
 800f3a8:	0800f483 	.word	0x0800f483
 800f3ac:	0800f315 	.word	0x0800f315
 800f3b0:	0800f44d 	.word	0x0800f44d
 800f3b4:	0800f315 	.word	0x0800f315
 800f3b8:	0800f315 	.word	0x0800f315
 800f3bc:	0800f403 	.word	0x0800f403
 800f3c0:	3b45      	subs	r3, #69	; 0x45
 800f3c2:	2b02      	cmp	r3, #2
 800f3c4:	d8a6      	bhi.n	800f314 <__svfiscanf_r+0x10c>
 800f3c6:	2305      	movs	r3, #5
 800f3c8:	e025      	b.n	800f416 <__svfiscanf_r+0x20e>
 800f3ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f3cc:	4621      	mov	r1, r4
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	4798      	blx	r3
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	f43f af64 	beq.w	800f2a0 <__svfiscanf_r+0x98>
 800f3d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3da:	07da      	lsls	r2, r3, #31
 800f3dc:	f140 80a4 	bpl.w	800f528 <__svfiscanf_r+0x320>
 800f3e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d067      	beq.n	800f4b6 <__svfiscanf_r+0x2ae>
 800f3e6:	89a3      	ldrh	r3, [r4, #12]
 800f3e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f3ec:	bf18      	it	ne
 800f3ee:	f04f 30ff 	movne.w	r0, #4294967295
 800f3f2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f3fc:	f042 0220 	orr.w	r2, r2, #32
 800f400:	9241      	str	r2, [sp, #260]	; 0x104
 800f402:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f408:	9241      	str	r2, [sp, #260]	; 0x104
 800f40a:	2210      	movs	r2, #16
 800f40c:	2b6f      	cmp	r3, #111	; 0x6f
 800f40e:	9242      	str	r2, [sp, #264]	; 0x108
 800f410:	bf34      	ite	cc
 800f412:	2303      	movcc	r3, #3
 800f414:	2304      	movcs	r3, #4
 800f416:	9347      	str	r3, [sp, #284]	; 0x11c
 800f418:	6863      	ldr	r3, [r4, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	dd4e      	ble.n	800f4bc <__svfiscanf_r+0x2b4>
 800f41e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f420:	065b      	lsls	r3, r3, #25
 800f422:	d404      	bmi.n	800f42e <__svfiscanf_r+0x226>
 800f424:	6823      	ldr	r3, [r4, #0]
 800f426:	781a      	ldrb	r2, [r3, #0]
 800f428:	5cba      	ldrb	r2, [r7, r2]
 800f42a:	0710      	lsls	r0, r2, #28
 800f42c:	d456      	bmi.n	800f4dc <__svfiscanf_r+0x2d4>
 800f42e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f430:	2b02      	cmp	r3, #2
 800f432:	dc65      	bgt.n	800f500 <__svfiscanf_r+0x2f8>
 800f434:	466b      	mov	r3, sp
 800f436:	4622      	mov	r2, r4
 800f438:	a941      	add	r1, sp, #260	; 0x104
 800f43a:	4630      	mov	r0, r6
 800f43c:	f000 f8b2 	bl	800f5a4 <_scanf_chars>
 800f440:	2801      	cmp	r0, #1
 800f442:	d079      	beq.n	800f538 <__svfiscanf_r+0x330>
 800f444:	2802      	cmp	r0, #2
 800f446:	f47f af12 	bne.w	800f26e <__svfiscanf_r+0x66>
 800f44a:	e7c5      	b.n	800f3d8 <__svfiscanf_r+0x1d0>
 800f44c:	220a      	movs	r2, #10
 800f44e:	e7dd      	b.n	800f40c <__svfiscanf_r+0x204>
 800f450:	2300      	movs	r3, #0
 800f452:	9342      	str	r3, [sp, #264]	; 0x108
 800f454:	2303      	movs	r3, #3
 800f456:	e7de      	b.n	800f416 <__svfiscanf_r+0x20e>
 800f458:	2308      	movs	r3, #8
 800f45a:	9342      	str	r3, [sp, #264]	; 0x108
 800f45c:	2304      	movs	r3, #4
 800f45e:	e7da      	b.n	800f416 <__svfiscanf_r+0x20e>
 800f460:	4629      	mov	r1, r5
 800f462:	4640      	mov	r0, r8
 800f464:	f000 fab0 	bl	800f9c8 <__sccl>
 800f468:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f46a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f46e:	9341      	str	r3, [sp, #260]	; 0x104
 800f470:	4605      	mov	r5, r0
 800f472:	2301      	movs	r3, #1
 800f474:	e7cf      	b.n	800f416 <__svfiscanf_r+0x20e>
 800f476:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f47c:	9341      	str	r3, [sp, #260]	; 0x104
 800f47e:	2300      	movs	r3, #0
 800f480:	e7c9      	b.n	800f416 <__svfiscanf_r+0x20e>
 800f482:	2302      	movs	r3, #2
 800f484:	e7c7      	b.n	800f416 <__svfiscanf_r+0x20e>
 800f486:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f488:	06c3      	lsls	r3, r0, #27
 800f48a:	f53f aef0 	bmi.w	800f26e <__svfiscanf_r+0x66>
 800f48e:	9b00      	ldr	r3, [sp, #0]
 800f490:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f492:	1d19      	adds	r1, r3, #4
 800f494:	9100      	str	r1, [sp, #0]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f010 0f01 	tst.w	r0, #1
 800f49c:	bf14      	ite	ne
 800f49e:	801a      	strhne	r2, [r3, #0]
 800f4a0:	601a      	streq	r2, [r3, #0]
 800f4a2:	e6e4      	b.n	800f26e <__svfiscanf_r+0x66>
 800f4a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f4a6:	07d8      	lsls	r0, r3, #31
 800f4a8:	d405      	bmi.n	800f4b6 <__svfiscanf_r+0x2ae>
 800f4aa:	89a3      	ldrh	r3, [r4, #12]
 800f4ac:	0599      	lsls	r1, r3, #22
 800f4ae:	d402      	bmi.n	800f4b6 <__svfiscanf_r+0x2ae>
 800f4b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4b2:	f7fe fbc7 	bl	800dc44 <__retarget_lock_release_recursive>
 800f4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ba:	e79a      	b.n	800f3f2 <__svfiscanf_r+0x1ea>
 800f4bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f4be:	4621      	mov	r1, r4
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	4798      	blx	r3
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	d0aa      	beq.n	800f41e <__svfiscanf_r+0x216>
 800f4c8:	e786      	b.n	800f3d8 <__svfiscanf_r+0x1d0>
 800f4ca:	bf00      	nop
 800f4cc:	0800fbbd 	.word	0x0800fbbd
 800f4d0:	0800f881 	.word	0x0800f881
 800f4d4:	080105b1 	.word	0x080105b1
 800f4d8:	08010982 	.word	0x08010982
 800f4dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f4de:	3201      	adds	r2, #1
 800f4e0:	9245      	str	r2, [sp, #276]	; 0x114
 800f4e2:	6862      	ldr	r2, [r4, #4]
 800f4e4:	3a01      	subs	r2, #1
 800f4e6:	2a00      	cmp	r2, #0
 800f4e8:	6062      	str	r2, [r4, #4]
 800f4ea:	dd02      	ble.n	800f4f2 <__svfiscanf_r+0x2ea>
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	6023      	str	r3, [r4, #0]
 800f4f0:	e798      	b.n	800f424 <__svfiscanf_r+0x21c>
 800f4f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f4f4:	4621      	mov	r1, r4
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	4798      	blx	r3
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d092      	beq.n	800f424 <__svfiscanf_r+0x21c>
 800f4fe:	e76b      	b.n	800f3d8 <__svfiscanf_r+0x1d0>
 800f500:	2b04      	cmp	r3, #4
 800f502:	dc06      	bgt.n	800f512 <__svfiscanf_r+0x30a>
 800f504:	466b      	mov	r3, sp
 800f506:	4622      	mov	r2, r4
 800f508:	a941      	add	r1, sp, #260	; 0x104
 800f50a:	4630      	mov	r0, r6
 800f50c:	f000 f8a4 	bl	800f658 <_scanf_i>
 800f510:	e796      	b.n	800f440 <__svfiscanf_r+0x238>
 800f512:	4b0f      	ldr	r3, [pc, #60]	; (800f550 <__svfiscanf_r+0x348>)
 800f514:	2b00      	cmp	r3, #0
 800f516:	f43f aeaa 	beq.w	800f26e <__svfiscanf_r+0x66>
 800f51a:	466b      	mov	r3, sp
 800f51c:	4622      	mov	r2, r4
 800f51e:	a941      	add	r1, sp, #260	; 0x104
 800f520:	4630      	mov	r0, r6
 800f522:	f7fb fbff 	bl	800ad24 <_scanf_float>
 800f526:	e78b      	b.n	800f440 <__svfiscanf_r+0x238>
 800f528:	89a3      	ldrh	r3, [r4, #12]
 800f52a:	0599      	lsls	r1, r3, #22
 800f52c:	f53f af58 	bmi.w	800f3e0 <__svfiscanf_r+0x1d8>
 800f530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f532:	f7fe fb87 	bl	800dc44 <__retarget_lock_release_recursive>
 800f536:	e753      	b.n	800f3e0 <__svfiscanf_r+0x1d8>
 800f538:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f53a:	07da      	lsls	r2, r3, #31
 800f53c:	d405      	bmi.n	800f54a <__svfiscanf_r+0x342>
 800f53e:	89a3      	ldrh	r3, [r4, #12]
 800f540:	059b      	lsls	r3, r3, #22
 800f542:	d402      	bmi.n	800f54a <__svfiscanf_r+0x342>
 800f544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f546:	f7fe fb7d 	bl	800dc44 <__retarget_lock_release_recursive>
 800f54a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f54c:	e751      	b.n	800f3f2 <__svfiscanf_r+0x1ea>
 800f54e:	bf00      	nop
 800f550:	0800ad25 	.word	0x0800ad25

0800f554 <_vfiscanf_r>:
 800f554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f556:	460c      	mov	r4, r1
 800f558:	4605      	mov	r5, r0
 800f55a:	b138      	cbz	r0, 800f56c <_vfiscanf_r+0x18>
 800f55c:	6981      	ldr	r1, [r0, #24]
 800f55e:	b929      	cbnz	r1, 800f56c <_vfiscanf_r+0x18>
 800f560:	e9cd 2300 	strd	r2, r3, [sp]
 800f564:	f7fd ff3e 	bl	800d3e4 <__sinit>
 800f568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f56c:	490a      	ldr	r1, [pc, #40]	; (800f598 <_vfiscanf_r+0x44>)
 800f56e:	428c      	cmp	r4, r1
 800f570:	d107      	bne.n	800f582 <_vfiscanf_r+0x2e>
 800f572:	686c      	ldr	r4, [r5, #4]
 800f574:	4621      	mov	r1, r4
 800f576:	4628      	mov	r0, r5
 800f578:	b003      	add	sp, #12
 800f57a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f57e:	f7ff be43 	b.w	800f208 <__svfiscanf_r>
 800f582:	4906      	ldr	r1, [pc, #24]	; (800f59c <_vfiscanf_r+0x48>)
 800f584:	428c      	cmp	r4, r1
 800f586:	d101      	bne.n	800f58c <_vfiscanf_r+0x38>
 800f588:	68ac      	ldr	r4, [r5, #8]
 800f58a:	e7f3      	b.n	800f574 <_vfiscanf_r+0x20>
 800f58c:	4904      	ldr	r1, [pc, #16]	; (800f5a0 <_vfiscanf_r+0x4c>)
 800f58e:	428c      	cmp	r4, r1
 800f590:	bf08      	it	eq
 800f592:	68ec      	ldreq	r4, [r5, #12]
 800f594:	e7ee      	b.n	800f574 <_vfiscanf_r+0x20>
 800f596:	bf00      	nop
 800f598:	08010764 	.word	0x08010764
 800f59c:	08010784 	.word	0x08010784
 800f5a0:	08010744 	.word	0x08010744

0800f5a4 <_scanf_chars>:
 800f5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5a8:	4615      	mov	r5, r2
 800f5aa:	688a      	ldr	r2, [r1, #8]
 800f5ac:	4680      	mov	r8, r0
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	b932      	cbnz	r2, 800f5c0 <_scanf_chars+0x1c>
 800f5b2:	698a      	ldr	r2, [r1, #24]
 800f5b4:	2a00      	cmp	r2, #0
 800f5b6:	bf0c      	ite	eq
 800f5b8:	2201      	moveq	r2, #1
 800f5ba:	f04f 32ff 	movne.w	r2, #4294967295
 800f5be:	608a      	str	r2, [r1, #8]
 800f5c0:	6822      	ldr	r2, [r4, #0]
 800f5c2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f654 <_scanf_chars+0xb0>
 800f5c6:	06d1      	lsls	r1, r2, #27
 800f5c8:	bf5f      	itttt	pl
 800f5ca:	681a      	ldrpl	r2, [r3, #0]
 800f5cc:	1d11      	addpl	r1, r2, #4
 800f5ce:	6019      	strpl	r1, [r3, #0]
 800f5d0:	6816      	ldrpl	r6, [r2, #0]
 800f5d2:	2700      	movs	r7, #0
 800f5d4:	69a0      	ldr	r0, [r4, #24]
 800f5d6:	b188      	cbz	r0, 800f5fc <_scanf_chars+0x58>
 800f5d8:	2801      	cmp	r0, #1
 800f5da:	d107      	bne.n	800f5ec <_scanf_chars+0x48>
 800f5dc:	682a      	ldr	r2, [r5, #0]
 800f5de:	7811      	ldrb	r1, [r2, #0]
 800f5e0:	6962      	ldr	r2, [r4, #20]
 800f5e2:	5c52      	ldrb	r2, [r2, r1]
 800f5e4:	b952      	cbnz	r2, 800f5fc <_scanf_chars+0x58>
 800f5e6:	2f00      	cmp	r7, #0
 800f5e8:	d031      	beq.n	800f64e <_scanf_chars+0xaa>
 800f5ea:	e022      	b.n	800f632 <_scanf_chars+0x8e>
 800f5ec:	2802      	cmp	r0, #2
 800f5ee:	d120      	bne.n	800f632 <_scanf_chars+0x8e>
 800f5f0:	682b      	ldr	r3, [r5, #0]
 800f5f2:	781b      	ldrb	r3, [r3, #0]
 800f5f4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f5f8:	071b      	lsls	r3, r3, #28
 800f5fa:	d41a      	bmi.n	800f632 <_scanf_chars+0x8e>
 800f5fc:	6823      	ldr	r3, [r4, #0]
 800f5fe:	06da      	lsls	r2, r3, #27
 800f600:	bf5e      	ittt	pl
 800f602:	682b      	ldrpl	r3, [r5, #0]
 800f604:	781b      	ldrbpl	r3, [r3, #0]
 800f606:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f60a:	682a      	ldr	r2, [r5, #0]
 800f60c:	686b      	ldr	r3, [r5, #4]
 800f60e:	3201      	adds	r2, #1
 800f610:	602a      	str	r2, [r5, #0]
 800f612:	68a2      	ldr	r2, [r4, #8]
 800f614:	3b01      	subs	r3, #1
 800f616:	3a01      	subs	r2, #1
 800f618:	606b      	str	r3, [r5, #4]
 800f61a:	3701      	adds	r7, #1
 800f61c:	60a2      	str	r2, [r4, #8]
 800f61e:	b142      	cbz	r2, 800f632 <_scanf_chars+0x8e>
 800f620:	2b00      	cmp	r3, #0
 800f622:	dcd7      	bgt.n	800f5d4 <_scanf_chars+0x30>
 800f624:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f628:	4629      	mov	r1, r5
 800f62a:	4640      	mov	r0, r8
 800f62c:	4798      	blx	r3
 800f62e:	2800      	cmp	r0, #0
 800f630:	d0d0      	beq.n	800f5d4 <_scanf_chars+0x30>
 800f632:	6823      	ldr	r3, [r4, #0]
 800f634:	f013 0310 	ands.w	r3, r3, #16
 800f638:	d105      	bne.n	800f646 <_scanf_chars+0xa2>
 800f63a:	68e2      	ldr	r2, [r4, #12]
 800f63c:	3201      	adds	r2, #1
 800f63e:	60e2      	str	r2, [r4, #12]
 800f640:	69a2      	ldr	r2, [r4, #24]
 800f642:	b102      	cbz	r2, 800f646 <_scanf_chars+0xa2>
 800f644:	7033      	strb	r3, [r6, #0]
 800f646:	6923      	ldr	r3, [r4, #16]
 800f648:	443b      	add	r3, r7
 800f64a:	6123      	str	r3, [r4, #16]
 800f64c:	2000      	movs	r0, #0
 800f64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f652:	bf00      	nop
 800f654:	080105b1 	.word	0x080105b1

0800f658 <_scanf_i>:
 800f658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65c:	4698      	mov	r8, r3
 800f65e:	4b76      	ldr	r3, [pc, #472]	; (800f838 <_scanf_i+0x1e0>)
 800f660:	460c      	mov	r4, r1
 800f662:	4682      	mov	sl, r0
 800f664:	4616      	mov	r6, r2
 800f666:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f66a:	b087      	sub	sp, #28
 800f66c:	ab03      	add	r3, sp, #12
 800f66e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f672:	4b72      	ldr	r3, [pc, #456]	; (800f83c <_scanf_i+0x1e4>)
 800f674:	69a1      	ldr	r1, [r4, #24]
 800f676:	4a72      	ldr	r2, [pc, #456]	; (800f840 <_scanf_i+0x1e8>)
 800f678:	2903      	cmp	r1, #3
 800f67a:	bf18      	it	ne
 800f67c:	461a      	movne	r2, r3
 800f67e:	68a3      	ldr	r3, [r4, #8]
 800f680:	9201      	str	r2, [sp, #4]
 800f682:	1e5a      	subs	r2, r3, #1
 800f684:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f688:	bf88      	it	hi
 800f68a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f68e:	4627      	mov	r7, r4
 800f690:	bf82      	ittt	hi
 800f692:	eb03 0905 	addhi.w	r9, r3, r5
 800f696:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f69a:	60a3      	strhi	r3, [r4, #8]
 800f69c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f6a0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f6a4:	bf98      	it	ls
 800f6a6:	f04f 0900 	movls.w	r9, #0
 800f6aa:	6023      	str	r3, [r4, #0]
 800f6ac:	463d      	mov	r5, r7
 800f6ae:	f04f 0b00 	mov.w	fp, #0
 800f6b2:	6831      	ldr	r1, [r6, #0]
 800f6b4:	ab03      	add	r3, sp, #12
 800f6b6:	7809      	ldrb	r1, [r1, #0]
 800f6b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f6bc:	2202      	movs	r2, #2
 800f6be:	f7f0 fdaf 	bl	8000220 <memchr>
 800f6c2:	b328      	cbz	r0, 800f710 <_scanf_i+0xb8>
 800f6c4:	f1bb 0f01 	cmp.w	fp, #1
 800f6c8:	d159      	bne.n	800f77e <_scanf_i+0x126>
 800f6ca:	6862      	ldr	r2, [r4, #4]
 800f6cc:	b92a      	cbnz	r2, 800f6da <_scanf_i+0x82>
 800f6ce:	6822      	ldr	r2, [r4, #0]
 800f6d0:	2308      	movs	r3, #8
 800f6d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f6d6:	6063      	str	r3, [r4, #4]
 800f6d8:	6022      	str	r2, [r4, #0]
 800f6da:	6822      	ldr	r2, [r4, #0]
 800f6dc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f6e0:	6022      	str	r2, [r4, #0]
 800f6e2:	68a2      	ldr	r2, [r4, #8]
 800f6e4:	1e51      	subs	r1, r2, #1
 800f6e6:	60a1      	str	r1, [r4, #8]
 800f6e8:	b192      	cbz	r2, 800f710 <_scanf_i+0xb8>
 800f6ea:	6832      	ldr	r2, [r6, #0]
 800f6ec:	1c51      	adds	r1, r2, #1
 800f6ee:	6031      	str	r1, [r6, #0]
 800f6f0:	7812      	ldrb	r2, [r2, #0]
 800f6f2:	f805 2b01 	strb.w	r2, [r5], #1
 800f6f6:	6872      	ldr	r2, [r6, #4]
 800f6f8:	3a01      	subs	r2, #1
 800f6fa:	2a00      	cmp	r2, #0
 800f6fc:	6072      	str	r2, [r6, #4]
 800f6fe:	dc07      	bgt.n	800f710 <_scanf_i+0xb8>
 800f700:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f704:	4631      	mov	r1, r6
 800f706:	4650      	mov	r0, sl
 800f708:	4790      	blx	r2
 800f70a:	2800      	cmp	r0, #0
 800f70c:	f040 8085 	bne.w	800f81a <_scanf_i+0x1c2>
 800f710:	f10b 0b01 	add.w	fp, fp, #1
 800f714:	f1bb 0f03 	cmp.w	fp, #3
 800f718:	d1cb      	bne.n	800f6b2 <_scanf_i+0x5a>
 800f71a:	6863      	ldr	r3, [r4, #4]
 800f71c:	b90b      	cbnz	r3, 800f722 <_scanf_i+0xca>
 800f71e:	230a      	movs	r3, #10
 800f720:	6063      	str	r3, [r4, #4]
 800f722:	6863      	ldr	r3, [r4, #4]
 800f724:	4947      	ldr	r1, [pc, #284]	; (800f844 <_scanf_i+0x1ec>)
 800f726:	6960      	ldr	r0, [r4, #20]
 800f728:	1ac9      	subs	r1, r1, r3
 800f72a:	f000 f94d 	bl	800f9c8 <__sccl>
 800f72e:	f04f 0b00 	mov.w	fp, #0
 800f732:	68a3      	ldr	r3, [r4, #8]
 800f734:	6822      	ldr	r2, [r4, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d03d      	beq.n	800f7b6 <_scanf_i+0x15e>
 800f73a:	6831      	ldr	r1, [r6, #0]
 800f73c:	6960      	ldr	r0, [r4, #20]
 800f73e:	f891 c000 	ldrb.w	ip, [r1]
 800f742:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f746:	2800      	cmp	r0, #0
 800f748:	d035      	beq.n	800f7b6 <_scanf_i+0x15e>
 800f74a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f74e:	d124      	bne.n	800f79a <_scanf_i+0x142>
 800f750:	0510      	lsls	r0, r2, #20
 800f752:	d522      	bpl.n	800f79a <_scanf_i+0x142>
 800f754:	f10b 0b01 	add.w	fp, fp, #1
 800f758:	f1b9 0f00 	cmp.w	r9, #0
 800f75c:	d003      	beq.n	800f766 <_scanf_i+0x10e>
 800f75e:	3301      	adds	r3, #1
 800f760:	f109 39ff 	add.w	r9, r9, #4294967295
 800f764:	60a3      	str	r3, [r4, #8]
 800f766:	6873      	ldr	r3, [r6, #4]
 800f768:	3b01      	subs	r3, #1
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	6073      	str	r3, [r6, #4]
 800f76e:	dd1b      	ble.n	800f7a8 <_scanf_i+0x150>
 800f770:	6833      	ldr	r3, [r6, #0]
 800f772:	3301      	adds	r3, #1
 800f774:	6033      	str	r3, [r6, #0]
 800f776:	68a3      	ldr	r3, [r4, #8]
 800f778:	3b01      	subs	r3, #1
 800f77a:	60a3      	str	r3, [r4, #8]
 800f77c:	e7d9      	b.n	800f732 <_scanf_i+0xda>
 800f77e:	f1bb 0f02 	cmp.w	fp, #2
 800f782:	d1ae      	bne.n	800f6e2 <_scanf_i+0x8a>
 800f784:	6822      	ldr	r2, [r4, #0]
 800f786:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f78a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f78e:	d1bf      	bne.n	800f710 <_scanf_i+0xb8>
 800f790:	2310      	movs	r3, #16
 800f792:	6063      	str	r3, [r4, #4]
 800f794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f798:	e7a2      	b.n	800f6e0 <_scanf_i+0x88>
 800f79a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f79e:	6022      	str	r2, [r4, #0]
 800f7a0:	780b      	ldrb	r3, [r1, #0]
 800f7a2:	f805 3b01 	strb.w	r3, [r5], #1
 800f7a6:	e7de      	b.n	800f766 <_scanf_i+0x10e>
 800f7a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f7ac:	4631      	mov	r1, r6
 800f7ae:	4650      	mov	r0, sl
 800f7b0:	4798      	blx	r3
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	d0df      	beq.n	800f776 <_scanf_i+0x11e>
 800f7b6:	6823      	ldr	r3, [r4, #0]
 800f7b8:	05db      	lsls	r3, r3, #23
 800f7ba:	d50d      	bpl.n	800f7d8 <_scanf_i+0x180>
 800f7bc:	42bd      	cmp	r5, r7
 800f7be:	d909      	bls.n	800f7d4 <_scanf_i+0x17c>
 800f7c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f7c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f7c8:	4632      	mov	r2, r6
 800f7ca:	4650      	mov	r0, sl
 800f7cc:	4798      	blx	r3
 800f7ce:	f105 39ff 	add.w	r9, r5, #4294967295
 800f7d2:	464d      	mov	r5, r9
 800f7d4:	42bd      	cmp	r5, r7
 800f7d6:	d02d      	beq.n	800f834 <_scanf_i+0x1dc>
 800f7d8:	6822      	ldr	r2, [r4, #0]
 800f7da:	f012 0210 	ands.w	r2, r2, #16
 800f7de:	d113      	bne.n	800f808 <_scanf_i+0x1b0>
 800f7e0:	702a      	strb	r2, [r5, #0]
 800f7e2:	6863      	ldr	r3, [r4, #4]
 800f7e4:	9e01      	ldr	r6, [sp, #4]
 800f7e6:	4639      	mov	r1, r7
 800f7e8:	4650      	mov	r0, sl
 800f7ea:	47b0      	blx	r6
 800f7ec:	6821      	ldr	r1, [r4, #0]
 800f7ee:	f8d8 3000 	ldr.w	r3, [r8]
 800f7f2:	f011 0f20 	tst.w	r1, #32
 800f7f6:	d013      	beq.n	800f820 <_scanf_i+0x1c8>
 800f7f8:	1d1a      	adds	r2, r3, #4
 800f7fa:	f8c8 2000 	str.w	r2, [r8]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	6018      	str	r0, [r3, #0]
 800f802:	68e3      	ldr	r3, [r4, #12]
 800f804:	3301      	adds	r3, #1
 800f806:	60e3      	str	r3, [r4, #12]
 800f808:	1bed      	subs	r5, r5, r7
 800f80a:	44ab      	add	fp, r5
 800f80c:	6925      	ldr	r5, [r4, #16]
 800f80e:	445d      	add	r5, fp
 800f810:	6125      	str	r5, [r4, #16]
 800f812:	2000      	movs	r0, #0
 800f814:	b007      	add	sp, #28
 800f816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f81a:	f04f 0b00 	mov.w	fp, #0
 800f81e:	e7ca      	b.n	800f7b6 <_scanf_i+0x15e>
 800f820:	1d1a      	adds	r2, r3, #4
 800f822:	f8c8 2000 	str.w	r2, [r8]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f011 0f01 	tst.w	r1, #1
 800f82c:	bf14      	ite	ne
 800f82e:	8018      	strhne	r0, [r3, #0]
 800f830:	6018      	streq	r0, [r3, #0]
 800f832:	e7e6      	b.n	800f802 <_scanf_i+0x1aa>
 800f834:	2001      	movs	r0, #1
 800f836:	e7ed      	b.n	800f814 <_scanf_i+0x1bc>
 800f838:	080104f8 	.word	0x080104f8
 800f83c:	0800fb45 	.word	0x0800fb45
 800f840:	0800c2cd 	.word	0x0800c2cd
 800f844:	080109a6 	.word	0x080109a6

0800f848 <_read_r>:
 800f848:	b538      	push	{r3, r4, r5, lr}
 800f84a:	4d07      	ldr	r5, [pc, #28]	; (800f868 <_read_r+0x20>)
 800f84c:	4604      	mov	r4, r0
 800f84e:	4608      	mov	r0, r1
 800f850:	4611      	mov	r1, r2
 800f852:	2200      	movs	r2, #0
 800f854:	602a      	str	r2, [r5, #0]
 800f856:	461a      	mov	r2, r3
 800f858:	f7f2 fd68 	bl	800232c <_read>
 800f85c:	1c43      	adds	r3, r0, #1
 800f85e:	d102      	bne.n	800f866 <_read_r+0x1e>
 800f860:	682b      	ldr	r3, [r5, #0]
 800f862:	b103      	cbz	r3, 800f866 <_read_r+0x1e>
 800f864:	6023      	str	r3, [r4, #0]
 800f866:	bd38      	pop	{r3, r4, r5, pc}
 800f868:	200004dc 	.word	0x200004dc

0800f86c <lflush>:
 800f86c:	8983      	ldrh	r3, [r0, #12]
 800f86e:	f003 0309 	and.w	r3, r3, #9
 800f872:	2b09      	cmp	r3, #9
 800f874:	d101      	bne.n	800f87a <lflush+0xe>
 800f876:	f7fd bd4b 	b.w	800d310 <fflush>
 800f87a:	2000      	movs	r0, #0
 800f87c:	4770      	bx	lr
	...

0800f880 <__srefill_r>:
 800f880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f882:	460c      	mov	r4, r1
 800f884:	4605      	mov	r5, r0
 800f886:	b118      	cbz	r0, 800f890 <__srefill_r+0x10>
 800f888:	6983      	ldr	r3, [r0, #24]
 800f88a:	b90b      	cbnz	r3, 800f890 <__srefill_r+0x10>
 800f88c:	f7fd fdaa 	bl	800d3e4 <__sinit>
 800f890:	4b3b      	ldr	r3, [pc, #236]	; (800f980 <__srefill_r+0x100>)
 800f892:	429c      	cmp	r4, r3
 800f894:	d10a      	bne.n	800f8ac <__srefill_r+0x2c>
 800f896:	686c      	ldr	r4, [r5, #4]
 800f898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f89c:	2300      	movs	r3, #0
 800f89e:	6063      	str	r3, [r4, #4]
 800f8a0:	89a3      	ldrh	r3, [r4, #12]
 800f8a2:	069e      	lsls	r6, r3, #26
 800f8a4:	d50c      	bpl.n	800f8c0 <__srefill_r+0x40>
 800f8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f8aa:	e066      	b.n	800f97a <__srefill_r+0xfa>
 800f8ac:	4b35      	ldr	r3, [pc, #212]	; (800f984 <__srefill_r+0x104>)
 800f8ae:	429c      	cmp	r4, r3
 800f8b0:	d101      	bne.n	800f8b6 <__srefill_r+0x36>
 800f8b2:	68ac      	ldr	r4, [r5, #8]
 800f8b4:	e7f0      	b.n	800f898 <__srefill_r+0x18>
 800f8b6:	4b34      	ldr	r3, [pc, #208]	; (800f988 <__srefill_r+0x108>)
 800f8b8:	429c      	cmp	r4, r3
 800f8ba:	bf08      	it	eq
 800f8bc:	68ec      	ldreq	r4, [r5, #12]
 800f8be:	e7eb      	b.n	800f898 <__srefill_r+0x18>
 800f8c0:	0758      	lsls	r0, r3, #29
 800f8c2:	d448      	bmi.n	800f956 <__srefill_r+0xd6>
 800f8c4:	06d9      	lsls	r1, r3, #27
 800f8c6:	d405      	bmi.n	800f8d4 <__srefill_r+0x54>
 800f8c8:	2309      	movs	r3, #9
 800f8ca:	602b      	str	r3, [r5, #0]
 800f8cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f8d0:	81a3      	strh	r3, [r4, #12]
 800f8d2:	e7e8      	b.n	800f8a6 <__srefill_r+0x26>
 800f8d4:	071a      	lsls	r2, r3, #28
 800f8d6:	d50b      	bpl.n	800f8f0 <__srefill_r+0x70>
 800f8d8:	4621      	mov	r1, r4
 800f8da:	4628      	mov	r0, r5
 800f8dc:	f7fd fcdc 	bl	800d298 <_fflush_r>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d1e0      	bne.n	800f8a6 <__srefill_r+0x26>
 800f8e4:	89a3      	ldrh	r3, [r4, #12]
 800f8e6:	60a0      	str	r0, [r4, #8]
 800f8e8:	f023 0308 	bic.w	r3, r3, #8
 800f8ec:	81a3      	strh	r3, [r4, #12]
 800f8ee:	61a0      	str	r0, [r4, #24]
 800f8f0:	89a3      	ldrh	r3, [r4, #12]
 800f8f2:	f043 0304 	orr.w	r3, r3, #4
 800f8f6:	81a3      	strh	r3, [r4, #12]
 800f8f8:	6923      	ldr	r3, [r4, #16]
 800f8fa:	b91b      	cbnz	r3, 800f904 <__srefill_r+0x84>
 800f8fc:	4621      	mov	r1, r4
 800f8fe:	4628      	mov	r0, r5
 800f900:	f7fe f9da 	bl	800dcb8 <__smakebuf_r>
 800f904:	89a6      	ldrh	r6, [r4, #12]
 800f906:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800f90a:	07b3      	lsls	r3, r6, #30
 800f90c:	d00f      	beq.n	800f92e <__srefill_r+0xae>
 800f90e:	2301      	movs	r3, #1
 800f910:	81a3      	strh	r3, [r4, #12]
 800f912:	4b1e      	ldr	r3, [pc, #120]	; (800f98c <__srefill_r+0x10c>)
 800f914:	491e      	ldr	r1, [pc, #120]	; (800f990 <__srefill_r+0x110>)
 800f916:	6818      	ldr	r0, [r3, #0]
 800f918:	f006 0609 	and.w	r6, r6, #9
 800f91c:	f7fd fde0 	bl	800d4e0 <_fwalk>
 800f920:	2e09      	cmp	r6, #9
 800f922:	81a7      	strh	r7, [r4, #12]
 800f924:	d103      	bne.n	800f92e <__srefill_r+0xae>
 800f926:	4621      	mov	r1, r4
 800f928:	4628      	mov	r0, r5
 800f92a:	f7fd fc2f 	bl	800d18c <__sflush_r>
 800f92e:	6922      	ldr	r2, [r4, #16]
 800f930:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f932:	6963      	ldr	r3, [r4, #20]
 800f934:	6a21      	ldr	r1, [r4, #32]
 800f936:	6022      	str	r2, [r4, #0]
 800f938:	4628      	mov	r0, r5
 800f93a:	47b0      	blx	r6
 800f93c:	2800      	cmp	r0, #0
 800f93e:	6060      	str	r0, [r4, #4]
 800f940:	dc1c      	bgt.n	800f97c <__srefill_r+0xfc>
 800f942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f946:	bf17      	itett	ne
 800f948:	2200      	movne	r2, #0
 800f94a:	f043 0320 	orreq.w	r3, r3, #32
 800f94e:	6062      	strne	r2, [r4, #4]
 800f950:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800f954:	e7bc      	b.n	800f8d0 <__srefill_r+0x50>
 800f956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f958:	2900      	cmp	r1, #0
 800f95a:	d0cd      	beq.n	800f8f8 <__srefill_r+0x78>
 800f95c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f960:	4299      	cmp	r1, r3
 800f962:	d002      	beq.n	800f96a <__srefill_r+0xea>
 800f964:	4628      	mov	r0, r5
 800f966:	f7fe fee7 	bl	800e738 <_free_r>
 800f96a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f96c:	6063      	str	r3, [r4, #4]
 800f96e:	2000      	movs	r0, #0
 800f970:	6360      	str	r0, [r4, #52]	; 0x34
 800f972:	2b00      	cmp	r3, #0
 800f974:	d0c0      	beq.n	800f8f8 <__srefill_r+0x78>
 800f976:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f978:	6023      	str	r3, [r4, #0]
 800f97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f97c:	2000      	movs	r0, #0
 800f97e:	e7fc      	b.n	800f97a <__srefill_r+0xfa>
 800f980:	08010764 	.word	0x08010764
 800f984:	08010784 	.word	0x08010784
 800f988:	08010744 	.word	0x08010744
 800f98c:	08010524 	.word	0x08010524
 800f990:	0800f86d 	.word	0x0800f86d
 800f994:	00000000 	.word	0x00000000

0800f998 <nan>:
 800f998:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f9a0 <nan+0x8>
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop
 800f9a0:	00000000 	.word	0x00000000
 800f9a4:	7ff80000 	.word	0x7ff80000

0800f9a8 <_sbrk_r>:
 800f9a8:	b538      	push	{r3, r4, r5, lr}
 800f9aa:	4d06      	ldr	r5, [pc, #24]	; (800f9c4 <_sbrk_r+0x1c>)
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	4608      	mov	r0, r1
 800f9b2:	602b      	str	r3, [r5, #0]
 800f9b4:	f7f2 fd28 	bl	8002408 <_sbrk>
 800f9b8:	1c43      	adds	r3, r0, #1
 800f9ba:	d102      	bne.n	800f9c2 <_sbrk_r+0x1a>
 800f9bc:	682b      	ldr	r3, [r5, #0]
 800f9be:	b103      	cbz	r3, 800f9c2 <_sbrk_r+0x1a>
 800f9c0:	6023      	str	r3, [r4, #0]
 800f9c2:	bd38      	pop	{r3, r4, r5, pc}
 800f9c4:	200004dc 	.word	0x200004dc

0800f9c8 <__sccl>:
 800f9c8:	b570      	push	{r4, r5, r6, lr}
 800f9ca:	780b      	ldrb	r3, [r1, #0]
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	2b5e      	cmp	r3, #94	; 0x5e
 800f9d0:	bf0b      	itete	eq
 800f9d2:	784b      	ldrbeq	r3, [r1, #1]
 800f9d4:	1c48      	addne	r0, r1, #1
 800f9d6:	1c88      	addeq	r0, r1, #2
 800f9d8:	2200      	movne	r2, #0
 800f9da:	bf08      	it	eq
 800f9dc:	2201      	moveq	r2, #1
 800f9de:	1e61      	subs	r1, r4, #1
 800f9e0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800f9e4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800f9e8:	42a9      	cmp	r1, r5
 800f9ea:	d1fb      	bne.n	800f9e4 <__sccl+0x1c>
 800f9ec:	b90b      	cbnz	r3, 800f9f2 <__sccl+0x2a>
 800f9ee:	3801      	subs	r0, #1
 800f9f0:	bd70      	pop	{r4, r5, r6, pc}
 800f9f2:	f082 0201 	eor.w	r2, r2, #1
 800f9f6:	54e2      	strb	r2, [r4, r3]
 800f9f8:	4605      	mov	r5, r0
 800f9fa:	4628      	mov	r0, r5
 800f9fc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fa00:	292d      	cmp	r1, #45	; 0x2d
 800fa02:	d006      	beq.n	800fa12 <__sccl+0x4a>
 800fa04:	295d      	cmp	r1, #93	; 0x5d
 800fa06:	d0f3      	beq.n	800f9f0 <__sccl+0x28>
 800fa08:	b909      	cbnz	r1, 800fa0e <__sccl+0x46>
 800fa0a:	4628      	mov	r0, r5
 800fa0c:	e7f0      	b.n	800f9f0 <__sccl+0x28>
 800fa0e:	460b      	mov	r3, r1
 800fa10:	e7f1      	b.n	800f9f6 <__sccl+0x2e>
 800fa12:	786e      	ldrb	r6, [r5, #1]
 800fa14:	2e5d      	cmp	r6, #93	; 0x5d
 800fa16:	d0fa      	beq.n	800fa0e <__sccl+0x46>
 800fa18:	42b3      	cmp	r3, r6
 800fa1a:	dcf8      	bgt.n	800fa0e <__sccl+0x46>
 800fa1c:	3502      	adds	r5, #2
 800fa1e:	4619      	mov	r1, r3
 800fa20:	3101      	adds	r1, #1
 800fa22:	428e      	cmp	r6, r1
 800fa24:	5462      	strb	r2, [r4, r1]
 800fa26:	dcfb      	bgt.n	800fa20 <__sccl+0x58>
 800fa28:	1af1      	subs	r1, r6, r3
 800fa2a:	3901      	subs	r1, #1
 800fa2c:	1c58      	adds	r0, r3, #1
 800fa2e:	42b3      	cmp	r3, r6
 800fa30:	bfa8      	it	ge
 800fa32:	2100      	movge	r1, #0
 800fa34:	1843      	adds	r3, r0, r1
 800fa36:	e7e0      	b.n	800f9fa <__sccl+0x32>

0800fa38 <strncmp>:
 800fa38:	b510      	push	{r4, lr}
 800fa3a:	b17a      	cbz	r2, 800fa5c <strncmp+0x24>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	3901      	subs	r1, #1
 800fa40:	1884      	adds	r4, r0, r2
 800fa42:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fa46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fa4a:	4290      	cmp	r0, r2
 800fa4c:	d101      	bne.n	800fa52 <strncmp+0x1a>
 800fa4e:	42a3      	cmp	r3, r4
 800fa50:	d101      	bne.n	800fa56 <strncmp+0x1e>
 800fa52:	1a80      	subs	r0, r0, r2
 800fa54:	bd10      	pop	{r4, pc}
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d1f3      	bne.n	800fa42 <strncmp+0xa>
 800fa5a:	e7fa      	b.n	800fa52 <strncmp+0x1a>
 800fa5c:	4610      	mov	r0, r2
 800fa5e:	e7f9      	b.n	800fa54 <strncmp+0x1c>

0800fa60 <_strtoul_l.constprop.0>:
 800fa60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa64:	4f36      	ldr	r7, [pc, #216]	; (800fb40 <_strtoul_l.constprop.0+0xe0>)
 800fa66:	4686      	mov	lr, r0
 800fa68:	460d      	mov	r5, r1
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa70:	5de6      	ldrb	r6, [r4, r7]
 800fa72:	f016 0608 	ands.w	r6, r6, #8
 800fa76:	d1f8      	bne.n	800fa6a <_strtoul_l.constprop.0+0xa>
 800fa78:	2c2d      	cmp	r4, #45	; 0x2d
 800fa7a:	d12f      	bne.n	800fadc <_strtoul_l.constprop.0+0x7c>
 800fa7c:	782c      	ldrb	r4, [r5, #0]
 800fa7e:	2601      	movs	r6, #1
 800fa80:	1c85      	adds	r5, r0, #2
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d057      	beq.n	800fb36 <_strtoul_l.constprop.0+0xd6>
 800fa86:	2b10      	cmp	r3, #16
 800fa88:	d109      	bne.n	800fa9e <_strtoul_l.constprop.0+0x3e>
 800fa8a:	2c30      	cmp	r4, #48	; 0x30
 800fa8c:	d107      	bne.n	800fa9e <_strtoul_l.constprop.0+0x3e>
 800fa8e:	7828      	ldrb	r0, [r5, #0]
 800fa90:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fa94:	2858      	cmp	r0, #88	; 0x58
 800fa96:	d149      	bne.n	800fb2c <_strtoul_l.constprop.0+0xcc>
 800fa98:	786c      	ldrb	r4, [r5, #1]
 800fa9a:	2310      	movs	r3, #16
 800fa9c:	3502      	adds	r5, #2
 800fa9e:	f04f 38ff 	mov.w	r8, #4294967295
 800faa2:	2700      	movs	r7, #0
 800faa4:	fbb8 f8f3 	udiv	r8, r8, r3
 800faa8:	fb03 f908 	mul.w	r9, r3, r8
 800faac:	ea6f 0909 	mvn.w	r9, r9
 800fab0:	4638      	mov	r0, r7
 800fab2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fab6:	f1bc 0f09 	cmp.w	ip, #9
 800faba:	d814      	bhi.n	800fae6 <_strtoul_l.constprop.0+0x86>
 800fabc:	4664      	mov	r4, ip
 800fabe:	42a3      	cmp	r3, r4
 800fac0:	dd22      	ble.n	800fb08 <_strtoul_l.constprop.0+0xa8>
 800fac2:	2f00      	cmp	r7, #0
 800fac4:	db1d      	blt.n	800fb02 <_strtoul_l.constprop.0+0xa2>
 800fac6:	4580      	cmp	r8, r0
 800fac8:	d31b      	bcc.n	800fb02 <_strtoul_l.constprop.0+0xa2>
 800faca:	d101      	bne.n	800fad0 <_strtoul_l.constprop.0+0x70>
 800facc:	45a1      	cmp	r9, r4
 800face:	db18      	blt.n	800fb02 <_strtoul_l.constprop.0+0xa2>
 800fad0:	fb00 4003 	mla	r0, r0, r3, r4
 800fad4:	2701      	movs	r7, #1
 800fad6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fada:	e7ea      	b.n	800fab2 <_strtoul_l.constprop.0+0x52>
 800fadc:	2c2b      	cmp	r4, #43	; 0x2b
 800fade:	bf04      	itt	eq
 800fae0:	782c      	ldrbeq	r4, [r5, #0]
 800fae2:	1c85      	addeq	r5, r0, #2
 800fae4:	e7cd      	b.n	800fa82 <_strtoul_l.constprop.0+0x22>
 800fae6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800faea:	f1bc 0f19 	cmp.w	ip, #25
 800faee:	d801      	bhi.n	800faf4 <_strtoul_l.constprop.0+0x94>
 800faf0:	3c37      	subs	r4, #55	; 0x37
 800faf2:	e7e4      	b.n	800fabe <_strtoul_l.constprop.0+0x5e>
 800faf4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800faf8:	f1bc 0f19 	cmp.w	ip, #25
 800fafc:	d804      	bhi.n	800fb08 <_strtoul_l.constprop.0+0xa8>
 800fafe:	3c57      	subs	r4, #87	; 0x57
 800fb00:	e7dd      	b.n	800fabe <_strtoul_l.constprop.0+0x5e>
 800fb02:	f04f 37ff 	mov.w	r7, #4294967295
 800fb06:	e7e6      	b.n	800fad6 <_strtoul_l.constprop.0+0x76>
 800fb08:	2f00      	cmp	r7, #0
 800fb0a:	da07      	bge.n	800fb1c <_strtoul_l.constprop.0+0xbc>
 800fb0c:	2322      	movs	r3, #34	; 0x22
 800fb0e:	f8ce 3000 	str.w	r3, [lr]
 800fb12:	f04f 30ff 	mov.w	r0, #4294967295
 800fb16:	b932      	cbnz	r2, 800fb26 <_strtoul_l.constprop.0+0xc6>
 800fb18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb1c:	b106      	cbz	r6, 800fb20 <_strtoul_l.constprop.0+0xc0>
 800fb1e:	4240      	negs	r0, r0
 800fb20:	2a00      	cmp	r2, #0
 800fb22:	d0f9      	beq.n	800fb18 <_strtoul_l.constprop.0+0xb8>
 800fb24:	b107      	cbz	r7, 800fb28 <_strtoul_l.constprop.0+0xc8>
 800fb26:	1e69      	subs	r1, r5, #1
 800fb28:	6011      	str	r1, [r2, #0]
 800fb2a:	e7f5      	b.n	800fb18 <_strtoul_l.constprop.0+0xb8>
 800fb2c:	2430      	movs	r4, #48	; 0x30
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d1b5      	bne.n	800fa9e <_strtoul_l.constprop.0+0x3e>
 800fb32:	2308      	movs	r3, #8
 800fb34:	e7b3      	b.n	800fa9e <_strtoul_l.constprop.0+0x3e>
 800fb36:	2c30      	cmp	r4, #48	; 0x30
 800fb38:	d0a9      	beq.n	800fa8e <_strtoul_l.constprop.0+0x2e>
 800fb3a:	230a      	movs	r3, #10
 800fb3c:	e7af      	b.n	800fa9e <_strtoul_l.constprop.0+0x3e>
 800fb3e:	bf00      	nop
 800fb40:	080105b1 	.word	0x080105b1

0800fb44 <_strtoul_r>:
 800fb44:	f7ff bf8c 	b.w	800fa60 <_strtoul_l.constprop.0>

0800fb48 <__submore>:
 800fb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb4c:	460c      	mov	r4, r1
 800fb4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fb50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb54:	4299      	cmp	r1, r3
 800fb56:	d11d      	bne.n	800fb94 <__submore+0x4c>
 800fb58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fb5c:	f7fe fe58 	bl	800e810 <_malloc_r>
 800fb60:	b918      	cbnz	r0, 800fb6a <__submore+0x22>
 800fb62:	f04f 30ff 	mov.w	r0, #4294967295
 800fb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb6e:	63a3      	str	r3, [r4, #56]	; 0x38
 800fb70:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fb74:	6360      	str	r0, [r4, #52]	; 0x34
 800fb76:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fb7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fb7e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fb82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fb86:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fb8a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fb8e:	6020      	str	r0, [r4, #0]
 800fb90:	2000      	movs	r0, #0
 800fb92:	e7e8      	b.n	800fb66 <__submore+0x1e>
 800fb94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fb96:	0077      	lsls	r7, r6, #1
 800fb98:	463a      	mov	r2, r7
 800fb9a:	f000 f92d 	bl	800fdf8 <_realloc_r>
 800fb9e:	4605      	mov	r5, r0
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d0de      	beq.n	800fb62 <__submore+0x1a>
 800fba4:	eb00 0806 	add.w	r8, r0, r6
 800fba8:	4601      	mov	r1, r0
 800fbaa:	4632      	mov	r2, r6
 800fbac:	4640      	mov	r0, r8
 800fbae:	f7fe f8dd 	bl	800dd6c <memcpy>
 800fbb2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fbb6:	f8c4 8000 	str.w	r8, [r4]
 800fbba:	e7e9      	b.n	800fb90 <__submore+0x48>

0800fbbc <_ungetc_r>:
 800fbbc:	b570      	push	{r4, r5, r6, lr}
 800fbbe:	4614      	mov	r4, r2
 800fbc0:	1c4a      	adds	r2, r1, #1
 800fbc2:	4606      	mov	r6, r0
 800fbc4:	460d      	mov	r5, r1
 800fbc6:	d103      	bne.n	800fbd0 <_ungetc_r+0x14>
 800fbc8:	f04f 35ff 	mov.w	r5, #4294967295
 800fbcc:	4628      	mov	r0, r5
 800fbce:	bd70      	pop	{r4, r5, r6, pc}
 800fbd0:	b118      	cbz	r0, 800fbda <_ungetc_r+0x1e>
 800fbd2:	6983      	ldr	r3, [r0, #24]
 800fbd4:	b90b      	cbnz	r3, 800fbda <_ungetc_r+0x1e>
 800fbd6:	f7fd fc05 	bl	800d3e4 <__sinit>
 800fbda:	4b41      	ldr	r3, [pc, #260]	; (800fce0 <_ungetc_r+0x124>)
 800fbdc:	429c      	cmp	r4, r3
 800fbde:	d11d      	bne.n	800fc1c <_ungetc_r+0x60>
 800fbe0:	6874      	ldr	r4, [r6, #4]
 800fbe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbe4:	07db      	lsls	r3, r3, #31
 800fbe6:	d405      	bmi.n	800fbf4 <_ungetc_r+0x38>
 800fbe8:	89a3      	ldrh	r3, [r4, #12]
 800fbea:	0598      	lsls	r0, r3, #22
 800fbec:	d402      	bmi.n	800fbf4 <_ungetc_r+0x38>
 800fbee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbf0:	f7fe f827 	bl	800dc42 <__retarget_lock_acquire_recursive>
 800fbf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbf8:	f023 0320 	bic.w	r3, r3, #32
 800fbfc:	0759      	lsls	r1, r3, #29
 800fbfe:	81a3      	strh	r3, [r4, #12]
 800fc00:	b29a      	uxth	r2, r3
 800fc02:	d42d      	bmi.n	800fc60 <_ungetc_r+0xa4>
 800fc04:	06d3      	lsls	r3, r2, #27
 800fc06:	d413      	bmi.n	800fc30 <_ungetc_r+0x74>
 800fc08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc0a:	07dd      	lsls	r5, r3, #31
 800fc0c:	d4dc      	bmi.n	800fbc8 <_ungetc_r+0xc>
 800fc0e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800fc12:	d1d9      	bne.n	800fbc8 <_ungetc_r+0xc>
 800fc14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc16:	f7fe f815 	bl	800dc44 <__retarget_lock_release_recursive>
 800fc1a:	e7d5      	b.n	800fbc8 <_ungetc_r+0xc>
 800fc1c:	4b31      	ldr	r3, [pc, #196]	; (800fce4 <_ungetc_r+0x128>)
 800fc1e:	429c      	cmp	r4, r3
 800fc20:	d101      	bne.n	800fc26 <_ungetc_r+0x6a>
 800fc22:	68b4      	ldr	r4, [r6, #8]
 800fc24:	e7dd      	b.n	800fbe2 <_ungetc_r+0x26>
 800fc26:	4b30      	ldr	r3, [pc, #192]	; (800fce8 <_ungetc_r+0x12c>)
 800fc28:	429c      	cmp	r4, r3
 800fc2a:	bf08      	it	eq
 800fc2c:	68f4      	ldreq	r4, [r6, #12]
 800fc2e:	e7d8      	b.n	800fbe2 <_ungetc_r+0x26>
 800fc30:	0710      	lsls	r0, r2, #28
 800fc32:	d511      	bpl.n	800fc58 <_ungetc_r+0x9c>
 800fc34:	4621      	mov	r1, r4
 800fc36:	4630      	mov	r0, r6
 800fc38:	f7fd fb2e 	bl	800d298 <_fflush_r>
 800fc3c:	b130      	cbz	r0, 800fc4c <_ungetc_r+0x90>
 800fc3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc40:	07d9      	lsls	r1, r3, #31
 800fc42:	d4c1      	bmi.n	800fbc8 <_ungetc_r+0xc>
 800fc44:	89a3      	ldrh	r3, [r4, #12]
 800fc46:	f413 7f00 	tst.w	r3, #512	; 0x200
 800fc4a:	e7e2      	b.n	800fc12 <_ungetc_r+0x56>
 800fc4c:	89a3      	ldrh	r3, [r4, #12]
 800fc4e:	60a0      	str	r0, [r4, #8]
 800fc50:	f023 0308 	bic.w	r3, r3, #8
 800fc54:	81a3      	strh	r3, [r4, #12]
 800fc56:	61a0      	str	r0, [r4, #24]
 800fc58:	89a3      	ldrh	r3, [r4, #12]
 800fc5a:	f043 0304 	orr.w	r3, r3, #4
 800fc5e:	81a3      	strh	r3, [r4, #12]
 800fc60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc62:	6862      	ldr	r2, [r4, #4]
 800fc64:	b2ed      	uxtb	r5, r5
 800fc66:	b1d3      	cbz	r3, 800fc9e <_ungetc_r+0xe2>
 800fc68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	dc05      	bgt.n	800fc7a <_ungetc_r+0xbe>
 800fc6e:	4621      	mov	r1, r4
 800fc70:	4630      	mov	r0, r6
 800fc72:	f7ff ff69 	bl	800fb48 <__submore>
 800fc76:	2800      	cmp	r0, #0
 800fc78:	d1e1      	bne.n	800fc3e <_ungetc_r+0x82>
 800fc7a:	6823      	ldr	r3, [r4, #0]
 800fc7c:	1e5a      	subs	r2, r3, #1
 800fc7e:	6022      	str	r2, [r4, #0]
 800fc80:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fc84:	6863      	ldr	r3, [r4, #4]
 800fc86:	3301      	adds	r3, #1
 800fc88:	6063      	str	r3, [r4, #4]
 800fc8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc8c:	07da      	lsls	r2, r3, #31
 800fc8e:	d49d      	bmi.n	800fbcc <_ungetc_r+0x10>
 800fc90:	89a3      	ldrh	r3, [r4, #12]
 800fc92:	059b      	lsls	r3, r3, #22
 800fc94:	d49a      	bmi.n	800fbcc <_ungetc_r+0x10>
 800fc96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc98:	f7fd ffd4 	bl	800dc44 <__retarget_lock_release_recursive>
 800fc9c:	e796      	b.n	800fbcc <_ungetc_r+0x10>
 800fc9e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800fca0:	6920      	ldr	r0, [r4, #16]
 800fca2:	6823      	ldr	r3, [r4, #0]
 800fca4:	f001 0101 	and.w	r1, r1, #1
 800fca8:	b160      	cbz	r0, 800fcc4 <_ungetc_r+0x108>
 800fcaa:	4298      	cmp	r0, r3
 800fcac:	d20a      	bcs.n	800fcc4 <_ungetc_r+0x108>
 800fcae:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800fcb2:	42a8      	cmp	r0, r5
 800fcb4:	d106      	bne.n	800fcc4 <_ungetc_r+0x108>
 800fcb6:	3b01      	subs	r3, #1
 800fcb8:	3201      	adds	r2, #1
 800fcba:	6023      	str	r3, [r4, #0]
 800fcbc:	6062      	str	r2, [r4, #4]
 800fcbe:	2900      	cmp	r1, #0
 800fcc0:	d184      	bne.n	800fbcc <_ungetc_r+0x10>
 800fcc2:	e7e5      	b.n	800fc90 <_ungetc_r+0xd4>
 800fcc4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800fcc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fccc:	6363      	str	r3, [r4, #52]	; 0x34
 800fcce:	2303      	movs	r3, #3
 800fcd0:	63a3      	str	r3, [r4, #56]	; 0x38
 800fcd2:	4623      	mov	r3, r4
 800fcd4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fcd8:	6023      	str	r3, [r4, #0]
 800fcda:	2301      	movs	r3, #1
 800fcdc:	6063      	str	r3, [r4, #4]
 800fcde:	e7ee      	b.n	800fcbe <_ungetc_r+0x102>
 800fce0:	08010764 	.word	0x08010764
 800fce4:	08010784 	.word	0x08010784
 800fce8:	08010744 	.word	0x08010744

0800fcec <__ascii_wctomb>:
 800fcec:	b149      	cbz	r1, 800fd02 <__ascii_wctomb+0x16>
 800fcee:	2aff      	cmp	r2, #255	; 0xff
 800fcf0:	bf85      	ittet	hi
 800fcf2:	238a      	movhi	r3, #138	; 0x8a
 800fcf4:	6003      	strhi	r3, [r0, #0]
 800fcf6:	700a      	strbls	r2, [r1, #0]
 800fcf8:	f04f 30ff 	movhi.w	r0, #4294967295
 800fcfc:	bf98      	it	ls
 800fcfe:	2001      	movls	r0, #1
 800fd00:	4770      	bx	lr
 800fd02:	4608      	mov	r0, r1
 800fd04:	4770      	bx	lr
	...

0800fd08 <__assert_func>:
 800fd08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd0a:	4614      	mov	r4, r2
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	4b09      	ldr	r3, [pc, #36]	; (800fd34 <__assert_func+0x2c>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	4605      	mov	r5, r0
 800fd14:	68d8      	ldr	r0, [r3, #12]
 800fd16:	b14c      	cbz	r4, 800fd2c <__assert_func+0x24>
 800fd18:	4b07      	ldr	r3, [pc, #28]	; (800fd38 <__assert_func+0x30>)
 800fd1a:	9100      	str	r1, [sp, #0]
 800fd1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd20:	4906      	ldr	r1, [pc, #24]	; (800fd3c <__assert_func+0x34>)
 800fd22:	462b      	mov	r3, r5
 800fd24:	f000 f80e 	bl	800fd44 <fiprintf>
 800fd28:	f000 f895 	bl	800fe56 <abort>
 800fd2c:	4b04      	ldr	r3, [pc, #16]	; (800fd40 <__assert_func+0x38>)
 800fd2e:	461c      	mov	r4, r3
 800fd30:	e7f3      	b.n	800fd1a <__assert_func+0x12>
 800fd32:	bf00      	nop
 800fd34:	2000000c 	.word	0x2000000c
 800fd38:	080109a8 	.word	0x080109a8
 800fd3c:	080109b5 	.word	0x080109b5
 800fd40:	080109e3 	.word	0x080109e3

0800fd44 <fiprintf>:
 800fd44:	b40e      	push	{r1, r2, r3}
 800fd46:	b503      	push	{r0, r1, lr}
 800fd48:	4601      	mov	r1, r0
 800fd4a:	ab03      	add	r3, sp, #12
 800fd4c:	4805      	ldr	r0, [pc, #20]	; (800fd64 <fiprintf+0x20>)
 800fd4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd52:	6800      	ldr	r0, [r0, #0]
 800fd54:	9301      	str	r3, [sp, #4]
 800fd56:	f7ff f927 	bl	800efa8 <_vfiprintf_r>
 800fd5a:	b002      	add	sp, #8
 800fd5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd60:	b003      	add	sp, #12
 800fd62:	4770      	bx	lr
 800fd64:	2000000c 	.word	0x2000000c

0800fd68 <_fstat_r>:
 800fd68:	b538      	push	{r3, r4, r5, lr}
 800fd6a:	4d07      	ldr	r5, [pc, #28]	; (800fd88 <_fstat_r+0x20>)
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	4604      	mov	r4, r0
 800fd70:	4608      	mov	r0, r1
 800fd72:	4611      	mov	r1, r2
 800fd74:	602b      	str	r3, [r5, #0]
 800fd76:	f7f2 fb1e 	bl	80023b6 <_fstat>
 800fd7a:	1c43      	adds	r3, r0, #1
 800fd7c:	d102      	bne.n	800fd84 <_fstat_r+0x1c>
 800fd7e:	682b      	ldr	r3, [r5, #0]
 800fd80:	b103      	cbz	r3, 800fd84 <_fstat_r+0x1c>
 800fd82:	6023      	str	r3, [r4, #0]
 800fd84:	bd38      	pop	{r3, r4, r5, pc}
 800fd86:	bf00      	nop
 800fd88:	200004dc 	.word	0x200004dc

0800fd8c <_isatty_r>:
 800fd8c:	b538      	push	{r3, r4, r5, lr}
 800fd8e:	4d06      	ldr	r5, [pc, #24]	; (800fda8 <_isatty_r+0x1c>)
 800fd90:	2300      	movs	r3, #0
 800fd92:	4604      	mov	r4, r0
 800fd94:	4608      	mov	r0, r1
 800fd96:	602b      	str	r3, [r5, #0]
 800fd98:	f7f2 fb1d 	bl	80023d6 <_isatty>
 800fd9c:	1c43      	adds	r3, r0, #1
 800fd9e:	d102      	bne.n	800fda6 <_isatty_r+0x1a>
 800fda0:	682b      	ldr	r3, [r5, #0]
 800fda2:	b103      	cbz	r3, 800fda6 <_isatty_r+0x1a>
 800fda4:	6023      	str	r3, [r4, #0]
 800fda6:	bd38      	pop	{r3, r4, r5, pc}
 800fda8:	200004dc 	.word	0x200004dc

0800fdac <memmove>:
 800fdac:	4288      	cmp	r0, r1
 800fdae:	b510      	push	{r4, lr}
 800fdb0:	eb01 0402 	add.w	r4, r1, r2
 800fdb4:	d902      	bls.n	800fdbc <memmove+0x10>
 800fdb6:	4284      	cmp	r4, r0
 800fdb8:	4623      	mov	r3, r4
 800fdba:	d807      	bhi.n	800fdcc <memmove+0x20>
 800fdbc:	1e43      	subs	r3, r0, #1
 800fdbe:	42a1      	cmp	r1, r4
 800fdc0:	d008      	beq.n	800fdd4 <memmove+0x28>
 800fdc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fdca:	e7f8      	b.n	800fdbe <memmove+0x12>
 800fdcc:	4402      	add	r2, r0
 800fdce:	4601      	mov	r1, r0
 800fdd0:	428a      	cmp	r2, r1
 800fdd2:	d100      	bne.n	800fdd6 <memmove+0x2a>
 800fdd4:	bd10      	pop	{r4, pc}
 800fdd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdde:	e7f7      	b.n	800fdd0 <memmove+0x24>

0800fde0 <__malloc_lock>:
 800fde0:	4801      	ldr	r0, [pc, #4]	; (800fde8 <__malloc_lock+0x8>)
 800fde2:	f7fd bf2e 	b.w	800dc42 <__retarget_lock_acquire_recursive>
 800fde6:	bf00      	nop
 800fde8:	200004d0 	.word	0x200004d0

0800fdec <__malloc_unlock>:
 800fdec:	4801      	ldr	r0, [pc, #4]	; (800fdf4 <__malloc_unlock+0x8>)
 800fdee:	f7fd bf29 	b.w	800dc44 <__retarget_lock_release_recursive>
 800fdf2:	bf00      	nop
 800fdf4:	200004d0 	.word	0x200004d0

0800fdf8 <_realloc_r>:
 800fdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdfc:	4680      	mov	r8, r0
 800fdfe:	4614      	mov	r4, r2
 800fe00:	460e      	mov	r6, r1
 800fe02:	b921      	cbnz	r1, 800fe0e <_realloc_r+0x16>
 800fe04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe08:	4611      	mov	r1, r2
 800fe0a:	f7fe bd01 	b.w	800e810 <_malloc_r>
 800fe0e:	b92a      	cbnz	r2, 800fe1c <_realloc_r+0x24>
 800fe10:	f7fe fc92 	bl	800e738 <_free_r>
 800fe14:	4625      	mov	r5, r4
 800fe16:	4628      	mov	r0, r5
 800fe18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe1c:	f000 f822 	bl	800fe64 <_malloc_usable_size_r>
 800fe20:	4284      	cmp	r4, r0
 800fe22:	4607      	mov	r7, r0
 800fe24:	d802      	bhi.n	800fe2c <_realloc_r+0x34>
 800fe26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe2a:	d812      	bhi.n	800fe52 <_realloc_r+0x5a>
 800fe2c:	4621      	mov	r1, r4
 800fe2e:	4640      	mov	r0, r8
 800fe30:	f7fe fcee 	bl	800e810 <_malloc_r>
 800fe34:	4605      	mov	r5, r0
 800fe36:	2800      	cmp	r0, #0
 800fe38:	d0ed      	beq.n	800fe16 <_realloc_r+0x1e>
 800fe3a:	42bc      	cmp	r4, r7
 800fe3c:	4622      	mov	r2, r4
 800fe3e:	4631      	mov	r1, r6
 800fe40:	bf28      	it	cs
 800fe42:	463a      	movcs	r2, r7
 800fe44:	f7fd ff92 	bl	800dd6c <memcpy>
 800fe48:	4631      	mov	r1, r6
 800fe4a:	4640      	mov	r0, r8
 800fe4c:	f7fe fc74 	bl	800e738 <_free_r>
 800fe50:	e7e1      	b.n	800fe16 <_realloc_r+0x1e>
 800fe52:	4635      	mov	r5, r6
 800fe54:	e7df      	b.n	800fe16 <_realloc_r+0x1e>

0800fe56 <abort>:
 800fe56:	b508      	push	{r3, lr}
 800fe58:	2006      	movs	r0, #6
 800fe5a:	f000 f833 	bl	800fec4 <raise>
 800fe5e:	2001      	movs	r0, #1
 800fe60:	f7f2 fa5a 	bl	8002318 <_exit>

0800fe64 <_malloc_usable_size_r>:
 800fe64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe68:	1f18      	subs	r0, r3, #4
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	bfbc      	itt	lt
 800fe6e:	580b      	ldrlt	r3, [r1, r0]
 800fe70:	18c0      	addlt	r0, r0, r3
 800fe72:	4770      	bx	lr

0800fe74 <_raise_r>:
 800fe74:	291f      	cmp	r1, #31
 800fe76:	b538      	push	{r3, r4, r5, lr}
 800fe78:	4604      	mov	r4, r0
 800fe7a:	460d      	mov	r5, r1
 800fe7c:	d904      	bls.n	800fe88 <_raise_r+0x14>
 800fe7e:	2316      	movs	r3, #22
 800fe80:	6003      	str	r3, [r0, #0]
 800fe82:	f04f 30ff 	mov.w	r0, #4294967295
 800fe86:	bd38      	pop	{r3, r4, r5, pc}
 800fe88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fe8a:	b112      	cbz	r2, 800fe92 <_raise_r+0x1e>
 800fe8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe90:	b94b      	cbnz	r3, 800fea6 <_raise_r+0x32>
 800fe92:	4620      	mov	r0, r4
 800fe94:	f000 f830 	bl	800fef8 <_getpid_r>
 800fe98:	462a      	mov	r2, r5
 800fe9a:	4601      	mov	r1, r0
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fea2:	f000 b817 	b.w	800fed4 <_kill_r>
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d00a      	beq.n	800fec0 <_raise_r+0x4c>
 800feaa:	1c59      	adds	r1, r3, #1
 800feac:	d103      	bne.n	800feb6 <_raise_r+0x42>
 800feae:	2316      	movs	r3, #22
 800feb0:	6003      	str	r3, [r0, #0]
 800feb2:	2001      	movs	r0, #1
 800feb4:	e7e7      	b.n	800fe86 <_raise_r+0x12>
 800feb6:	2400      	movs	r4, #0
 800feb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800febc:	4628      	mov	r0, r5
 800febe:	4798      	blx	r3
 800fec0:	2000      	movs	r0, #0
 800fec2:	e7e0      	b.n	800fe86 <_raise_r+0x12>

0800fec4 <raise>:
 800fec4:	4b02      	ldr	r3, [pc, #8]	; (800fed0 <raise+0xc>)
 800fec6:	4601      	mov	r1, r0
 800fec8:	6818      	ldr	r0, [r3, #0]
 800feca:	f7ff bfd3 	b.w	800fe74 <_raise_r>
 800fece:	bf00      	nop
 800fed0:	2000000c 	.word	0x2000000c

0800fed4 <_kill_r>:
 800fed4:	b538      	push	{r3, r4, r5, lr}
 800fed6:	4d07      	ldr	r5, [pc, #28]	; (800fef4 <_kill_r+0x20>)
 800fed8:	2300      	movs	r3, #0
 800feda:	4604      	mov	r4, r0
 800fedc:	4608      	mov	r0, r1
 800fede:	4611      	mov	r1, r2
 800fee0:	602b      	str	r3, [r5, #0]
 800fee2:	f7f2 fa09 	bl	80022f8 <_kill>
 800fee6:	1c43      	adds	r3, r0, #1
 800fee8:	d102      	bne.n	800fef0 <_kill_r+0x1c>
 800feea:	682b      	ldr	r3, [r5, #0]
 800feec:	b103      	cbz	r3, 800fef0 <_kill_r+0x1c>
 800feee:	6023      	str	r3, [r4, #0]
 800fef0:	bd38      	pop	{r3, r4, r5, pc}
 800fef2:	bf00      	nop
 800fef4:	200004dc 	.word	0x200004dc

0800fef8 <_getpid_r>:
 800fef8:	f7f2 b9f6 	b.w	80022e8 <_getpid>

0800fefc <_init>:
 800fefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fefe:	bf00      	nop
 800ff00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff02:	bc08      	pop	{r3}
 800ff04:	469e      	mov	lr, r3
 800ff06:	4770      	bx	lr

0800ff08 <_fini>:
 800ff08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff0a:	bf00      	nop
 800ff0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff0e:	bc08      	pop	{r3}
 800ff10:	469e      	mov	lr, r3
 800ff12:	4770      	bx	lr
