
MyFirstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b74  0800ff88  0800ff88  0001ff88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010afc  08010afc  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08010afc  08010afc  00020afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b04  08010b04  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b04  08010b04  00020b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b08  08010b08  00020b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08010b0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001e0  08010cec  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08010cec  000304e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fad  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b9  00000000  00000000  000491bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  0004c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0004db30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264e3  00000000  00000000  0004efa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d155  00000000  00000000  0007548b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6423  00000000  00000000  000925e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178a03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076a8  00000000  00000000  00178a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ff6c 	.word	0x0800ff6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800ff6c 	.word	0x0800ff6c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_ADC1_Init>:

/* ----------------------------------FUNCTIONS--------------------------------*/
// ADC channel 5 configuration (GPIO PA5)

extern void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <MX_ADC1_Init+0xa8>)
 800104c:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <MX_ADC1_Init+0xac>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_ADC1_Init+0xa8>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001064:	2200      	movs	r2, #0
 8001066:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_ADC1_Init+0xa8>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion   = 1;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001072:	2201      	movs	r2, #1
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001078:	2201      	movs	r2, #1
 800107a:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_ADC1_Init+0xa8>)
 800107e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;   // triggered by Timer3
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_ADC1_Init+0xa8>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_ADC1_Init+0xa8>)
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_ADC1_Init+0xa8>)
 800109c:	2201      	movs	r2, #1
 800109e:	615a      	str	r2, [r3, #20]

  MX_DMA_Init(&hadc1);
 80010a0:	480f      	ldr	r0, [pc, #60]	; (80010e0 <MX_ADC1_Init+0xa8>)
 80010a2:	f000 f97f 	bl	80013a4 <MX_DMA_Init>

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <MX_ADC1_Init+0xa8>)
 80010a8:	f001 fafa 	bl	80026a0 <HAL_ADC_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80010b2:	f000 fdd7 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010b6:	2305      	movs	r3, #5
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_ADC1_Init+0xa8>)
 80010c8:	f001 fc52 	bl	8002970 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010d2:	f000 fdc7 	bl	8001c64 <Error_Handler>
  }

}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001fc 	.word	0x200001fc
 80010e4:	40012000 	.word	0x40012000

080010e8 <MX_DAC_Init>:
/**
  * @brief DAC Initialization Function
    DAC channel OUT1 configuration (GPIO PA4)
  */
extern void MX_DAC_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0

  DAC_ChannelConfTypeDef sConfig = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]

  hdac1.Instance = DAC;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_DAC_Init+0x4c>)
 80010f8:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <MX_DAC_Init+0x50>)
 80010fa:	601a      	str	r2, [r3, #0]

  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_DAC_Init+0x4c>)
 80010fe:	f001 fff8 	bl	80030f2 <HAL_DAC_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001108:	f000 fdac 	bl	8001c64 <Error_Handler>
  }

  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_DAC_Init+0x4c>)
 800111c:	f002 f89f 	bl	800325e <HAL_DAC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001126:	f000 fd9d 	bl	8001c64 <Error_Handler>
  }

}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000244 	.word	0x20000244
 8001138:	40007400 	.word	0x40007400
 800113c:	00000000 	.word	0x00000000

08001140 <read_ADC>:

// ****************************************************************************

extern float read_ADC(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

	sensorValue=0;
 8001146:	4b38      	ldr	r3, [pc, #224]	; (8001228 <read_ADC+0xe8>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

	adc_conv_complete_flag = 0;
 800114c:	4b37      	ldr	r3, [pc, #220]	; (800122c <read_ADC+0xec>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim3);
 8001152:	4837      	ldr	r0, [pc, #220]	; (8001230 <read_ADC+0xf0>)
 8001154:	f007 fdbe 	bl	8008cd4 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_dma_buf , 10); // start ADC => DMA samples transfer
 8001158:	220a      	movs	r2, #10
 800115a:	4936      	ldr	r1, [pc, #216]	; (8001234 <read_ADC+0xf4>)
 800115c:	4836      	ldr	r0, [pc, #216]	; (8001238 <read_ADC+0xf8>)
 800115e:	f001 fae3 	bl	8002728 <HAL_ADC_Start_DMA>

	while (adc_conv_complete_flag==0)   // waiting until DMA if filled with ADC data
 8001162:	bf00      	nop
 8001164:	4b31      	ldr	r3, [pc, #196]	; (800122c <read_ADC+0xec>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0fb      	beq.n	8001164 <read_ADC+0x24>
	{

	}

	for(size_t ind = 0; ind < 10; ++ind) {
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	e00d      	b.n	800118e <read_ADC+0x4e>
		sensorValue += (uint32_t)adc_dma_buf[ind];
 8001172:	4a30      	ldr	r2, [pc, #192]	; (8001234 <read_ADC+0xf4>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800117a:	461a      	mov	r2, r3
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <read_ADC+0xe8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4413      	add	r3, r2
 8001182:	461a      	mov	r2, r3
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <read_ADC+0xe8>)
 8001186:	601a      	str	r2, [r3, #0]
	for(size_t ind = 0; ind < 10; ++ind) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3301      	adds	r3, #1
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b09      	cmp	r3, #9
 8001192:	d9ee      	bls.n	8001172 <read_ADC+0x32>

	}
	sensorValue /=10;
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <read_ADC+0xe8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a28      	ldr	r2, [pc, #160]	; (800123c <read_ADC+0xfc>)
 800119a:	fb82 1203 	smull	r1, r2, r2, r3
 800119e:	1092      	asrs	r2, r2, #2
 80011a0:	17db      	asrs	r3, r3, #31
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	4a20      	ldr	r2, [pc, #128]	; (8001228 <read_ADC+0xe8>)
 80011a6:	6013      	str	r3, [r2, #0]
	voltage = (0.001*sensorValue * (ADC_REFERENCE_VOLTAGE_MV / ADC_MAX_OUTPUT_VALUE));
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <read_ADC+0xe8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9d9 	bl	8000564 <__aeabi_i2d>
 80011b2:	a317      	add	r3, pc, #92	; (adr r3, 8001210 <read_ADC+0xd0>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fa3e 	bl	8000638 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	a314      	add	r3, pc, #80	; (adr r3, 8001218 <read_ADC+0xd8>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff fa35 	bl	8000638 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fd27 	bl	8000c28 <__aeabi_d2f>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <read_ADC+0x100>)
 80011de:	6013      	str	r3, [r2, #0]
	return voltage-0.08;  // removing DC offset contribution
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <read_ADC+0x100>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9cf 	bl	8000588 <__aeabi_f2d>
 80011ea:	a30d      	add	r3, pc, #52	; (adr r3, 8001220 <read_ADC+0xe0>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff f86a 	bl	80002c8 <__aeabi_dsub>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fd14 	bl	8000c28 <__aeabi_d2f>
 8001200:	4603      	mov	r3, r0
 8001202:	ee07 3a90 	vmov	s15, r3

}
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	d2f1a9fc 	.word	0xd2f1a9fc
 8001214:	3f50624d 	.word	0x3f50624d
 8001218:	a0000000 	.word	0xa0000000
 800121c:	3fe9c99c 	.word	0x3fe9c99c
 8001220:	47ae147b 	.word	0x47ae147b
 8001224:	3fb47ae1 	.word	0x3fb47ae1
 8001228:	200002b4 	.word	0x200002b4
 800122c:	200002b8 	.word	0x200002b8
 8001230:	20000258 	.word	0x20000258
 8001234:	200002a0 	.word	0x200002a0
 8001238:	200001fc 	.word	0x200001fc
 800123c:	66666667 	.word	0x66666667
 8001240:	200002bc 	.word	0x200002bc

08001244 <HAL_ADC_ConvCpltCallback>:

// ****************************************************************************

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim3);
 800124c:	4806      	ldr	r0, [pc, #24]	; (8001268 <HAL_ADC_ConvCpltCallback+0x24>)
 800124e:	f007 fda9 	bl	8008da4 <HAL_TIM_Base_Stop>
	adc_conv_complete_flag = 1;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_ADC_ConvCpltCallback+0x28>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
	printf("\n\rSamples are moved by DMA to memory!\r");
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_ADC_ConvCpltCallback+0x2c>)
 800125a:	f009 ffa9 	bl	800b1b0 <iprintf>

}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000258 	.word	0x20000258
 800126c:	200002b8 	.word	0x200002b8
 8001270:	0800ff88 	.word	0x0800ff88

08001274 <DAC_output>:

// ****************************************************************************

extern void DAC_output(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	sensorValue=0;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <DAC_output+0x70>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]

	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 8001280:	2100      	movs	r1, #0
 8001282:	4819      	ldr	r0, [pc, #100]	; (80012e8 <DAC_output+0x74>)
 8001284:	f001 ff57 	bl	8003136 <HAL_DAC_Start>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <DAC_output+0x1e>
	  {
	    Error_Handler();
 800128e:	f000 fce9 	bl	8001c64 <Error_Handler>
	  }

	for(size_t ind = 0; ind < 10; ++ind) {          //reading the ADC samples
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	e00d      	b.n	80012b4 <DAC_output+0x40>
		sensorValue += (uint32_t)adc_dma_buf[ind];  //stored on SRAM by DMA
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <DAC_output+0x78>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <DAC_output+0x70>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <DAC_output+0x70>)
 80012ac:	601a      	str	r2, [r3, #0]
	for(size_t ind = 0; ind < 10; ++ind) {          //reading the ADC samples
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3301      	adds	r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b09      	cmp	r3, #9
 80012b8:	d9ee      	bls.n	8001298 <DAC_output+0x24>
	   }                                            // to output them to PA5 pin

	sensorValue /=10;
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <DAC_output+0x70>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <DAC_output+0x7c>)
 80012c0:	fb82 1203 	smull	r1, r2, r2, r3
 80012c4:	1092      	asrs	r2, r2, #2
 80012c6:	17db      	asrs	r3, r3, #31
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <DAC_output+0x70>)
 80012cc:	6013      	str	r3, [r2, #0]

    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sensorValue);
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <DAC_output+0x70>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <DAC_output+0x74>)
 80012d8:	f001 ff9c 	bl	8003214 <HAL_DAC_SetValue>

}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200002b4 	.word	0x200002b4
 80012e8:	20000244 	.word	0x20000244
 80012ec:	200002a0 	.word	0x200002a0
 80012f0:	66666667 	.word	0x66666667

080012f4 <DAC_output_Stop>:
// ****************************************************************************

extern void DAC_output_Stop(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 80012f8:	2100      	movs	r1, #0
 80012fa:	4802      	ldr	r0, [pc, #8]	; (8001304 <DAC_output_Stop+0x10>)
 80012fc:	f001 ff6d 	bl	80031da <HAL_DAC_Stop>
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000244 	.word	0x20000244

08001308 <MX_TIM3_Init>:
// ****************************************************************************

extern void MX_TIM3_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM3_Init+0x94>)
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <MX_TIM3_Init+0x98>)
 8001328:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM3_Init+0x94>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM3_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;   // using 16MHz => 62.5nsec timer clock counts to ~4msec
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM3_Init+0x94>)
 8001338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_TIM3_Init+0x94>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM3_Init+0x94>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800134a:	4814      	ldr	r0, [pc, #80]	; (800139c <MX_TIM3_Init+0x94>)
 800134c:	f007 fc72 	bl	8008c34 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001356:	f000 fc85 	bl	8001c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	60bb      	str	r3, [r7, #8]

  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM3_Init+0x94>)
 8001368:	f007 fd43 	bl	8008df2 <HAL_TIM_ConfigClockSource>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001372:	f000 fc77 	bl	8001c64 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001376:	2320      	movs	r3, #32
 8001378:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM3_Init+0x94>)
 8001384:	f007 ff36 	bl	80091f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800138e:	f000 fc69 	bl	8001c64 <Error_Handler>
  }

}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000258 	.word	0x20000258
 80013a0:	40000400 	.word	0x40000400

080013a4 <MX_DMA_Init>:
DMA_HandleTypeDef hdma_adc1;

/* ----------------------------------FUNCTIONS--------------------------------*/

extern void MX_DMA_Init(ADC_HandleTypeDef *hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  /* DMA controller clock enable */

  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <MX_DMA_Init+0xb0>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	4a27      	ldr	r2, [pc, #156]	; (8001454 <MX_DMA_Init+0xb0>)
 80013b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013ba:	6313      	str	r3, [r2, #48]	; 0x30
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <MX_DMA_Init+0xb0>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]

  hdma_adc1.Instance=DMA2_Stream0;
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <MX_DMA_Init+0xb4>)
 80013ca:	4a24      	ldr	r2, [pc, #144]	; (800145c <MX_DMA_Init+0xb8>)
 80013cc:	601a      	str	r2, [r3, #0]
  hdma_adc1.Init.Channel = DMA_CHANNEL_0;// Channel 0, Stream 0
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <MX_DMA_Init+0xb4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
  hdma_adc1.Init.Direction=DMA_PERIPH_TO_MEMORY;
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <MX_DMA_Init+0xb4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hdma_adc1.Init.PeriphInc=DMA_PINC_DISABLE;
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <MX_DMA_Init+0xb4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hdma_adc1.Init.MemInc=DMA_MINC_ENABLE;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_DMA_Init+0xb4>)
 80013e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e6:	611a      	str	r2, [r3, #16]
  hdma_adc1.Init.PeriphDataAlignment=DMA_PDATAALIGN_WORD;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_DMA_Init+0xb4>)
 80013ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ee:	615a      	str	r2, [r3, #20]
  hdma_adc1.Init.MemDataAlignment=DMA_MDATAALIGN_WORD;
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_DMA_Init+0xb4>)
 80013f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f6:	619a      	str	r2, [r3, #24]
  hdma_adc1.Init.Mode=DMA_CIRCULAR;
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_DMA_Init+0xb4>)
 80013fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fe:	61da      	str	r2, [r3, #28]
  hdma_adc1.Init.Priority=DMA_PRIORITY_HIGH;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_DMA_Init+0xb4>)
 8001402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001406:	621a      	str	r2, [r3, #32]
  hdma_adc1.Init.FIFOMode=DMA_FIFOMODE_DISABLE;
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <MX_DMA_Init+0xb4>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_adc1.Init.FIFOThreshold=DMA_FIFO_THRESHOLD_HALFFULL;
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_DMA_Init+0xb4>)
 8001410:	2201      	movs	r2, #1
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_adc1.Init.MemBurst=DMA_MBURST_SINGLE;
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_DMA_Init+0xb4>)
 8001416:	2200      	movs	r2, #0
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_adc1.Init.PeriphBurst=DMA_PBURST_SINGLE;
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_DMA_Init+0xb4>)
 800141c:	2200      	movs	r2, #0
 800141e:	631a      	str	r2, [r3, #48]	; 0x30

  //Initialize DMA
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_DMA_Init+0xb4>)
 8001422:	f001 ff6b 	bl	80032fc <HAL_DMA_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_DMA_Init+0x8c>
  {
	  Error_Handler();
 800142c:	f000 fc1a 	bl	8001c64 <Error_Handler>
  };

  /* Associate the initialized DMA handle to the ADC handle */
  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <MX_DMA_Init+0xb4>)
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <MX_DMA_Init+0xb4>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6393      	str	r3, [r2, #56]	; 0x38


  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2038      	movs	r0, #56	; 0x38
 8001442:	f001 fe20 	bl	8003086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001446:	2038      	movs	r0, #56	; 0x38
 8001448:	f001 fe39 	bl	80030be <HAL_NVIC_EnableIRQ>

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	200002c0 	.word	0x200002c0
 800145c:	40026410 	.word	0x40026410

08001460 <MX_I2C1_Init>:
PB6     ------> I2C1_SCL
PB7     ------> I2C1_SDA
*/

extern void MX_I2C1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <MX_I2C1_Init+0x50>)
 8001466:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <MX_I2C1_Init+0x54>)
 8001468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_I2C1_Init+0x50>)
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <MX_I2C1_Init+0x58>)
 800146e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_I2C1_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_I2C1_Init+0x50>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_I2C1_Init+0x50>)
 800147e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001482:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_I2C1_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_I2C1_Init+0x50>)
 800149e:	f002 fcd1 	bl	8003e44 <HAL_I2C_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a8:	f000 fbdc 	bl	8001c64 <Error_Handler>
  }
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000320 	.word	0x20000320
 80014b4:	40005400 	.word	0x40005400
 80014b8:	000186a0 	.word	0x000186a0

080014bc <I2C_read_temp_sensor>:

// ****************************************************************************
extern int16_t I2C_read_temp_sensor()
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af02      	add	r7, sp, #8

	  *buf=0;
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <I2C_read_temp_sensor+0xc4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]

	  if (HAL_I2C_Master_Transmit(&hi2c1, SENS_ADDR, buf, 1, HAL_MAX_DELAY) != HAL_OK)
 80014c8:	2390      	movs	r3, #144	; 0x90
 80014ca:	b299      	uxth	r1, r3
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2301      	movs	r3, #1
 80014d4:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <I2C_read_temp_sensor+0xc4>)
 80014d6:	482b      	ldr	r0, [pc, #172]	; (8001584 <I2C_read_temp_sensor+0xc8>)
 80014d8:	f002 fdf8 	bl	80040cc <HAL_I2C_Master_Transmit>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <I2C_read_temp_sensor+0x30>
	  {
		  printf("\r\nNo sensor connected!\r\n");
 80014e2:	4829      	ldr	r0, [pc, #164]	; (8001588 <I2C_read_temp_sensor+0xcc>)
 80014e4:	f009 feea 	bl	800b2bc <puts>
		  Error_Handler();
 80014e8:	f000 fbbc 	bl	8001c64 <Error_Handler>
	  }

	  if (HAL_I2C_Master_Receive(&hi2c1, SENS_ADDR, buf, 2, HAL_MAX_DELAY) != HAL_OK)
 80014ec:	2390      	movs	r3, #144	; 0x90
 80014ee:	b299      	uxth	r1, r3
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2302      	movs	r3, #2
 80014f8:	4a21      	ldr	r2, [pc, #132]	; (8001580 <I2C_read_temp_sensor+0xc4>)
 80014fa:	4822      	ldr	r0, [pc, #136]	; (8001584 <I2C_read_temp_sensor+0xc8>)
 80014fc:	f002 fee4 	bl	80042c8 <HAL_I2C_Master_Receive>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d004      	beq.n	8001510 <I2C_read_temp_sensor+0x54>
	  {
		  printf("\r\nNo data from sensor received!\r\n");
 8001506:	4821      	ldr	r0, [pc, #132]	; (800158c <I2C_read_temp_sensor+0xd0>)
 8001508:	f009 fed8 	bl	800b2bc <puts>
		  Error_Handler();
 800150c:	f000 fbaa 	bl	8001c64 <Error_Handler>
	  }

	  val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <I2C_read_temp_sensor+0xc4>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	b21a      	sxth	r2, r3
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <I2C_read_temp_sensor+0xc4>)
 800151a:	785b      	ldrb	r3, [r3, #1]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	b2db      	uxtb	r3, r3
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b21a      	sxth	r2, r3
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <I2C_read_temp_sensor+0xd4>)
 8001528:	801a      	strh	r2, [r3, #0]

	  if ( val > 0x7FF ) {
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <I2C_read_temp_sensor+0xd4>)
 800152c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001534:	db09      	blt.n	800154a <I2C_read_temp_sensor+0x8e>
        val |= 0xF000;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <I2C_read_temp_sensor+0xd4>)
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001540:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001544:	b21a      	sxth	r2, r3
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <I2C_read_temp_sensor+0xd4>)
 8001548:	801a      	strh	r2, [r3, #0]
      }

	  val=val*0.0625;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <I2C_read_temp_sensor+0xd4>)
 800154c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f807 	bl	8000564 <__aeabi_i2d>
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <I2C_read_temp_sensor+0xd8>)
 800155c:	f7ff f86c 	bl	8000638 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fb16 	bl	8000b98 <__aeabi_d2iz>
 800156c:	4603      	mov	r3, r0
 800156e:	b21a      	sxth	r2, r3
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <I2C_read_temp_sensor+0xd4>)
 8001572:	801a      	strh	r2, [r3, #0]

	  return val;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <I2C_read_temp_sensor+0xd4>)
 8001576:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200003d4 	.word	0x200003d4
 8001584:	20000320 	.word	0x20000320
 8001588:	0800ffb0 	.word	0x0800ffb0
 800158c:	0800ffc8 	.word	0x0800ffc8
 8001590:	200003e0 	.word	0x200003e0
 8001594:	3fb00000 	.word	0x3fb00000

08001598 <MX_SPI2_Init>:
PB10     ------> SPI2_SCK (Nucleo FR446 board, CN9 pin #7)
PB12     ------> SPI2_NSS (Nucleo FR446 board, CN10 pin #14)
*/

extern void MX_SPI2_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

	  hspi2.Instance = SPI2;
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <MX_SPI2_Init+0x5c>)
 800159e:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <MX_SPI2_Init+0x60>)
 80015a0:	601a      	str	r2, [r3, #0]
	  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_SPI2_Init+0x5c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
	  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_SPI2_Init+0x5c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
	  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_SPI2_Init+0x5c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
	  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_SPI2_Init+0x5c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
	  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_SPI2_Init+0x5c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
	  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_SPI2_Init+0x5c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
	  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_SPI2_Init+0x5c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
	  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_SPI2_Init+0x5c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_SPI2_Init+0x5c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi2.Init.CRCPolynomial = 10;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_SPI2_Init+0x5c>)
 80015da:	220a      	movs	r2, #10
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_SPI2_Init+0x5c>)
 80015e0:	f006 fd72 	bl	80080c8 <HAL_SPI_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_SPI2_Init+0x56>
	  {
	    Error_Handler();
 80015ea:	f000 fb3b 	bl	8001c64 <Error_Handler>
	  }

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200003e4 	.word	0x200003e4
 80015f8:	40003800 	.word	0x40003800

080015fc <SPI_read>:

// ****************************************************************************

extern uint8_t SPI_read(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0

	  uint8_t *buf=0;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
	  uint8_t response[]={0xab,0xcd,0xca,0xfe};
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <SPI_read+0x4c>)
 8001608:	603b      	str	r3, [r7, #0]

	  while (!(HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_READY));
 800160a:	bf00      	nop
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <SPI_read+0x50>)
 800160e:	f007 f9d3 	bl	80089b8 <HAL_SPI_GetState>
 8001612:	4603      	mov	r3, r0
 8001614:	2b01      	cmp	r3, #1
 8001616:	d1f9      	bne.n	800160c <SPI_read+0x10>

	  HAL_SPI_Receive(&hspi2, &buf, 1,HAL_MAX_DELAY);
 8001618:	1d39      	adds	r1, r7, #4
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	2201      	movs	r2, #1
 8001620:	480a      	ldr	r0, [pc, #40]	; (800164c <SPI_read+0x50>)
 8001622:	f006 ff16 	bl	8008452 <HAL_SPI_Receive>

	  if (buf==0x5) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b05      	cmp	r3, #5
 800162a:	d106      	bne.n	800163a <SPI_read+0x3e>

		  HAL_SPI_Transmit(&hspi2, &response, 4,HAL_MAX_DELAY);
 800162c:	4639      	mov	r1, r7
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	2204      	movs	r2, #4
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <SPI_read+0x50>)
 8001636:	f006 fdd0 	bl	80081da <HAL_SPI_Transmit>

	  };

	  return &response;
 800163a:	463b      	mov	r3, r7
 800163c:	b2db      	uxtb	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	fecacdab 	.word	0xfecacdab
 800164c:	200003e4 	.word	0x200003e4

08001650 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1,0xFFFF);
 8001658:	1d39      	adds	r1, r7, #4
 800165a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165e:	2201      	movs	r2, #1
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <__io_putchar+0x20>)
 8001662:	f007 fe90 	bl	8009386 <HAL_UART_Transmit>

  return ch;
 8001666:	687b      	ldr	r3, [r7, #4]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000484 	.word	0x20000484

08001674 <__io_getchar>:


GETCHAR_PROTOTYPE
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	71fb      	strb	r3, [r7, #7]

  __HAL_UART_CLEAR_OREFLAG(&huart2);
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <__io_getchar+0x38>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <__io_getchar+0x38>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	683b      	ldr	r3, [r7, #0]

  HAL_UART_Receive (&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001694:	1df9      	adds	r1, r7, #7
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	2201      	movs	r2, #1
 800169c:	4803      	ldr	r0, [pc, #12]	; (80016ac <__io_getchar+0x38>)
 800169e:	f007 ff04 	bl	80094aa <HAL_UART_Receive>
//  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);

  return ch;
 80016a2:	79fb      	ldrb	r3, [r7, #7]

}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000484 	.word	0x20000484

080016b0 <main>:

/* ----------------------------------MAIN ROUTINE------------------------*/

int main(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08e      	sub	sp, #56	; 0x38
 80016b4:	af02      	add	r7, sp, #8

  char input[20]="\0"; // cleaning the CLI input string
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
  char cmd[5]="\0";    // and commands
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	2300      	movs	r3, #0
 80016ce:	733b      	strb	r3, [r7, #12]
  unsigned int addr;
  unsigned int val;
  int16_t temp;
  float V;
  uint8_t res;
  int i=0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  setvbuf(stdin, NULL, _IONBF, 0);
 80016d4:	4b85      	ldr	r3, [pc, #532]	; (80018ec <main+0x23c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6858      	ldr	r0, [r3, #4]
 80016da:	2300      	movs	r3, #0
 80016dc:	2202      	movs	r2, #2
 80016de:	2100      	movs	r1, #0
 80016e0:	f009 fe0c 	bl	800b2fc <setvbuf>

  /* Initialize all configured peripherals */

  HAL_Init();
 80016e4:	f000 ff46 	bl	8002574 <HAL_Init>
  SystemClock_Config();
 80016e8:	f000 f932 	bl	8001950 <SystemClock_Config>
  MX_GPIO_Init();
 80016ec:	f000 fa5c 	bl	8001ba8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016f0:	f7ff feb6 	bl	8001460 <MX_I2C1_Init>
  MX_I2S1_Init();
 80016f4:	f000 f99c 	bl	8001a30 <MX_I2S1_Init>
  MX_SPI2_Init();
 80016f8:	f7ff ff4e 	bl	8001598 <MX_SPI2_Init>
  MX_ADC1_Init();
 80016fc:	f7ff fc9c 	bl	8001038 <MX_ADC1_Init>
  MX_DAC_Init();
 8001700:	f7ff fcf2 	bl	80010e8 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8001704:	f000 f9c2 	bl	8001a8c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001708:	f7ff fdfe 	bl	8001308 <MX_TIM3_Init>

  write_register (0x4002040c,0x5100); // required for setting I2C #1 pins with internal pull ups
 800170c:	f44f 41a2 	mov.w	r1, #20736	; 0x5100
 8001710:	4877      	ldr	r0, [pc, #476]	; (80018f0 <main+0x240>)
 8001712:	f000 f9f7 	bl	8001b04 <write_register>

  printf("\r\n<<<<<<<Hello from ST32F4466RTE MCU UART terminal>>>>>\r\n");
 8001716:	4877      	ldr	r0, [pc, #476]	; (80018f4 <main+0x244>)
 8001718:	f009 fdd0 	bl	800b2bc <puts>
  printf("\r\nFor menu please type help\r\n");
 800171c:	4876      	ldr	r0, [pc, #472]	; (80018f8 <main+0x248>)
 800171e:	f009 fdcd 	bl	800b2bc <puts>
  printf("\r\n");
 8001722:	4876      	ldr	r0, [pc, #472]	; (80018fc <main+0x24c>)
 8001724:	f009 fdca 	bl	800b2bc <puts>
 // main CLI loop

  while (1)
  {

	  	 printf("\rST32F446RTE>>");
 8001728:	4875      	ldr	r0, [pc, #468]	; (8001900 <main+0x250>)
 800172a:	f009 fd41 	bl	800b1b0 <iprintf>

	  	 scanf("%[^\r]", input);
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	4619      	mov	r1, r3
 8001734:	4873      	ldr	r0, [pc, #460]	; (8001904 <main+0x254>)
 8001736:	f009 fdc9 	bl	800b2cc <iscanf>

		 sscanf(input,"%s %x %x",cmd,&addr,&val);
 800173a:	1d39      	adds	r1, r7, #4
 800173c:	f107 0208 	add.w	r2, r7, #8
 8001740:	f107 0010 	add.w	r0, r7, #16
 8001744:	463b      	mov	r3, r7
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	460b      	mov	r3, r1
 800174a:	496f      	ldr	r1, [pc, #444]	; (8001908 <main+0x258>)
 800174c:	f009 fec2 	bl	800b4d4 <siscanf>


	  	 if (strstr(cmd,"rd")) {         // reading from a register
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	496d      	ldr	r1, [pc, #436]	; (800190c <main+0x25c>)
 8001756:	4618      	mov	r0, r3
 8001758:	f009 ff2d 	bl	800b5b6 <strstr>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <main+0xc2>
	  		read_register(addr);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f9bb 	bl	8001ae0 <read_register>
	  		printf("\r\n");
 800176a:	4864      	ldr	r0, [pc, #400]	; (80018fc <main+0x24c>)
 800176c:	f009 fda6 	bl	800b2bc <puts>
 8001770:	e0ad      	b.n	80018ce <main+0x21e>

	  	 }

	  	 else if (strstr(cmd,"dump")) {    // writing to a register
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	4966      	ldr	r1, [pc, #408]	; (8001910 <main+0x260>)
 8001778:	4618      	mov	r0, r3
 800177a:	f009 ff1c 	bl	800b5b6 <strstr>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d014      	beq.n	80017ae <main+0xfe>

	  		 for (i=0; i<val; i++) {
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001788:	e009      	b.n	800179e <main+0xee>
	  			read_register(addr);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f9a7 	bl	8001ae0 <read_register>
	  			addr=addr+4;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3304      	adds	r3, #4
 8001796:	607b      	str	r3, [r7, #4]
	  		 for (i=0; i<val; i++) {
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	3301      	adds	r3, #1
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800179e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3f1      	bcc.n	800178a <main+0xda>
	  		 }
	  		printf("\r\n");
 80017a6:	4855      	ldr	r0, [pc, #340]	; (80018fc <main+0x24c>)
 80017a8:	f009 fd88 	bl	800b2bc <puts>
 80017ac:	e08f      	b.n	80018ce <main+0x21e>

	  	 }

	  	 else if (strstr(cmd,"wr")) {    // registers' dump
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4958      	ldr	r1, [pc, #352]	; (8001914 <main+0x264>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f009 fefe 	bl	800b5b6 <strstr>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d009      	beq.n	80017d4 <main+0x124>
	  		write_register(addr,val);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f99c 	bl	8001b04 <write_register>
	  		printf("\r\n");
 80017cc:	484b      	ldr	r0, [pc, #300]	; (80018fc <main+0x24c>)
 80017ce:	f009 fd75 	bl	800b2bc <puts>
 80017d2:	e07c      	b.n	80018ce <main+0x21e>

	  	 }

	  	 else if (strstr(cmd,"quit")) {    // writing to a register
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	494f      	ldr	r1, [pc, #316]	; (8001918 <main+0x268>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f009 feeb 	bl	800b5b6 <strstr>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d006      	beq.n	80017f4 <main+0x144>

	  		printf("\r\n<<<<<<<Goodbye from ST32F4466RTE MCU UART terminal>>>>>\r\n");
 80017e6:	484d      	ldr	r0, [pc, #308]	; (800191c <main+0x26c>)
 80017e8:	f009 fd68 	bl	800b2bc <puts>
	  		printf("\r\n");
 80017ec:	4843      	ldr	r0, [pc, #268]	; (80018fc <main+0x24c>)
 80017ee:	f009 fd65 	bl	800b2bc <puts>
	  		break;
 80017f2:	e075      	b.n	80018e0 <main+0x230>
	  	 }

	  	 else if (strstr(cmd,"temp")) {     // reading temperature sensor
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4949      	ldr	r1, [pc, #292]	; (8001920 <main+0x270>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f009 fedb 	bl	800b5b6 <strstr>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00a      	beq.n	800181c <main+0x16c>

	  		temp = I2C_read_temp_sensor();
 8001806:	f7ff fe59 	bl	80014bc <I2C_read_temp_sensor>
 800180a:	4603      	mov	r3, r0
 800180c:	84bb      	strh	r3, [r7, #36]	; 0x24
	  		printf("\r\nTemperature is: %d\r\n",temp);
 800180e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	4843      	ldr	r0, [pc, #268]	; (8001924 <main+0x274>)
 8001816:	f009 fccb 	bl	800b1b0 <iprintf>
 800181a:	e058      	b.n	80018ce <main+0x21e>

	  	 }

	  	 else if (strstr(cmd,"spi")) {     // activating SPI interface
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4941      	ldr	r1, [pc, #260]	; (8001928 <main+0x278>)
 8001822:	4618      	mov	r0, r3
 8001824:	f009 fec7 	bl	800b5b6 <strstr>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <main+0x190>

	  		res=SPI_read();
 800182e:	f7ff fee5 	bl	80015fc <SPI_read>
 8001832:	4603      	mov	r3, r0
 8001834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  		printf("\r\nST32F446 MCU SPI slave interface approached by host and answered with 0xABCDCAFE\r\n");
 8001838:	483c      	ldr	r0, [pc, #240]	; (800192c <main+0x27c>)
 800183a:	f009 fd3f 	bl	800b2bc <puts>
 800183e:	e046      	b.n	80018ce <main+0x21e>

	  	 }

	  	 else if (strstr(cmd,"adc")) {     // sampling voltage level
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	493a      	ldr	r1, [pc, #232]	; (8001930 <main+0x280>)
 8001846:	4618      	mov	r0, r3
 8001848:	f009 feb5 	bl	800b5b6 <strstr>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00c      	beq.n	800186c <main+0x1bc>

	  		V=read_ADC();
 8001852:	f7ff fc75 	bl	8001140 <read_ADC>
 8001856:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	  		printf("\r\nVoltage measured at PA5 physical pin is: %.2f[V]\r\n",(float)V);
 800185a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800185c:	f7fe fe94 	bl	8000588 <__aeabi_f2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4833      	ldr	r0, [pc, #204]	; (8001934 <main+0x284>)
 8001866:	f009 fca3 	bl	800b1b0 <iprintf>
 800186a:	e030      	b.n	80018ce <main+0x21e>

	  	 }

	  	 else if (strstr(cmd,"dac")) {     // output DAC signal
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	4931      	ldr	r1, [pc, #196]	; (8001938 <main+0x288>)
 8001872:	4618      	mov	r0, r3
 8001874:	f009 fe9f 	bl	800b5b6 <strstr>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <main+0x1da>

	  		printf("\r\nOutput the signal measured on PA5 GPIO pin....\r\n");
 800187e:	482f      	ldr	r0, [pc, #188]	; (800193c <main+0x28c>)
 8001880:	f009 fd1c 	bl	800b2bc <puts>
	  		DAC_output();
 8001884:	f7ff fcf6 	bl	8001274 <DAC_output>
 8001888:	e021      	b.n	80018ce <main+0x21e>

	  	 }

	  	 else if (strstr(cmd,"gpio")) {     // toggling LED GPIO
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	492c      	ldr	r1, [pc, #176]	; (8001940 <main+0x290>)
 8001890:	4618      	mov	r0, r3
 8001892:	f009 fe90 	bl	800b5b6 <strstr>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <main+0x1f8>

	  		printf("\r\nBlink LED associated with PA5 GPIO pin....\r\n");
 800189c:	4829      	ldr	r0, [pc, #164]	; (8001944 <main+0x294>)
 800189e:	f009 fd0d 	bl	800b2bc <puts>
	  		GPIO_blink();
 80018a2:	f000 f9bf 	bl	8001c24 <GPIO_blink>
 80018a6:	e012      	b.n	80018ce <main+0x21e>

	  	 }


	  	 else if (strstr(cmd,"help")) {     // help menu of commands
 80018a8:	f107 0308 	add.w	r3, r7, #8
 80018ac:	4926      	ldr	r1, [pc, #152]	; (8001948 <main+0x298>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f009 fe81 	bl	800b5b6 <strstr>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <main+0x214>

	  		help_menu();
 80018ba:	f000 f931 	bl	8001b20 <help_menu>
	  		DAC_output_Stop();
 80018be:	f7ff fd19 	bl	80012f4 <DAC_output_Stop>
 80018c2:	e004      	b.n	80018ce <main+0x21e>

	  	 }

	  	 else {

	  		 printf("\runknown command, please type again...\r\n");
 80018c4:	4821      	ldr	r0, [pc, #132]	; (800194c <main+0x29c>)
 80018c6:	f009 fcf9 	bl	800b2bc <puts>
	  		 DAC_output_Stop();
 80018ca:	f7ff fd13 	bl	80012f4 <DAC_output_Stop>


	  	 	  }	  	 setvbuf(stdin, NULL, _IONBF, 0);
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <main+0x23c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6858      	ldr	r0, [r3, #4]
 80018d4:	2300      	movs	r3, #0
 80018d6:	2202      	movs	r2, #2
 80018d8:	2100      	movs	r1, #0
 80018da:	f009 fd0f 	bl	800b2fc <setvbuf>
	  	 printf("\rST32F446RTE>>");
 80018de:	e723      	b.n	8001728 <main+0x78>
 80018e0:	2300      	movs	r3, #0

  	  }  // end of while loop

} // end of main code
 80018e2:	4618      	mov	r0, r3
 80018e4:	3730      	adds	r7, #48	; 0x30
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	4002040c 	.word	0x4002040c
 80018f4:	0800ffec 	.word	0x0800ffec
 80018f8:	08010028 	.word	0x08010028
 80018fc:	08010048 	.word	0x08010048
 8001900:	0801004c 	.word	0x0801004c
 8001904:	0801005c 	.word	0x0801005c
 8001908:	08010064 	.word	0x08010064
 800190c:	08010070 	.word	0x08010070
 8001910:	08010074 	.word	0x08010074
 8001914:	0801007c 	.word	0x0801007c
 8001918:	08010080 	.word	0x08010080
 800191c:	08010088 	.word	0x08010088
 8001920:	080100c4 	.word	0x080100c4
 8001924:	080100cc 	.word	0x080100cc
 8001928:	080100e4 	.word	0x080100e4
 800192c:	080100e8 	.word	0x080100e8
 8001930:	0801013c 	.word	0x0801013c
 8001934:	08010140 	.word	0x08010140
 8001938:	08010178 	.word	0x08010178
 800193c:	0801017c 	.word	0x0801017c
 8001940:	080101b0 	.word	0x080101b0
 8001944:	080101b8 	.word	0x080101b8
 8001948:	080101e8 	.word	0x080101e8
 800194c:	080101f0 	.word	0x080101f0

08001950 <SystemClock_Config>:
/* =========================================================================================
 * */
/* ----------------------------------AUX functions------------------------*/

void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b094      	sub	sp, #80	; 0x50
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	2234      	movs	r2, #52	; 0x34
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f008 fda4 	bl	800a4ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 8001974:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <SystemClock_Config+0xd8>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800197c:	4a2a      	ldr	r2, [pc, #168]	; (8001a28 <SystemClock_Config+0xd8>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001984:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <SystemClock_Config+0xd8>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a27      	ldr	r2, [pc, #156]	; (8001a28 <SystemClock_Config+0xd8>)
 800198a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800198e:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <SystemClock_Config+0xd8>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <SystemClock_Config+0xd8>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199e:	6413      	str	r3, [r2, #64]	; 0x40
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <SystemClock_Config+0xd8>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019ac:	2300      	movs	r3, #0
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <SystemClock_Config+0xdc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019b8:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <SystemClock_Config+0xdc>)
 80019ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <SystemClock_Config+0xdc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019cc:	2302      	movs	r3, #2
 80019ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d4:	2310      	movs	r3, #16
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019dc:	2300      	movs	r3, #0
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4618      	mov	r0, r3
 80019e6:	f006 f8d1 	bl	8007b8c <HAL_RCC_OscConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80019f0:	f000 f938 	bl	8001c64 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f005 f886 	bl	8006b20 <HAL_RCC_ClockConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001a1a:	f000 f923 	bl	8001c64 <Error_Handler>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3750      	adds	r7, #80	; 0x50
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40007000 	.word	0x40007000

08001a30 <MX_I2S1_Init>:

// ****************************************************************************

static void MX_I2S1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0

  hi2s1.Instance = SPI1;
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <MX_I2S1_Init+0x54>)
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <MX_I2S1_Init+0x58>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_I2S1_Init+0x54>)
 8001a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a40:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_I2S1_Init+0x54>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_I2S1_Init+0x54>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <MX_I2S1_Init+0x54>)
 8001a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a54:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <MX_I2S1_Init+0x54>)
 8001a58:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001a5c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_I2S1_Init+0x54>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_I2S1_Init+0x54>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_I2S1_Init+0x54>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_I2S1_Init+0x54>)
 8001a72:	f004 fe57 	bl	8006724 <HAL_I2S_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 8001a7c:	f000 f8f2 	bl	8001c64 <Error_Handler>
  }

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000043c 	.word	0x2000043c
 8001a88:	40013000 	.word	0x40013000

08001a8c <MX_USART2_UART_Init>:
PA2     ------> USART2_TX
PA3     ------> USART2_RX
*/

static void MX_USART2_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_USART2_UART_Init+0x4c>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <MX_USART2_UART_Init+0x50>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MX_USART2_UART_Init+0x4c>)
 8001a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_USART2_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_USART2_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <MX_USART2_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_USART2_UART_Init+0x4c>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <MX_USART2_UART_Init+0x4c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_USART2_UART_Init+0x4c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_USART2_UART_Init+0x4c>)
 8001ac4:	f007 fc12 	bl	80092ec <HAL_UART_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ace:	f000 f8c9 	bl	8001c64 <Error_Handler>
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000484 	.word	0x20000484
 8001adc:	40004400 	.word	0x40004400

08001ae0 <read_register>:


// ****************************************************************************

void read_register(unsigned int addr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	 unsigned int  data;
	 // reading a register command

	 data = READ_REG(*((unsigned int *)addr));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
	 printf("\r\nRegister 0x%x, value : 0x%x \r",addr,data);
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <read_register+0x20>)
 8001af4:	f009 fb5c 	bl	800b1b0 <iprintf>

}
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	08010218 	.word	0x08010218

08001b04 <write_register>:

// ****************************************************************************

void write_register(unsigned int addr, unsigned int val)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]

	*((unsigned int *)addr)=((unsigned int *)val);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	601a      	str	r2, [r3, #0]


}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <help_menu>:

// ****************************************************************************

void help_menu(void)

{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0

	  printf("\r\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<CLI supported commands >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n");
 8001b24:	4814      	ldr	r0, [pc, #80]	; (8001b78 <help_menu+0x58>)
 8001b26:	f009 fbc9 	bl	800b2bc <puts>
	  printf("\r=========================================================================================================\r\n");
 8001b2a:	4814      	ldr	r0, [pc, #80]	; (8001b7c <help_menu+0x5c>)
 8001b2c:	f009 fbc6 	bl	800b2bc <puts>
	  printf("\rhelp                  : list of supported commands\r\n");
 8001b30:	4813      	ldr	r0, [pc, #76]	; (8001b80 <help_menu+0x60>)
 8001b32:	f009 fbc3 	bl	800b2bc <puts>
	  printf("rd <xxxx>             : read a register address <xxxx>\r\n");
 8001b36:	4813      	ldr	r0, [pc, #76]	; (8001b84 <help_menu+0x64>)
 8001b38:	f009 fbc0 	bl	800b2bc <puts>
	  printf("dump <xxxx> <yyyy>    : register dump from address <xxxx> # of addresses <yyyy> (32 bit each)\r\n");
 8001b3c:	4812      	ldr	r0, [pc, #72]	; (8001b88 <help_menu+0x68>)
 8001b3e:	f009 fbbd 	bl	800b2bc <puts>
	  printf("wr <xxxx> <yyyy>      : write to a register <xxxx> value <yyyy>\r\n");
 8001b42:	4812      	ldr	r0, [pc, #72]	; (8001b8c <help_menu+0x6c>)
 8001b44:	f009 fbba 	bl	800b2bc <puts>
	  printf("temp                  : read temperature sensor value\r\n");
 8001b48:	4811      	ldr	r0, [pc, #68]	; (8001b90 <help_menu+0x70>)
 8001b4a:	f009 fbb7 	bl	800b2bc <puts>
	  printf("spi                   : allow host to send an SPI command to MCU SPI slave interface\r\n");
 8001b4e:	4811      	ldr	r0, [pc, #68]	; (8001b94 <help_menu+0x74>)
 8001b50:	f009 fbb4 	bl	800b2bc <puts>
	  printf("adc                   : print analog reading from MCU ADC interface (pin A5 input)\r\n");
 8001b54:	4810      	ldr	r0, [pc, #64]	; (8001b98 <help_menu+0x78>)
 8001b56:	f009 fbb1 	bl	800b2bc <puts>
	  printf("dac                   : output on MCU PA5 DAC output pin the signal measured with ADC on PA4 GPIO pin\r\n");
 8001b5a:	4810      	ldr	r0, [pc, #64]	; (8001b9c <help_menu+0x7c>)
 8001b5c:	f009 fbae 	bl	800b2bc <puts>
	  printf("gpio                  : toggle GPIO PA#5 (i.e., blinking LED on the board\r\n");
 8001b60:	480f      	ldr	r0, [pc, #60]	; (8001ba0 <help_menu+0x80>)
 8001b62:	f009 fbab 	bl	800b2bc <puts>
	  printf("quit                  : Exit Command Line terminal \r\n");
 8001b66:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <help_menu+0x84>)
 8001b68:	f009 fba8 	bl	800b2bc <puts>
	  printf("\r=========================================================================================================\r\n");
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <help_menu+0x5c>)
 8001b6e:	f009 fba5 	bl	800b2bc <puts>

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	08010238 	.word	0x08010238
 8001b7c:	0801029c 	.word	0x0801029c
 8001b80:	08010308 	.word	0x08010308
 8001b84:	08010340 	.word	0x08010340
 8001b88:	08010378 	.word	0x08010378
 8001b8c:	080103d8 	.word	0x080103d8
 8001b90:	0801041c 	.word	0x0801041c
 8001b94:	08010454 	.word	0x08010454
 8001b98:	080104ac 	.word	0x080104ac
 8001b9c:	08010500 	.word	0x08010500
 8001ba0:	08010568 	.word	0x08010568
 8001ba4:	080105b4 	.word	0x080105b4

08001ba8 <MX_GPIO_Init>:
// ****************************************************************************

static void MX_GPIO_Init(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <MX_GPIO_Init+0x78>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <MX_GPIO_Init+0x78>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <MX_GPIO_Init+0x78>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_GPIO_Init+0x78>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <MX_GPIO_Init+0x78>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <MX_GPIO_Init+0x78>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_GPIO_Init+0x78>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <MX_GPIO_Init+0x78>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_GPIO_Init+0x78>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]

}
 8001c12:	bf00      	nop
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <GPIO_blink>:

// ****************************************************************************


void GPIO_blink()
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0

	 write_register (0x40020000,0xA80087A0);  // configuring PA5 pin to GPIO
 8001c28:	490a      	ldr	r1, [pc, #40]	; (8001c54 <GPIO_blink+0x30>)
 8001c2a:	480b      	ldr	r0, [pc, #44]	; (8001c58 <GPIO_blink+0x34>)
 8001c2c:	f7ff ff6a 	bl	8001b04 <write_register>
	 write_register (0x40020014,0x20);        // setting the bit to HIGH
 8001c30:	2120      	movs	r1, #32
 8001c32:	480a      	ldr	r0, [pc, #40]	; (8001c5c <GPIO_blink+0x38>)
 8001c34:	f7ff ff66 	bl	8001b04 <write_register>
	 HAL_Delay(1000);
 8001c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c3c:	f000 fd0c 	bl	8002658 <HAL_Delay>
	 write_register (0x40020014,0x0);         // setting the bit to LOW
 8001c40:	2100      	movs	r1, #0
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <GPIO_blink+0x38>)
 8001c44:	f7ff ff5e 	bl	8001b04 <write_register>

	 write_register (0x40020000,0xA8008FA0);  // configuring PA5 GPIO back to
 8001c48:	4905      	ldr	r1, [pc, #20]	; (8001c60 <GPIO_blink+0x3c>)
 8001c4a:	4803      	ldr	r0, [pc, #12]	; (8001c58 <GPIO_blink+0x34>)
 8001c4c:	f7ff ff5a 	bl	8001b04 <write_register>
                                              // analog mode
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	a80087a0 	.word	0xa80087a0
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020014 	.word	0x40020014
 8001c60:	a8008fa0 	.word	0xa8008fa0

08001c64 <Error_Handler>:

// ****************************************************************************


void Error_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop

  __disable_irq();
  	 printf ("An error occured! Will break now...");
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <Error_Handler+0x14>)
 8001c6e:	f009 fa9f 	bl	800b1b0 <iprintf>

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	080105ec 	.word	0x080105ec

08001c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_MspInit+0x4c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a0f      	ldr	r2, [pc, #60]	; (8001cc8 <HAL_MspInit+0x4c>)
 8001c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_MspInit+0x4c>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_MspInit+0x4c>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_MspInit+0x4c>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_MspInit+0x4c>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <HAL_ADC_MspInit+0xdc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d157      	bne.n	8001d9e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <HAL_ADC_MspInit+0xe0>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4a2d      	ldr	r2, [pc, #180]	; (8001dac <HAL_ADC_MspInit+0xe0>)
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_ADC_MspInit+0xe0>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b27      	ldr	r3, [pc, #156]	; (8001dac <HAL_ADC_MspInit+0xe0>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a26      	ldr	r2, [pc, #152]	; (8001dac <HAL_ADC_MspInit+0xe0>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_ADC_MspInit+0xe0>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d26:	2320      	movs	r3, #32
 8001d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	481d      	ldr	r0, [pc, #116]	; (8001db0 <HAL_ADC_MspInit+0xe4>)
 8001d3a:	f001 feef 	bl	8003b1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d40:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <HAL_ADC_MspInit+0xec>)
 8001d42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d84:	f001 faba 	bl	80032fc <HAL_DMA_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d8e:	f7ff ff69 	bl	8001c64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d96:	639a      	str	r2, [r3, #56]	; 0x38
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_ADC_MspInit+0xe8>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40012000 	.word	0x40012000
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	200002c0 	.word	0x200002c0
 8001db8:	40026410 	.word	0x40026410

08001dbc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <HAL_DAC_MspInit+0x7c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d127      	bne.n	8001e2e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_DAC_MspInit+0x80>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a15      	ldr	r2, [pc, #84]	; (8001e3c <HAL_DAC_MspInit+0x80>)
 8001de8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_DAC_MspInit+0x80>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_DAC_MspInit+0x80>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_DAC_MspInit+0x80>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_DAC_MspInit+0x80>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e16:	2310      	movs	r3, #16
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <HAL_DAC_MspInit+0x84>)
 8001e2a:	f001 fe77 	bl	8003b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	; 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40007400 	.word	0x40007400
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020000 	.word	0x40020000

08001e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a38      	ldr	r2, [pc, #224]	; (8001f44 <HAL_I2C_MspInit+0x100>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d169      	bne.n	8001f3a <HAL_I2C_MspInit+0xf6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_I2C_MspInit+0x104>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a36      	ldr	r2, [pc, #216]	; (8001f48 <HAL_I2C_MspInit+0x104>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_I2C_MspInit+0x104>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e82:	23c0      	movs	r3, #192	; 0xc0
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e86:	2312      	movs	r3, #18
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e92:	2304      	movs	r3, #4
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	482b      	ldr	r0, [pc, #172]	; (8001f4c <HAL_I2C_MspInit+0x108>)
 8001e9e:	f001 fe3d 	bl	8003b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HAL_I2C_MspInit+0x104>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a27      	ldr	r2, [pc, #156]	; (8001f48 <HAL_I2C_MspInit+0x104>)
 8001eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_I2C_MspInit+0x104>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001ec0:	4a24      	ldr	r2, [pc, #144]	; (8001f54 <HAL_I2C_MspInit+0x110>)
 8001ec2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001ec6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ecc:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001eda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ede:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001efe:	4814      	ldr	r0, [pc, #80]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001f00:	f001 f9fc 	bl	80032fc <HAL_DMA_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001f0a:	f7ff feab 	bl	8001c64 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38
 8001f14:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <HAL_I2C_MspInit+0x10c>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	201f      	movs	r0, #31
 8001f20:	f001 f8b1 	bl	8003086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f24:	201f      	movs	r0, #31
 8001f26:	f001 f8ca 	bl	80030be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2020      	movs	r0, #32
 8001f30:	f001 f8a9 	bl	8003086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001f34:	2020      	movs	r0, #32
 8001f36:	f001 f8c2 	bl	80030be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f3a:	bf00      	nop
 8001f3c:	3728      	adds	r7, #40	; 0x28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40005400 	.word	0x40005400
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	20000374 	.word	0x20000374
 8001f54:	40026010 	.word	0x40026010

08001f58 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0a2      	sub	sp, #136	; 0x88
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f70:	f107 0318 	add.w	r3, r7, #24
 8001f74:	225c      	movs	r2, #92	; 0x5c
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f008 fa97 	bl	800a4ac <memset>
  if(hi2s->Instance==SPI1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a48      	ldr	r2, [pc, #288]	; (80020a4 <HAL_I2S_MspInit+0x14c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	f040 8089 	bne.w	800209c <HAL_I2S_MspInit+0x144>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001f8e:	23c0      	movs	r3, #192	; 0xc0
 8001f90:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8001f92:	2302      	movs	r3, #2
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8001f96:	2310      	movs	r3, #16
 8001f98:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001faa:	f107 0318 	add.w	r3, r7, #24
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fed0 	bl	8006d54 <HAL_RCCEx_PeriphCLKConfig>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 8001fba:	f7ff fe53 	bl	8001c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_I2S_MspInit+0x150>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a38      	ldr	r2, [pc, #224]	; (80020a8 <HAL_I2S_MspInit+0x150>)
 8001fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_I2S_MspInit+0x150>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	4b32      	ldr	r3, [pc, #200]	; (80020a8 <HAL_I2S_MspInit+0x150>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a31      	ldr	r2, [pc, #196]	; (80020a8 <HAL_I2S_MspInit+0x150>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <HAL_I2S_MspInit+0x150>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_I2S_MspInit+0x150>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a2a      	ldr	r2, [pc, #168]	; (80020a8 <HAL_I2S_MspInit+0x150>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_I2S_MspInit+0x150>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_I2S_MspInit+0x150>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a23      	ldr	r2, [pc, #140]	; (80020a8 <HAL_I2S_MspInit+0x150>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <HAL_I2S_MspInit+0x150>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_15;
 800202e:	f248 0380 	movw	r3, #32896	; 0x8080
 8002032:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002042:	2305      	movs	r3, #5
 8002044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800204c:	4619      	mov	r1, r3
 800204e:	4817      	ldr	r0, [pc, #92]	; (80020ac <HAL_I2S_MspInit+0x154>)
 8002050:	f001 fd64 	bl	8003b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002054:	2310      	movs	r3, #16
 8002056:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002066:	2305      	movs	r3, #5
 8002068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002070:	4619      	mov	r1, r3
 8002072:	480f      	ldr	r0, [pc, #60]	; (80020b0 <HAL_I2S_MspInit+0x158>)
 8002074:	f001 fd52 	bl	8003b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002078:	2308      	movs	r3, #8
 800207a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800208a:	2305      	movs	r3, #5
 800208c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002094:	4619      	mov	r1, r3
 8002096:	4807      	ldr	r0, [pc, #28]	; (80020b4 <HAL_I2S_MspInit+0x15c>)
 8002098:	f001 fd40 	bl	8003b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800209c:	bf00      	nop
 800209e:	3788      	adds	r7, #136	; 0x88
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40013000 	.word	0x40013000
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020400 	.word	0x40020400

080020b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a30      	ldr	r2, [pc, #192]	; (8002198 <HAL_SPI_MspInit+0xe0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d15a      	bne.n	8002190 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_SPI_MspInit+0xe4>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a2e      	ldr	r2, [pc, #184]	; (800219c <HAL_SPI_MspInit+0xe4>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b2c      	ldr	r3, [pc, #176]	; (800219c <HAL_SPI_MspInit+0xe4>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b28      	ldr	r3, [pc, #160]	; (800219c <HAL_SPI_MspInit+0xe4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a27      	ldr	r2, [pc, #156]	; (800219c <HAL_SPI_MspInit+0xe4>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_SPI_MspInit+0xe4>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_SPI_MspInit+0xe4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a20      	ldr	r2, [pc, #128]	; (800219c <HAL_SPI_MspInit+0xe4>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b1e      	ldr	r3, [pc, #120]	; (800219c <HAL_SPI_MspInit+0xe4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800212e:	2302      	movs	r3, #2
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800213e:	2307      	movs	r3, #7
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	4815      	ldr	r0, [pc, #84]	; (80021a0 <HAL_SPI_MspInit+0xe8>)
 800214a:	f001 fce7 	bl	8003b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800214e:	2304      	movs	r3, #4
 8002150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800215e:	2305      	movs	r3, #5
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	4619      	mov	r1, r3
 8002168:	480d      	ldr	r0, [pc, #52]	; (80021a0 <HAL_SPI_MspInit+0xe8>)
 800216a:	f001 fcd7 	bl	8003b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800216e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002180:	2305      	movs	r3, #5
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	4806      	ldr	r0, [pc, #24]	; (80021a4 <HAL_SPI_MspInit+0xec>)
 800218c:	f001 fcc6 	bl	8003b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	; 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40003800 	.word	0x40003800
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40020400 	.word	0x40020400

080021a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a15      	ldr	r2, [pc, #84]	; (800220c <HAL_TIM_Base_MspInit+0x64>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d10e      	bne.n	80021d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <HAL_TIM_Base_MspInit+0x68>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a13      	ldr	r2, [pc, #76]	; (8002210 <HAL_TIM_Base_MspInit+0x68>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_TIM_Base_MspInit+0x68>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80021d6:	e012      	b.n	80021fe <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <HAL_TIM_Base_MspInit+0x6c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10d      	bne.n	80021fe <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_TIM_Base_MspInit+0x68>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_TIM_Base_MspInit+0x68>)
 80021ec:	f043 0310 	orr.w	r3, r3, #16
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_TIM_Base_MspInit+0x68>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40000400 	.word	0x40000400
 8002210:	40023800 	.word	0x40023800
 8002214:	40001000 	.word	0x40001000

08002218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	; 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <HAL_UART_MspInit+0x94>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d133      	bne.n	80022a2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_UART_MspInit+0x98>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <HAL_UART_MspInit+0x98>)
 8002244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_UART_MspInit+0x98>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_UART_MspInit+0x98>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <HAL_UART_MspInit+0x98>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_UART_MspInit+0x98>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002272:	230c      	movs	r3, #12
 8002274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002282:	2307      	movs	r3, #7
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4809      	ldr	r0, [pc, #36]	; (80022b4 <HAL_UART_MspInit+0x9c>)
 800228e:	f001 fc45 	bl	8003b1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2101      	movs	r1, #1
 8002296:	2026      	movs	r0, #38	; 0x26
 8002298:	f000 fef5 	bl	8003086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800229c:	2026      	movs	r0, #38	; 0x26
 800229e:	f000 ff0e 	bl	80030be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022a2:	bf00      	nop
 80022a4:	3728      	adds	r7, #40	; 0x28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40004400 	.word	0x40004400
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020000 	.word	0x40020000

080022b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <NMI_Handler+0x4>

080022be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <MemManage_Handler+0x4>

080022ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002304:	f000 f988 	bl	8002618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <DMA1_Stream0_IRQHandler+0x10>)
 8002312:	f001 f98b 	bl	800362c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000374 	.word	0x20000374

08002320 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <I2C1_EV_IRQHandler+0x10>)
 8002326:	f002 f9f5 	bl	8004714 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000320 	.word	0x20000320

08002334 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <I2C1_ER_IRQHandler+0x10>)
 800233a:	f002 fb5c 	bl	80049f6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000320 	.word	0x20000320

08002348 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <USART2_IRQHandler+0x10>)
 800234e:	f007 f94f 	bl	80095f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000484 	.word	0x20000484

0800235c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <DMA2_Stream0_IRQHandler+0x10>)
 8002362:	f001 f963 	bl	800362c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200002c0 	.word	0x200002c0

08002370 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return 1;
 8002374:	2301      	movs	r3, #1
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_kill>:

int _kill(int pid, int sig)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800238a:	f008 f865 	bl	800a458 <__errno>
 800238e:	4603      	mov	r3, r0
 8002390:	2216      	movs	r2, #22
 8002392:	601a      	str	r2, [r3, #0]
  return -1;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_exit>:

void _exit (int status)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ffe7 	bl	8002380 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023b2:	e7fe      	b.n	80023b2 <_exit+0x12>

080023b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	e00a      	b.n	80023dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023c6:	f7ff f955 	bl	8001674 <__io_getchar>
 80023ca:	4601      	mov	r1, r0
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	60ba      	str	r2, [r7, #8]
 80023d2:	b2ca      	uxtb	r2, r1
 80023d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3301      	adds	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	dbf0      	blt.n	80023c6 <_read+0x12>
  }

  return len;
 80023e4:	687b      	ldr	r3, [r7, #4]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e009      	b.n	8002414 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	60ba      	str	r2, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff f921 	bl	8001650 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	3301      	adds	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	429a      	cmp	r2, r3
 800241a:	dbf1      	blt.n	8002400 <_write+0x12>
  }
  return len;
 800241c:	687b      	ldr	r3, [r7, #4]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <_close>:

int _close(int file)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800244e:	605a      	str	r2, [r3, #4]
  return 0;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <_isatty>:

int _isatty(int file)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002498:	4a14      	ldr	r2, [pc, #80]	; (80024ec <_sbrk+0x5c>)
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <_sbrk+0x60>)
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <_sbrk+0x64>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <_sbrk+0x64>)
 80024ae:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <_sbrk+0x68>)
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d207      	bcs.n	80024d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c0:	f007 ffca 	bl	800a458 <__errno>
 80024c4:	4603      	mov	r3, r0
 80024c6:	220c      	movs	r2, #12
 80024c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
 80024ce:	e009      	b.n	80024e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <_sbrk+0x64>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	4a05      	ldr	r2, [pc, #20]	; (80024f4 <_sbrk+0x64>)
 80024e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024e2:	68fb      	ldr	r3, [r7, #12]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20020000 	.word	0x20020000
 80024f0:	00000400 	.word	0x00000400
 80024f4:	200004c8 	.word	0x200004c8
 80024f8:	200004e0 	.word	0x200004e0

080024fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <SystemInit+0x20>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <SystemInit+0x20>)
 8002508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800250c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002558 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002524:	480d      	ldr	r0, [pc, #52]	; (800255c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002526:	490e      	ldr	r1, [pc, #56]	; (8002560 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002528:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800252c:	e002      	b.n	8002534 <LoopCopyDataInit>

0800252e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002532:	3304      	adds	r3, #4

08002534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002538:	d3f9      	bcc.n	800252e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800253c:	4c0b      	ldr	r4, [pc, #44]	; (800256c <LoopFillZerobss+0x26>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002540:	e001      	b.n	8002546 <LoopFillZerobss>

08002542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002544:	3204      	adds	r2, #4

08002546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002548:	d3fb      	bcc.n	8002542 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800254a:	f7ff ffd7 	bl	80024fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800254e:	f007 ff89 	bl	800a464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002552:	f7ff f8ad 	bl	80016b0 <main>
  bx  lr    
 8002556:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002558:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800255c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002560:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002564:	08010b0c 	.word	0x08010b0c
  ldr r2, =_sbss
 8002568:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800256c:	200004e0 	.word	0x200004e0

08002570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002570:	e7fe      	b.n	8002570 <ADC_IRQHandler>
	...

08002574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_Init+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <HAL_Init+0x40>)
 800257e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_Init+0x40>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <HAL_Init+0x40>)
 800258a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_Init+0x40>)
 8002596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259c:	2003      	movs	r0, #3
 800259e:	f000 fd67 	bl	8003070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a2:	200f      	movs	r0, #15
 80025a4:	f000 f808 	bl	80025b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a8:	f7ff fb68 	bl	8001c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023c00 	.word	0x40023c00

080025b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_InitTick+0x54>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_InitTick+0x58>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fd7f 	bl	80030da <HAL_SYSTICK_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00e      	b.n	8002604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b0f      	cmp	r3, #15
 80025ea:	d80a      	bhi.n	8002602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ec:	2200      	movs	r2, #0
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f000 fd47 	bl	8003086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f8:	4a06      	ldr	r2, [pc, #24]	; (8002614 <HAL_InitTick+0x5c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e000      	b.n	8002604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000000 	.word	0x20000000
 8002610:	20000008 	.word	0x20000008
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_IncTick+0x20>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_IncTick+0x24>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4413      	add	r3, r2
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <HAL_IncTick+0x24>)
 800262a:	6013      	str	r3, [r2, #0]
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000008 	.word	0x20000008
 800263c:	200004cc 	.word	0x200004cc

08002640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return uwTick;
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_GetTick+0x14>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	200004cc 	.word	0x200004cc

08002658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff ffee 	bl	8002640 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d005      	beq.n	800267e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_Delay+0x44>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800267e:	bf00      	nop
 8002680:	f7ff ffde 	bl	8002640 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	d8f7      	bhi.n	8002680 <HAL_Delay+0x28>
  {
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000008 	.word	0x20000008

080026a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e033      	b.n	800271e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fb04 	bl	8001ccc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d118      	bne.n	8002710 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026e6:	f023 0302 	bic.w	r3, r3, #2
 80026ea:	f043 0202 	orr.w	r2, r3, #2
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fa6e 	bl	8002bd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
 800270e:	e001      	b.n	8002714 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_Start_DMA+0x1e>
 8002742:	2302      	movs	r3, #2
 8002744:	e0e9      	b.n	800291a <HAL_ADC_Start_DMA+0x1f2>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d018      	beq.n	800278e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800276c:	4b6d      	ldr	r3, [pc, #436]	; (8002924 <HAL_ADC_Start_DMA+0x1fc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a6d      	ldr	r2, [pc, #436]	; (8002928 <HAL_ADC_Start_DMA+0x200>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0c9a      	lsrs	r2, r3, #18
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002780:	e002      	b.n	8002788 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	3b01      	subs	r3, #1
 8002786:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f9      	bne.n	8002782 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279c:	d107      	bne.n	80027ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	f040 80a1 	bne.w	8002900 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fc:	d106      	bne.n	800280c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f023 0206 	bic.w	r2, r3, #6
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
 800280a:	e002      	b.n	8002812 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800281a:	4b44      	ldr	r3, [pc, #272]	; (800292c <HAL_ADC_Start_DMA+0x204>)
 800281c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	4a43      	ldr	r2, [pc, #268]	; (8002930 <HAL_ADC_Start_DMA+0x208>)
 8002824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	4a42      	ldr	r2, [pc, #264]	; (8002934 <HAL_ADC_Start_DMA+0x20c>)
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	4a41      	ldr	r2, [pc, #260]	; (8002938 <HAL_ADC_Start_DMA+0x210>)
 8002834:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800283e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800284e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800285e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	334c      	adds	r3, #76	; 0x4c
 800286a:	4619      	mov	r1, r3
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f000 fdf2 	bl	8003458 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2b00      	cmp	r3, #0
 800287e:	d12a      	bne.n	80028d6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2d      	ldr	r2, [pc, #180]	; (800293c <HAL_ADC_Start_DMA+0x214>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d015      	beq.n	80028b6 <HAL_ADC_Start_DMA+0x18e>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2c      	ldr	r2, [pc, #176]	; (8002940 <HAL_ADC_Start_DMA+0x218>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d105      	bne.n	80028a0 <HAL_ADC_Start_DMA+0x178>
 8002894:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_ADC_Start_DMA+0x204>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a27      	ldr	r2, [pc, #156]	; (8002944 <HAL_ADC_Start_DMA+0x21c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d136      	bne.n	8002918 <HAL_ADC_Start_DMA+0x1f0>
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_ADC_Start_DMA+0x204>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d130      	bne.n	8002918 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d129      	bne.n	8002918 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	e020      	b.n	8002918 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a18      	ldr	r2, [pc, #96]	; (800293c <HAL_ADC_Start_DMA+0x214>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d11b      	bne.n	8002918 <HAL_ADC_Start_DMA+0x1f0>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d114      	bne.n	8002918 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	e00b      	b.n	8002918 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f043 0210 	orr.w	r2, r3, #16
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000000 	.word	0x20000000
 8002928:	431bde83 	.word	0x431bde83
 800292c:	40012300 	.word	0x40012300
 8002930:	08002dcd 	.word	0x08002dcd
 8002934:	08002e87 	.word	0x08002e87
 8002938:	08002ea3 	.word	0x08002ea3
 800293c:	40012000 	.word	0x40012000
 8002940:	40012100 	.word	0x40012100
 8002944:	40012200 	.word	0x40012200

08002948 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x1c>
 8002988:	2302      	movs	r3, #2
 800298a:	e113      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x244>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b09      	cmp	r3, #9
 800299a:	d925      	bls.n	80029e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68d9      	ldr	r1, [r3, #12]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	3b1e      	subs	r3, #30
 80029b2:	2207      	movs	r2, #7
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43da      	mvns	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	400a      	ands	r2, r1
 80029c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68d9      	ldr	r1, [r3, #12]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	4603      	mov	r3, r0
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4403      	add	r3, r0
 80029da:	3b1e      	subs	r3, #30
 80029dc:	409a      	lsls	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	e022      	b.n	8002a2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6919      	ldr	r1, [r3, #16]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	2207      	movs	r2, #7
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43da      	mvns	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	400a      	ands	r2, r1
 8002a0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6919      	ldr	r1, [r3, #16]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4603      	mov	r3, r0
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4403      	add	r3, r0
 8002a24:	409a      	lsls	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d824      	bhi.n	8002a80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	3b05      	subs	r3, #5
 8002a48:	221f      	movs	r2, #31
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	400a      	ands	r2, r1
 8002a56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	4618      	mov	r0, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b05      	subs	r3, #5
 8002a72:	fa00 f203 	lsl.w	r2, r0, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a7e:	e04c      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d824      	bhi.n	8002ad2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	3b23      	subs	r3, #35	; 0x23
 8002a9a:	221f      	movs	r2, #31
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43da      	mvns	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3b23      	subs	r3, #35	; 0x23
 8002ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
 8002ad0:	e023      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b41      	subs	r3, #65	; 0x41
 8002ae4:	221f      	movs	r2, #31
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	400a      	ands	r2, r1
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	4618      	mov	r0, r3
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b41      	subs	r3, #65	; 0x41
 8002b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b1a:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <HAL_ADC_ConfigChannel+0x250>)
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a28      	ldr	r2, [pc, #160]	; (8002bc4 <HAL_ADC_ConfigChannel+0x254>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10f      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1d8>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b12      	cmp	r3, #18
 8002b2e:	d10b      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <HAL_ADC_ConfigChannel+0x254>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d12b      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x23a>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <HAL_ADC_ConfigChannel+0x258>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x1f4>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b11      	cmp	r3, #17
 8002b62:	d122      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a11      	ldr	r2, [pc, #68]	; (8002bc8 <HAL_ADC_ConfigChannel+0x258>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d111      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <HAL_ADC_ConfigChannel+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <HAL_ADC_ConfigChannel+0x260>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	0c9a      	lsrs	r2, r3, #18
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b9c:	e002      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f9      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	40012300 	.word	0x40012300
 8002bc4:	40012000 	.word	0x40012000
 8002bc8:	10000012 	.word	0x10000012
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	431bde83 	.word	0x431bde83

08002bd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bdc:	4b79      	ldr	r3, [pc, #484]	; (8002dc4 <ADC_Init+0x1f0>)
 8002bde:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	021a      	lsls	r2, r3, #8
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6899      	ldr	r1, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	4a58      	ldr	r2, [pc, #352]	; (8002dc8 <ADC_Init+0x1f4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6899      	ldr	r1, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6899      	ldr	r1, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	e00f      	b.n	8002cd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0202 	bic.w	r2, r2, #2
 8002ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6899      	ldr	r1, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7e1b      	ldrb	r3, [r3, #24]
 8002cec:	005a      	lsls	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01b      	beq.n	8002d38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6859      	ldr	r1, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	035a      	lsls	r2, r3, #13
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	e007      	b.n	8002d48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	051a      	lsls	r2, r3, #20
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6899      	ldr	r1, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d8a:	025a      	lsls	r2, r3, #9
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6899      	ldr	r1, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	029a      	lsls	r2, r3, #10
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40012300 	.word	0x40012300
 8002dc8:	0f000001 	.word	0x0f000001

08002dcc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d13c      	bne.n	8002e60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d12b      	bne.n	8002e58 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d127      	bne.n	8002e58 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d119      	bne.n	8002e58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0220 	bic.w	r2, r2, #32
 8002e32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7fe f9f3 	bl	8001244 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e5e:	e00e      	b.n	8002e7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7ff fd75 	bl	800295c <HAL_ADC_ErrorCallback>
}
 8002e72:	e004      	b.n	8002e7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7ff fd57 	bl	8002948 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2240      	movs	r2, #64	; 0x40
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f043 0204 	orr.w	r2, r3, #4
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7ff fd4a 	bl	800295c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ec8:	bf00      	nop
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eec:	4013      	ands	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f02:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	60d3      	str	r3, [r2, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <__NVIC_GetPriorityGrouping+0x18>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f003 0307 	and.w	r3, r3, #7
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db0b      	blt.n	8002f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f003 021f 	and.w	r2, r3, #31
 8002f4c:	4907      	ldr	r1, [pc, #28]	; (8002f6c <__NVIC_EnableIRQ+0x38>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2001      	movs	r0, #1
 8002f56:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	db0a      	blt.n	8002f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	490c      	ldr	r1, [pc, #48]	; (8002fbc <__NVIC_SetPriority+0x4c>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	0112      	lsls	r2, r2, #4
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	440b      	add	r3, r1
 8002f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f98:	e00a      	b.n	8002fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4908      	ldr	r1, [pc, #32]	; (8002fc0 <__NVIC_SetPriority+0x50>)
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	3b04      	subs	r3, #4
 8002fa8:	0112      	lsls	r2, r2, #4
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	440b      	add	r3, r1
 8002fae:	761a      	strb	r2, [r3, #24]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000e100 	.word	0xe000e100
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f1c3 0307 	rsb	r3, r3, #7
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	bf28      	it	cs
 8002fe2:	2304      	movcs	r3, #4
 8002fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d902      	bls.n	8002ff4 <NVIC_EncodePriority+0x30>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3b03      	subs	r3, #3
 8002ff2:	e000      	b.n	8002ff6 <NVIC_EncodePriority+0x32>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	401a      	ands	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800300c:	f04f 31ff 	mov.w	r1, #4294967295
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	43d9      	mvns	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	4313      	orrs	r3, r2
         );
}
 800301e:	4618      	mov	r0, r3
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800303c:	d301      	bcc.n	8003042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800303e:	2301      	movs	r3, #1
 8003040:	e00f      	b.n	8003062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <SysTick_Config+0x40>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304a:	210f      	movs	r1, #15
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	f7ff ff8e 	bl	8002f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <SysTick_Config+0x40>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <SysTick_Config+0x40>)
 800305c:	2207      	movs	r2, #7
 800305e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	e000e010 	.word	0xe000e010

08003070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff29 	bl	8002ed0 <__NVIC_SetPriorityGrouping>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003098:	f7ff ff3e 	bl	8002f18 <__NVIC_GetPriorityGrouping>
 800309c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f7ff ff8e 	bl	8002fc4 <NVIC_EncodePriority>
 80030a8:	4602      	mov	r2, r0
 80030aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff5d 	bl	8002f70 <__NVIC_SetPriority>
}
 80030b6:	bf00      	nop
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4603      	mov	r3, r0
 80030c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff31 	bl	8002f34 <__NVIC_EnableIRQ>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ffa2 	bl	800302c <SysTick_Config>
 80030e8:	4603      	mov	r3, r0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e014      	b.n	800312e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	791b      	ldrb	r3, [r3, #4]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d105      	bne.n	800311a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7fe fe51 	bl	8001dbc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	795b      	ldrb	r3, [r3, #5]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_DAC_Start+0x16>
 8003148:	2302      	movs	r3, #2
 800314a:	e040      	b.n	80031ce <HAL_DAC_Start+0x98>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2201      	movs	r2, #1
 8003166:	409a      	lsls	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10f      	bne.n	8003196 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003180:	2b3c      	cmp	r3, #60	; 0x3c
 8003182:	d11d      	bne.n	80031c0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	e014      	b.n	80031c0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	213c      	movs	r1, #60	; 0x3c
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d107      	bne.n	80031c0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0202 	orr.w	r2, r2, #2
 80031be:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6819      	ldr	r1, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2201      	movs	r2, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	400a      	ands	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d105      	bne.n	800323e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4413      	add	r3, r2
 8003238:	3308      	adds	r3, #8
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e004      	b.n	8003248 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	3314      	adds	r3, #20
 8003246:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	461a      	mov	r2, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800325e:	b480      	push	{r7}
 8003260:	b087      	sub	sp, #28
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	795b      	ldrb	r3, [r3, #5]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_DAC_ConfigChannel+0x18>
 8003272:	2302      	movs	r3, #2
 8003274:	e03c      	b.n	80032f0 <HAL_DAC_ConfigChannel+0x92>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2202      	movs	r2, #2
 8003280:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4013      	ands	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6819      	ldr	r1, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	22c0      	movs	r2, #192	; 0xc0
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43da      	mvns	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	400a      	ands	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff f99a 	bl	8002640 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e099      	b.n	800344c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003338:	e00f      	b.n	800335a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800333a:	f7ff f981 	bl	8002640 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b05      	cmp	r3, #5
 8003346:	d908      	bls.n	800335a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2203      	movs	r2, #3
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e078      	b.n	800344c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e8      	bne.n	800333a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4b38      	ldr	r3, [pc, #224]	; (8003454 <HAL_DMA_Init+0x158>)
 8003374:	4013      	ands	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003386:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d107      	bne.n	80033c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	4313      	orrs	r3, r2
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0307 	bic.w	r3, r3, #7
 80033da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d117      	bne.n	800341e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fb0f 	bl	8003a24 <DMA_CheckFifoParam>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2240      	movs	r2, #64	; 0x40
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800341a:	2301      	movs	r3, #1
 800341c:	e016      	b.n	800344c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fac6 	bl	80039b8 <DMA_CalcBaseAndBitshift>
 800342c:	4603      	mov	r3, r0
 800342e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	223f      	movs	r2, #63	; 0x3f
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	f010803f 	.word	0xf010803f

08003458 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_DMA_Start_IT+0x26>
 800347a:	2302      	movs	r3, #2
 800347c:	e040      	b.n	8003500 <HAL_DMA_Start_IT+0xa8>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d12f      	bne.n	80034f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fa58 	bl	800395c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b0:	223f      	movs	r2, #63	; 0x3f
 80034b2:	409a      	lsls	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0216 	orr.w	r2, r2, #22
 80034c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0208 	orr.w	r2, r2, #8
 80034de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e005      	b.n	80034fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
 80034fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003516:	f7ff f893 	bl	8002640 <HAL_GetTick>
 800351a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d008      	beq.n	800353a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e052      	b.n	80035e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0216 	bic.w	r2, r2, #22
 8003548:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003558:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <HAL_DMA_Abort+0x62>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0208 	bic.w	r2, r2, #8
 8003578:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800358a:	e013      	b.n	80035b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800358c:	f7ff f858 	bl	8002640 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b05      	cmp	r3, #5
 8003598:	d90c      	bls.n	80035b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2203      	movs	r2, #3
 80035a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e015      	b.n	80035e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e4      	bne.n	800358c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c6:	223f      	movs	r2, #63	; 0x3f
 80035c8:	409a      	lsls	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d004      	beq.n	8003606 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e00c      	b.n	8003620 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2205      	movs	r2, #5
 800360a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003638:	4b8e      	ldr	r3, [pc, #568]	; (8003874 <HAL_DMA_IRQHandler+0x248>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a8e      	ldr	r2, [pc, #568]	; (8003878 <HAL_DMA_IRQHandler+0x24c>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	0a9b      	lsrs	r3, r3, #10
 8003644:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	2208      	movs	r2, #8
 8003658:	409a      	lsls	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d01a      	beq.n	8003698 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d013      	beq.n	8003698 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0204 	bic.w	r2, r2, #4
 800367e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	2208      	movs	r2, #8
 8003686:	409a      	lsls	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	f043 0201 	orr.w	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	2201      	movs	r2, #1
 800369e:	409a      	lsls	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d012      	beq.n	80036ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	2201      	movs	r2, #1
 80036bc:	409a      	lsls	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	f043 0202 	orr.w	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	2204      	movs	r2, #4
 80036d4:	409a      	lsls	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d012      	beq.n	8003704 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	2204      	movs	r2, #4
 80036f2:	409a      	lsls	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	f043 0204 	orr.w	r2, r3, #4
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	2210      	movs	r2, #16
 800370a:	409a      	lsls	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d043      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d03c      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003726:	2210      	movs	r2, #16
 8003728:	409a      	lsls	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d018      	beq.n	800376e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d108      	bne.n	800375c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d024      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
 800375a:	e01f      	b.n	800379c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01b      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
 800376c:	e016      	b.n	800379c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0208 	bic.w	r2, r2, #8
 800378a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	2220      	movs	r2, #32
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 808f 	beq.w	80038cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8087 	beq.w	80038cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	2220      	movs	r2, #32
 80037c4:	409a      	lsls	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d136      	bne.n	8003844 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0216 	bic.w	r2, r2, #22
 80037e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_DMA_IRQHandler+0x1da>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0208 	bic.w	r2, r2, #8
 8003814:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	223f      	movs	r2, #63	; 0x3f
 800381c:	409a      	lsls	r2, r3
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003836:	2b00      	cmp	r3, #0
 8003838:	d07e      	beq.n	8003938 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
        }
        return;
 8003842:	e079      	b.n	8003938 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01d      	beq.n	800388e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10d      	bne.n	800387c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	2b00      	cmp	r3, #0
 8003866:	d031      	beq.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e02c      	b.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
 8003872:	bf00      	nop
 8003874:	20000000 	.word	0x20000000
 8003878:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d023      	beq.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4798      	blx	r3
 800388c:	e01e      	b.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10f      	bne.n	80038bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0210 	bic.w	r2, r2, #16
 80038aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d032      	beq.n	800393a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d022      	beq.n	8003926 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2205      	movs	r2, #5
 80038e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3301      	adds	r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	429a      	cmp	r2, r3
 8003902:	d307      	bcc.n	8003914 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f2      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x2cc>
 8003912:	e000      	b.n	8003916 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003914:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
 8003936:	e000      	b.n	800393a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003938:	bf00      	nop
    }
  }
}
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800394e:	b2db      	uxtb	r3, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003978:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b40      	cmp	r3, #64	; 0x40
 8003988:	d108      	bne.n	800399c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800399a:	e007      	b.n	80039ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	60da      	str	r2, [r3, #12]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	3b10      	subs	r3, #16
 80039c8:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <DMA_CalcBaseAndBitshift+0x64>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039d2:	4a13      	ldr	r2, [pc, #76]	; (8003a20 <DMA_CalcBaseAndBitshift+0x68>)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d909      	bls.n	80039fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039ee:	f023 0303 	bic.w	r3, r3, #3
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	659a      	str	r2, [r3, #88]	; 0x58
 80039f8:	e007      	b.n	8003a0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a02:	f023 0303 	bic.w	r3, r3, #3
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	aaaaaaab 	.word	0xaaaaaaab
 8003a20:	08010634 	.word	0x08010634

08003a24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d11f      	bne.n	8003a7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d856      	bhi.n	8003af2 <DMA_CheckFifoParam+0xce>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <DMA_CheckFifoParam+0x28>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a6f 	.word	0x08003a6f
 8003a54:	08003a5d 	.word	0x08003a5d
 8003a58:	08003af3 	.word	0x08003af3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d046      	beq.n	8003af6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6c:	e043      	b.n	8003af6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a76:	d140      	bne.n	8003afa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7c:	e03d      	b.n	8003afa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a86:	d121      	bne.n	8003acc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d837      	bhi.n	8003afe <DMA_CheckFifoParam+0xda>
 8003a8e:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <DMA_CheckFifoParam+0x70>)
 8003a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a94:	08003aa5 	.word	0x08003aa5
 8003a98:	08003aab 	.word	0x08003aab
 8003a9c:	08003aa5 	.word	0x08003aa5
 8003aa0:	08003abd 	.word	0x08003abd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa8:	e030      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d025      	beq.n	8003b02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aba:	e022      	b.n	8003b02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ac4:	d11f      	bne.n	8003b06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aca:	e01c      	b.n	8003b06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d903      	bls.n	8003ada <DMA_CheckFifoParam+0xb6>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d003      	beq.n	8003ae0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ad8:	e018      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ade:	e015      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      break;
 8003af0:	e00b      	b.n	8003b0a <DMA_CheckFifoParam+0xe6>
      break;
 8003af2:	bf00      	nop
 8003af4:	e00a      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      break;
 8003af6:	bf00      	nop
 8003af8:	e008      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      break;
 8003afa:	bf00      	nop
 8003afc:	e006      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      break;
 8003afe:	bf00      	nop
 8003b00:	e004      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      break;
 8003b02:	bf00      	nop
 8003b04:	e002      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b06:	bf00      	nop
 8003b08:	e000      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      break;
 8003b0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop

08003b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b089      	sub	sp, #36	; 0x24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	e165      	b.n	8003e04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b38:	2201      	movs	r2, #1
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	f040 8154 	bne.w	8003dfe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d005      	beq.n	8003b6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d130      	bne.n	8003bd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	2203      	movs	r2, #3
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 0201 	and.w	r2, r3, #1
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d017      	beq.n	8003c0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d123      	bne.n	8003c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	08da      	lsrs	r2, r3, #3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3208      	adds	r2, #8
 8003c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	220f      	movs	r2, #15
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	08da      	lsrs	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3208      	adds	r2, #8
 8003c5a:	69b9      	ldr	r1, [r7, #24]
 8003c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0203 	and.w	r2, r3, #3
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80ae 	beq.w	8003dfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	4b5d      	ldr	r3, [pc, #372]	; (8003e1c <HAL_GPIO_Init+0x300>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	4a5c      	ldr	r2, [pc, #368]	; (8003e1c <HAL_GPIO_Init+0x300>)
 8003cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb2:	4b5a      	ldr	r3, [pc, #360]	; (8003e1c <HAL_GPIO_Init+0x300>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cbe:	4a58      	ldr	r2, [pc, #352]	; (8003e20 <HAL_GPIO_Init+0x304>)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	220f      	movs	r2, #15
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a4f      	ldr	r2, [pc, #316]	; (8003e24 <HAL_GPIO_Init+0x308>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d025      	beq.n	8003d36 <HAL_GPIO_Init+0x21a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4e      	ldr	r2, [pc, #312]	; (8003e28 <HAL_GPIO_Init+0x30c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d01f      	beq.n	8003d32 <HAL_GPIO_Init+0x216>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4d      	ldr	r2, [pc, #308]	; (8003e2c <HAL_GPIO_Init+0x310>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d019      	beq.n	8003d2e <HAL_GPIO_Init+0x212>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a4c      	ldr	r2, [pc, #304]	; (8003e30 <HAL_GPIO_Init+0x314>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <HAL_GPIO_Init+0x20e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a4b      	ldr	r2, [pc, #300]	; (8003e34 <HAL_GPIO_Init+0x318>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00d      	beq.n	8003d26 <HAL_GPIO_Init+0x20a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a4a      	ldr	r2, [pc, #296]	; (8003e38 <HAL_GPIO_Init+0x31c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d007      	beq.n	8003d22 <HAL_GPIO_Init+0x206>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a49      	ldr	r2, [pc, #292]	; (8003e3c <HAL_GPIO_Init+0x320>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <HAL_GPIO_Init+0x202>
 8003d1a:	2306      	movs	r3, #6
 8003d1c:	e00c      	b.n	8003d38 <HAL_GPIO_Init+0x21c>
 8003d1e:	2307      	movs	r3, #7
 8003d20:	e00a      	b.n	8003d38 <HAL_GPIO_Init+0x21c>
 8003d22:	2305      	movs	r3, #5
 8003d24:	e008      	b.n	8003d38 <HAL_GPIO_Init+0x21c>
 8003d26:	2304      	movs	r3, #4
 8003d28:	e006      	b.n	8003d38 <HAL_GPIO_Init+0x21c>
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e004      	b.n	8003d38 <HAL_GPIO_Init+0x21c>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e002      	b.n	8003d38 <HAL_GPIO_Init+0x21c>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_GPIO_Init+0x21c>
 8003d36:	2300      	movs	r3, #0
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	f002 0203 	and.w	r2, r2, #3
 8003d3e:	0092      	lsls	r2, r2, #2
 8003d40:	4093      	lsls	r3, r2
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d48:	4935      	ldr	r1, [pc, #212]	; (8003e20 <HAL_GPIO_Init+0x304>)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	3302      	adds	r3, #2
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d56:	4b3a      	ldr	r3, [pc, #232]	; (8003e40 <HAL_GPIO_Init+0x324>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d7a:	4a31      	ldr	r2, [pc, #196]	; (8003e40 <HAL_GPIO_Init+0x324>)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d80:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <HAL_GPIO_Init+0x324>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <HAL_GPIO_Init+0x324>)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003daa:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <HAL_GPIO_Init+0x324>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dce:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <HAL_GPIO_Init+0x324>)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_GPIO_Init+0x324>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003df8:	4a11      	ldr	r2, [pc, #68]	; (8003e40 <HAL_GPIO_Init+0x324>)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3301      	adds	r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b0f      	cmp	r3, #15
 8003e08:	f67f ae96 	bls.w	8003b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	3724      	adds	r7, #36	; 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40013800 	.word	0x40013800
 8003e24:	40020000 	.word	0x40020000
 8003e28:	40020400 	.word	0x40020400
 8003e2c:	40020800 	.word	0x40020800
 8003e30:	40020c00 	.word	0x40020c00
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40021400 	.word	0x40021400
 8003e3c:	40021800 	.word	0x40021800
 8003e40:	40013c00 	.word	0x40013c00

08003e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e12b      	b.n	80040ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fd ffea 	bl	8001e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2224      	movs	r2, #36	; 0x24
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ea8:	f002 ff2c 	bl	8006d04 <HAL_RCC_GetPCLK1Freq>
 8003eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4a81      	ldr	r2, [pc, #516]	; (80040b8 <HAL_I2C_Init+0x274>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d807      	bhi.n	8003ec8 <HAL_I2C_Init+0x84>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a80      	ldr	r2, [pc, #512]	; (80040bc <HAL_I2C_Init+0x278>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bf94      	ite	ls
 8003ec0:	2301      	movls	r3, #1
 8003ec2:	2300      	movhi	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e006      	b.n	8003ed6 <HAL_I2C_Init+0x92>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a7d      	ldr	r2, [pc, #500]	; (80040c0 <HAL_I2C_Init+0x27c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	bf94      	ite	ls
 8003ed0:	2301      	movls	r3, #1
 8003ed2:	2300      	movhi	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e0e7      	b.n	80040ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a78      	ldr	r2, [pc, #480]	; (80040c4 <HAL_I2C_Init+0x280>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	0c9b      	lsrs	r3, r3, #18
 8003ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a6a      	ldr	r2, [pc, #424]	; (80040b8 <HAL_I2C_Init+0x274>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d802      	bhi.n	8003f18 <HAL_I2C_Init+0xd4>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3301      	adds	r3, #1
 8003f16:	e009      	b.n	8003f2c <HAL_I2C_Init+0xe8>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	4a69      	ldr	r2, [pc, #420]	; (80040c8 <HAL_I2C_Init+0x284>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	099b      	lsrs	r3, r3, #6
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	495c      	ldr	r1, [pc, #368]	; (80040b8 <HAL_I2C_Init+0x274>)
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	d819      	bhi.n	8003f80 <HAL_I2C_Init+0x13c>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1e59      	subs	r1, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f60:	400b      	ands	r3, r1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_I2C_Init+0x138>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1e59      	subs	r1, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f74:	3301      	adds	r3, #1
 8003f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7a:	e051      	b.n	8004020 <HAL_I2C_Init+0x1dc>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	e04f      	b.n	8004020 <HAL_I2C_Init+0x1dc>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d111      	bne.n	8003fac <HAL_I2C_Init+0x168>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1e58      	subs	r0, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	440b      	add	r3, r1
 8003f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	e012      	b.n	8003fd2 <HAL_I2C_Init+0x18e>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1e58      	subs	r0, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6859      	ldr	r1, [r3, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	0099      	lsls	r1, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_I2C_Init+0x196>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e022      	b.n	8004020 <HAL_I2C_Init+0x1dc>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10e      	bne.n	8004000 <HAL_I2C_Init+0x1bc>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1e58      	subs	r0, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6859      	ldr	r1, [r3, #4]
 8003fea:	460b      	mov	r3, r1
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	440b      	add	r3, r1
 8003ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffe:	e00f      	b.n	8004020 <HAL_I2C_Init+0x1dc>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	1e58      	subs	r0, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6859      	ldr	r1, [r3, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	0099      	lsls	r1, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	fbb0 f3f3 	udiv	r3, r0, r3
 8004016:	3301      	adds	r3, #1
 8004018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	6809      	ldr	r1, [r1, #0]
 8004024:	4313      	orrs	r3, r2
 8004026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69da      	ldr	r2, [r3, #28]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800404e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6911      	ldr	r1, [r2, #16]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68d2      	ldr	r2, [r2, #12]
 800405a:	4311      	orrs	r1, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	430b      	orrs	r3, r1
 8004062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	000186a0 	.word	0x000186a0
 80040bc:	001e847f 	.word	0x001e847f
 80040c0:	003d08ff 	.word	0x003d08ff
 80040c4:	431bde83 	.word	0x431bde83
 80040c8:	10624dd3 	.word	0x10624dd3

080040cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	461a      	mov	r2, r3
 80040d8:	460b      	mov	r3, r1
 80040da:	817b      	strh	r3, [r7, #10]
 80040dc:	4613      	mov	r3, r2
 80040de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040e0:	f7fe faae 	bl	8002640 <HAL_GetTick>
 80040e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	f040 80e0 	bne.w	80042b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2319      	movs	r3, #25
 80040fa:	2201      	movs	r2, #1
 80040fc:	4970      	ldr	r1, [pc, #448]	; (80042c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f002 f8e6 	bl	80062d0 <I2C_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
 800410c:	e0d3      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_I2C_Master_Transmit+0x50>
 8004118:	2302      	movs	r3, #2
 800411a:	e0cc      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d007      	beq.n	8004142 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004150:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2221      	movs	r2, #33	; 0x21
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2210      	movs	r2, #16
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	893a      	ldrh	r2, [r7, #8]
 8004172:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4a50      	ldr	r2, [pc, #320]	; (80042c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004184:	8979      	ldrh	r1, [r7, #10]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	6a3a      	ldr	r2, [r7, #32]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f001 fea8 	bl	8005ee0 <I2C_MasterRequestWrite>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e08d      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041b0:	e066      	b.n	8004280 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	6a39      	ldr	r1, [r7, #32]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f002 f960 	bl	800647c <I2C_WaitOnTXEFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00d      	beq.n	80041de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d107      	bne.n	80041da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e06b      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b04      	cmp	r3, #4
 800421a:	d11b      	bne.n	8004254 <HAL_I2C_Master_Transmit+0x188>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d017      	beq.n	8004254 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	6a39      	ldr	r1, [r7, #32]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f002 f950 	bl	80064fe <I2C_WaitOnBTFFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00d      	beq.n	8004280 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	2b04      	cmp	r3, #4
 800426a:	d107      	bne.n	800427c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e01a      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d194      	bne.n	80041b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	00100002 	.word	0x00100002
 80042c4:	ffff0000 	.word	0xffff0000

080042c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	461a      	mov	r2, r3
 80042d4:	460b      	mov	r3, r1
 80042d6:	817b      	strh	r3, [r7, #10]
 80042d8:	4613      	mov	r3, r2
 80042da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042dc:	f7fe f9b0 	bl	8002640 <HAL_GetTick>
 80042e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	f040 820b 	bne.w	8004706 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2319      	movs	r3, #25
 80042f6:	2201      	movs	r2, #1
 80042f8:	497c      	ldr	r1, [pc, #496]	; (80044ec <HAL_I2C_Master_Receive+0x224>)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f001 ffe8 	bl	80062d0 <I2C_WaitOnFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004306:	2302      	movs	r3, #2
 8004308:	e1fe      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_I2C_Master_Receive+0x50>
 8004314:	2302      	movs	r3, #2
 8004316:	e1f7      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b01      	cmp	r3, #1
 800432c:	d007      	beq.n	800433e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0201 	orr.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800434c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2222      	movs	r2, #34	; 0x22
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2210      	movs	r2, #16
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	893a      	ldrh	r2, [r7, #8]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4a5c      	ldr	r2, [pc, #368]	; (80044f0 <HAL_I2C_Master_Receive+0x228>)
 800437e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004380:	8979      	ldrh	r1, [r7, #10]
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f001 fe2c 	bl	8005fe4 <I2C_MasterRequestRead>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e1b8      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	d113      	bne.n	80043c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	623b      	str	r3, [r7, #32]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	623b      	str	r3, [r7, #32]
 80043b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e18c      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d11b      	bne.n	8004406 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e16c      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440a:	2b02      	cmp	r3, #2
 800440c:	d11b      	bne.n	8004446 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442e:	2300      	movs	r3, #0
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	e14c      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004454:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800446c:	e138      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004472:	2b03      	cmp	r3, #3
 8004474:	f200 80f1 	bhi.w	800465a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447c:	2b01      	cmp	r3, #1
 800447e:	d123      	bne.n	80044c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004482:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f002 f8ad 	bl	80065e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e139      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044c6:	e10b      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d14e      	bne.n	800456e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	2200      	movs	r2, #0
 80044d8:	4906      	ldr	r1, [pc, #24]	; (80044f4 <HAL_I2C_Master_Receive+0x22c>)
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f001 fef8 	bl	80062d0 <I2C_WaitOnFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e10e      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
 80044ea:	bf00      	nop
 80044ec:	00100002 	.word	0x00100002
 80044f0:	ffff0000 	.word	0xffff0000
 80044f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800456c:	e0b8      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	2200      	movs	r2, #0
 8004576:	4966      	ldr	r1, [pc, #408]	; (8004710 <HAL_I2C_Master_Receive+0x448>)
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f001 fea9 	bl	80062d0 <I2C_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0bf      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	2200      	movs	r2, #0
 80045d2:	494f      	ldr	r1, [pc, #316]	; (8004710 <HAL_I2C_Master_Receive+0x448>)
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f001 fe7b 	bl	80062d0 <I2C_WaitOnFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e091      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004658:	e042      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800465a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f001 ffc0 	bl	80065e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e04c      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d118      	bne.n	80046e0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f47f aec2 	bne.w	800446e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004706:	2302      	movs	r3, #2
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3728      	adds	r7, #40	; 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	00010004 	.word	0x00010004

08004714 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004734:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	2b10      	cmp	r3, #16
 8004742:	d003      	beq.n	800474c <HAL_I2C_EV_IRQHandler+0x38>
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b40      	cmp	r3, #64	; 0x40
 8004748:	f040 80c1 	bne.w	80048ce <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10d      	bne.n	8004782 <HAL_I2C_EV_IRQHandler+0x6e>
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800476c:	d003      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0x62>
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004774:	d101      	bne.n	800477a <HAL_I2C_EV_IRQHandler+0x66>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <HAL_I2C_EV_IRQHandler+0x68>
 800477a:	2300      	movs	r3, #0
 800477c:	2b01      	cmp	r3, #1
 800477e:	f000 8132 	beq.w	80049e6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00c      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x92>
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	0a5b      	lsrs	r3, r3, #9
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d006      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 ffa8 	bl	80066ee <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fd83 	bl	80052aa <I2C_Master_SB>
 80047a4:	e092      	b.n	80048cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	08db      	lsrs	r3, r3, #3
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	0a5b      	lsrs	r3, r3, #9
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fdf9 	bl	80053b6 <I2C_Master_ADD10>
 80047c4:	e082      	b.n	80048cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	0a5b      	lsrs	r3, r3, #9
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fe13 	bl	800540a <I2C_Master_ADDR>
 80047e4:	e072      	b.n	80048cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d03b      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004800:	f000 80f3 	beq.w	80049ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	09db      	lsrs	r3, r3, #7
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00f      	beq.n	8004830 <HAL_I2C_EV_IRQHandler+0x11c>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	0a9b      	lsrs	r3, r3, #10
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d009      	beq.n	8004830 <HAL_I2C_EV_IRQHandler+0x11c>
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d103      	bne.n	8004830 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f9f3 	bl	8004c14 <I2C_MasterTransmit_TXE>
 800482e:	e04d      	b.n	80048cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80d6 	beq.w	80049ea <HAL_I2C_EV_IRQHandler+0x2d6>
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	0a5b      	lsrs	r3, r3, #9
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80cf 	beq.w	80049ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800484c:	7bbb      	ldrb	r3, [r7, #14]
 800484e:	2b21      	cmp	r3, #33	; 0x21
 8004850:	d103      	bne.n	800485a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fa7a 	bl	8004d4c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004858:	e0c7      	b.n	80049ea <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	f040 80c4 	bne.w	80049ea <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fae8 	bl	8004e38 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004868:	e0bf      	b.n	80049ea <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004878:	f000 80b7 	beq.w	80049ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	099b      	lsrs	r3, r3, #6
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00f      	beq.n	80048a8 <HAL_I2C_EV_IRQHandler+0x194>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	0a9b      	lsrs	r3, r3, #10
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <HAL_I2C_EV_IRQHandler+0x194>
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	089b      	lsrs	r3, r3, #2
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d103      	bne.n	80048a8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fb5d 	bl	8004f60 <I2C_MasterReceive_RXNE>
 80048a6:	e011      	b.n	80048cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 809a 	beq.w	80049ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	0a5b      	lsrs	r3, r3, #9
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8093 	beq.w	80049ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fc06 	bl	80050d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ca:	e08e      	b.n	80049ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80048cc:	e08d      	b.n	80049ea <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	e007      	b.n	80048f0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d012      	beq.n	8004922 <HAL_I2C_EV_IRQHandler+0x20e>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	0a5b      	lsrs	r3, r3, #9
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00c      	beq.n	8004922 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004918:	69b9      	ldr	r1, [r7, #24]
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 ffc4 	bl	80058a8 <I2C_Slave_ADDR>
 8004920:	e066      	b.n	80049f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0x22e>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	0a5b      	lsrs	r3, r3, #9
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fffe 	bl	800593c <I2C_Slave_STOPF>
 8004940:	e056      	b.n	80049f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004942:	7bbb      	ldrb	r3, [r7, #14]
 8004944:	2b21      	cmp	r3, #33	; 0x21
 8004946:	d002      	beq.n	800494e <HAL_I2C_EV_IRQHandler+0x23a>
 8004948:	7bbb      	ldrb	r3, [r7, #14]
 800494a:	2b29      	cmp	r3, #41	; 0x29
 800494c:	d125      	bne.n	800499a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	09db      	lsrs	r3, r3, #7
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00f      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0x266>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	0a9b      	lsrs	r3, r3, #10
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d009      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0x266>
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	089b      	lsrs	r3, r3, #2
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 feda 	bl	800572c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004978:	e039      	b.n	80049ee <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d033      	beq.n	80049ee <HAL_I2C_EV_IRQHandler+0x2da>
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	0a5b      	lsrs	r3, r3, #9
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d02d      	beq.n	80049ee <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 ff07 	bl	80057a6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004998:	e029      	b.n	80049ee <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	099b      	lsrs	r3, r3, #6
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00f      	beq.n	80049c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	0a9b      	lsrs	r3, r3, #10
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d103      	bne.n	80049c6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 ff12 	bl	80057e8 <I2C_SlaveReceive_RXNE>
 80049c4:	e014      	b.n	80049f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	089b      	lsrs	r3, r3, #2
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00e      	beq.n	80049f0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	0a5b      	lsrs	r3, r3, #9
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 ff40 	bl	8005864 <I2C_SlaveReceive_BTF>
 80049e4:	e004      	b.n	80049f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80049e6:	bf00      	nop
 80049e8:	e002      	b.n	80049f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ea:	bf00      	nop
 80049ec:	e000      	b.n	80049f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b08a      	sub	sp, #40	; 0x28
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a18:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	0a1b      	lsrs	r3, r3, #8
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00e      	beq.n	8004a44 <HAL_I2C_ER_IRQHandler+0x4e>
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a42:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	0a5b      	lsrs	r3, r3, #9
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00e      	beq.n	8004a6e <HAL_I2C_ER_IRQHandler+0x78>
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	f043 0302 	orr.w	r3, r3, #2
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a6c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	0a9b      	lsrs	r3, r3, #10
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d03f      	beq.n	8004afa <HAL_I2C_ER_IRQHandler+0x104>
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	0a1b      	lsrs	r3, r3, #8
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d039      	beq.n	8004afa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004a86:	7efb      	ldrb	r3, [r7, #27]
 8004a88:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004aa0:	7ebb      	ldrb	r3, [r7, #26]
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	d112      	bne.n	8004acc <HAL_I2C_ER_IRQHandler+0xd6>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10f      	bne.n	8004acc <HAL_I2C_ER_IRQHandler+0xd6>
 8004aac:	7cfb      	ldrb	r3, [r7, #19]
 8004aae:	2b21      	cmp	r3, #33	; 0x21
 8004ab0:	d008      	beq.n	8004ac4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	2b29      	cmp	r3, #41	; 0x29
 8004ab6:	d005      	beq.n	8004ac4 <HAL_I2C_ER_IRQHandler+0xce>
 8004ab8:	7cfb      	ldrb	r3, [r7, #19]
 8004aba:	2b28      	cmp	r3, #40	; 0x28
 8004abc:	d106      	bne.n	8004acc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b21      	cmp	r3, #33	; 0x21
 8004ac2:	d103      	bne.n	8004acc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f001 f869 	bl	8005b9c <I2C_Slave_AF>
 8004aca:	e016      	b.n	8004afa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ad4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	f043 0304 	orr.w	r3, r3, #4
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ade:	7efb      	ldrb	r3, [r7, #27]
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d002      	beq.n	8004aea <HAL_I2C_ER_IRQHandler+0xf4>
 8004ae4:	7efb      	ldrb	r3, [r7, #27]
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d107      	bne.n	8004afa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	0adb      	lsrs	r3, r3, #11
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00e      	beq.n	8004b24 <HAL_I2C_ER_IRQHandler+0x12e>
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	0a1b      	lsrs	r3, r3, #8
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	f043 0308 	orr.w	r3, r3, #8
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004b22:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d008      	beq.n	8004b3c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f001 f8a0 	bl	8005c7c <I2C_ITError>
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	3728      	adds	r7, #40	; 0x28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d150      	bne.n	8004cdc <I2C_MasterTransmit_TXE+0xc8>
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	2b21      	cmp	r3, #33	; 0x21
 8004c3e:	d14d      	bne.n	8004cdc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d01d      	beq.n	8004c82 <I2C_MasterTransmit_TXE+0x6e>
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d01a      	beq.n	8004c82 <I2C_MasterTransmit_TXE+0x6e>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c52:	d016      	beq.n	8004c82 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c62:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2211      	movs	r2, #17
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ff62 	bl	8004b44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c80:	e060      	b.n	8004d44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c90:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d107      	bne.n	8004ccc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff7d 	bl	8004bc4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cca:	e03b      	b.n	8004d44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff35 	bl	8004b44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cda:	e033      	b.n	8004d44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	2b21      	cmp	r3, #33	; 0x21
 8004ce0:	d005      	beq.n	8004cee <I2C_MasterTransmit_TXE+0xda>
 8004ce2:	7bbb      	ldrb	r3, [r7, #14]
 8004ce4:	2b40      	cmp	r3, #64	; 0x40
 8004ce6:	d12d      	bne.n	8004d44 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b22      	cmp	r3, #34	; 0x22
 8004cec:	d12a      	bne.n	8004d44 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d108      	bne.n	8004d0a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d06:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d08:	e01c      	b.n	8004d44 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d103      	bne.n	8004d1e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f88e 	bl	8004e38 <I2C_MemoryTransmit_TXE_BTF>
}
 8004d1c:	e012      	b.n	8004d44 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	781a      	ldrb	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d42:	e7ff      	b.n	8004d44 <I2C_MasterTransmit_TXE+0x130>
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b21      	cmp	r3, #33	; 0x21
 8004d64:	d164      	bne.n	8004e30 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d012      	beq.n	8004d96 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	781a      	ldrb	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d94:	e04c      	b.n	8004e30 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d01d      	beq.n	8004dd8 <I2C_MasterTransmit_BTF+0x8c>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d01a      	beq.n	8004dd8 <I2C_MasterTransmit_BTF+0x8c>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004da8:	d016      	beq.n	8004dd8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004db8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2211      	movs	r2, #17
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff feb7 	bl	8004b44 <HAL_I2C_MasterTxCpltCallback>
}
 8004dd6:	e02b      	b.n	8004e30 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004de6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	d107      	bne.n	8004e22 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fed2 	bl	8004bc4 <HAL_I2C_MemTxCpltCallback>
}
 8004e20:	e006      	b.n	8004e30 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff fe8a 	bl	8004b44 <HAL_I2C_MasterTxCpltCallback>
}
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d11d      	bne.n	8004e8c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d10b      	bne.n	8004e70 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e68:	1c9a      	adds	r2, r3, #2
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e6e:	e073      	b.n	8004f58 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	121b      	asrs	r3, r3, #8
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e8a:	e065      	b.n	8004f58 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d10b      	bne.n	8004eac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004eaa:	e055      	b.n	8004f58 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d151      	bne.n	8004f58 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b22      	cmp	r3, #34	; 0x22
 8004eb8:	d10d      	bne.n	8004ed6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ed4:	e040      	b.n	8004f58 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d015      	beq.n	8004f0c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b21      	cmp	r3, #33	; 0x21
 8004ee4:	d112      	bne.n	8004f0c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f0a:	e025      	b.n	8004f58 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d120      	bne.n	8004f58 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	2b21      	cmp	r3, #33	; 0x21
 8004f1a:	d11d      	bne.n	8004f58 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f2a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff fe36 	bl	8004bc4 <HAL_I2C_MemTxCpltCallback>
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b22      	cmp	r3, #34	; 0x22
 8004f72:	f040 80ac 	bne.w	80050ce <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d921      	bls.n	8004fc8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	f040 808c 	bne.w	80050ce <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004fc6:	e082      	b.n	80050ce <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d075      	beq.n	80050bc <I2C_MasterReceive_RXNE+0x15c>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d002      	beq.n	8004fdc <I2C_MasterReceive_RXNE+0x7c>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d16f      	bne.n	80050bc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f001 facf 	bl	8006580 <I2C_WaitOnSTOPRequestThroughIT>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d142      	bne.n	800506e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005006:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	d10a      	bne.n	8005058 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fdc1 	bl	8004bd8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005056:	e03a      	b.n	80050ce <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2212      	movs	r2, #18
 8005064:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff fd76 	bl	8004b58 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800506c:	e02f      	b.n	80050ce <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800507c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff fd99 	bl	8004bec <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050ba:	e008      	b.n	80050ce <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ca:	605a      	str	r2, [r3, #4]
}
 80050cc:	e7ff      	b.n	80050ce <I2C_MasterReceive_RXNE+0x16e>
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d11b      	bne.n	8005126 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005124:	e0bd      	b.n	80052a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b03      	cmp	r3, #3
 800512e:	d129      	bne.n	8005184 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b04      	cmp	r3, #4
 8005144:	d00a      	beq.n	800515c <I2C_MasterReceive_BTF+0x86>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d007      	beq.n	800515c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005182:	e08e      	b.n	80052a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d176      	bne.n	800527c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d002      	beq.n	800519a <I2C_MasterReceive_BTF+0xc4>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b10      	cmp	r3, #16
 8005198:	d108      	bne.n	80051ac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	e019      	b.n	80051e0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d002      	beq.n	80051b8 <I2C_MasterReceive_BTF+0xe2>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d108      	bne.n	80051ca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e00a      	b.n	80051e0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d007      	beq.n	80051e0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800523a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d10a      	bne.n	8005266 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff fcba 	bl	8004bd8 <HAL_I2C_MemRxCpltCallback>
}
 8005264:	e01d      	b.n	80052a2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2212      	movs	r2, #18
 8005272:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff fc6f 	bl	8004b58 <HAL_I2C_MasterRxCpltCallback>
}
 800527a:	e012      	b.n	80052a2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052a2:	bf00      	nop
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	d117      	bne.n	80052ee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052d6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80052d8:	e067      	b.n	80053aa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	611a      	str	r2, [r3, #16]
}
 80052ec:	e05d      	b.n	80053aa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052f6:	d133      	bne.n	8005360 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b21      	cmp	r3, #33	; 0x21
 8005302:	d109      	bne.n	8005318 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005308:	b2db      	uxtb	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005314:	611a      	str	r2, [r3, #16]
 8005316:	e008      	b.n	800532a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531c:	b2db      	uxtb	r3, r3
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	b2da      	uxtb	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <I2C_Master_SB+0x92>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d108      	bne.n	800534e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d032      	beq.n	80053aa <I2C_Master_SB+0x100>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d02d      	beq.n	80053aa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800535c:	605a      	str	r2, [r3, #4]
}
 800535e:	e024      	b.n	80053aa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10e      	bne.n	8005386 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536c:	b29b      	uxth	r3, r3
 800536e:	11db      	asrs	r3, r3, #7
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 0306 	and.w	r3, r3, #6
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f063 030f 	orn	r3, r3, #15
 800537c:	b2da      	uxtb	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	611a      	str	r2, [r3, #16]
}
 8005384:	e011      	b.n	80053aa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538a:	2b01      	cmp	r3, #1
 800538c:	d10d      	bne.n	80053aa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	b29b      	uxth	r3, r3
 8005394:	11db      	asrs	r3, r3, #7
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f003 0306 	and.w	r3, r3, #6
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f063 030e 	orn	r3, r3, #14
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	611a      	str	r2, [r3, #16]
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <I2C_Master_ADD10+0x26>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d108      	bne.n	80053ee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00c      	beq.n	80053fe <I2C_Master_ADD10+0x48>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053fc:	605a      	str	r2, [r3, #4]
  }
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800540a:	b480      	push	{r7}
 800540c:	b091      	sub	sp, #68	; 0x44
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005418:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b22      	cmp	r3, #34	; 0x22
 8005432:	f040 8169 	bne.w	8005708 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10f      	bne.n	800545e <I2C_Master_ADDR+0x54>
 800543e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005442:	2b40      	cmp	r3, #64	; 0x40
 8005444:	d10b      	bne.n	800545e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005446:	2300      	movs	r3, #0
 8005448:	633b      	str	r3, [r7, #48]	; 0x30
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	633b      	str	r3, [r7, #48]	; 0x30
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	633b      	str	r3, [r7, #48]	; 0x30
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	e160      	b.n	8005720 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005462:	2b00      	cmp	r3, #0
 8005464:	d11d      	bne.n	80054a2 <I2C_Master_ADDR+0x98>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800546e:	d118      	bne.n	80054a2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005470:	2300      	movs	r3, #0
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005494:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	651a      	str	r2, [r3, #80]	; 0x50
 80054a0:	e13e      	b.n	8005720 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d113      	bne.n	80054d4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ac:	2300      	movs	r3, #0
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	e115      	b.n	8005700 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b01      	cmp	r3, #1
 80054dc:	f040 808a 	bne.w	80055f4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054e6:	d137      	bne.n	8005558 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005506:	d113      	bne.n	8005530 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005516:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005518:	2300      	movs	r3, #0
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	e0e7      	b.n	8005700 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005530:	2300      	movs	r3, #0
 8005532:	623b      	str	r3, [r7, #32]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	623b      	str	r3, [r7, #32]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	623b      	str	r3, [r7, #32]
 8005544:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e0d3      	b.n	8005700 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	2b08      	cmp	r3, #8
 800555c:	d02e      	beq.n	80055bc <I2C_Master_ADDR+0x1b2>
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	2b20      	cmp	r3, #32
 8005562:	d02b      	beq.n	80055bc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	2b12      	cmp	r3, #18
 8005568:	d102      	bne.n	8005570 <I2C_Master_ADDR+0x166>
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	2b01      	cmp	r3, #1
 800556e:	d125      	bne.n	80055bc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	2b04      	cmp	r3, #4
 8005574:	d00e      	beq.n	8005594 <I2C_Master_ADDR+0x18a>
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	2b02      	cmp	r3, #2
 800557a:	d00b      	beq.n	8005594 <I2C_Master_ADDR+0x18a>
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	2b10      	cmp	r3, #16
 8005580:	d008      	beq.n	8005594 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	e007      	b.n	80055a4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055a2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a4:	2300      	movs	r3, #0
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	e0a1      	b.n	8005700 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055cc:	2300      	movs	r3, #0
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e085      	b.n	8005700 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d14d      	bne.n	800569a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005600:	2b04      	cmp	r3, #4
 8005602:	d016      	beq.n	8005632 <I2C_Master_ADDR+0x228>
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	2b02      	cmp	r3, #2
 8005608:	d013      	beq.n	8005632 <I2C_Master_ADDR+0x228>
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	2b10      	cmp	r3, #16
 800560e:	d010      	beq.n	8005632 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e007      	b.n	8005642 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005640:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005650:	d117      	bne.n	8005682 <I2C_Master_ADDR+0x278>
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005658:	d00b      	beq.n	8005672 <I2C_Master_ADDR+0x268>
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	2b01      	cmp	r3, #1
 800565e:	d008      	beq.n	8005672 <I2C_Master_ADDR+0x268>
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	2b08      	cmp	r3, #8
 8005664:	d005      	beq.n	8005672 <I2C_Master_ADDR+0x268>
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	2b10      	cmp	r3, #16
 800566a:	d002      	beq.n	8005672 <I2C_Master_ADDR+0x268>
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	2b20      	cmp	r3, #32
 8005670:	d107      	bne.n	8005682 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005680:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	e032      	b.n	8005700 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056a8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b8:	d117      	bne.n	80056ea <I2C_Master_ADDR+0x2e0>
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056c0:	d00b      	beq.n	80056da <I2C_Master_ADDR+0x2d0>
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d008      	beq.n	80056da <I2C_Master_ADDR+0x2d0>
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d005      	beq.n	80056da <I2C_Master_ADDR+0x2d0>
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d002      	beq.n	80056da <I2C_Master_ADDR+0x2d0>
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d107      	bne.n	80056ea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005706:	e00b      	b.n	8005720 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
}
 800571e:	e7ff      	b.n	8005720 <I2C_Master_ADDR+0x316>
 8005720:	bf00      	nop
 8005722:	3744      	adds	r7, #68	; 0x44
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d02b      	beq.n	800579e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d114      	bne.n	800579e <I2C_SlaveTransmit_TXE+0x72>
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	2b29      	cmp	r3, #41	; 0x29
 8005778:	d111      	bne.n	800579e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005788:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2221      	movs	r2, #33	; 0x21
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2228      	movs	r2, #40	; 0x28
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff f9e7 	bl	8004b6c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d011      	beq.n	80057dc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	781a      	ldrb	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d02c      	beq.n	800585c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d114      	bne.n	800585c <I2C_SlaveReceive_RXNE+0x74>
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	2b2a      	cmp	r3, #42	; 0x2a
 8005836:	d111      	bne.n	800585c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005846:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2222      	movs	r2, #34	; 0x22
 800584c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2228      	movs	r2, #40	; 0x28
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff f992 	bl	8004b80 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d012      	beq.n	800589c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058c2:	2b28      	cmp	r3, #40	; 0x28
 80058c4:	d127      	bne.n	8005916 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	089b      	lsrs	r3, r3, #2
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80058e2:	2301      	movs	r3, #1
 80058e4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	09db      	lsrs	r3, r3, #7
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d103      	bne.n	80058fa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	81bb      	strh	r3, [r7, #12]
 80058f8:	e002      	b.n	8005900 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005908:	89ba      	ldrh	r2, [r7, #12]
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff f940 	bl	8004b94 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005914:	e00e      	b.n	8005934 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005916:	2300      	movs	r3, #0
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	60bb      	str	r3, [r7, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800595a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800595c:	2300      	movs	r3, #0
 800595e:	60bb      	str	r3, [r7, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	60bb      	str	r3, [r7, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005988:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005998:	d172      	bne.n	8005a80 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	2b22      	cmp	r3, #34	; 0x22
 800599e:	d002      	beq.n	80059a6 <I2C_Slave_STOPF+0x6a>
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	2b2a      	cmp	r3, #42	; 0x2a
 80059a4:	d135      	bne.n	8005a12 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d005      	beq.n	80059ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f043 0204 	orr.w	r2, r3, #4
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fd ffae 	bl	8003940 <HAL_DMA_GetState>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d049      	beq.n	8005a7e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	4a69      	ldr	r2, [pc, #420]	; (8005b94 <I2C_Slave_STOPF+0x258>)
 80059f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fd fdf6 	bl	80035e8 <HAL_DMA_Abort_IT>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d03d      	beq.n	8005a7e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a10:	e035      	b.n	8005a7e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f043 0204 	orr.w	r2, r3, #4
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fd ff78 	bl	8003940 <HAL_DMA_GetState>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d014      	beq.n	8005a80 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5a:	4a4e      	ldr	r2, [pc, #312]	; (8005b94 <I2C_Slave_STOPF+0x258>)
 8005a5c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fd fdc0 	bl	80035e8 <HAL_DMA_Abort_IT>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d008      	beq.n	8005a80 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4798      	blx	r3
 8005a7c:	e000      	b.n	8005a80 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a7e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d03e      	beq.n	8005b08 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d112      	bne.n	8005abe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d112      	bne.n	8005af2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	f043 0204 	orr.w	r2, r3, #4
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f8b3 	bl	8005c7c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b16:	e039      	b.n	8005b8c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b1c:	d109      	bne.n	8005b32 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2228      	movs	r2, #40	; 0x28
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff f827 	bl	8004b80 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b28      	cmp	r3, #40	; 0x28
 8005b3c:	d111      	bne.n	8005b62 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a15      	ldr	r2, [pc, #84]	; (8005b98 <I2C_Slave_STOPF+0x25c>)
 8005b42:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff f828 	bl	8004bb0 <HAL_I2C_ListenCpltCallback>
}
 8005b60:	e014      	b.n	8005b8c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	2b22      	cmp	r3, #34	; 0x22
 8005b68:	d002      	beq.n	8005b70 <I2C_Slave_STOPF+0x234>
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	2b22      	cmp	r3, #34	; 0x22
 8005b6e:	d10d      	bne.n	8005b8c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fe fffa 	bl	8004b80 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	08006181 	.word	0x08006181
 8005b98:	ffff0000 	.word	0xffff0000

08005b9c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005baa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d002      	beq.n	8005bbe <I2C_Slave_AF+0x22>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d129      	bne.n	8005c12 <I2C_Slave_AF+0x76>
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	2b28      	cmp	r3, #40	; 0x28
 8005bc2:	d126      	bne.n	8005c12 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a2c      	ldr	r2, [pc, #176]	; (8005c78 <I2C_Slave_AF+0xdc>)
 8005bc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bd8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005be2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fe ffd0 	bl	8004bb0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005c10:	e02e      	b.n	8005c70 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	2b21      	cmp	r3, #33	; 0x21
 8005c16:	d126      	bne.n	8005c66 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <I2C_Slave_AF+0xdc>)
 8005c1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2221      	movs	r2, #33	; 0x21
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c42:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c4c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fe ff84 	bl	8004b6c <HAL_I2C_SlaveTxCpltCallback>
}
 8005c64:	e004      	b.n	8005c70 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c6e:	615a      	str	r2, [r3, #20]
}
 8005c70:	bf00      	nop
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	ffff0000 	.word	0xffff0000

08005c7c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
 8005c96:	2b10      	cmp	r3, #16
 8005c98:	d002      	beq.n	8005ca0 <I2C_ITError+0x24>
 8005c9a:	7bbb      	ldrb	r3, [r7, #14]
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d10a      	bne.n	8005cb6 <I2C_ITError+0x3a>
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	2b22      	cmp	r3, #34	; 0x22
 8005ca4:	d107      	bne.n	8005cb6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cb4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cbc:	2b28      	cmp	r3, #40	; 0x28
 8005cbe:	d107      	bne.n	8005cd0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2228      	movs	r2, #40	; 0x28
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cce:	e015      	b.n	8005cfc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cde:	d00a      	beq.n	8005cf6 <I2C_ITError+0x7a>
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	2b60      	cmp	r3, #96	; 0x60
 8005ce4:	d007      	beq.n	8005cf6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d0a:	d162      	bne.n	8005dd2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d1a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d020      	beq.n	8005d6c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2e:	4a6a      	ldr	r2, [pc, #424]	; (8005ed8 <I2C_ITError+0x25c>)
 8005d30:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fd fc56 	bl	80035e8 <HAL_DMA_Abort_IT>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8089 	beq.w	8005e56 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0201 	bic.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d66:	4610      	mov	r0, r2
 8005d68:	4798      	blx	r3
 8005d6a:	e074      	b.n	8005e56 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	4a59      	ldr	r2, [pc, #356]	; (8005ed8 <I2C_ITError+0x25c>)
 8005d72:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fd fc35 	bl	80035e8 <HAL_DMA_Abort_IT>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d068      	beq.n	8005e56 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	d10b      	bne.n	8005daa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0201 	bic.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dcc:	4610      	mov	r0, r2
 8005dce:	4798      	blx	r3
 8005dd0:	e041      	b.n	8005e56 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b60      	cmp	r3, #96	; 0x60
 8005ddc:	d125      	bne.n	8005e2a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df6:	2b40      	cmp	r3, #64	; 0x40
 8005df8:	d10b      	bne.n	8005e12 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fe feec 	bl	8004c00 <HAL_I2C_AbortCpltCallback>
 8005e28:	e015      	b.n	8005e56 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d10b      	bne.n	8005e50 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7fe fecb 	bl	8004bec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10e      	bne.n	8005e84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d109      	bne.n	8005e84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d104      	bne.n	8005e84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d007      	beq.n	8005e94 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e92:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d113      	bne.n	8005ed0 <I2C_ITError+0x254>
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	2b28      	cmp	r3, #40	; 0x28
 8005eac:	d110      	bne.n	8005ed0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <I2C_ITError+0x260>)
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fe fe70 	bl	8004bb0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	08006181 	.word	0x08006181
 8005edc:	ffff0000 	.word	0xffff0000

08005ee0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	607a      	str	r2, [r7, #4]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	460b      	mov	r3, r1
 8005eee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d006      	beq.n	8005f0a <I2C_MasterRequestWrite+0x2a>
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d003      	beq.n	8005f0a <I2C_MasterRequestWrite+0x2a>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f08:	d108      	bne.n	8005f1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	e00b      	b.n	8005f34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	2b12      	cmp	r3, #18
 8005f22:	d107      	bne.n	8005f34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 f9c5 	bl	80062d0 <I2C_WaitOnFlagUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00d      	beq.n	8005f68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5a:	d103      	bne.n	8005f64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e035      	b.n	8005fd4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f70:	d108      	bne.n	8005f84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f72:	897b      	ldrh	r3, [r7, #10]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f80:	611a      	str	r2, [r3, #16]
 8005f82:	e01b      	b.n	8005fbc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f84:	897b      	ldrh	r3, [r7, #10]
 8005f86:	11db      	asrs	r3, r3, #7
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	f003 0306 	and.w	r3, r3, #6
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	f063 030f 	orn	r3, r3, #15
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	490e      	ldr	r1, [pc, #56]	; (8005fdc <I2C_MasterRequestWrite+0xfc>)
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f9eb 	bl	800637e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e010      	b.n	8005fd4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005fb2:	897b      	ldrh	r3, [r7, #10]
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4907      	ldr	r1, [pc, #28]	; (8005fe0 <I2C_MasterRequestWrite+0x100>)
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 f9db 	bl	800637e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	00010008 	.word	0x00010008
 8005fe0:	00010002 	.word	0x00010002

08005fe4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	607a      	str	r2, [r7, #4]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006008:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d006      	beq.n	800601e <I2C_MasterRequestRead+0x3a>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d003      	beq.n	800601e <I2C_MasterRequestRead+0x3a>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800601c:	d108      	bne.n	8006030 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e00b      	b.n	8006048 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006034:	2b11      	cmp	r3, #17
 8006036:	d107      	bne.n	8006048 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006046:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f93b 	bl	80062d0 <I2C_WaitOnFlagUntilTimeout>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00d      	beq.n	800607c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800606e:	d103      	bne.n	8006078 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006076:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e079      	b.n	8006170 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006084:	d108      	bne.n	8006098 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006086:	897b      	ldrh	r3, [r7, #10]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	f043 0301 	orr.w	r3, r3, #1
 800608e:	b2da      	uxtb	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	611a      	str	r2, [r3, #16]
 8006096:	e05f      	b.n	8006158 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006098:	897b      	ldrh	r3, [r7, #10]
 800609a:	11db      	asrs	r3, r3, #7
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f003 0306 	and.w	r3, r3, #6
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f063 030f 	orn	r3, r3, #15
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4930      	ldr	r1, [pc, #192]	; (8006178 <I2C_MasterRequestRead+0x194>)
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f961 	bl	800637e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e054      	b.n	8006170 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80060c6:	897b      	ldrh	r3, [r7, #10]
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	4929      	ldr	r1, [pc, #164]	; (800617c <I2C_MasterRequestRead+0x198>)
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 f951 	bl	800637e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e044      	b.n	8006170 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060e6:	2300      	movs	r3, #0
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800610a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f8d9 	bl	80062d0 <I2C_WaitOnFlagUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00d      	beq.n	8006140 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006132:	d103      	bne.n	800613c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800613a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e017      	b.n	8006170 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006140:	897b      	ldrh	r3, [r7, #10]
 8006142:	11db      	asrs	r3, r3, #7
 8006144:	b2db      	uxtb	r3, r3
 8006146:	f003 0306 	and.w	r3, r3, #6
 800614a:	b2db      	uxtb	r3, r3
 800614c:	f063 030e 	orn	r3, r3, #14
 8006150:	b2da      	uxtb	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4907      	ldr	r1, [pc, #28]	; (800617c <I2C_MasterRequestRead+0x198>)
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f90d 	bl	800637e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	00010008 	.word	0x00010008
 800617c:	00010002 	.word	0x00010002

08006180 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006198:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800619a:	4b4b      	ldr	r3, [pc, #300]	; (80062c8 <I2C_DMAAbort+0x148>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	08db      	lsrs	r3, r3, #3
 80061a0:	4a4a      	ldr	r2, [pc, #296]	; (80062cc <I2C_DMAAbort+0x14c>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	0a1a      	lsrs	r2, r3, #8
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	00da      	lsls	r2, r3, #3
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f043 0220 	orr.w	r2, r3, #32
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80061c6:	e00a      	b.n	80061de <I2C_DMAAbort+0x5e>
    }
    count--;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061dc:	d0ea      	beq.n	80061b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ea:	2200      	movs	r2, #0
 80061ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fa:	2200      	movs	r2, #0
 80061fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2200      	movs	r2, #0
 8006212:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006220:	2200      	movs	r2, #0
 8006222:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	2200      	movs	r2, #0
 8006232:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b60      	cmp	r3, #96	; 0x60
 800624e:	d10e      	bne.n	800626e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2200      	movs	r2, #0
 8006264:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006266:	6978      	ldr	r0, [r7, #20]
 8006268:	f7fe fcca 	bl	8004c00 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800626c:	e027      	b.n	80062be <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800626e:	7cfb      	ldrb	r3, [r7, #19]
 8006270:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006274:	2b28      	cmp	r3, #40	; 0x28
 8006276:	d117      	bne.n	80062a8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0201 	orr.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006296:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2200      	movs	r2, #0
 800629c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2228      	movs	r2, #40	; 0x28
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062a6:	e007      	b.n	80062b8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80062b8:	6978      	ldr	r0, [r7, #20]
 80062ba:	f7fe fc97 	bl	8004bec <HAL_I2C_ErrorCallback>
}
 80062be:	bf00      	nop
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000000 	.word	0x20000000
 80062cc:	14f8b589 	.word	0x14f8b589

080062d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062e0:	e025      	b.n	800632e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d021      	beq.n	800632e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ea:	f7fc f9a9 	bl	8002640 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d302      	bcc.n	8006300 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d116      	bne.n	800632e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f043 0220 	orr.w	r2, r3, #32
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e023      	b.n	8006376 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	0c1b      	lsrs	r3, r3, #16
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b01      	cmp	r3, #1
 8006336:	d10d      	bne.n	8006354 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	43da      	mvns	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4013      	ands	r3, r2
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	bf0c      	ite	eq
 800634a:	2301      	moveq	r3, #1
 800634c:	2300      	movne	r3, #0
 800634e:	b2db      	uxtb	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	e00c      	b.n	800636e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	43da      	mvns	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4013      	ands	r3, r2
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	bf0c      	ite	eq
 8006366:	2301      	moveq	r3, #1
 8006368:	2300      	movne	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	79fb      	ldrb	r3, [r7, #7]
 8006370:	429a      	cmp	r2, r3
 8006372:	d0b6      	beq.n	80062e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
 800638a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800638c:	e051      	b.n	8006432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639c:	d123      	bne.n	80063e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	f043 0204 	orr.w	r2, r3, #4
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e046      	b.n	8006474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d021      	beq.n	8006432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ee:	f7fc f927 	bl	8002640 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d302      	bcc.n	8006404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d116      	bne.n	8006432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f043 0220 	orr.w	r2, r3, #32
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e020      	b.n	8006474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	0c1b      	lsrs	r3, r3, #16
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	d10c      	bne.n	8006456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	43da      	mvns	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4013      	ands	r3, r2
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	bf14      	ite	ne
 800644e:	2301      	movne	r3, #1
 8006450:	2300      	moveq	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	e00b      	b.n	800646e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	43da      	mvns	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4013      	ands	r3, r2
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	bf14      	ite	ne
 8006468:	2301      	movne	r3, #1
 800646a:	2300      	moveq	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d18d      	bne.n	800638e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006488:	e02d      	b.n	80064e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 f900 	bl	8006690 <I2C_IsAcknowledgeFailed>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e02d      	b.n	80064f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d021      	beq.n	80064e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a2:	f7fc f8cd 	bl	8002640 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d302      	bcc.n	80064b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d116      	bne.n	80064e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	f043 0220 	orr.w	r2, r3, #32
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e007      	b.n	80064f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f0:	2b80      	cmp	r3, #128	; 0x80
 80064f2:	d1ca      	bne.n	800648a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800650a:	e02d      	b.n	8006568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f8bf 	bl	8006690 <I2C_IsAcknowledgeFailed>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e02d      	b.n	8006578 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006522:	d021      	beq.n	8006568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006524:	f7fc f88c 	bl	8002640 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	429a      	cmp	r2, r3
 8006532:	d302      	bcc.n	800653a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d116      	bne.n	8006568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	f043 0220 	orr.w	r2, r3, #32
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e007      	b.n	8006578 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b04      	cmp	r3, #4
 8006574:	d1ca      	bne.n	800650c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800658c:	4b13      	ldr	r3, [pc, #76]	; (80065dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	08db      	lsrs	r3, r3, #3
 8006592:	4a13      	ldr	r2, [pc, #76]	; (80065e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	0a1a      	lsrs	r2, r3, #8
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d107      	bne.n	80065be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	f043 0220 	orr.w	r2, r3, #32
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e008      	b.n	80065d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065cc:	d0e9      	beq.n	80065a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	20000000 	.word	0x20000000
 80065e0:	14f8b589 	.word	0x14f8b589

080065e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065f0:	e042      	b.n	8006678 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	f003 0310 	and.w	r3, r3, #16
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d119      	bne.n	8006634 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0210 	mvn.w	r2, #16
 8006608:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e029      	b.n	8006688 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006634:	f7fc f804 	bl	8002640 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	429a      	cmp	r2, r3
 8006642:	d302      	bcc.n	800664a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d116      	bne.n	8006678 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2220      	movs	r2, #32
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	f043 0220 	orr.w	r2, r3, #32
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e007      	b.n	8006688 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d1b5      	bne.n	80065f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a6:	d11b      	bne.n	80066e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	f043 0204 	orr.w	r2, r3, #4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80066fe:	d103      	bne.n	8006708 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006706:	e007      	b.n	8006718 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006710:	d102      	bne.n	8006718 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2208      	movs	r2, #8
 8006716:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e0e1      	b.n	80068fa <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a6d      	ldr	r2, [pc, #436]	; (8006904 <HAL_I2S_Init+0x1e0>)
 800674e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7fb fc01 	bl	8001f58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6812      	ldr	r2, [r2, #0]
 8006768:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800676c:	f023 030f 	bic.w	r3, r3, #15
 8006770:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2202      	movs	r2, #2
 8006778:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d06f      	beq.n	8006862 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d102      	bne.n	8006790 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800678a:	2310      	movs	r3, #16
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e001      	b.n	8006794 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006790:	2320      	movs	r3, #32
 8006792:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	2b20      	cmp	r3, #32
 800679a:	d802      	bhi.n	80067a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a58      	ldr	r2, [pc, #352]	; (8006908 <HAL_I2S_Init+0x1e4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d004      	beq.n	80067b6 <HAL_I2S_Init+0x92>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a56      	ldr	r2, [pc, #344]	; (800690c <HAL_I2S_Init+0x1e8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d104      	bne.n	80067c0 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80067b6:	2001      	movs	r0, #1
 80067b8:	f000 fdf6 	bl	80073a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	e003      	b.n	80067c8 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80067c0:	2002      	movs	r0, #2
 80067c2:	f000 fdf1 	bl	80073a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80067c6:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d0:	d125      	bne.n	800681e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d010      	beq.n	80067fc <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	461a      	mov	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f6:	3305      	adds	r3, #5
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	e01f      	b.n	800683c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	fbb2 f2f3 	udiv	r2, r2, r3
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	461a      	mov	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	fbb2 f3f3 	udiv	r3, r2, r3
 8006818:	3305      	adds	r3, #5
 800681a:	613b      	str	r3, [r7, #16]
 800681c:	e00e      	b.n	800683c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	fbb2 f2f3 	udiv	r2, r2, r3
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	461a      	mov	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	3305      	adds	r3, #5
 800683a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	4a34      	ldr	r2, [pc, #208]	; (8006910 <HAL_I2S_Init+0x1ec>)
 8006840:	fba2 2303 	umull	r2, r3, r2, r3
 8006844:	08db      	lsrs	r3, r3, #3
 8006846:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	61bb      	str	r3, [r7, #24]
 8006860:	e003      	b.n	800686a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006862:	2302      	movs	r3, #2
 8006864:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d902      	bls.n	8006876 <HAL_I2S_Init+0x152>
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2bff      	cmp	r3, #255	; 0xff
 8006874:	d907      	bls.n	8006886 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	f043 0210 	orr.w	r2, r3, #16
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e039      	b.n	80068fa <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	ea42 0103 	orr.w	r1, r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69fa      	ldr	r2, [r7, #28]
 8006896:	430a      	orrs	r2, r1
 8006898:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80068a4:	f023 030f 	bic.w	r3, r3, #15
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6851      	ldr	r1, [r2, #4]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6892      	ldr	r2, [r2, #8]
 80068b0:	4311      	orrs	r1, r2
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68d2      	ldr	r2, [r2, #12]
 80068b6:	4311      	orrs	r1, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6992      	ldr	r2, [r2, #24]
 80068bc:	430a      	orrs	r2, r1
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068c8:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	2b30      	cmp	r3, #48	; 0x30
 80068d0:	d003      	beq.n	80068da <HAL_I2S_Init+0x1b6>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	2bb0      	cmp	r3, #176	; 0xb0
 80068d8:	d107      	bne.n	80068ea <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068e8:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3720      	adds	r7, #32
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	08006a0b 	.word	0x08006a0b
 8006908:	40003800 	.word	0x40003800
 800690c:	40003c00 	.word	0x40003c00
 8006910:	cccccccd 	.word	0xcccccccd

08006914 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	881a      	ldrh	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	1c9a      	adds	r2, r3, #2
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006972:	b29b      	uxth	r3, r3
 8006974:	3b01      	subs	r3, #1
 8006976:	b29a      	uxth	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10e      	bne.n	80069a4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006994:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff ffb8 	bl	8006914 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80069a4:	bf00      	nop
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	b292      	uxth	r2, r2
 80069c0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	1c9a      	adds	r2, r3, #2
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10e      	bne.n	8006a02 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff ff93 	bl	8006928 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b086      	sub	sp, #24
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d13a      	bne.n	8006a9c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d109      	bne.n	8006a44 <I2S_IRQHandler+0x3a>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	2b40      	cmp	r3, #64	; 0x40
 8006a3c:	d102      	bne.n	8006a44 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ffb4 	bl	80069ac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	d126      	bne.n	8006a9c <I2S_IRQHandler+0x92>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d11f      	bne.n	8006a9c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	613b      	str	r3, [r7, #16]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	613b      	str	r3, [r7, #16]
 8006a80:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8e:	f043 0202 	orr.w	r2, r3, #2
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7ff ff50 	bl	800693c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d136      	bne.n	8006b16 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d109      	bne.n	8006ac6 <I2S_IRQHandler+0xbc>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abc:	2b80      	cmp	r3, #128	; 0x80
 8006abe:	d102      	bne.n	8006ac6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff ff45 	bl	8006950 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f003 0308 	and.w	r3, r3, #8
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d122      	bne.n	8006b16 <I2S_IRQHandler+0x10c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d11b      	bne.n	8006b16 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006aec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b08:	f043 0204 	orr.w	r2, r3, #4
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff ff13 	bl	800693c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b16:	bf00      	nop
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e0cc      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b34:	4b68      	ldr	r3, [pc, #416]	; (8006cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d90c      	bls.n	8006b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b42:	4b65      	ldr	r3, [pc, #404]	; (8006cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b4a:	4b63      	ldr	r3, [pc, #396]	; (8006cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d001      	beq.n	8006b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e0b8      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d020      	beq.n	8006baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b74:	4b59      	ldr	r3, [pc, #356]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	4a58      	ldr	r2, [pc, #352]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006b7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0308 	and.w	r3, r3, #8
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b8c:	4b53      	ldr	r3, [pc, #332]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	4a52      	ldr	r2, [pc, #328]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006b92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b98:	4b50      	ldr	r3, [pc, #320]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	494d      	ldr	r1, [pc, #308]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d044      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d107      	bne.n	8006bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bbe:	4b47      	ldr	r3, [pc, #284]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d119      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e07f      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d003      	beq.n	8006bde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d107      	bne.n	8006bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bde:	4b3f      	ldr	r3, [pc, #252]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e06f      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bee:	4b3b      	ldr	r3, [pc, #236]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e067      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bfe:	4b37      	ldr	r3, [pc, #220]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f023 0203 	bic.w	r2, r3, #3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	4934      	ldr	r1, [pc, #208]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c10:	f7fb fd16 	bl	8002640 <HAL_GetTick>
 8006c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c16:	e00a      	b.n	8006c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c18:	f7fb fd12 	bl	8002640 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e04f      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c2e:	4b2b      	ldr	r3, [pc, #172]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 020c 	and.w	r2, r3, #12
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d1eb      	bne.n	8006c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c40:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d20c      	bcs.n	8006c68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4e:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c56:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d001      	beq.n	8006c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e032      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c74:	4b19      	ldr	r3, [pc, #100]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	4916      	ldr	r1, [pc, #88]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c92:	4b12      	ldr	r3, [pc, #72]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	490e      	ldr	r1, [pc, #56]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ca6:	f000 fdc7 	bl	8007838 <HAL_RCC_GetSysClockFreq>
 8006caa:	4602      	mov	r2, r0
 8006cac:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	091b      	lsrs	r3, r3, #4
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	490a      	ldr	r1, [pc, #40]	; (8006ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8006cb8:	5ccb      	ldrb	r3, [r1, r3]
 8006cba:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbe:	4a09      	ldr	r2, [pc, #36]	; (8006ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cc2:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fb fc76 	bl	80025b8 <HAL_InitTick>

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	40023c00 	.word	0x40023c00
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	0801061c 	.word	0x0801061c
 8006ce4:	20000000 	.word	0x20000000
 8006ce8:	20000004 	.word	0x20000004

08006cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cf0:	4b03      	ldr	r3, [pc, #12]	; (8006d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20000000 	.word	0x20000000

08006d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d08:	f7ff fff0 	bl	8006cec <HAL_RCC_GetHCLKFreq>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	0a9b      	lsrs	r3, r3, #10
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	4903      	ldr	r1, [pc, #12]	; (8006d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d1a:	5ccb      	ldrb	r3, [r1, r3]
 8006d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	40023800 	.word	0x40023800
 8006d28:	0801062c 	.word	0x0801062c

08006d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d30:	f7ff ffdc 	bl	8006cec <HAL_RCC_GetHCLKFreq>
 8006d34:	4602      	mov	r2, r0
 8006d36:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	0b5b      	lsrs	r3, r3, #13
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	4903      	ldr	r1, [pc, #12]	; (8006d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d42:	5ccb      	ldrb	r3, [r1, r3]
 8006d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	0801062c 	.word	0x0801062c

08006d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08c      	sub	sp, #48	; 0x30
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d010      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006d8c:	4b6f      	ldr	r3, [pc, #444]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d92:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	496c      	ldr	r1, [pc, #432]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006daa:	2301      	movs	r3, #1
 8006dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d010      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006dba:	4b64      	ldr	r3, [pc, #400]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dc0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc8:	4960      	ldr	r1, [pc, #384]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d017      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006de8:	4b58      	ldr	r3, [pc, #352]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df6:	4955      	ldr	r1, [pc, #340]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e06:	d101      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006e14:	2301      	movs	r3, #1
 8006e16:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d017      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e24:	4b49      	ldr	r3, [pc, #292]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e32:	4946      	ldr	r1, [pc, #280]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e42:	d101      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006e44:	2301      	movs	r3, #1
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006e50:	2301      	movs	r3, #1
 8006e52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0320 	and.w	r3, r3, #32
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 808a 	beq.w	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e62:	2300      	movs	r3, #0
 8006e64:	60bb      	str	r3, [r7, #8]
 8006e66:	4b39      	ldr	r3, [pc, #228]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	4a38      	ldr	r2, [pc, #224]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e70:	6413      	str	r3, [r2, #64]	; 0x40
 8006e72:	4b36      	ldr	r3, [pc, #216]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e7a:	60bb      	str	r3, [r7, #8]
 8006e7c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e7e:	4b34      	ldr	r3, [pc, #208]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a33      	ldr	r2, [pc, #204]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e8a:	f7fb fbd9 	bl	8002640 <HAL_GetTick>
 8006e8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e90:	e008      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e92:	f7fb fbd5 	bl	8002640 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d901      	bls.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e278      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ea4:	4b2a      	ldr	r3, [pc, #168]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d0f0      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006eb0:	4b26      	ldr	r3, [pc, #152]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d02f      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec8:	6a3a      	ldr	r2, [r7, #32]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d028      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ece:	4b1f      	ldr	r3, [pc, #124]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ed8:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ede:	4b1d      	ldr	r3, [pc, #116]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ee4:	4a19      	ldr	r2, [pc, #100]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006eea:	4b18      	ldr	r3, [pc, #96]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d114      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ef6:	f7fb fba3 	bl	8002640 <HAL_GetTick>
 8006efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006efc:	e00a      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006efe:	f7fb fb9f 	bl	8002640 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e240      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f14:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0ee      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f2c:	d114      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006f2e:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f42:	4902      	ldr	r1, [pc, #8]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	608b      	str	r3, [r1, #8]
 8006f48:	e00c      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006f4a:	bf00      	nop
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	40007000 	.word	0x40007000
 8006f54:	42470e40 	.word	0x42470e40
 8006f58:	4b4a      	ldr	r3, [pc, #296]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	4a49      	ldr	r2, [pc, #292]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f62:	6093      	str	r3, [r2, #8]
 8006f64:	4b47      	ldr	r3, [pc, #284]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f70:	4944      	ldr	r1, [pc, #272]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0310 	and.w	r3, r3, #16
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006f88:	4b3f      	ldr	r3, [pc, #252]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006f8a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006f98:	4b3a      	ldr	r3, [pc, #232]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa6:	4937      	ldr	r1, [pc, #220]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fba:	4b32      	ldr	r3, [pc, #200]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fc0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc8:	492e      	ldr	r1, [pc, #184]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d011      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006fdc:	4b29      	ldr	r3, [pc, #164]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fe2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fea:	4926      	ldr	r1, [pc, #152]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ffa:	d101      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800700c:	4b1d      	ldr	r3, [pc, #116]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800700e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007012:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701a:	491a      	ldr	r1, [pc, #104]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800701c:	4313      	orrs	r3, r2
 800701e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800702a:	2b00      	cmp	r3, #0
 800702c:	d011      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800702e:	4b15      	ldr	r3, [pc, #84]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007034:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703c:	4911      	ldr	r1, [pc, #68]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800703e:	4313      	orrs	r3, r2
 8007040:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800704c:	d101      	bne.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800704e:	2301      	movs	r3, #1
 8007050:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d005      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007060:	f040 80ff 	bne.w	8007262 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007064:	4b09      	ldr	r3, [pc, #36]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800706a:	f7fb fae9 	bl	8002640 <HAL_GetTick>
 800706e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007070:	e00e      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007072:	f7fb fae5 	bl	8002640 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d907      	bls.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e188      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007084:	40023800 	.word	0x40023800
 8007088:	424711e0 	.word	0x424711e0
 800708c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007090:	4b7e      	ldr	r3, [pc, #504]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1ea      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d009      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d028      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d124      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80070c4:	4b71      	ldr	r3, [pc, #452]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80070c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ca:	0c1b      	lsrs	r3, r3, #16
 80070cc:	f003 0303 	and.w	r3, r3, #3
 80070d0:	3301      	adds	r3, #1
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80070d6:	4b6d      	ldr	r3, [pc, #436]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80070d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070dc:	0e1b      	lsrs	r3, r3, #24
 80070de:	f003 030f 	and.w	r3, r3, #15
 80070e2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	019b      	lsls	r3, r3, #6
 80070ee:	431a      	orrs	r2, r3
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	3b01      	subs	r3, #1
 80070f6:	041b      	lsls	r3, r3, #16
 80070f8:	431a      	orrs	r2, r3
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	061b      	lsls	r3, r3, #24
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	071b      	lsls	r3, r3, #28
 8007106:	4961      	ldr	r1, [pc, #388]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007108:	4313      	orrs	r3, r2
 800710a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d004      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007122:	d00a      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800712c:	2b00      	cmp	r3, #0
 800712e:	d035      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007138:	d130      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800713a:	4b54      	ldr	r3, [pc, #336]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800713c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007140:	0c1b      	lsrs	r3, r3, #16
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	3301      	adds	r3, #1
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800714c:	4b4f      	ldr	r3, [pc, #316]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800714e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007152:	0f1b      	lsrs	r3, r3, #28
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	019b      	lsls	r3, r3, #6
 8007164:	431a      	orrs	r2, r3
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	085b      	lsrs	r3, r3, #1
 800716a:	3b01      	subs	r3, #1
 800716c:	041b      	lsls	r3, r3, #16
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	061b      	lsls	r3, r3, #24
 8007176:	431a      	orrs	r2, r3
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	071b      	lsls	r3, r3, #28
 800717c:	4943      	ldr	r1, [pc, #268]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007184:	4b41      	ldr	r3, [pc, #260]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800718a:	f023 021f 	bic.w	r2, r3, #31
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	3b01      	subs	r3, #1
 8007194:	493d      	ldr	r1, [pc, #244]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d029      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b0:	d124      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80071b2:	4b36      	ldr	r3, [pc, #216]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b8:	0c1b      	lsrs	r3, r3, #16
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	3301      	adds	r3, #1
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071c4:	4b31      	ldr	r3, [pc, #196]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ca:	0f1b      	lsrs	r3, r3, #28
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	019b      	lsls	r3, r3, #6
 80071dc:	431a      	orrs	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	085b      	lsrs	r3, r3, #1
 80071e4:	3b01      	subs	r3, #1
 80071e6:	041b      	lsls	r3, r3, #16
 80071e8:	431a      	orrs	r2, r3
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	061b      	lsls	r3, r3, #24
 80071ee:	431a      	orrs	r2, r3
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	071b      	lsls	r3, r3, #28
 80071f4:	4925      	ldr	r1, [pc, #148]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007204:	2b00      	cmp	r3, #0
 8007206:	d016      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	019b      	lsls	r3, r3, #6
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	085b      	lsrs	r3, r3, #1
 800721a:	3b01      	subs	r3, #1
 800721c:	041b      	lsls	r3, r3, #16
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	061b      	lsls	r3, r3, #24
 8007226:	431a      	orrs	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	071b      	lsls	r3, r3, #28
 800722e:	4917      	ldr	r1, [pc, #92]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007230:	4313      	orrs	r3, r2
 8007232:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007236:	4b16      	ldr	r3, [pc, #88]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007238:	2201      	movs	r2, #1
 800723a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800723c:	f7fb fa00 	bl	8002640 <HAL_GetTick>
 8007240:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007242:	e008      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007244:	f7fb f9fc 	bl	8002640 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d901      	bls.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e09f      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007256:	4b0d      	ldr	r3, [pc, #52]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0f0      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	2b01      	cmp	r3, #1
 8007266:	f040 8095 	bne.w	8007394 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800726a:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007270:	f7fb f9e6 	bl	8002640 <HAL_GetTick>
 8007274:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007276:	e00f      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007278:	f7fb f9e2 	bl	8002640 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d908      	bls.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e085      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800728a:	bf00      	nop
 800728c:	40023800 	.word	0x40023800
 8007290:	42470068 	.word	0x42470068
 8007294:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007298:	4b41      	ldr	r3, [pc, #260]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a4:	d0e8      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x566>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d009      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d02b      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d127      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80072ce:	4b34      	ldr	r3, [pc, #208]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80072d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d4:	0c1b      	lsrs	r3, r3, #16
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	3301      	adds	r3, #1
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699a      	ldr	r2, [r3, #24]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	019b      	lsls	r3, r3, #6
 80072ea:	431a      	orrs	r2, r3
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	085b      	lsrs	r3, r3, #1
 80072f0:	3b01      	subs	r3, #1
 80072f2:	041b      	lsls	r3, r3, #16
 80072f4:	431a      	orrs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	061b      	lsls	r3, r3, #24
 80072fc:	4928      	ldr	r1, [pc, #160]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007304:	4b26      	ldr	r3, [pc, #152]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800730a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007312:	3b01      	subs	r3, #1
 8007314:	021b      	lsls	r3, r3, #8
 8007316:	4922      	ldr	r1, [pc, #136]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007318:	4313      	orrs	r3, r2
 800731a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007326:	2b00      	cmp	r3, #0
 8007328:	d01d      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007332:	d118      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007334:	4b1a      	ldr	r3, [pc, #104]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800733a:	0e1b      	lsrs	r3, r3, #24
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	019b      	lsls	r3, r3, #6
 800734c:	431a      	orrs	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	085b      	lsrs	r3, r3, #1
 8007354:	3b01      	subs	r3, #1
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	431a      	orrs	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	061b      	lsls	r3, r3, #24
 800735e:	4910      	ldr	r1, [pc, #64]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007360:	4313      	orrs	r3, r2
 8007362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007366:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007368:	2201      	movs	r2, #1
 800736a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800736c:	f7fb f968 	bl	8002640 <HAL_GetTick>
 8007370:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007372:	e008      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007374:	f7fb f964 	bl	8002640 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b02      	cmp	r3, #2
 8007380:	d901      	bls.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e007      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007386:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800738e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007392:	d1ef      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3730      	adds	r7, #48	; 0x30
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40023800 	.word	0x40023800
 80073a4:	42470070 	.word	0x42470070

080073a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b089      	sub	sp, #36	; 0x24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	2b07      	cmp	r3, #7
 80073ce:	f200 8224 	bhi.w	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	080075db 	.word	0x080075db
 80073dc:	08007705 	.word	0x08007705
 80073e0:	0800781b 	.word	0x0800781b
 80073e4:	080073f9 	.word	0x080073f9
 80073e8:	0800781b 	.word	0x0800781b
 80073ec:	0800781b 	.word	0x0800781b
 80073f0:	0800781b 	.word	0x0800781b
 80073f4:	080073f9 	.word	0x080073f9
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80073f8:	4ba8      	ldr	r3, [pc, #672]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80073fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073fe:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800740e:	f000 80d6 	beq.w	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007418:	f200 80dd 	bhi.w	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007422:	f000 809f 	beq.w	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800742c:	f200 80d3 	bhi.w	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007436:	d05b      	beq.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800743e:	f200 80ca 	bhi.w	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007448:	f000 80b6 	beq.w	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007452:	f200 80c0 	bhi.w	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800745c:	f000 8082 	beq.w	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007466:	f200 80b6 	bhi.w	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d004      	beq.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007476:	d03b      	beq.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8007478:	e0ad      	b.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800747a:	4b88      	ldr	r3, [pc, #544]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d109      	bne.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8007486:	4b85      	ldr	r3, [pc, #532]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800748c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007490:	4a83      	ldr	r2, [pc, #524]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007492:	fbb2 f3f3 	udiv	r3, r2, r3
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	e008      	b.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800749a:	4b80      	ldr	r3, [pc, #512]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800749c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074a4:	4a7f      	ldr	r2, [pc, #508]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80074a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074aa:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80074ac:	4b7b      	ldr	r3, [pc, #492]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80074ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b2:	0e1b      	lsrs	r3, r3, #24
 80074b4:	f003 030f 	and.w	r3, r3, #15
 80074b8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80074ba:	4b78      	ldr	r3, [pc, #480]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80074bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c0:	099b      	lsrs	r3, r3, #6
 80074c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	fb03 f202 	mul.w	r2, r3, r2
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d2:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80074d4:	4b71      	ldr	r3, [pc, #452]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80074d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074da:	0a1b      	lsrs	r3, r3, #8
 80074dc:	f003 031f 	and.w	r3, r3, #31
 80074e0:	3301      	adds	r3, #1
 80074e2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80074e4:	69fa      	ldr	r2, [r7, #28]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ec:	61fb      	str	r3, [r7, #28]
          break;
 80074ee:	e073      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80074f0:	4b6a      	ldr	r3, [pc, #424]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d109      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80074fc:	4b67      	ldr	r3, [pc, #412]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80074fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007506:	4a66      	ldr	r2, [pc, #408]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007508:	fbb2 f3f3 	udiv	r3, r2, r3
 800750c:	61bb      	str	r3, [r7, #24]
 800750e:	e008      	b.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8007510:	4b62      	ldr	r3, [pc, #392]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800751a:	4a62      	ldr	r2, [pc, #392]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800751c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007520:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8007522:	4b5e      	ldr	r3, [pc, #376]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007528:	0e1b      	lsrs	r3, r3, #24
 800752a:	f003 030f 	and.w	r3, r3, #15
 800752e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8007530:	4b5a      	ldr	r3, [pc, #360]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007536:	099b      	lsrs	r3, r3, #6
 8007538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	fb03 f202 	mul.w	r2, r3, r2
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	fbb2 f3f3 	udiv	r3, r2, r3
 8007548:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800754a:	4b54      	ldr	r3, [pc, #336]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800754c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007550:	f003 031f 	and.w	r3, r3, #31
 8007554:	3301      	adds	r3, #1
 8007556:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8007558:	69fa      	ldr	r2, [r7, #28]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007560:	61fb      	str	r3, [r7, #28]
          break;
 8007562:	e039      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007564:	4b4d      	ldr	r3, [pc, #308]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007570:	4b4a      	ldr	r3, [pc, #296]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007578:	4a49      	ldr	r2, [pc, #292]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800757a:	fbb2 f3f3 	udiv	r3, r2, r3
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	e007      	b.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007582:	4b46      	ldr	r3, [pc, #280]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800758a:	4a46      	ldr	r2, [pc, #280]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800758c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007590:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8007592:	4b42      	ldr	r3, [pc, #264]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	0f1b      	lsrs	r3, r3, #28
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800759e:	4b3f      	ldr	r3, [pc, #252]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	099b      	lsrs	r3, r3, #6
 80075a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	fb03 f202 	mul.w	r2, r3, r2
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b4:	61fb      	str	r3, [r7, #28]
          break;
 80075b6:	e00f      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80075b8:	4b3b      	ldr	r3, [pc, #236]	; (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80075ba:	61fb      	str	r3, [r7, #28]
          break;
 80075bc:	e00c      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80075be:	4b37      	ldr	r3, [pc, #220]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80075ca:	4b35      	ldr	r3, [pc, #212]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80075cc:	61fb      	str	r3, [r7, #28]
          break;
 80075ce:	e003      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80075d0:	4b34      	ldr	r3, [pc, #208]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80075d2:	61fb      	str	r3, [r7, #28]
          break;
 80075d4:	e000      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80075d6:	bf00      	nop
        }
      }
      break;
 80075d8:	e11f      	b.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80075da:	4b30      	ldr	r3, [pc, #192]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80075dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80075ec:	d079      	beq.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80075f4:	f200 8082 	bhi.w	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075fe:	d03c      	beq.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007606:	d879      	bhi.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d006      	beq.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007614:	d172      	bne.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007616:	4b24      	ldr	r3, [pc, #144]	; (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8007618:	61fb      	str	r3, [r7, #28]
          break;
 800761a:	e072      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800761c:	4b1f      	ldr	r3, [pc, #124]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007628:	d109      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800762a:	4b1c      	ldr	r3, [pc, #112]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007634:	4a1b      	ldr	r2, [pc, #108]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007636:	fbb2 f3f3 	udiv	r3, r2, r3
 800763a:	61bb      	str	r3, [r7, #24]
 800763c:	e008      	b.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800763e:	4b17      	ldr	r3, [pc, #92]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007648:	4a15      	ldr	r2, [pc, #84]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800764a:	fbb2 f3f3 	udiv	r3, r2, r3
 800764e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007650:	4b12      	ldr	r3, [pc, #72]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007656:	099b      	lsrs	r3, r3, #6
 8007658:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	fb02 f303 	mul.w	r3, r2, r3
 8007662:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007664:	4b0d      	ldr	r3, [pc, #52]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800766a:	0f1b      	lsrs	r3, r3, #28
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	fbb2 f3f3 	udiv	r3, r2, r3
 8007676:	61fb      	str	r3, [r7, #28]
          break;
 8007678:	e043      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800767a:	4b08      	ldr	r3, [pc, #32]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007686:	d111      	bne.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007688:	4b04      	ldr	r3, [pc, #16]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007690:	4a04      	ldr	r2, [pc, #16]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007692:	fbb2 f3f3 	udiv	r3, r2, r3
 8007696:	61bb      	str	r3, [r7, #24]
 8007698:	e010      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800769a:	bf00      	nop
 800769c:	40023800 	.word	0x40023800
 80076a0:	00f42400 	.word	0x00f42400
 80076a4:	017d7840 	.word	0x017d7840
 80076a8:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076ac:	4b5e      	ldr	r3, [pc, #376]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076b4:	4a5d      	ldr	r2, [pc, #372]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80076b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ba:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80076bc:	4b5a      	ldr	r3, [pc, #360]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	099b      	lsrs	r3, r3, #6
 80076c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	fb02 f303 	mul.w	r3, r2, r3
 80076cc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80076ce:	4b56      	ldr	r3, [pc, #344]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	0f1b      	lsrs	r3, r3, #28
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	fbb2 f3f3 	udiv	r3, r2, r3
 80076de:	61fb      	str	r3, [r7, #28]
          break;
 80076e0:	e00f      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80076e2:	4b51      	ldr	r3, [pc, #324]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ee:	d102      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80076f0:	4b4f      	ldr	r3, [pc, #316]	; (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80076f2:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80076f4:	e005      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80076f6:	4b4d      	ldr	r3, [pc, #308]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80076f8:	61fb      	str	r3, [r7, #28]
          break;
 80076fa:	e002      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61fb      	str	r3, [r7, #28]
          break;
 8007700:	bf00      	nop
        }
      }
      break;
 8007702:	e08a      	b.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007704:	4b48      	ldr	r3, [pc, #288]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800770a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007716:	d06f      	beq.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800771e:	d878      	bhi.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007726:	d03c      	beq.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800772e:	d870      	bhi.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d006      	beq.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800773c:	d169      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800773e:	4b3d      	ldr	r3, [pc, #244]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8007740:	61fb      	str	r3, [r7, #28]
          break;
 8007742:	e069      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007744:	4b38      	ldr	r3, [pc, #224]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800774c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007750:	d109      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007752:	4b35      	ldr	r3, [pc, #212]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800775c:	4a34      	ldr	r2, [pc, #208]	; (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	61bb      	str	r3, [r7, #24]
 8007764:	e008      	b.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007766:	4b30      	ldr	r3, [pc, #192]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8007768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800776c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007770:	4a2e      	ldr	r2, [pc, #184]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8007772:	fbb2 f3f3 	udiv	r3, r2, r3
 8007776:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007778:	4b2b      	ldr	r3, [pc, #172]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800777a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800777e:	099b      	lsrs	r3, r3, #6
 8007780:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	fb02 f303 	mul.w	r3, r2, r3
 800778a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800778c:	4b26      	ldr	r3, [pc, #152]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800778e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007792:	0f1b      	lsrs	r3, r3, #28
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	fbb2 f3f3 	udiv	r3, r2, r3
 800779e:	61fb      	str	r3, [r7, #28]
          break;
 80077a0:	e03a      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80077a2:	4b21      	ldr	r3, [pc, #132]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077ae:	d108      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80077b0:	4b1d      	ldr	r3, [pc, #116]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077b8:	4a1d      	ldr	r2, [pc, #116]	; (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80077ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80077be:	61bb      	str	r3, [r7, #24]
 80077c0:	e007      	b.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80077c2:	4b19      	ldr	r3, [pc, #100]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077ca:	4a18      	ldr	r2, [pc, #96]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80077cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d0:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80077d2:	4b15      	ldr	r3, [pc, #84]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	099b      	lsrs	r3, r3, #6
 80077d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	fb02 f303 	mul.w	r3, r2, r3
 80077e2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80077e4:	4b10      	ldr	r3, [pc, #64]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	0f1b      	lsrs	r3, r3, #28
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f4:	61fb      	str	r3, [r7, #28]
          break;
 80077f6:	e00f      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80077f8:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007804:	d102      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8007806:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8007808:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800780a:	e005      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 800780c:	4b07      	ldr	r3, [pc, #28]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800780e:	61fb      	str	r3, [r7, #28]
          break;
 8007810:	e002      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	61fb      	str	r3, [r7, #28]
          break;
 8007816:	bf00      	nop
        }
      }
      break;
 8007818:	bf00      	nop
    }
  }
  return frequency;
 800781a:	69fb      	ldr	r3, [r7, #28]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3724      	adds	r7, #36	; 0x24
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	40023800 	.word	0x40023800
 800782c:	00f42400 	.word	0x00f42400
 8007830:	017d7840 	.word	0x017d7840
 8007834:	00bb8000 	.word	0x00bb8000

08007838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800783c:	b0a6      	sub	sp, #152	; 0x98
 800783e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800785e:	4bc8      	ldr	r3, [pc, #800]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x348>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f003 030c 	and.w	r3, r3, #12
 8007866:	2b0c      	cmp	r3, #12
 8007868:	f200 817e 	bhi.w	8007b68 <HAL_RCC_GetSysClockFreq+0x330>
 800786c:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <HAL_RCC_GetSysClockFreq+0x3c>)
 800786e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007872:	bf00      	nop
 8007874:	080078a9 	.word	0x080078a9
 8007878:	08007b69 	.word	0x08007b69
 800787c:	08007b69 	.word	0x08007b69
 8007880:	08007b69 	.word	0x08007b69
 8007884:	080078b1 	.word	0x080078b1
 8007888:	08007b69 	.word	0x08007b69
 800788c:	08007b69 	.word	0x08007b69
 8007890:	08007b69 	.word	0x08007b69
 8007894:	080078b9 	.word	0x080078b9
 8007898:	08007b69 	.word	0x08007b69
 800789c:	08007b69 	.word	0x08007b69
 80078a0:	08007b69 	.word	0x08007b69
 80078a4:	08007a23 	.word	0x08007a23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078a8:	4bb6      	ldr	r3, [pc, #728]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x34c>)
 80078aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80078ae:	e15f      	b.n	8007b70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078b0:	4bb5      	ldr	r3, [pc, #724]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x350>)
 80078b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80078b6:	e15b      	b.n	8007b70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078b8:	4bb1      	ldr	r3, [pc, #708]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x348>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078c4:	4bae      	ldr	r3, [pc, #696]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x348>)
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d031      	beq.n	8007934 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078d0:	4bab      	ldr	r3, [pc, #684]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x348>)
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	099b      	lsrs	r3, r3, #6
 80078d6:	2200      	movs	r2, #0
 80078d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80078da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e2:	663b      	str	r3, [r7, #96]	; 0x60
 80078e4:	2300      	movs	r3, #0
 80078e6:	667b      	str	r3, [r7, #100]	; 0x64
 80078e8:	4ba7      	ldr	r3, [pc, #668]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x350>)
 80078ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80078ee:	462a      	mov	r2, r5
 80078f0:	fb03 f202 	mul.w	r2, r3, r2
 80078f4:	2300      	movs	r3, #0
 80078f6:	4621      	mov	r1, r4
 80078f8:	fb01 f303 	mul.w	r3, r1, r3
 80078fc:	4413      	add	r3, r2
 80078fe:	4aa2      	ldr	r2, [pc, #648]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x350>)
 8007900:	4621      	mov	r1, r4
 8007902:	fba1 1202 	umull	r1, r2, r1, r2
 8007906:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007908:	460a      	mov	r2, r1
 800790a:	67ba      	str	r2, [r7, #120]	; 0x78
 800790c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800790e:	4413      	add	r3, r2
 8007910:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007916:	2200      	movs	r2, #0
 8007918:	65bb      	str	r3, [r7, #88]	; 0x58
 800791a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800791c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007920:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007924:	f7f9 f9d0 	bl	8000cc8 <__aeabi_uldivmod>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4613      	mov	r3, r2
 800792e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007932:	e064      	b.n	80079fe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007934:	4b92      	ldr	r3, [pc, #584]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x348>)
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	099b      	lsrs	r3, r3, #6
 800793a:	2200      	movs	r2, #0
 800793c:	653b      	str	r3, [r7, #80]	; 0x50
 800793e:	657a      	str	r2, [r7, #84]	; 0x54
 8007940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007946:	64bb      	str	r3, [r7, #72]	; 0x48
 8007948:	2300      	movs	r3, #0
 800794a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800794c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8007950:	4622      	mov	r2, r4
 8007952:	462b      	mov	r3, r5
 8007954:	f04f 0000 	mov.w	r0, #0
 8007958:	f04f 0100 	mov.w	r1, #0
 800795c:	0159      	lsls	r1, r3, #5
 800795e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007962:	0150      	lsls	r0, r2, #5
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4621      	mov	r1, r4
 800796a:	1a51      	subs	r1, r2, r1
 800796c:	6139      	str	r1, [r7, #16]
 800796e:	4629      	mov	r1, r5
 8007970:	eb63 0301 	sbc.w	r3, r3, r1
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007982:	4659      	mov	r1, fp
 8007984:	018b      	lsls	r3, r1, #6
 8007986:	4651      	mov	r1, sl
 8007988:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800798c:	4651      	mov	r1, sl
 800798e:	018a      	lsls	r2, r1, #6
 8007990:	4651      	mov	r1, sl
 8007992:	ebb2 0801 	subs.w	r8, r2, r1
 8007996:	4659      	mov	r1, fp
 8007998:	eb63 0901 	sbc.w	r9, r3, r1
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	f04f 0300 	mov.w	r3, #0
 80079a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079b0:	4690      	mov	r8, r2
 80079b2:	4699      	mov	r9, r3
 80079b4:	4623      	mov	r3, r4
 80079b6:	eb18 0303 	adds.w	r3, r8, r3
 80079ba:	60bb      	str	r3, [r7, #8]
 80079bc:	462b      	mov	r3, r5
 80079be:	eb49 0303 	adc.w	r3, r9, r3
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80079d0:	4629      	mov	r1, r5
 80079d2:	028b      	lsls	r3, r1, #10
 80079d4:	4621      	mov	r1, r4
 80079d6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80079da:	4621      	mov	r1, r4
 80079dc:	028a      	lsls	r2, r1, #10
 80079de:	4610      	mov	r0, r2
 80079e0:	4619      	mov	r1, r3
 80079e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079e6:	2200      	movs	r2, #0
 80079e8:	643b      	str	r3, [r7, #64]	; 0x40
 80079ea:	647a      	str	r2, [r7, #68]	; 0x44
 80079ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079f0:	f7f9 f96a 	bl	8000cc8 <__aeabi_uldivmod>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4613      	mov	r3, r2
 80079fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80079fe:	4b60      	ldr	r3, [pc, #384]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x348>)
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	0c1b      	lsrs	r3, r3, #16
 8007a04:	f003 0303 	and.w	r3, r3, #3
 8007a08:	3301      	adds	r3, #1
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8007a10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007a20:	e0a6      	b.n	8007b70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a22:	4b57      	ldr	r3, [pc, #348]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x348>)
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a2e:	4b54      	ldr	r3, [pc, #336]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x348>)
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d02a      	beq.n	8007a90 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a3a:	4b51      	ldr	r3, [pc, #324]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x348>)
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	099b      	lsrs	r3, r3, #6
 8007a40:	2200      	movs	r2, #0
 8007a42:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	4b4e      	ldr	r3, [pc, #312]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x350>)
 8007a50:	fb03 f201 	mul.w	r2, r3, r1
 8007a54:	2300      	movs	r3, #0
 8007a56:	fb00 f303 	mul.w	r3, r0, r3
 8007a5a:	4413      	add	r3, r2
 8007a5c:	4a4a      	ldr	r2, [pc, #296]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x350>)
 8007a5e:	fba0 1202 	umull	r1, r2, r0, r2
 8007a62:	677a      	str	r2, [r7, #116]	; 0x74
 8007a64:	460a      	mov	r2, r1
 8007a66:	673a      	str	r2, [r7, #112]	; 0x70
 8007a68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007a6a:	4413      	add	r3, r2
 8007a6c:	677b      	str	r3, [r7, #116]	; 0x74
 8007a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a72:	2200      	movs	r2, #0
 8007a74:	633b      	str	r3, [r7, #48]	; 0x30
 8007a76:	637a      	str	r2, [r7, #52]	; 0x34
 8007a78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a7c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007a80:	f7f9 f922 	bl	8000cc8 <__aeabi_uldivmod>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4613      	mov	r3, r2
 8007a8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a8e:	e05b      	b.n	8007b48 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a90:	4b3b      	ldr	r3, [pc, #236]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x348>)
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	099b      	lsrs	r3, r3, #6
 8007a96:	2200      	movs	r2, #0
 8007a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa2:	623b      	str	r3, [r7, #32]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8007aa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007aac:	4642      	mov	r2, r8
 8007aae:	464b      	mov	r3, r9
 8007ab0:	f04f 0000 	mov.w	r0, #0
 8007ab4:	f04f 0100 	mov.w	r1, #0
 8007ab8:	0159      	lsls	r1, r3, #5
 8007aba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007abe:	0150      	lsls	r0, r2, #5
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4641      	mov	r1, r8
 8007ac6:	ebb2 0a01 	subs.w	sl, r2, r1
 8007aca:	4649      	mov	r1, r9
 8007acc:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ad0:	f04f 0200 	mov.w	r2, #0
 8007ad4:	f04f 0300 	mov.w	r3, #0
 8007ad8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007adc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007ae0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ae4:	ebb2 040a 	subs.w	r4, r2, sl
 8007ae8:	eb63 050b 	sbc.w	r5, r3, fp
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	f04f 0300 	mov.w	r3, #0
 8007af4:	00eb      	lsls	r3, r5, #3
 8007af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007afa:	00e2      	lsls	r2, r4, #3
 8007afc:	4614      	mov	r4, r2
 8007afe:	461d      	mov	r5, r3
 8007b00:	4643      	mov	r3, r8
 8007b02:	18e3      	adds	r3, r4, r3
 8007b04:	603b      	str	r3, [r7, #0]
 8007b06:	464b      	mov	r3, r9
 8007b08:	eb45 0303 	adc.w	r3, r5, r3
 8007b0c:	607b      	str	r3, [r7, #4]
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	f04f 0300 	mov.w	r3, #0
 8007b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	028b      	lsls	r3, r1, #10
 8007b1e:	4621      	mov	r1, r4
 8007b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b24:	4621      	mov	r1, r4
 8007b26:	028a      	lsls	r2, r1, #10
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b30:	2200      	movs	r2, #0
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	61fa      	str	r2, [r7, #28]
 8007b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b3a:	f7f9 f8c5 	bl	8000cc8 <__aeabi_uldivmod>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4613      	mov	r3, r2
 8007b44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007b48:	4b0d      	ldr	r3, [pc, #52]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x348>)
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	0f1b      	lsrs	r3, r3, #28
 8007b4e:	f003 0307 	and.w	r3, r3, #7
 8007b52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8007b56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007b66:	e003      	b.n	8007b70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b68:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x34c>)
 8007b6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007b6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3798      	adds	r7, #152	; 0x98
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b7e:	bf00      	nop
 8007b80:	40023800 	.word	0x40023800
 8007b84:	00f42400 	.word	0x00f42400
 8007b88:	017d7840 	.word	0x017d7840

08007b8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e28d      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 8083 	beq.w	8007cb2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007bac:	4b94      	ldr	r3, [pc, #592]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 030c 	and.w	r3, r3, #12
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d019      	beq.n	8007bec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007bb8:	4b91      	ldr	r3, [pc, #580]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d106      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007bc4:	4b8e      	ldr	r3, [pc, #568]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd0:	d00c      	beq.n	8007bec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bd2:	4b8b      	ldr	r3, [pc, #556]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007bda:	2b0c      	cmp	r3, #12
 8007bdc:	d112      	bne.n	8007c04 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bde:	4b88      	ldr	r3, [pc, #544]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007be6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bea:	d10b      	bne.n	8007c04 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bec:	4b84      	ldr	r3, [pc, #528]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d05b      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x124>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d157      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e25a      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c0c:	d106      	bne.n	8007c1c <HAL_RCC_OscConfig+0x90>
 8007c0e:	4b7c      	ldr	r3, [pc, #496]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a7b      	ldr	r2, [pc, #492]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e01d      	b.n	8007c58 <HAL_RCC_OscConfig+0xcc>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c24:	d10c      	bne.n	8007c40 <HAL_RCC_OscConfig+0xb4>
 8007c26:	4b76      	ldr	r3, [pc, #472]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a75      	ldr	r2, [pc, #468]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	4b73      	ldr	r3, [pc, #460]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a72      	ldr	r2, [pc, #456]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	e00b      	b.n	8007c58 <HAL_RCC_OscConfig+0xcc>
 8007c40:	4b6f      	ldr	r3, [pc, #444]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a6e      	ldr	r2, [pc, #440]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	4b6c      	ldr	r3, [pc, #432]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a6b      	ldr	r2, [pc, #428]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d013      	beq.n	8007c88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c60:	f7fa fcee 	bl	8002640 <HAL_GetTick>
 8007c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c66:	e008      	b.n	8007c7a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c68:	f7fa fcea 	bl	8002640 <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b64      	cmp	r3, #100	; 0x64
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e21f      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c7a:	4b61      	ldr	r3, [pc, #388]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0f0      	beq.n	8007c68 <HAL_RCC_OscConfig+0xdc>
 8007c86:	e014      	b.n	8007cb2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c88:	f7fa fcda 	bl	8002640 <HAL_GetTick>
 8007c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c8e:	e008      	b.n	8007ca2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c90:	f7fa fcd6 	bl	8002640 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b64      	cmp	r3, #100	; 0x64
 8007c9c:	d901      	bls.n	8007ca2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e20b      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ca2:	4b57      	ldr	r3, [pc, #348]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1f0      	bne.n	8007c90 <HAL_RCC_OscConfig+0x104>
 8007cae:	e000      	b.n	8007cb2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d06f      	beq.n	8007d9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007cbe:	4b50      	ldr	r3, [pc, #320]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 030c 	and.w	r3, r3, #12
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d017      	beq.n	8007cfa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cca:	4b4d      	ldr	r3, [pc, #308]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d105      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cd6:	4b4a      	ldr	r3, [pc, #296]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00b      	beq.n	8007cfa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ce2:	4b47      	ldr	r3, [pc, #284]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cea:	2b0c      	cmp	r3, #12
 8007cec:	d11c      	bne.n	8007d28 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cee:	4b44      	ldr	r3, [pc, #272]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d116      	bne.n	8007d28 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cfa:	4b41      	ldr	r3, [pc, #260]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d005      	beq.n	8007d12 <HAL_RCC_OscConfig+0x186>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d001      	beq.n	8007d12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e1d3      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d12:	4b3b      	ldr	r3, [pc, #236]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	4937      	ldr	r1, [pc, #220]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d26:	e03a      	b.n	8007d9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d020      	beq.n	8007d72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d30:	4b34      	ldr	r3, [pc, #208]	; (8007e04 <HAL_RCC_OscConfig+0x278>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d36:	f7fa fc83 	bl	8002640 <HAL_GetTick>
 8007d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d3c:	e008      	b.n	8007d50 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d3e:	f7fa fc7f 	bl	8002640 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d901      	bls.n	8007d50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e1b4      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d50:	4b2b      	ldr	r3, [pc, #172]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0f0      	beq.n	8007d3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d5c:	4b28      	ldr	r3, [pc, #160]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	4925      	ldr	r1, [pc, #148]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	600b      	str	r3, [r1, #0]
 8007d70:	e015      	b.n	8007d9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <HAL_RCC_OscConfig+0x278>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d78:	f7fa fc62 	bl	8002640 <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d80:	f7fa fc5e 	bl	8002640 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e193      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d92:	4b1b      	ldr	r3, [pc, #108]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1f0      	bne.n	8007d80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0308 	and.w	r3, r3, #8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d036      	beq.n	8007e18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d016      	beq.n	8007de0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <HAL_RCC_OscConfig+0x27c>)
 8007db4:	2201      	movs	r2, #1
 8007db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db8:	f7fa fc42 	bl	8002640 <HAL_GetTick>
 8007dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dc0:	f7fa fc3e 	bl	8002640 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e173      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dd2:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <HAL_RCC_OscConfig+0x274>)
 8007dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0f0      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x234>
 8007dde:	e01b      	b.n	8007e18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007de0:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <HAL_RCC_OscConfig+0x27c>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de6:	f7fa fc2b 	bl	8002640 <HAL_GetTick>
 8007dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dec:	e00e      	b.n	8007e0c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dee:	f7fa fc27 	bl	8002640 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d907      	bls.n	8007e0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e15c      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
 8007e00:	40023800 	.word	0x40023800
 8007e04:	42470000 	.word	0x42470000
 8007e08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e0c:	4b8a      	ldr	r3, [pc, #552]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1ea      	bne.n	8007dee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 8097 	beq.w	8007f54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e26:	2300      	movs	r3, #0
 8007e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e2a:	4b83      	ldr	r3, [pc, #524]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10f      	bne.n	8007e56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e36:	2300      	movs	r3, #0
 8007e38:	60bb      	str	r3, [r7, #8]
 8007e3a:	4b7f      	ldr	r3, [pc, #508]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	4a7e      	ldr	r2, [pc, #504]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e44:	6413      	str	r3, [r2, #64]	; 0x40
 8007e46:	4b7c      	ldr	r3, [pc, #496]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e4e:	60bb      	str	r3, [r7, #8]
 8007e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e52:	2301      	movs	r3, #1
 8007e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e56:	4b79      	ldr	r3, [pc, #484]	; (800803c <HAL_RCC_OscConfig+0x4b0>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d118      	bne.n	8007e94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e62:	4b76      	ldr	r3, [pc, #472]	; (800803c <HAL_RCC_OscConfig+0x4b0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a75      	ldr	r2, [pc, #468]	; (800803c <HAL_RCC_OscConfig+0x4b0>)
 8007e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e6e:	f7fa fbe7 	bl	8002640 <HAL_GetTick>
 8007e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e74:	e008      	b.n	8007e88 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e76:	f7fa fbe3 	bl	8002640 <HAL_GetTick>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d901      	bls.n	8007e88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e118      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e88:	4b6c      	ldr	r3, [pc, #432]	; (800803c <HAL_RCC_OscConfig+0x4b0>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0f0      	beq.n	8007e76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d106      	bne.n	8007eaa <HAL_RCC_OscConfig+0x31e>
 8007e9c:	4b66      	ldr	r3, [pc, #408]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea0:	4a65      	ldr	r2, [pc, #404]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007ea2:	f043 0301 	orr.w	r3, r3, #1
 8007ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ea8:	e01c      	b.n	8007ee4 <HAL_RCC_OscConfig+0x358>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	2b05      	cmp	r3, #5
 8007eb0:	d10c      	bne.n	8007ecc <HAL_RCC_OscConfig+0x340>
 8007eb2:	4b61      	ldr	r3, [pc, #388]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb6:	4a60      	ldr	r2, [pc, #384]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007eb8:	f043 0304 	orr.w	r3, r3, #4
 8007ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ebe:	4b5e      	ldr	r3, [pc, #376]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec2:	4a5d      	ldr	r2, [pc, #372]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007ec4:	f043 0301 	orr.w	r3, r3, #1
 8007ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8007eca:	e00b      	b.n	8007ee4 <HAL_RCC_OscConfig+0x358>
 8007ecc:	4b5a      	ldr	r3, [pc, #360]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed0:	4a59      	ldr	r2, [pc, #356]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007ed2:	f023 0301 	bic.w	r3, r3, #1
 8007ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ed8:	4b57      	ldr	r3, [pc, #348]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007edc:	4a56      	ldr	r2, [pc, #344]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007ede:	f023 0304 	bic.w	r3, r3, #4
 8007ee2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d015      	beq.n	8007f18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eec:	f7fa fba8 	bl	8002640 <HAL_GetTick>
 8007ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ef2:	e00a      	b.n	8007f0a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ef4:	f7fa fba4 	bl	8002640 <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d901      	bls.n	8007f0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e0d7      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f0a:	4b4b      	ldr	r3, [pc, #300]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0e:	f003 0302 	and.w	r3, r3, #2
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0ee      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x368>
 8007f16:	e014      	b.n	8007f42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f18:	f7fa fb92 	bl	8002640 <HAL_GetTick>
 8007f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f1e:	e00a      	b.n	8007f36 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f20:	f7fa fb8e 	bl	8002640 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d901      	bls.n	8007f36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e0c1      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f36:	4b40      	ldr	r3, [pc, #256]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1ee      	bne.n	8007f20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d105      	bne.n	8007f54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f48:	4b3b      	ldr	r3, [pc, #236]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4c:	4a3a      	ldr	r2, [pc, #232]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 80ad 	beq.w	80080b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f5e:	4b36      	ldr	r3, [pc, #216]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 030c 	and.w	r3, r3, #12
 8007f66:	2b08      	cmp	r3, #8
 8007f68:	d060      	beq.n	800802c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d145      	bne.n	8007ffe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f72:	4b33      	ldr	r3, [pc, #204]	; (8008040 <HAL_RCC_OscConfig+0x4b4>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f78:	f7fa fb62 	bl	8002640 <HAL_GetTick>
 8007f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f80:	f7fa fb5e 	bl	8002640 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e093      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f92:	4b29      	ldr	r3, [pc, #164]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1f0      	bne.n	8007f80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69da      	ldr	r2, [r3, #28]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	019b      	lsls	r3, r3, #6
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	041b      	lsls	r3, r3, #16
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	061b      	lsls	r3, r3, #24
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc8:	071b      	lsls	r3, r3, #28
 8007fca:	491b      	ldr	r1, [pc, #108]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fd0:	4b1b      	ldr	r3, [pc, #108]	; (8008040 <HAL_RCC_OscConfig+0x4b4>)
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd6:	f7fa fb33 	bl	8002640 <HAL_GetTick>
 8007fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fdc:	e008      	b.n	8007ff0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fde:	f7fa fb2f 	bl	8002640 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d901      	bls.n	8007ff0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e064      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ff0:	4b11      	ldr	r3, [pc, #68]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0f0      	beq.n	8007fde <HAL_RCC_OscConfig+0x452>
 8007ffc:	e05c      	b.n	80080b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ffe:	4b10      	ldr	r3, [pc, #64]	; (8008040 <HAL_RCC_OscConfig+0x4b4>)
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008004:	f7fa fb1c 	bl	8002640 <HAL_GetTick>
 8008008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800800a:	e008      	b.n	800801e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800800c:	f7fa fb18 	bl	8002640 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	2b02      	cmp	r3, #2
 8008018:	d901      	bls.n	800801e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e04d      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800801e:	4b06      	ldr	r3, [pc, #24]	; (8008038 <HAL_RCC_OscConfig+0x4ac>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1f0      	bne.n	800800c <HAL_RCC_OscConfig+0x480>
 800802a:	e045      	b.n	80080b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d107      	bne.n	8008044 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e040      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
 8008038:	40023800 	.word	0x40023800
 800803c:	40007000 	.word	0x40007000
 8008040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008044:	4b1f      	ldr	r3, [pc, #124]	; (80080c4 <HAL_RCC_OscConfig+0x538>)
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d030      	beq.n	80080b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800805c:	429a      	cmp	r2, r3
 800805e:	d129      	bne.n	80080b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800806a:	429a      	cmp	r2, r3
 800806c:	d122      	bne.n	80080b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008074:	4013      	ands	r3, r2
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800807a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800807c:	4293      	cmp	r3, r2
 800807e:	d119      	bne.n	80080b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808a:	085b      	lsrs	r3, r3, #1
 800808c:	3b01      	subs	r3, #1
 800808e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008090:	429a      	cmp	r2, r3
 8008092:	d10f      	bne.n	80080b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d107      	bne.n	80080b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d001      	beq.n	80080b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e000      	b.n	80080ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	40023800 	.word	0x40023800

080080c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e07b      	b.n	80081d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d108      	bne.n	80080f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080ea:	d009      	beq.n	8008100 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	61da      	str	r2, [r3, #28]
 80080f2:	e005      	b.n	8008100 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d106      	bne.n	8008120 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7f9 ffcc 	bl	80020b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008136:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008148:	431a      	orrs	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008152:	431a      	orrs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	431a      	orrs	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008170:	431a      	orrs	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a1b      	ldr	r3, [r3, #32]
 8008180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008184:	ea42 0103 	orr.w	r1, r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	430a      	orrs	r2, r1
 8008196:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	0c1b      	lsrs	r3, r3, #16
 800819e:	f003 0104 	and.w	r1, r3, #4
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	f003 0210 	and.w	r2, r3, #16
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69da      	ldr	r2, [r3, #28]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b088      	sub	sp, #32
 80081de:	af00      	add	r7, sp, #0
 80081e0:	60f8      	str	r0, [r7, #12]
 80081e2:	60b9      	str	r1, [r7, #8]
 80081e4:	603b      	str	r3, [r7, #0]
 80081e6:	4613      	mov	r3, r2
 80081e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_SPI_Transmit+0x22>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e126      	b.n	800844a <HAL_SPI_Transmit+0x270>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008204:	f7fa fa1c 	bl	8002640 <HAL_GetTick>
 8008208:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b01      	cmp	r3, #1
 8008218:	d002      	beq.n	8008220 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800821a:	2302      	movs	r3, #2
 800821c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800821e:	e10b      	b.n	8008438 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d002      	beq.n	800822c <HAL_SPI_Transmit+0x52>
 8008226:	88fb      	ldrh	r3, [r7, #6]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008230:	e102      	b.n	8008438 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2203      	movs	r2, #3
 8008236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	88fa      	ldrh	r2, [r7, #6]
 800824a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	88fa      	ldrh	r2, [r7, #6]
 8008250:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008278:	d10f      	bne.n	800829a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008288:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008298:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a4:	2b40      	cmp	r3, #64	; 0x40
 80082a6:	d007      	beq.n	80082b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082c0:	d14b      	bne.n	800835a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <HAL_SPI_Transmit+0xf6>
 80082ca:	8afb      	ldrh	r3, [r7, #22]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d13e      	bne.n	800834e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d4:	881a      	ldrh	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e0:	1c9a      	adds	r2, r3, #2
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80082f4:	e02b      	b.n	800834e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f003 0302 	and.w	r3, r3, #2
 8008300:	2b02      	cmp	r3, #2
 8008302:	d112      	bne.n	800832a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	881a      	ldrh	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008314:	1c9a      	adds	r2, r3, #2
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800831e:	b29b      	uxth	r3, r3
 8008320:	3b01      	subs	r3, #1
 8008322:	b29a      	uxth	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	86da      	strh	r2, [r3, #54]	; 0x36
 8008328:	e011      	b.n	800834e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800832a:	f7fa f989 	bl	8002640 <HAL_GetTick>
 800832e:	4602      	mov	r2, r0
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d803      	bhi.n	8008342 <HAL_SPI_Transmit+0x168>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008340:	d102      	bne.n	8008348 <HAL_SPI_Transmit+0x16e>
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800834c:	e074      	b.n	8008438 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008352:	b29b      	uxth	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1ce      	bne.n	80082f6 <HAL_SPI_Transmit+0x11c>
 8008358:	e04c      	b.n	80083f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <HAL_SPI_Transmit+0x18e>
 8008362:	8afb      	ldrh	r3, [r7, #22]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d140      	bne.n	80083ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	330c      	adds	r3, #12
 8008372:	7812      	ldrb	r2, [r2, #0]
 8008374:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008384:	b29b      	uxth	r3, r3
 8008386:	3b01      	subs	r3, #1
 8008388:	b29a      	uxth	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800838e:	e02c      	b.n	80083ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b02      	cmp	r3, #2
 800839c:	d113      	bne.n	80083c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	330c      	adds	r3, #12
 80083a8:	7812      	ldrb	r2, [r2, #0]
 80083aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80083c4:	e011      	b.n	80083ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083c6:	f7fa f93b 	bl	8002640 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d803      	bhi.n	80083de <HAL_SPI_Transmit+0x204>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083dc:	d102      	bne.n	80083e4 <HAL_SPI_Transmit+0x20a>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d102      	bne.n	80083ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80083e8:	e026      	b.n	8008438 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1cd      	bne.n	8008390 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 fbd9 	bl	8008bb0 <SPI_EndRxTxTransaction>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2220      	movs	r2, #32
 8008408:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008412:	2300      	movs	r3, #0
 8008414:	613b      	str	r3, [r7, #16]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	613b      	str	r3, [r7, #16]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	77fb      	strb	r3, [r7, #31]
 8008434:	e000      	b.n	8008438 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008436:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008448:	7ffb      	ldrb	r3, [r7, #31]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b088      	sub	sp, #32
 8008456:	af02      	add	r7, sp, #8
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	603b      	str	r3, [r7, #0]
 800845e:	4613      	mov	r3, r2
 8008460:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800846e:	d112      	bne.n	8008496 <HAL_SPI_Receive+0x44>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10e      	bne.n	8008496 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2204      	movs	r2, #4
 800847c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	4613      	mov	r3, r2
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	68b9      	ldr	r1, [r7, #8]
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 f8f1 	bl	8008674 <HAL_SPI_TransmitReceive>
 8008492:	4603      	mov	r3, r0
 8008494:	e0ea      	b.n	800866c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800849c:	2b01      	cmp	r3, #1
 800849e:	d101      	bne.n	80084a4 <HAL_SPI_Receive+0x52>
 80084a0:	2302      	movs	r3, #2
 80084a2:	e0e3      	b.n	800866c <HAL_SPI_Receive+0x21a>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084ac:	f7fa f8c8 	bl	8002640 <HAL_GetTick>
 80084b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d002      	beq.n	80084c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80084be:	2302      	movs	r3, #2
 80084c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80084c2:	e0ca      	b.n	800865a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <HAL_SPI_Receive+0x7e>
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d102      	bne.n	80084d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80084d4:	e0c1      	b.n	800865a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2204      	movs	r2, #4
 80084da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	88fa      	ldrh	r2, [r7, #6]
 80084ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	88fa      	ldrh	r2, [r7, #6]
 80084f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800851c:	d10f      	bne.n	800853e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800852c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800853c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008548:	2b40      	cmp	r3, #64	; 0x40
 800854a:	d007      	beq.n	800855c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800855a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d162      	bne.n	800862a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008564:	e02e      	b.n	80085c4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b01      	cmp	r3, #1
 8008572:	d115      	bne.n	80085a0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f103 020c 	add.w	r2, r3, #12
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	7812      	ldrb	r2, [r2, #0]
 8008582:	b2d2      	uxtb	r2, r2
 8008584:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008594:	b29b      	uxth	r3, r3
 8008596:	3b01      	subs	r3, #1
 8008598:	b29a      	uxth	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800859e:	e011      	b.n	80085c4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085a0:	f7fa f84e 	bl	8002640 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d803      	bhi.n	80085b8 <HAL_SPI_Receive+0x166>
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b6:	d102      	bne.n	80085be <HAL_SPI_Receive+0x16c>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d102      	bne.n	80085c4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80085c2:	e04a      	b.n	800865a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1cb      	bne.n	8008566 <HAL_SPI_Receive+0x114>
 80085ce:	e031      	b.n	8008634 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d113      	bne.n	8008606 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	b292      	uxth	r2, r2
 80085ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f0:	1c9a      	adds	r2, r3, #2
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	3b01      	subs	r3, #1
 80085fe:	b29a      	uxth	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008604:	e011      	b.n	800862a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008606:	f7fa f81b 	bl	8002640 <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d803      	bhi.n	800861e <HAL_SPI_Receive+0x1cc>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861c:	d102      	bne.n	8008624 <HAL_SPI_Receive+0x1d2>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008628:	e017      	b.n	800865a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862e:	b29b      	uxth	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1cd      	bne.n	80085d0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fa53 	bl	8008ae4 <SPI_EndRxTransaction>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d002      	beq.n	800864a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2220      	movs	r2, #32
 8008648:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	75fb      	strb	r3, [r7, #23]
 8008656:	e000      	b.n	800865a <HAL_SPI_Receive+0x208>
  }

error :
 8008658:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800866a:	7dfb      	ldrb	r3, [r7, #23]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08c      	sub	sp, #48	; 0x30
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
 8008680:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008682:	2301      	movs	r3, #1
 8008684:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008692:	2b01      	cmp	r3, #1
 8008694:	d101      	bne.n	800869a <HAL_SPI_TransmitReceive+0x26>
 8008696:	2302      	movs	r3, #2
 8008698:	e18a      	b.n	80089b0 <HAL_SPI_TransmitReceive+0x33c>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086a2:	f7f9 ffcd 	bl	8002640 <HAL_GetTick>
 80086a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80086b8:	887b      	ldrh	r3, [r7, #2]
 80086ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80086bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d00f      	beq.n	80086e4 <HAL_SPI_TransmitReceive+0x70>
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ca:	d107      	bne.n	80086dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d103      	bne.n	80086dc <HAL_SPI_TransmitReceive+0x68>
 80086d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086d8:	2b04      	cmp	r3, #4
 80086da:	d003      	beq.n	80086e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80086dc:	2302      	movs	r3, #2
 80086de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80086e2:	e15b      	b.n	800899c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d005      	beq.n	80086f6 <HAL_SPI_TransmitReceive+0x82>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <HAL_SPI_TransmitReceive+0x82>
 80086f0:	887b      	ldrh	r3, [r7, #2]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d103      	bne.n	80086fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80086fc:	e14e      	b.n	800899c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b04      	cmp	r3, #4
 8008708:	d003      	beq.n	8008712 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2205      	movs	r2, #5
 800870e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	887a      	ldrh	r2, [r7, #2]
 8008722:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	887a      	ldrh	r2, [r7, #2]
 8008728:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	887a      	ldrh	r2, [r7, #2]
 8008734:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	887a      	ldrh	r2, [r7, #2]
 800873a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008752:	2b40      	cmp	r3, #64	; 0x40
 8008754:	d007      	beq.n	8008766 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008764:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800876e:	d178      	bne.n	8008862 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <HAL_SPI_TransmitReceive+0x10a>
 8008778:	8b7b      	ldrh	r3, [r7, #26]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d166      	bne.n	800884c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008782:	881a      	ldrh	r2, [r3, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	1c9a      	adds	r2, r3, #2
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008798:	b29b      	uxth	r3, r3
 800879a:	3b01      	subs	r3, #1
 800879c:	b29a      	uxth	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087a2:	e053      	b.n	800884c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f003 0302 	and.w	r3, r3, #2
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d11b      	bne.n	80087ea <HAL_SPI_TransmitReceive+0x176>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d016      	beq.n	80087ea <HAL_SPI_TransmitReceive+0x176>
 80087bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d113      	bne.n	80087ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	881a      	ldrh	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d2:	1c9a      	adds	r2, r3, #2
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087dc:	b29b      	uxth	r3, r3
 80087de:	3b01      	subs	r3, #1
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d119      	bne.n	800882c <HAL_SPI_TransmitReceive+0x1b8>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d014      	beq.n	800882c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	b292      	uxth	r2, r2
 800880e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008814:	1c9a      	adds	r2, r3, #2
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800881e:	b29b      	uxth	r3, r3
 8008820:	3b01      	subs	r3, #1
 8008822:	b29a      	uxth	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008828:	2301      	movs	r3, #1
 800882a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800882c:	f7f9 ff08 	bl	8002640 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008838:	429a      	cmp	r2, r3
 800883a:	d807      	bhi.n	800884c <HAL_SPI_TransmitReceive+0x1d8>
 800883c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d003      	beq.n	800884c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800884a:	e0a7      	b.n	800899c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008850:	b29b      	uxth	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1a6      	bne.n	80087a4 <HAL_SPI_TransmitReceive+0x130>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800885a:	b29b      	uxth	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1a1      	bne.n	80087a4 <HAL_SPI_TransmitReceive+0x130>
 8008860:	e07c      	b.n	800895c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <HAL_SPI_TransmitReceive+0x1fc>
 800886a:	8b7b      	ldrh	r3, [r7, #26]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d16b      	bne.n	8008948 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	330c      	adds	r3, #12
 800887a:	7812      	ldrb	r2, [r2, #0]
 800887c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800888c:	b29b      	uxth	r3, r3
 800888e:	3b01      	subs	r3, #1
 8008890:	b29a      	uxth	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008896:	e057      	b.n	8008948 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d11c      	bne.n	80088e0 <HAL_SPI_TransmitReceive+0x26c>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d017      	beq.n	80088e0 <HAL_SPI_TransmitReceive+0x26c>
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d114      	bne.n	80088e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	330c      	adds	r3, #12
 80088c0:	7812      	ldrb	r2, [r2, #0]
 80088c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	3b01      	subs	r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d119      	bne.n	8008922 <HAL_SPI_TransmitReceive+0x2ae>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d014      	beq.n	8008922 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	b2d2      	uxtb	r2, r2
 8008904:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008914:	b29b      	uxth	r3, r3
 8008916:	3b01      	subs	r3, #1
 8008918:	b29a      	uxth	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800891e:	2301      	movs	r3, #1
 8008920:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008922:	f7f9 fe8d 	bl	8002640 <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800892e:	429a      	cmp	r2, r3
 8008930:	d803      	bhi.n	800893a <HAL_SPI_TransmitReceive+0x2c6>
 8008932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008938:	d102      	bne.n	8008940 <HAL_SPI_TransmitReceive+0x2cc>
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008946:	e029      	b.n	800899c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800894c:	b29b      	uxth	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1a2      	bne.n	8008898 <HAL_SPI_TransmitReceive+0x224>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008956:	b29b      	uxth	r3, r3
 8008958:	2b00      	cmp	r3, #0
 800895a:	d19d      	bne.n	8008898 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800895c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 f925 	bl	8008bb0 <SPI_EndRxTxTransaction>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d006      	beq.n	800897a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2220      	movs	r2, #32
 8008976:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008978:	e010      	b.n	800899c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10b      	bne.n	800899a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008982:	2300      	movs	r3, #0
 8008984:	617b      	str	r3, [r7, #20]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	617b      	str	r3, [r7, #20]
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	e000      	b.n	800899c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800899a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3730      	adds	r7, #48	; 0x30
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089c6:	b2db      	uxtb	r3, r3
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	4613      	mov	r3, r2
 80089e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80089e4:	f7f9 fe2c 	bl	8002640 <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ec:	1a9b      	subs	r3, r3, r2
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	4413      	add	r3, r2
 80089f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80089f4:	f7f9 fe24 	bl	8002640 <HAL_GetTick>
 80089f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80089fa:	4b39      	ldr	r3, [pc, #228]	; (8008ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	015b      	lsls	r3, r3, #5
 8008a00:	0d1b      	lsrs	r3, r3, #20
 8008a02:	69fa      	ldr	r2, [r7, #28]
 8008a04:	fb02 f303 	mul.w	r3, r2, r3
 8008a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a0a:	e054      	b.n	8008ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d050      	beq.n	8008ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a14:	f7f9 fe14 	bl	8002640 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d902      	bls.n	8008a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d13d      	bne.n	8008aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a42:	d111      	bne.n	8008a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a4c:	d004      	beq.n	8008a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a56:	d107      	bne.n	8008a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a70:	d10f      	bne.n	8008a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e017      	b.n	8008ad6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	4013      	ands	r3, r2
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	bf0c      	ite	eq
 8008ac6:	2301      	moveq	r3, #1
 8008ac8:	2300      	movne	r3, #0
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	461a      	mov	r2, r3
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d19b      	bne.n	8008a0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3720      	adds	r7, #32
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	20000000 	.word	0x20000000

08008ae4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af02      	add	r7, sp, #8
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008af8:	d111      	bne.n	8008b1e <SPI_EndRxTransaction+0x3a>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b02:	d004      	beq.n	8008b0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b0c:	d107      	bne.n	8008b1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b1c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b26:	d12a      	bne.n	8008b7e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b30:	d012      	beq.n	8008b58 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2180      	movs	r1, #128	; 0x80
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f7ff ff49 	bl	80089d4 <SPI_WaitFlagStateUntilTimeout>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d02d      	beq.n	8008ba4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b4c:	f043 0220 	orr.w	r2, r3, #32
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e026      	b.n	8008ba6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2101      	movs	r1, #1
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f7ff ff36 	bl	80089d4 <SPI_WaitFlagStateUntilTimeout>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d01a      	beq.n	8008ba4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b72:	f043 0220 	orr.w	r2, r3, #32
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e013      	b.n	8008ba6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2200      	movs	r2, #0
 8008b86:	2101      	movs	r1, #1
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f7ff ff23 	bl	80089d4 <SPI_WaitFlagStateUntilTimeout>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d007      	beq.n	8008ba4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b98:	f043 0220 	orr.w	r2, r3, #32
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e000      	b.n	8008ba6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af02      	add	r7, sp, #8
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008bbc:	4b1b      	ldr	r3, [pc, #108]	; (8008c2c <SPI_EndRxTxTransaction+0x7c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a1b      	ldr	r2, [pc, #108]	; (8008c30 <SPI_EndRxTxTransaction+0x80>)
 8008bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc6:	0d5b      	lsrs	r3, r3, #21
 8008bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bcc:	fb02 f303 	mul.w	r3, r2, r3
 8008bd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bda:	d112      	bne.n	8008c02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2200      	movs	r2, #0
 8008be4:	2180      	movs	r1, #128	; 0x80
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f7ff fef4 	bl	80089d4 <SPI_WaitFlagStateUntilTimeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d016      	beq.n	8008c20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf6:	f043 0220 	orr.w	r2, r3, #32
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e00f      	b.n	8008c22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00a      	beq.n	8008c1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c18:	2b80      	cmp	r3, #128	; 0x80
 8008c1a:	d0f2      	beq.n	8008c02 <SPI_EndRxTxTransaction+0x52>
 8008c1c:	e000      	b.n	8008c20 <SPI_EndRxTxTransaction+0x70>
        break;
 8008c1e:	bf00      	nop
  }

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3718      	adds	r7, #24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000000 	.word	0x20000000
 8008c30:	165e9f81 	.word	0x165e9f81

08008c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e041      	b.n	8008cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7f9 faa4 	bl	80021a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4619      	mov	r1, r3
 8008c72:	4610      	mov	r0, r2
 8008c74:	f000 f984 	bl	8008f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
	...

08008cd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d001      	beq.n	8008cec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e046      	b.n	8008d7a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a23      	ldr	r2, [pc, #140]	; (8008d88 <HAL_TIM_Base_Start+0xb4>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d022      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d06:	d01d      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a1f      	ldr	r2, [pc, #124]	; (8008d8c <HAL_TIM_Base_Start+0xb8>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d018      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a1e      	ldr	r2, [pc, #120]	; (8008d90 <HAL_TIM_Base_Start+0xbc>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d013      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a1c      	ldr	r2, [pc, #112]	; (8008d94 <HAL_TIM_Base_Start+0xc0>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d00e      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a1b      	ldr	r2, [pc, #108]	; (8008d98 <HAL_TIM_Base_Start+0xc4>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d009      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a19      	ldr	r2, [pc, #100]	; (8008d9c <HAL_TIM_Base_Start+0xc8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d004      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a18      	ldr	r2, [pc, #96]	; (8008da0 <HAL_TIM_Base_Start+0xcc>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d111      	bne.n	8008d68 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f003 0307 	and.w	r3, r3, #7
 8008d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b06      	cmp	r3, #6
 8008d54:	d010      	beq.n	8008d78 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f042 0201 	orr.w	r2, r2, #1
 8008d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d66:	e007      	b.n	8008d78 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f042 0201 	orr.w	r2, r2, #1
 8008d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	40010000 	.word	0x40010000
 8008d8c:	40000400 	.word	0x40000400
 8008d90:	40000800 	.word	0x40000800
 8008d94:	40000c00 	.word	0x40000c00
 8008d98:	40010400 	.word	0x40010400
 8008d9c:	40014000 	.word	0x40014000
 8008da0:	40001800 	.word	0x40001800

08008da4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6a1a      	ldr	r2, [r3, #32]
 8008db2:	f241 1311 	movw	r3, #4369	; 0x1111
 8008db6:	4013      	ands	r3, r2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10f      	bne.n	8008ddc <HAL_TIM_Base_Stop+0x38>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6a1a      	ldr	r2, [r3, #32]
 8008dc2:	f240 4344 	movw	r3, #1092	; 0x444
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d107      	bne.n	8008ddc <HAL_TIM_Base_Stop+0x38>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0201 	bic.w	r2, r2, #1
 8008dda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b084      	sub	sp, #16
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d101      	bne.n	8008e0e <HAL_TIM_ConfigClockSource+0x1c>
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	e0b4      	b.n	8008f78 <HAL_TIM_ConfigClockSource+0x186>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e34:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e46:	d03e      	beq.n	8008ec6 <HAL_TIM_ConfigClockSource+0xd4>
 8008e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e4c:	f200 8087 	bhi.w	8008f5e <HAL_TIM_ConfigClockSource+0x16c>
 8008e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e54:	f000 8086 	beq.w	8008f64 <HAL_TIM_ConfigClockSource+0x172>
 8008e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e5c:	d87f      	bhi.n	8008f5e <HAL_TIM_ConfigClockSource+0x16c>
 8008e5e:	2b70      	cmp	r3, #112	; 0x70
 8008e60:	d01a      	beq.n	8008e98 <HAL_TIM_ConfigClockSource+0xa6>
 8008e62:	2b70      	cmp	r3, #112	; 0x70
 8008e64:	d87b      	bhi.n	8008f5e <HAL_TIM_ConfigClockSource+0x16c>
 8008e66:	2b60      	cmp	r3, #96	; 0x60
 8008e68:	d050      	beq.n	8008f0c <HAL_TIM_ConfigClockSource+0x11a>
 8008e6a:	2b60      	cmp	r3, #96	; 0x60
 8008e6c:	d877      	bhi.n	8008f5e <HAL_TIM_ConfigClockSource+0x16c>
 8008e6e:	2b50      	cmp	r3, #80	; 0x50
 8008e70:	d03c      	beq.n	8008eec <HAL_TIM_ConfigClockSource+0xfa>
 8008e72:	2b50      	cmp	r3, #80	; 0x50
 8008e74:	d873      	bhi.n	8008f5e <HAL_TIM_ConfigClockSource+0x16c>
 8008e76:	2b40      	cmp	r3, #64	; 0x40
 8008e78:	d058      	beq.n	8008f2c <HAL_TIM_ConfigClockSource+0x13a>
 8008e7a:	2b40      	cmp	r3, #64	; 0x40
 8008e7c:	d86f      	bhi.n	8008f5e <HAL_TIM_ConfigClockSource+0x16c>
 8008e7e:	2b30      	cmp	r3, #48	; 0x30
 8008e80:	d064      	beq.n	8008f4c <HAL_TIM_ConfigClockSource+0x15a>
 8008e82:	2b30      	cmp	r3, #48	; 0x30
 8008e84:	d86b      	bhi.n	8008f5e <HAL_TIM_ConfigClockSource+0x16c>
 8008e86:	2b20      	cmp	r3, #32
 8008e88:	d060      	beq.n	8008f4c <HAL_TIM_ConfigClockSource+0x15a>
 8008e8a:	2b20      	cmp	r3, #32
 8008e8c:	d867      	bhi.n	8008f5e <HAL_TIM_ConfigClockSource+0x16c>
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d05c      	beq.n	8008f4c <HAL_TIM_ConfigClockSource+0x15a>
 8008e92:	2b10      	cmp	r3, #16
 8008e94:	d05a      	beq.n	8008f4c <HAL_TIM_ConfigClockSource+0x15a>
 8008e96:	e062      	b.n	8008f5e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6818      	ldr	r0, [r3, #0]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	6899      	ldr	r1, [r3, #8]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f000 f984 	bl	80091b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008eba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	609a      	str	r2, [r3, #8]
      break;
 8008ec4:	e04f      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	6899      	ldr	r1, [r3, #8]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f000 f96d 	bl	80091b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689a      	ldr	r2, [r3, #8]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ee8:	609a      	str	r2, [r3, #8]
      break;
 8008eea:	e03c      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6818      	ldr	r0, [r3, #0]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	6859      	ldr	r1, [r3, #4]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f000 f8e1 	bl	80090c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2150      	movs	r1, #80	; 0x50
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 f93a 	bl	800917e <TIM_ITRx_SetConfig>
      break;
 8008f0a:	e02c      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	6859      	ldr	r1, [r3, #4]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	f000 f900 	bl	800911e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2160      	movs	r1, #96	; 0x60
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 f92a 	bl	800917e <TIM_ITRx_SetConfig>
      break;
 8008f2a:	e01c      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	6859      	ldr	r1, [r3, #4]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	f000 f8c1 	bl	80090c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2140      	movs	r1, #64	; 0x40
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f91a 	bl	800917e <TIM_ITRx_SetConfig>
      break;
 8008f4a:	e00c      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4619      	mov	r1, r3
 8008f56:	4610      	mov	r0, r2
 8008f58:	f000 f911 	bl	800917e <TIM_ITRx_SetConfig>
      break;
 8008f5c:	e003      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	73fb      	strb	r3, [r7, #15]
      break;
 8008f62:	e000      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008f64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a40      	ldr	r2, [pc, #256]	; (8009094 <TIM_Base_SetConfig+0x114>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d013      	beq.n	8008fc0 <TIM_Base_SetConfig+0x40>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f9e:	d00f      	beq.n	8008fc0 <TIM_Base_SetConfig+0x40>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a3d      	ldr	r2, [pc, #244]	; (8009098 <TIM_Base_SetConfig+0x118>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d00b      	beq.n	8008fc0 <TIM_Base_SetConfig+0x40>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a3c      	ldr	r2, [pc, #240]	; (800909c <TIM_Base_SetConfig+0x11c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d007      	beq.n	8008fc0 <TIM_Base_SetConfig+0x40>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a3b      	ldr	r2, [pc, #236]	; (80090a0 <TIM_Base_SetConfig+0x120>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d003      	beq.n	8008fc0 <TIM_Base_SetConfig+0x40>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a3a      	ldr	r2, [pc, #232]	; (80090a4 <TIM_Base_SetConfig+0x124>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d108      	bne.n	8008fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a2f      	ldr	r2, [pc, #188]	; (8009094 <TIM_Base_SetConfig+0x114>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d02b      	beq.n	8009032 <TIM_Base_SetConfig+0xb2>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe0:	d027      	beq.n	8009032 <TIM_Base_SetConfig+0xb2>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a2c      	ldr	r2, [pc, #176]	; (8009098 <TIM_Base_SetConfig+0x118>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d023      	beq.n	8009032 <TIM_Base_SetConfig+0xb2>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a2b      	ldr	r2, [pc, #172]	; (800909c <TIM_Base_SetConfig+0x11c>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d01f      	beq.n	8009032 <TIM_Base_SetConfig+0xb2>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a2a      	ldr	r2, [pc, #168]	; (80090a0 <TIM_Base_SetConfig+0x120>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d01b      	beq.n	8009032 <TIM_Base_SetConfig+0xb2>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a29      	ldr	r2, [pc, #164]	; (80090a4 <TIM_Base_SetConfig+0x124>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d017      	beq.n	8009032 <TIM_Base_SetConfig+0xb2>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a28      	ldr	r2, [pc, #160]	; (80090a8 <TIM_Base_SetConfig+0x128>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d013      	beq.n	8009032 <TIM_Base_SetConfig+0xb2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a27      	ldr	r2, [pc, #156]	; (80090ac <TIM_Base_SetConfig+0x12c>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d00f      	beq.n	8009032 <TIM_Base_SetConfig+0xb2>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a26      	ldr	r2, [pc, #152]	; (80090b0 <TIM_Base_SetConfig+0x130>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d00b      	beq.n	8009032 <TIM_Base_SetConfig+0xb2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a25      	ldr	r2, [pc, #148]	; (80090b4 <TIM_Base_SetConfig+0x134>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d007      	beq.n	8009032 <TIM_Base_SetConfig+0xb2>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a24      	ldr	r2, [pc, #144]	; (80090b8 <TIM_Base_SetConfig+0x138>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d003      	beq.n	8009032 <TIM_Base_SetConfig+0xb2>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a23      	ldr	r2, [pc, #140]	; (80090bc <TIM_Base_SetConfig+0x13c>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d108      	bne.n	8009044 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	4313      	orrs	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	4313      	orrs	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	689a      	ldr	r2, [r3, #8]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a0a      	ldr	r2, [pc, #40]	; (8009094 <TIM_Base_SetConfig+0x114>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d003      	beq.n	8009078 <TIM_Base_SetConfig+0xf8>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a0c      	ldr	r2, [pc, #48]	; (80090a4 <TIM_Base_SetConfig+0x124>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d103      	bne.n	8009080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	691a      	ldr	r2, [r3, #16]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	615a      	str	r2, [r3, #20]
}
 8009086:	bf00      	nop
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	40010000 	.word	0x40010000
 8009098:	40000400 	.word	0x40000400
 800909c:	40000800 	.word	0x40000800
 80090a0:	40000c00 	.word	0x40000c00
 80090a4:	40010400 	.word	0x40010400
 80090a8:	40014000 	.word	0x40014000
 80090ac:	40014400 	.word	0x40014400
 80090b0:	40014800 	.word	0x40014800
 80090b4:	40001800 	.word	0x40001800
 80090b8:	40001c00 	.word	0x40001c00
 80090bc:	40002000 	.word	0x40002000

080090c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	f023 0201 	bic.w	r2, r3, #1
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	011b      	lsls	r3, r3, #4
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f023 030a 	bic.w	r3, r3, #10
 80090fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	4313      	orrs	r3, r2
 8009104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	621a      	str	r2, [r3, #32]
}
 8009112:	bf00      	nop
 8009114:	371c      	adds	r7, #28
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800911e:	b480      	push	{r7}
 8009120:	b087      	sub	sp, #28
 8009122:	af00      	add	r7, sp, #0
 8009124:	60f8      	str	r0, [r7, #12]
 8009126:	60b9      	str	r1, [r7, #8]
 8009128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	f023 0210 	bic.w	r2, r3, #16
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	031b      	lsls	r3, r3, #12
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	4313      	orrs	r3, r2
 8009152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800915a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	011b      	lsls	r3, r3, #4
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	4313      	orrs	r3, r2
 8009164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	621a      	str	r2, [r3, #32]
}
 8009172:	bf00      	nop
 8009174:	371c      	adds	r7, #28
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4313      	orrs	r3, r2
 800919c:	f043 0307 	orr.w	r3, r3, #7
 80091a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	609a      	str	r2, [r3, #8]
}
 80091a8:	bf00      	nop
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	021a      	lsls	r2, r3, #8
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	431a      	orrs	r2, r3
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	4313      	orrs	r3, r2
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	4313      	orrs	r3, r2
 80091e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	609a      	str	r2, [r3, #8]
}
 80091e8:	bf00      	nop
 80091ea:	371c      	adds	r7, #28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009204:	2b01      	cmp	r3, #1
 8009206:	d101      	bne.n	800920c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009208:	2302      	movs	r3, #2
 800920a:	e05a      	b.n	80092c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	4313      	orrs	r3, r2
 800923c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a21      	ldr	r2, [pc, #132]	; (80092d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d022      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009258:	d01d      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a1d      	ldr	r2, [pc, #116]	; (80092d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d018      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a1b      	ldr	r2, [pc, #108]	; (80092d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d013      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a1a      	ldr	r2, [pc, #104]	; (80092dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d00e      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a18      	ldr	r2, [pc, #96]	; (80092e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d009      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a17      	ldr	r2, [pc, #92]	; (80092e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d004      	beq.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a15      	ldr	r2, [pc, #84]	; (80092e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d10c      	bne.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800929c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	40010000 	.word	0x40010000
 80092d4:	40000400 	.word	0x40000400
 80092d8:	40000800 	.word	0x40000800
 80092dc:	40000c00 	.word	0x40000c00
 80092e0:	40010400 	.word	0x40010400
 80092e4:	40014000 	.word	0x40014000
 80092e8:	40001800 	.word	0x40001800

080092ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e03f      	b.n	800937e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7f8 ff80 	bl	8002218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2224      	movs	r2, #36	; 0x24
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800932e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fe1d 	bl	8009f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	691a      	ldr	r2, [r3, #16]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	695a      	ldr	r2, [r3, #20]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68da      	ldr	r2, [r3, #12]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2220      	movs	r2, #32
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b08a      	sub	sp, #40	; 0x28
 800938a:	af02      	add	r7, sp, #8
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	603b      	str	r3, [r7, #0]
 8009392:	4613      	mov	r3, r2
 8009394:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009396:	2300      	movs	r3, #0
 8009398:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b20      	cmp	r3, #32
 80093a4:	d17c      	bne.n	80094a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <HAL_UART_Transmit+0x2c>
 80093ac:	88fb      	ldrh	r3, [r7, #6]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e075      	b.n	80094a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d101      	bne.n	80093c4 <HAL_UART_Transmit+0x3e>
 80093c0:	2302      	movs	r3, #2
 80093c2:	e06e      	b.n	80094a2 <HAL_UART_Transmit+0x11c>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2221      	movs	r2, #33	; 0x21
 80093d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80093da:	f7f9 f931 	bl	8002640 <HAL_GetTick>
 80093de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	88fa      	ldrh	r2, [r7, #6]
 80093e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	88fa      	ldrh	r2, [r7, #6]
 80093ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093f4:	d108      	bne.n	8009408 <HAL_UART_Transmit+0x82>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d104      	bne.n	8009408 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80093fe:	2300      	movs	r3, #0
 8009400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	61bb      	str	r3, [r7, #24]
 8009406:	e003      	b.n	8009410 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009418:	e02a      	b.n	8009470 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2200      	movs	r2, #0
 8009422:	2180      	movs	r1, #128	; 0x80
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 fb9b 	bl	8009b60 <UART_WaitOnFlagUntilTimeout>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	e036      	b.n	80094a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10b      	bne.n	8009452 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009448:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	3302      	adds	r3, #2
 800944e:	61bb      	str	r3, [r7, #24]
 8009450:	e007      	b.n	8009462 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	781a      	ldrb	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	3301      	adds	r3, #1
 8009460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009466:	b29b      	uxth	r3, r3
 8009468:	3b01      	subs	r3, #1
 800946a:	b29a      	uxth	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009474:	b29b      	uxth	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1cf      	bne.n	800941a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	2200      	movs	r2, #0
 8009482:	2140      	movs	r1, #64	; 0x40
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 fb6b 	bl	8009b60 <UART_WaitOnFlagUntilTimeout>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e006      	b.n	80094a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2220      	movs	r2, #32
 8009498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	e000      	b.n	80094a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80094a0:	2302      	movs	r3, #2
  }
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3720      	adds	r7, #32
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b08a      	sub	sp, #40	; 0x28
 80094ae:	af02      	add	r7, sp, #8
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	60b9      	str	r1, [r7, #8]
 80094b4:	603b      	str	r3, [r7, #0]
 80094b6:	4613      	mov	r3, r2
 80094b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b20      	cmp	r3, #32
 80094c8:	f040 808c 	bne.w	80095e4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <HAL_UART_Receive+0x2e>
 80094d2:	88fb      	ldrh	r3, [r7, #6]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d101      	bne.n	80094dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e084      	b.n	80095e6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d101      	bne.n	80094ea <HAL_UART_Receive+0x40>
 80094e6:	2302      	movs	r3, #2
 80094e8:	e07d      	b.n	80095e6 <HAL_UART_Receive+0x13c>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2222      	movs	r2, #34	; 0x22
 80094fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009506:	f7f9 f89b 	bl	8002640 <HAL_GetTick>
 800950a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	88fa      	ldrh	r2, [r7, #6]
 8009510:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	88fa      	ldrh	r2, [r7, #6]
 8009516:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009520:	d108      	bne.n	8009534 <HAL_UART_Receive+0x8a>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d104      	bne.n	8009534 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800952a:	2300      	movs	r3, #0
 800952c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	61bb      	str	r3, [r7, #24]
 8009532:	e003      	b.n	800953c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009538:	2300      	movs	r3, #0
 800953a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009544:	e043      	b.n	80095ce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2200      	movs	r2, #0
 800954e:	2120      	movs	r1, #32
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 fb05 	bl	8009b60 <UART_WaitOnFlagUntilTimeout>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e042      	b.n	80095e6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10c      	bne.n	8009580 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	b29b      	uxth	r3, r3
 800956e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009572:	b29a      	uxth	r2, r3
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	3302      	adds	r3, #2
 800957c:	61bb      	str	r3, [r7, #24]
 800957e:	e01f      	b.n	80095c0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009588:	d007      	beq.n	800959a <HAL_UART_Receive+0xf0>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <HAL_UART_Receive+0xfe>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	701a      	strb	r2, [r3, #0]
 80095a6:	e008      	b.n	80095ba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	3301      	adds	r3, #1
 80095be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1b6      	bne.n	8009546 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2220      	movs	r2, #32
 80095dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	e000      	b.n	80095e6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80095e4:	2302      	movs	r3, #2
  }
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3720      	adds	r7, #32
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b0ba      	sub	sp, #232	; 0xe8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009616:	2300      	movs	r3, #0
 8009618:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800961c:	2300      	movs	r3, #0
 800961e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009626:	f003 030f 	and.w	r3, r3, #15
 800962a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800962e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10f      	bne.n	8009656 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800963a:	f003 0320 	and.w	r3, r3, #32
 800963e:	2b00      	cmp	r3, #0
 8009640:	d009      	beq.n	8009656 <HAL_UART_IRQHandler+0x66>
 8009642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009646:	f003 0320 	and.w	r3, r3, #32
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fbd3 	bl	8009dfa <UART_Receive_IT>
      return;
 8009654:	e256      	b.n	8009b04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 80de 	beq.w	800981c <HAL_UART_IRQHandler+0x22c>
 8009660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	2b00      	cmp	r3, #0
 800966a:	d106      	bne.n	800967a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800966c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009670:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 80d1 	beq.w	800981c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800967a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00b      	beq.n	800969e <HAL_UART_IRQHandler+0xae>
 8009686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800968a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800968e:	2b00      	cmp	r3, #0
 8009690:	d005      	beq.n	800969e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009696:	f043 0201 	orr.w	r2, r3, #1
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800969e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a2:	f003 0304 	and.w	r3, r3, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00b      	beq.n	80096c2 <HAL_UART_IRQHandler+0xd2>
 80096aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ba:	f043 0202 	orr.w	r2, r3, #2
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c6:	f003 0302 	and.w	r3, r3, #2
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00b      	beq.n	80096e6 <HAL_UART_IRQHandler+0xf6>
 80096ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d005      	beq.n	80096e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	f043 0204 	orr.w	r2, r3, #4
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80096e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ea:	f003 0308 	and.w	r3, r3, #8
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d011      	beq.n	8009716 <HAL_UART_IRQHandler+0x126>
 80096f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d105      	bne.n	800970a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80096fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	d005      	beq.n	8009716 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970e:	f043 0208 	orr.w	r2, r3, #8
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 81ed 	beq.w	8009afa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009724:	f003 0320 	and.w	r3, r3, #32
 8009728:	2b00      	cmp	r3, #0
 800972a:	d008      	beq.n	800973e <HAL_UART_IRQHandler+0x14e>
 800972c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009730:	f003 0320 	and.w	r3, r3, #32
 8009734:	2b00      	cmp	r3, #0
 8009736:	d002      	beq.n	800973e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fb5e 	bl	8009dfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009748:	2b40      	cmp	r3, #64	; 0x40
 800974a:	bf0c      	ite	eq
 800974c:	2301      	moveq	r3, #1
 800974e:	2300      	movne	r3, #0
 8009750:	b2db      	uxtb	r3, r3
 8009752:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	f003 0308 	and.w	r3, r3, #8
 800975e:	2b00      	cmp	r3, #0
 8009760:	d103      	bne.n	800976a <HAL_UART_IRQHandler+0x17a>
 8009762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009766:	2b00      	cmp	r3, #0
 8009768:	d04f      	beq.n	800980a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fa66 	bl	8009c3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800977a:	2b40      	cmp	r3, #64	; 0x40
 800977c:	d141      	bne.n	8009802 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3314      	adds	r3, #20
 8009784:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009788:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009794:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800979c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3314      	adds	r3, #20
 80097a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80097aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80097ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80097b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80097ba:	e841 2300 	strex	r3, r2, [r1]
 80097be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80097c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1d9      	bne.n	800977e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d013      	beq.n	80097fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	4a7d      	ldr	r2, [pc, #500]	; (80099cc <HAL_UART_IRQHandler+0x3dc>)
 80097d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097de:	4618      	mov	r0, r3
 80097e0:	f7f9 ff02 	bl	80035e8 <HAL_DMA_Abort_IT>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d016      	beq.n	8009818 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097f4:	4610      	mov	r0, r2
 80097f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097f8:	e00e      	b.n	8009818 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f99a 	bl	8009b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009800:	e00a      	b.n	8009818 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f996 	bl	8009b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009808:	e006      	b.n	8009818 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f992 	bl	8009b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009816:	e170      	b.n	8009afa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009818:	bf00      	nop
    return;
 800981a:	e16e      	b.n	8009afa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009820:	2b01      	cmp	r3, #1
 8009822:	f040 814a 	bne.w	8009aba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800982a:	f003 0310 	and.w	r3, r3, #16
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 8143 	beq.w	8009aba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009838:	f003 0310 	and.w	r3, r3, #16
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 813c 	beq.w	8009aba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009842:	2300      	movs	r3, #0
 8009844:	60bb      	str	r3, [r7, #8]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	60bb      	str	r3, [r7, #8]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	60bb      	str	r3, [r7, #8]
 8009856:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009862:	2b40      	cmp	r3, #64	; 0x40
 8009864:	f040 80b4 	bne.w	80099d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009874:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 8140 	beq.w	8009afe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009886:	429a      	cmp	r2, r3
 8009888:	f080 8139 	bcs.w	8009afe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009892:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800989e:	f000 8088 	beq.w	80099b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	330c      	adds	r3, #12
 80098a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098b0:	e853 3f00 	ldrex	r3, [r3]
 80098b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80098b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	330c      	adds	r3, #12
 80098ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80098ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80098da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80098e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1d9      	bne.n	80098a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3314      	adds	r3, #20
 80098f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098f8:	e853 3f00 	ldrex	r3, [r3]
 80098fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009900:	f023 0301 	bic.w	r3, r3, #1
 8009904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3314      	adds	r3, #20
 800990e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009912:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009916:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009918:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800991a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e1      	bne.n	80098ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3314      	adds	r3, #20
 8009930:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009934:	e853 3f00 	ldrex	r3, [r3]
 8009938:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800993a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800993c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009940:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	3314      	adds	r3, #20
 800994a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800994e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009950:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009952:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009954:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009956:	e841 2300 	strex	r3, r2, [r1]
 800995a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800995c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1e3      	bne.n	800992a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2220      	movs	r2, #32
 8009966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	330c      	adds	r3, #12
 8009976:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800997a:	e853 3f00 	ldrex	r3, [r3]
 800997e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009982:	f023 0310 	bic.w	r3, r3, #16
 8009986:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	330c      	adds	r3, #12
 8009990:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009994:	65ba      	str	r2, [r7, #88]	; 0x58
 8009996:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800999a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e3      	bne.n	8009970 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7f9 fdab 	bl	8003508 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	b29b      	uxth	r3, r3
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f8c0 	bl	8009b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099c8:	e099      	b.n	8009afe <HAL_UART_IRQHandler+0x50e>
 80099ca:	bf00      	nop
 80099cc:	08009d03 	.word	0x08009d03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099d8:	b29b      	uxth	r3, r3
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 808b 	beq.w	8009b02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80099ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f000 8086 	beq.w	8009b02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	330c      	adds	r3, #12
 80099fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a00:	e853 3f00 	ldrex	r3, [r3]
 8009a04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	330c      	adds	r3, #12
 8009a16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009a1a:	647a      	str	r2, [r7, #68]	; 0x44
 8009a1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a22:	e841 2300 	strex	r3, r2, [r1]
 8009a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1e3      	bne.n	80099f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3314      	adds	r3, #20
 8009a34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	e853 3f00 	ldrex	r3, [r3]
 8009a3c:	623b      	str	r3, [r7, #32]
   return(result);
 8009a3e:	6a3b      	ldr	r3, [r7, #32]
 8009a40:	f023 0301 	bic.w	r3, r3, #1
 8009a44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3314      	adds	r3, #20
 8009a4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a52:	633a      	str	r2, [r7, #48]	; 0x30
 8009a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e3      	bne.n	8009a2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	330c      	adds	r3, #12
 8009a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	e853 3f00 	ldrex	r3, [r3]
 8009a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f023 0310 	bic.w	r3, r3, #16
 8009a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	330c      	adds	r3, #12
 8009a94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009a98:	61fa      	str	r2, [r7, #28]
 8009a9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9c:	69b9      	ldr	r1, [r7, #24]
 8009a9e:	69fa      	ldr	r2, [r7, #28]
 8009aa0:	e841 2300 	strex	r3, r2, [r1]
 8009aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1e3      	bne.n	8009a74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f848 	bl	8009b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ab8:	e023      	b.n	8009b02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d009      	beq.n	8009ada <HAL_UART_IRQHandler+0x4ea>
 8009ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f929 	bl	8009d2a <UART_Transmit_IT>
    return;
 8009ad8:	e014      	b.n	8009b04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00e      	beq.n	8009b04 <HAL_UART_IRQHandler+0x514>
 8009ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d008      	beq.n	8009b04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f969 	bl	8009dca <UART_EndTransmit_IT>
    return;
 8009af8:	e004      	b.n	8009b04 <HAL_UART_IRQHandler+0x514>
    return;
 8009afa:	bf00      	nop
 8009afc:	e002      	b.n	8009b04 <HAL_UART_IRQHandler+0x514>
      return;
 8009afe:	bf00      	nop
 8009b00:	e000      	b.n	8009b04 <HAL_UART_IRQHandler+0x514>
      return;
 8009b02:	bf00      	nop
  }
}
 8009b04:	37e8      	adds	r7, #232	; 0xe8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop

08009b0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b090      	sub	sp, #64	; 0x40
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	603b      	str	r3, [r7, #0]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b70:	e050      	b.n	8009c14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b78:	d04c      	beq.n	8009c14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d007      	beq.n	8009b90 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b80:	f7f8 fd5e 	bl	8002640 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d241      	bcs.n	8009c14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	330c      	adds	r3, #12
 8009b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9a:	e853 3f00 	ldrex	r3, [r3]
 8009b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	330c      	adds	r3, #12
 8009bae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bb0:	637a      	str	r2, [r7, #52]	; 0x34
 8009bb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bb8:	e841 2300 	strex	r3, r2, [r1]
 8009bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1e5      	bne.n	8009b90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3314      	adds	r3, #20
 8009bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	e853 3f00 	ldrex	r3, [r3]
 8009bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	f023 0301 	bic.w	r3, r3, #1
 8009bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	3314      	adds	r3, #20
 8009be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009be4:	623a      	str	r2, [r7, #32]
 8009be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be8:	69f9      	ldr	r1, [r7, #28]
 8009bea:	6a3a      	ldr	r2, [r7, #32]
 8009bec:	e841 2300 	strex	r3, r2, [r1]
 8009bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1e5      	bne.n	8009bc4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2220      	movs	r2, #32
 8009c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009c10:	2303      	movs	r3, #3
 8009c12:	e00f      	b.n	8009c34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	bf0c      	ite	eq
 8009c24:	2301      	moveq	r3, #1
 8009c26:	2300      	movne	r3, #0
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d09f      	beq.n	8009b72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3740      	adds	r7, #64	; 0x40
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b095      	sub	sp, #84	; 0x54
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	330c      	adds	r3, #12
 8009c4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4e:	e853 3f00 	ldrex	r3, [r3]
 8009c52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	330c      	adds	r3, #12
 8009c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c64:	643a      	str	r2, [r7, #64]	; 0x40
 8009c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c6c:	e841 2300 	strex	r3, r2, [r1]
 8009c70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e5      	bne.n	8009c44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3314      	adds	r3, #20
 8009c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	e853 3f00 	ldrex	r3, [r3]
 8009c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	f023 0301 	bic.w	r3, r3, #1
 8009c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3314      	adds	r3, #20
 8009c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ca0:	e841 2300 	strex	r3, r2, [r1]
 8009ca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e5      	bne.n	8009c78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d119      	bne.n	8009ce8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	330c      	adds	r3, #12
 8009cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	e853 3f00 	ldrex	r3, [r3]
 8009cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	f023 0310 	bic.w	r3, r3, #16
 8009cca:	647b      	str	r3, [r7, #68]	; 0x44
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	330c      	adds	r3, #12
 8009cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cd4:	61ba      	str	r2, [r7, #24]
 8009cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd8:	6979      	ldr	r1, [r7, #20]
 8009cda:	69ba      	ldr	r2, [r7, #24]
 8009cdc:	e841 2300 	strex	r3, r2, [r1]
 8009ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1e5      	bne.n	8009cb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2220      	movs	r2, #32
 8009cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009cf6:	bf00      	nop
 8009cf8:	3754      	adds	r7, #84	; 0x54
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f7ff ff09 	bl	8009b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d22:	bf00      	nop
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b085      	sub	sp, #20
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b21      	cmp	r3, #33	; 0x21
 8009d3c:	d13e      	bne.n	8009dbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d46:	d114      	bne.n	8009d72 <UART_Transmit_IT+0x48>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d110      	bne.n	8009d72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	881b      	ldrh	r3, [r3, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	1c9a      	adds	r2, r3, #2
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	621a      	str	r2, [r3, #32]
 8009d70:	e008      	b.n	8009d84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	1c59      	adds	r1, r3, #1
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	6211      	str	r1, [r2, #32]
 8009d7c:	781a      	ldrb	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	4619      	mov	r1, r3
 8009d92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10f      	bne.n	8009db8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009da6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009db6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	e000      	b.n	8009dbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009dbc:	2302      	movs	r3, #2
  }
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68da      	ldr	r2, [r3, #12]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009de0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2220      	movs	r2, #32
 8009de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff fe8e 	bl	8009b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b08c      	sub	sp, #48	; 0x30
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	2b22      	cmp	r3, #34	; 0x22
 8009e0c:	f040 80ab 	bne.w	8009f66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e18:	d117      	bne.n	8009e4a <UART_Receive_IT+0x50>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d113      	bne.n	8009e4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e42:	1c9a      	adds	r2, r3, #2
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	629a      	str	r2, [r3, #40]	; 0x28
 8009e48:	e026      	b.n	8009e98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009e50:	2300      	movs	r3, #0
 8009e52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e5c:	d007      	beq.n	8009e6e <UART_Receive_IT+0x74>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10a      	bne.n	8009e7c <UART_Receive_IT+0x82>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d106      	bne.n	8009e7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e78:	701a      	strb	r2, [r3, #0]
 8009e7a:	e008      	b.n	8009e8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d15a      	bne.n	8009f62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68da      	ldr	r2, [r3, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f022 0220 	bic.w	r2, r2, #32
 8009eba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009eca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	695a      	ldr	r2, [r3, #20]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f022 0201 	bic.w	r2, r2, #1
 8009eda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2220      	movs	r2, #32
 8009ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d135      	bne.n	8009f58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	330c      	adds	r3, #12
 8009ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	613b      	str	r3, [r7, #16]
   return(result);
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f023 0310 	bic.w	r3, r3, #16
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	330c      	adds	r3, #12
 8009f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f12:	623a      	str	r2, [r7, #32]
 8009f14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	69f9      	ldr	r1, [r7, #28]
 8009f18:	6a3a      	ldr	r2, [r7, #32]
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e5      	bne.n	8009ef2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 0310 	and.w	r3, r3, #16
 8009f30:	2b10      	cmp	r3, #16
 8009f32:	d10a      	bne.n	8009f4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f34:	2300      	movs	r3, #0
 8009f36:	60fb      	str	r3, [r7, #12]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	60fb      	str	r3, [r7, #12]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	60fb      	str	r3, [r7, #12]
 8009f48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7ff fdf9 	bl	8009b48 <HAL_UARTEx_RxEventCallback>
 8009f56:	e002      	b.n	8009f5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff fde1 	bl	8009b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	e002      	b.n	8009f68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	e000      	b.n	8009f68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009f66:	2302      	movs	r3, #2
  }
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3730      	adds	r7, #48	; 0x30
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f74:	b0c0      	sub	sp, #256	; 0x100
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f8c:	68d9      	ldr	r1, [r3, #12]
 8009f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	ea40 0301 	orr.w	r3, r0, r1
 8009f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	431a      	orrs	r2, r3
 8009fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009fc8:	f021 010c 	bic.w	r1, r1, #12
 8009fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fd6:	430b      	orrs	r3, r1
 8009fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fea:	6999      	ldr	r1, [r3, #24]
 8009fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	ea40 0301 	orr.w	r3, r0, r1
 8009ff6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4b8f      	ldr	r3, [pc, #572]	; (800a23c <UART_SetConfig+0x2cc>)
 800a000:	429a      	cmp	r2, r3
 800a002:	d005      	beq.n	800a010 <UART_SetConfig+0xa0>
 800a004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	4b8d      	ldr	r3, [pc, #564]	; (800a240 <UART_SetConfig+0x2d0>)
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d104      	bne.n	800a01a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a010:	f7fc fe8c 	bl	8006d2c <HAL_RCC_GetPCLK2Freq>
 800a014:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a018:	e003      	b.n	800a022 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a01a:	f7fc fe73 	bl	8006d04 <HAL_RCC_GetPCLK1Freq>
 800a01e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a02c:	f040 810c 	bne.w	800a248 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a034:	2200      	movs	r2, #0
 800a036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a03a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a03e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a042:	4622      	mov	r2, r4
 800a044:	462b      	mov	r3, r5
 800a046:	1891      	adds	r1, r2, r2
 800a048:	65b9      	str	r1, [r7, #88]	; 0x58
 800a04a:	415b      	adcs	r3, r3
 800a04c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a04e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a052:	4621      	mov	r1, r4
 800a054:	eb12 0801 	adds.w	r8, r2, r1
 800a058:	4629      	mov	r1, r5
 800a05a:	eb43 0901 	adc.w	r9, r3, r1
 800a05e:	f04f 0200 	mov.w	r2, #0
 800a062:	f04f 0300 	mov.w	r3, #0
 800a066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a06a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a06e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a072:	4690      	mov	r8, r2
 800a074:	4699      	mov	r9, r3
 800a076:	4623      	mov	r3, r4
 800a078:	eb18 0303 	adds.w	r3, r8, r3
 800a07c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a080:	462b      	mov	r3, r5
 800a082:	eb49 0303 	adc.w	r3, r9, r3
 800a086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a08a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a096:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a09a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a09e:	460b      	mov	r3, r1
 800a0a0:	18db      	adds	r3, r3, r3
 800a0a2:	653b      	str	r3, [r7, #80]	; 0x50
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	eb42 0303 	adc.w	r3, r2, r3
 800a0aa:	657b      	str	r3, [r7, #84]	; 0x54
 800a0ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a0b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a0b4:	f7f6 fe08 	bl	8000cc8 <__aeabi_uldivmod>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4b61      	ldr	r3, [pc, #388]	; (800a244 <UART_SetConfig+0x2d4>)
 800a0be:	fba3 2302 	umull	r2, r3, r3, r2
 800a0c2:	095b      	lsrs	r3, r3, #5
 800a0c4:	011c      	lsls	r4, r3, #4
 800a0c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a0d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a0d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a0d8:	4642      	mov	r2, r8
 800a0da:	464b      	mov	r3, r9
 800a0dc:	1891      	adds	r1, r2, r2
 800a0de:	64b9      	str	r1, [r7, #72]	; 0x48
 800a0e0:	415b      	adcs	r3, r3
 800a0e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a0e8:	4641      	mov	r1, r8
 800a0ea:	eb12 0a01 	adds.w	sl, r2, r1
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	eb43 0b01 	adc.w	fp, r3, r1
 800a0f4:	f04f 0200 	mov.w	r2, #0
 800a0f8:	f04f 0300 	mov.w	r3, #0
 800a0fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a100:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a108:	4692      	mov	sl, r2
 800a10a:	469b      	mov	fp, r3
 800a10c:	4643      	mov	r3, r8
 800a10e:	eb1a 0303 	adds.w	r3, sl, r3
 800a112:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a116:	464b      	mov	r3, r9
 800a118:	eb4b 0303 	adc.w	r3, fp, r3
 800a11c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a12c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a130:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a134:	460b      	mov	r3, r1
 800a136:	18db      	adds	r3, r3, r3
 800a138:	643b      	str	r3, [r7, #64]	; 0x40
 800a13a:	4613      	mov	r3, r2
 800a13c:	eb42 0303 	adc.w	r3, r2, r3
 800a140:	647b      	str	r3, [r7, #68]	; 0x44
 800a142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a146:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a14a:	f7f6 fdbd 	bl	8000cc8 <__aeabi_uldivmod>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	4611      	mov	r1, r2
 800a154:	4b3b      	ldr	r3, [pc, #236]	; (800a244 <UART_SetConfig+0x2d4>)
 800a156:	fba3 2301 	umull	r2, r3, r3, r1
 800a15a:	095b      	lsrs	r3, r3, #5
 800a15c:	2264      	movs	r2, #100	; 0x64
 800a15e:	fb02 f303 	mul.w	r3, r2, r3
 800a162:	1acb      	subs	r3, r1, r3
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a16a:	4b36      	ldr	r3, [pc, #216]	; (800a244 <UART_SetConfig+0x2d4>)
 800a16c:	fba3 2302 	umull	r2, r3, r3, r2
 800a170:	095b      	lsrs	r3, r3, #5
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a178:	441c      	add	r4, r3
 800a17a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a184:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a188:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a18c:	4642      	mov	r2, r8
 800a18e:	464b      	mov	r3, r9
 800a190:	1891      	adds	r1, r2, r2
 800a192:	63b9      	str	r1, [r7, #56]	; 0x38
 800a194:	415b      	adcs	r3, r3
 800a196:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a19c:	4641      	mov	r1, r8
 800a19e:	1851      	adds	r1, r2, r1
 800a1a0:	6339      	str	r1, [r7, #48]	; 0x30
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	414b      	adcs	r3, r1
 800a1a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a1a8:	f04f 0200 	mov.w	r2, #0
 800a1ac:	f04f 0300 	mov.w	r3, #0
 800a1b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a1b4:	4659      	mov	r1, fp
 800a1b6:	00cb      	lsls	r3, r1, #3
 800a1b8:	4651      	mov	r1, sl
 800a1ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1be:	4651      	mov	r1, sl
 800a1c0:	00ca      	lsls	r2, r1, #3
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	4642      	mov	r2, r8
 800a1ca:	189b      	adds	r3, r3, r2
 800a1cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1d0:	464b      	mov	r3, r9
 800a1d2:	460a      	mov	r2, r1
 800a1d4:	eb42 0303 	adc.w	r3, r2, r3
 800a1d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a1e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a1ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	18db      	adds	r3, r3, r3
 800a1f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	eb42 0303 	adc.w	r3, r2, r3
 800a1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a202:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a206:	f7f6 fd5f 	bl	8000cc8 <__aeabi_uldivmod>
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	4b0d      	ldr	r3, [pc, #52]	; (800a244 <UART_SetConfig+0x2d4>)
 800a210:	fba3 1302 	umull	r1, r3, r3, r2
 800a214:	095b      	lsrs	r3, r3, #5
 800a216:	2164      	movs	r1, #100	; 0x64
 800a218:	fb01 f303 	mul.w	r3, r1, r3
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	3332      	adds	r3, #50	; 0x32
 800a222:	4a08      	ldr	r2, [pc, #32]	; (800a244 <UART_SetConfig+0x2d4>)
 800a224:	fba2 2303 	umull	r2, r3, r2, r3
 800a228:	095b      	lsrs	r3, r3, #5
 800a22a:	f003 0207 	and.w	r2, r3, #7
 800a22e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4422      	add	r2, r4
 800a236:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a238:	e105      	b.n	800a446 <UART_SetConfig+0x4d6>
 800a23a:	bf00      	nop
 800a23c:	40011000 	.word	0x40011000
 800a240:	40011400 	.word	0x40011400
 800a244:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a24c:	2200      	movs	r2, #0
 800a24e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a252:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a25a:	4642      	mov	r2, r8
 800a25c:	464b      	mov	r3, r9
 800a25e:	1891      	adds	r1, r2, r2
 800a260:	6239      	str	r1, [r7, #32]
 800a262:	415b      	adcs	r3, r3
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
 800a266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a26a:	4641      	mov	r1, r8
 800a26c:	1854      	adds	r4, r2, r1
 800a26e:	4649      	mov	r1, r9
 800a270:	eb43 0501 	adc.w	r5, r3, r1
 800a274:	f04f 0200 	mov.w	r2, #0
 800a278:	f04f 0300 	mov.w	r3, #0
 800a27c:	00eb      	lsls	r3, r5, #3
 800a27e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a282:	00e2      	lsls	r2, r4, #3
 800a284:	4614      	mov	r4, r2
 800a286:	461d      	mov	r5, r3
 800a288:	4643      	mov	r3, r8
 800a28a:	18e3      	adds	r3, r4, r3
 800a28c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a290:	464b      	mov	r3, r9
 800a292:	eb45 0303 	adc.w	r3, r5, r3
 800a296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a29a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a2aa:	f04f 0200 	mov.w	r2, #0
 800a2ae:	f04f 0300 	mov.w	r3, #0
 800a2b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	008b      	lsls	r3, r1, #2
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	008a      	lsls	r2, r1, #2
 800a2c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a2c8:	f7f6 fcfe 	bl	8000cc8 <__aeabi_uldivmod>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4b60      	ldr	r3, [pc, #384]	; (800a454 <UART_SetConfig+0x4e4>)
 800a2d2:	fba3 2302 	umull	r2, r3, r3, r2
 800a2d6:	095b      	lsrs	r3, r3, #5
 800a2d8:	011c      	lsls	r4, r3, #4
 800a2da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a2e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a2e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a2ec:	4642      	mov	r2, r8
 800a2ee:	464b      	mov	r3, r9
 800a2f0:	1891      	adds	r1, r2, r2
 800a2f2:	61b9      	str	r1, [r7, #24]
 800a2f4:	415b      	adcs	r3, r3
 800a2f6:	61fb      	str	r3, [r7, #28]
 800a2f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2fc:	4641      	mov	r1, r8
 800a2fe:	1851      	adds	r1, r2, r1
 800a300:	6139      	str	r1, [r7, #16]
 800a302:	4649      	mov	r1, r9
 800a304:	414b      	adcs	r3, r1
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	f04f 0200 	mov.w	r2, #0
 800a30c:	f04f 0300 	mov.w	r3, #0
 800a310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a314:	4659      	mov	r1, fp
 800a316:	00cb      	lsls	r3, r1, #3
 800a318:	4651      	mov	r1, sl
 800a31a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a31e:	4651      	mov	r1, sl
 800a320:	00ca      	lsls	r2, r1, #3
 800a322:	4610      	mov	r0, r2
 800a324:	4619      	mov	r1, r3
 800a326:	4603      	mov	r3, r0
 800a328:	4642      	mov	r2, r8
 800a32a:	189b      	adds	r3, r3, r2
 800a32c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a330:	464b      	mov	r3, r9
 800a332:	460a      	mov	r2, r1
 800a334:	eb42 0303 	adc.w	r3, r2, r3
 800a338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a33c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	67bb      	str	r3, [r7, #120]	; 0x78
 800a346:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a348:	f04f 0200 	mov.w	r2, #0
 800a34c:	f04f 0300 	mov.w	r3, #0
 800a350:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a354:	4649      	mov	r1, r9
 800a356:	008b      	lsls	r3, r1, #2
 800a358:	4641      	mov	r1, r8
 800a35a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a35e:	4641      	mov	r1, r8
 800a360:	008a      	lsls	r2, r1, #2
 800a362:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a366:	f7f6 fcaf 	bl	8000cc8 <__aeabi_uldivmod>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4b39      	ldr	r3, [pc, #228]	; (800a454 <UART_SetConfig+0x4e4>)
 800a370:	fba3 1302 	umull	r1, r3, r3, r2
 800a374:	095b      	lsrs	r3, r3, #5
 800a376:	2164      	movs	r1, #100	; 0x64
 800a378:	fb01 f303 	mul.w	r3, r1, r3
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	011b      	lsls	r3, r3, #4
 800a380:	3332      	adds	r3, #50	; 0x32
 800a382:	4a34      	ldr	r2, [pc, #208]	; (800a454 <UART_SetConfig+0x4e4>)
 800a384:	fba2 2303 	umull	r2, r3, r2, r3
 800a388:	095b      	lsrs	r3, r3, #5
 800a38a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a38e:	441c      	add	r4, r3
 800a390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a394:	2200      	movs	r2, #0
 800a396:	673b      	str	r3, [r7, #112]	; 0x70
 800a398:	677a      	str	r2, [r7, #116]	; 0x74
 800a39a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a39e:	4642      	mov	r2, r8
 800a3a0:	464b      	mov	r3, r9
 800a3a2:	1891      	adds	r1, r2, r2
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	415b      	adcs	r3, r3
 800a3a8:	60fb      	str	r3, [r7, #12]
 800a3aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3ae:	4641      	mov	r1, r8
 800a3b0:	1851      	adds	r1, r2, r1
 800a3b2:	6039      	str	r1, [r7, #0]
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	414b      	adcs	r3, r1
 800a3b8:	607b      	str	r3, [r7, #4]
 800a3ba:	f04f 0200 	mov.w	r2, #0
 800a3be:	f04f 0300 	mov.w	r3, #0
 800a3c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a3c6:	4659      	mov	r1, fp
 800a3c8:	00cb      	lsls	r3, r1, #3
 800a3ca:	4651      	mov	r1, sl
 800a3cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3d0:	4651      	mov	r1, sl
 800a3d2:	00ca      	lsls	r2, r1, #3
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4603      	mov	r3, r0
 800a3da:	4642      	mov	r2, r8
 800a3dc:	189b      	adds	r3, r3, r2
 800a3de:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3e0:	464b      	mov	r3, r9
 800a3e2:	460a      	mov	r2, r1
 800a3e4:	eb42 0303 	adc.w	r3, r2, r3
 800a3e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	663b      	str	r3, [r7, #96]	; 0x60
 800a3f4:	667a      	str	r2, [r7, #100]	; 0x64
 800a3f6:	f04f 0200 	mov.w	r2, #0
 800a3fa:	f04f 0300 	mov.w	r3, #0
 800a3fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a402:	4649      	mov	r1, r9
 800a404:	008b      	lsls	r3, r1, #2
 800a406:	4641      	mov	r1, r8
 800a408:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a40c:	4641      	mov	r1, r8
 800a40e:	008a      	lsls	r2, r1, #2
 800a410:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a414:	f7f6 fc58 	bl	8000cc8 <__aeabi_uldivmod>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4b0d      	ldr	r3, [pc, #52]	; (800a454 <UART_SetConfig+0x4e4>)
 800a41e:	fba3 1302 	umull	r1, r3, r3, r2
 800a422:	095b      	lsrs	r3, r3, #5
 800a424:	2164      	movs	r1, #100	; 0x64
 800a426:	fb01 f303 	mul.w	r3, r1, r3
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	011b      	lsls	r3, r3, #4
 800a42e:	3332      	adds	r3, #50	; 0x32
 800a430:	4a08      	ldr	r2, [pc, #32]	; (800a454 <UART_SetConfig+0x4e4>)
 800a432:	fba2 2303 	umull	r2, r3, r2, r3
 800a436:	095b      	lsrs	r3, r3, #5
 800a438:	f003 020f 	and.w	r2, r3, #15
 800a43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4422      	add	r2, r4
 800a444:	609a      	str	r2, [r3, #8]
}
 800a446:	bf00      	nop
 800a448:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a44c:	46bd      	mov	sp, r7
 800a44e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a452:	bf00      	nop
 800a454:	51eb851f 	.word	0x51eb851f

0800a458 <__errno>:
 800a458:	4b01      	ldr	r3, [pc, #4]	; (800a460 <__errno+0x8>)
 800a45a:	6818      	ldr	r0, [r3, #0]
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	2000000c 	.word	0x2000000c

0800a464 <__libc_init_array>:
 800a464:	b570      	push	{r4, r5, r6, lr}
 800a466:	4d0d      	ldr	r5, [pc, #52]	; (800a49c <__libc_init_array+0x38>)
 800a468:	4c0d      	ldr	r4, [pc, #52]	; (800a4a0 <__libc_init_array+0x3c>)
 800a46a:	1b64      	subs	r4, r4, r5
 800a46c:	10a4      	asrs	r4, r4, #2
 800a46e:	2600      	movs	r6, #0
 800a470:	42a6      	cmp	r6, r4
 800a472:	d109      	bne.n	800a488 <__libc_init_array+0x24>
 800a474:	4d0b      	ldr	r5, [pc, #44]	; (800a4a4 <__libc_init_array+0x40>)
 800a476:	4c0c      	ldr	r4, [pc, #48]	; (800a4a8 <__libc_init_array+0x44>)
 800a478:	f005 fd78 	bl	800ff6c <_init>
 800a47c:	1b64      	subs	r4, r4, r5
 800a47e:	10a4      	asrs	r4, r4, #2
 800a480:	2600      	movs	r6, #0
 800a482:	42a6      	cmp	r6, r4
 800a484:	d105      	bne.n	800a492 <__libc_init_array+0x2e>
 800a486:	bd70      	pop	{r4, r5, r6, pc}
 800a488:	f855 3b04 	ldr.w	r3, [r5], #4
 800a48c:	4798      	blx	r3
 800a48e:	3601      	adds	r6, #1
 800a490:	e7ee      	b.n	800a470 <__libc_init_array+0xc>
 800a492:	f855 3b04 	ldr.w	r3, [r5], #4
 800a496:	4798      	blx	r3
 800a498:	3601      	adds	r6, #1
 800a49a:	e7f2      	b.n	800a482 <__libc_init_array+0x1e>
 800a49c:	08010b04 	.word	0x08010b04
 800a4a0:	08010b04 	.word	0x08010b04
 800a4a4:	08010b04 	.word	0x08010b04
 800a4a8:	08010b08 	.word	0x08010b08

0800a4ac <memset>:
 800a4ac:	4402      	add	r2, r0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d100      	bne.n	800a4b6 <memset+0xa>
 800a4b4:	4770      	bx	lr
 800a4b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ba:	e7f9      	b.n	800a4b0 <memset+0x4>

0800a4bc <__cvt>:
 800a4bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c0:	ec55 4b10 	vmov	r4, r5, d0
 800a4c4:	2d00      	cmp	r5, #0
 800a4c6:	460e      	mov	r6, r1
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	462b      	mov	r3, r5
 800a4cc:	bfbb      	ittet	lt
 800a4ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a4d2:	461d      	movlt	r5, r3
 800a4d4:	2300      	movge	r3, #0
 800a4d6:	232d      	movlt	r3, #45	; 0x2d
 800a4d8:	700b      	strb	r3, [r1, #0]
 800a4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a4e0:	4691      	mov	r9, r2
 800a4e2:	f023 0820 	bic.w	r8, r3, #32
 800a4e6:	bfbc      	itt	lt
 800a4e8:	4622      	movlt	r2, r4
 800a4ea:	4614      	movlt	r4, r2
 800a4ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4f0:	d005      	beq.n	800a4fe <__cvt+0x42>
 800a4f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4f6:	d100      	bne.n	800a4fa <__cvt+0x3e>
 800a4f8:	3601      	adds	r6, #1
 800a4fa:	2102      	movs	r1, #2
 800a4fc:	e000      	b.n	800a500 <__cvt+0x44>
 800a4fe:	2103      	movs	r1, #3
 800a500:	ab03      	add	r3, sp, #12
 800a502:	9301      	str	r3, [sp, #4]
 800a504:	ab02      	add	r3, sp, #8
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	ec45 4b10 	vmov	d0, r4, r5
 800a50c:	4653      	mov	r3, sl
 800a50e:	4632      	mov	r2, r6
 800a510:	f002 f886 	bl	800c620 <_dtoa_r>
 800a514:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a518:	4607      	mov	r7, r0
 800a51a:	d102      	bne.n	800a522 <__cvt+0x66>
 800a51c:	f019 0f01 	tst.w	r9, #1
 800a520:	d022      	beq.n	800a568 <__cvt+0xac>
 800a522:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a526:	eb07 0906 	add.w	r9, r7, r6
 800a52a:	d110      	bne.n	800a54e <__cvt+0x92>
 800a52c:	783b      	ldrb	r3, [r7, #0]
 800a52e:	2b30      	cmp	r3, #48	; 0x30
 800a530:	d10a      	bne.n	800a548 <__cvt+0x8c>
 800a532:	2200      	movs	r2, #0
 800a534:	2300      	movs	r3, #0
 800a536:	4620      	mov	r0, r4
 800a538:	4629      	mov	r1, r5
 800a53a:	f7f6 fae5 	bl	8000b08 <__aeabi_dcmpeq>
 800a53e:	b918      	cbnz	r0, 800a548 <__cvt+0x8c>
 800a540:	f1c6 0601 	rsb	r6, r6, #1
 800a544:	f8ca 6000 	str.w	r6, [sl]
 800a548:	f8da 3000 	ldr.w	r3, [sl]
 800a54c:	4499      	add	r9, r3
 800a54e:	2200      	movs	r2, #0
 800a550:	2300      	movs	r3, #0
 800a552:	4620      	mov	r0, r4
 800a554:	4629      	mov	r1, r5
 800a556:	f7f6 fad7 	bl	8000b08 <__aeabi_dcmpeq>
 800a55a:	b108      	cbz	r0, 800a560 <__cvt+0xa4>
 800a55c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a560:	2230      	movs	r2, #48	; 0x30
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	454b      	cmp	r3, r9
 800a566:	d307      	bcc.n	800a578 <__cvt+0xbc>
 800a568:	9b03      	ldr	r3, [sp, #12]
 800a56a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a56c:	1bdb      	subs	r3, r3, r7
 800a56e:	4638      	mov	r0, r7
 800a570:	6013      	str	r3, [r2, #0]
 800a572:	b004      	add	sp, #16
 800a574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a578:	1c59      	adds	r1, r3, #1
 800a57a:	9103      	str	r1, [sp, #12]
 800a57c:	701a      	strb	r2, [r3, #0]
 800a57e:	e7f0      	b.n	800a562 <__cvt+0xa6>

0800a580 <__exponent>:
 800a580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a582:	4603      	mov	r3, r0
 800a584:	2900      	cmp	r1, #0
 800a586:	bfb8      	it	lt
 800a588:	4249      	neglt	r1, r1
 800a58a:	f803 2b02 	strb.w	r2, [r3], #2
 800a58e:	bfb4      	ite	lt
 800a590:	222d      	movlt	r2, #45	; 0x2d
 800a592:	222b      	movge	r2, #43	; 0x2b
 800a594:	2909      	cmp	r1, #9
 800a596:	7042      	strb	r2, [r0, #1]
 800a598:	dd2a      	ble.n	800a5f0 <__exponent+0x70>
 800a59a:	f10d 0407 	add.w	r4, sp, #7
 800a59e:	46a4      	mov	ip, r4
 800a5a0:	270a      	movs	r7, #10
 800a5a2:	46a6      	mov	lr, r4
 800a5a4:	460a      	mov	r2, r1
 800a5a6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a5aa:	fb07 1516 	mls	r5, r7, r6, r1
 800a5ae:	3530      	adds	r5, #48	; 0x30
 800a5b0:	2a63      	cmp	r2, #99	; 0x63
 800a5b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	dcf1      	bgt.n	800a5a2 <__exponent+0x22>
 800a5be:	3130      	adds	r1, #48	; 0x30
 800a5c0:	f1ae 0502 	sub.w	r5, lr, #2
 800a5c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a5c8:	1c44      	adds	r4, r0, #1
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	4561      	cmp	r1, ip
 800a5ce:	d30a      	bcc.n	800a5e6 <__exponent+0x66>
 800a5d0:	f10d 0209 	add.w	r2, sp, #9
 800a5d4:	eba2 020e 	sub.w	r2, r2, lr
 800a5d8:	4565      	cmp	r5, ip
 800a5da:	bf88      	it	hi
 800a5dc:	2200      	movhi	r2, #0
 800a5de:	4413      	add	r3, r2
 800a5e0:	1a18      	subs	r0, r3, r0
 800a5e2:	b003      	add	sp, #12
 800a5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a5ee:	e7ed      	b.n	800a5cc <__exponent+0x4c>
 800a5f0:	2330      	movs	r3, #48	; 0x30
 800a5f2:	3130      	adds	r1, #48	; 0x30
 800a5f4:	7083      	strb	r3, [r0, #2]
 800a5f6:	70c1      	strb	r1, [r0, #3]
 800a5f8:	1d03      	adds	r3, r0, #4
 800a5fa:	e7f1      	b.n	800a5e0 <__exponent+0x60>

0800a5fc <_printf_float>:
 800a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a600:	ed2d 8b02 	vpush	{d8}
 800a604:	b08d      	sub	sp, #52	; 0x34
 800a606:	460c      	mov	r4, r1
 800a608:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a60c:	4616      	mov	r6, r2
 800a60e:	461f      	mov	r7, r3
 800a610:	4605      	mov	r5, r0
 800a612:	f003 fb49 	bl	800dca8 <_localeconv_r>
 800a616:	f8d0 a000 	ldr.w	sl, [r0]
 800a61a:	4650      	mov	r0, sl
 800a61c:	f7f5 fdf8 	bl	8000210 <strlen>
 800a620:	2300      	movs	r3, #0
 800a622:	930a      	str	r3, [sp, #40]	; 0x28
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	9305      	str	r3, [sp, #20]
 800a628:	f8d8 3000 	ldr.w	r3, [r8]
 800a62c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a630:	3307      	adds	r3, #7
 800a632:	f023 0307 	bic.w	r3, r3, #7
 800a636:	f103 0208 	add.w	r2, r3, #8
 800a63a:	f8c8 2000 	str.w	r2, [r8]
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a646:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a64a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a64e:	9307      	str	r3, [sp, #28]
 800a650:	f8cd 8018 	str.w	r8, [sp, #24]
 800a654:	ee08 0a10 	vmov	s16, r0
 800a658:	4b9f      	ldr	r3, [pc, #636]	; (800a8d8 <_printf_float+0x2dc>)
 800a65a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a65e:	f04f 32ff 	mov.w	r2, #4294967295
 800a662:	f7f6 fa83 	bl	8000b6c <__aeabi_dcmpun>
 800a666:	bb88      	cbnz	r0, 800a6cc <_printf_float+0xd0>
 800a668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a66c:	4b9a      	ldr	r3, [pc, #616]	; (800a8d8 <_printf_float+0x2dc>)
 800a66e:	f04f 32ff 	mov.w	r2, #4294967295
 800a672:	f7f6 fa5d 	bl	8000b30 <__aeabi_dcmple>
 800a676:	bb48      	cbnz	r0, 800a6cc <_printf_float+0xd0>
 800a678:	2200      	movs	r2, #0
 800a67a:	2300      	movs	r3, #0
 800a67c:	4640      	mov	r0, r8
 800a67e:	4649      	mov	r1, r9
 800a680:	f7f6 fa4c 	bl	8000b1c <__aeabi_dcmplt>
 800a684:	b110      	cbz	r0, 800a68c <_printf_float+0x90>
 800a686:	232d      	movs	r3, #45	; 0x2d
 800a688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a68c:	4b93      	ldr	r3, [pc, #588]	; (800a8dc <_printf_float+0x2e0>)
 800a68e:	4894      	ldr	r0, [pc, #592]	; (800a8e0 <_printf_float+0x2e4>)
 800a690:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a694:	bf94      	ite	ls
 800a696:	4698      	movls	r8, r3
 800a698:	4680      	movhi	r8, r0
 800a69a:	2303      	movs	r3, #3
 800a69c:	6123      	str	r3, [r4, #16]
 800a69e:	9b05      	ldr	r3, [sp, #20]
 800a6a0:	f023 0204 	bic.w	r2, r3, #4
 800a6a4:	6022      	str	r2, [r4, #0]
 800a6a6:	f04f 0900 	mov.w	r9, #0
 800a6aa:	9700      	str	r7, [sp, #0]
 800a6ac:	4633      	mov	r3, r6
 800a6ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	f000 f9d8 	bl	800aa68 <_printf_common>
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	f040 8090 	bne.w	800a7de <_printf_float+0x1e2>
 800a6be:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c2:	b00d      	add	sp, #52	; 0x34
 800a6c4:	ecbd 8b02 	vpop	{d8}
 800a6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6cc:	4642      	mov	r2, r8
 800a6ce:	464b      	mov	r3, r9
 800a6d0:	4640      	mov	r0, r8
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	f7f6 fa4a 	bl	8000b6c <__aeabi_dcmpun>
 800a6d8:	b140      	cbz	r0, 800a6ec <_printf_float+0xf0>
 800a6da:	464b      	mov	r3, r9
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	bfbc      	itt	lt
 800a6e0:	232d      	movlt	r3, #45	; 0x2d
 800a6e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a6e6:	487f      	ldr	r0, [pc, #508]	; (800a8e4 <_printf_float+0x2e8>)
 800a6e8:	4b7f      	ldr	r3, [pc, #508]	; (800a8e8 <_printf_float+0x2ec>)
 800a6ea:	e7d1      	b.n	800a690 <_printf_float+0x94>
 800a6ec:	6863      	ldr	r3, [r4, #4]
 800a6ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a6f2:	9206      	str	r2, [sp, #24]
 800a6f4:	1c5a      	adds	r2, r3, #1
 800a6f6:	d13f      	bne.n	800a778 <_printf_float+0x17c>
 800a6f8:	2306      	movs	r3, #6
 800a6fa:	6063      	str	r3, [r4, #4]
 800a6fc:	9b05      	ldr	r3, [sp, #20]
 800a6fe:	6861      	ldr	r1, [r4, #4]
 800a700:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a704:	2300      	movs	r3, #0
 800a706:	9303      	str	r3, [sp, #12]
 800a708:	ab0a      	add	r3, sp, #40	; 0x28
 800a70a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a70e:	ab09      	add	r3, sp, #36	; 0x24
 800a710:	ec49 8b10 	vmov	d0, r8, r9
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	6022      	str	r2, [r4, #0]
 800a718:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a71c:	4628      	mov	r0, r5
 800a71e:	f7ff fecd 	bl	800a4bc <__cvt>
 800a722:	9b06      	ldr	r3, [sp, #24]
 800a724:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a726:	2b47      	cmp	r3, #71	; 0x47
 800a728:	4680      	mov	r8, r0
 800a72a:	d108      	bne.n	800a73e <_printf_float+0x142>
 800a72c:	1cc8      	adds	r0, r1, #3
 800a72e:	db02      	blt.n	800a736 <_printf_float+0x13a>
 800a730:	6863      	ldr	r3, [r4, #4]
 800a732:	4299      	cmp	r1, r3
 800a734:	dd41      	ble.n	800a7ba <_printf_float+0x1be>
 800a736:	f1ab 0b02 	sub.w	fp, fp, #2
 800a73a:	fa5f fb8b 	uxtb.w	fp, fp
 800a73e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a742:	d820      	bhi.n	800a786 <_printf_float+0x18a>
 800a744:	3901      	subs	r1, #1
 800a746:	465a      	mov	r2, fp
 800a748:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a74c:	9109      	str	r1, [sp, #36]	; 0x24
 800a74e:	f7ff ff17 	bl	800a580 <__exponent>
 800a752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a754:	1813      	adds	r3, r2, r0
 800a756:	2a01      	cmp	r2, #1
 800a758:	4681      	mov	r9, r0
 800a75a:	6123      	str	r3, [r4, #16]
 800a75c:	dc02      	bgt.n	800a764 <_printf_float+0x168>
 800a75e:	6822      	ldr	r2, [r4, #0]
 800a760:	07d2      	lsls	r2, r2, #31
 800a762:	d501      	bpl.n	800a768 <_printf_float+0x16c>
 800a764:	3301      	adds	r3, #1
 800a766:	6123      	str	r3, [r4, #16]
 800a768:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d09c      	beq.n	800a6aa <_printf_float+0xae>
 800a770:	232d      	movs	r3, #45	; 0x2d
 800a772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a776:	e798      	b.n	800a6aa <_printf_float+0xae>
 800a778:	9a06      	ldr	r2, [sp, #24]
 800a77a:	2a47      	cmp	r2, #71	; 0x47
 800a77c:	d1be      	bne.n	800a6fc <_printf_float+0x100>
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1bc      	bne.n	800a6fc <_printf_float+0x100>
 800a782:	2301      	movs	r3, #1
 800a784:	e7b9      	b.n	800a6fa <_printf_float+0xfe>
 800a786:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a78a:	d118      	bne.n	800a7be <_printf_float+0x1c2>
 800a78c:	2900      	cmp	r1, #0
 800a78e:	6863      	ldr	r3, [r4, #4]
 800a790:	dd0b      	ble.n	800a7aa <_printf_float+0x1ae>
 800a792:	6121      	str	r1, [r4, #16]
 800a794:	b913      	cbnz	r3, 800a79c <_printf_float+0x1a0>
 800a796:	6822      	ldr	r2, [r4, #0]
 800a798:	07d0      	lsls	r0, r2, #31
 800a79a:	d502      	bpl.n	800a7a2 <_printf_float+0x1a6>
 800a79c:	3301      	adds	r3, #1
 800a79e:	440b      	add	r3, r1
 800a7a0:	6123      	str	r3, [r4, #16]
 800a7a2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7a4:	f04f 0900 	mov.w	r9, #0
 800a7a8:	e7de      	b.n	800a768 <_printf_float+0x16c>
 800a7aa:	b913      	cbnz	r3, 800a7b2 <_printf_float+0x1b6>
 800a7ac:	6822      	ldr	r2, [r4, #0]
 800a7ae:	07d2      	lsls	r2, r2, #31
 800a7b0:	d501      	bpl.n	800a7b6 <_printf_float+0x1ba>
 800a7b2:	3302      	adds	r3, #2
 800a7b4:	e7f4      	b.n	800a7a0 <_printf_float+0x1a4>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e7f2      	b.n	800a7a0 <_printf_float+0x1a4>
 800a7ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7c0:	4299      	cmp	r1, r3
 800a7c2:	db05      	blt.n	800a7d0 <_printf_float+0x1d4>
 800a7c4:	6823      	ldr	r3, [r4, #0]
 800a7c6:	6121      	str	r1, [r4, #16]
 800a7c8:	07d8      	lsls	r0, r3, #31
 800a7ca:	d5ea      	bpl.n	800a7a2 <_printf_float+0x1a6>
 800a7cc:	1c4b      	adds	r3, r1, #1
 800a7ce:	e7e7      	b.n	800a7a0 <_printf_float+0x1a4>
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	bfd4      	ite	le
 800a7d4:	f1c1 0202 	rsble	r2, r1, #2
 800a7d8:	2201      	movgt	r2, #1
 800a7da:	4413      	add	r3, r2
 800a7dc:	e7e0      	b.n	800a7a0 <_printf_float+0x1a4>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	055a      	lsls	r2, r3, #21
 800a7e2:	d407      	bmi.n	800a7f4 <_printf_float+0x1f8>
 800a7e4:	6923      	ldr	r3, [r4, #16]
 800a7e6:	4642      	mov	r2, r8
 800a7e8:	4631      	mov	r1, r6
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	47b8      	blx	r7
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	d12c      	bne.n	800a84c <_printf_float+0x250>
 800a7f2:	e764      	b.n	800a6be <_printf_float+0xc2>
 800a7f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7f8:	f240 80e0 	bls.w	800a9bc <_printf_float+0x3c0>
 800a7fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a800:	2200      	movs	r2, #0
 800a802:	2300      	movs	r3, #0
 800a804:	f7f6 f980 	bl	8000b08 <__aeabi_dcmpeq>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d034      	beq.n	800a876 <_printf_float+0x27a>
 800a80c:	4a37      	ldr	r2, [pc, #220]	; (800a8ec <_printf_float+0x2f0>)
 800a80e:	2301      	movs	r3, #1
 800a810:	4631      	mov	r1, r6
 800a812:	4628      	mov	r0, r5
 800a814:	47b8      	blx	r7
 800a816:	3001      	adds	r0, #1
 800a818:	f43f af51 	beq.w	800a6be <_printf_float+0xc2>
 800a81c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a820:	429a      	cmp	r2, r3
 800a822:	db02      	blt.n	800a82a <_printf_float+0x22e>
 800a824:	6823      	ldr	r3, [r4, #0]
 800a826:	07d8      	lsls	r0, r3, #31
 800a828:	d510      	bpl.n	800a84c <_printf_float+0x250>
 800a82a:	ee18 3a10 	vmov	r3, s16
 800a82e:	4652      	mov	r2, sl
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	47b8      	blx	r7
 800a836:	3001      	adds	r0, #1
 800a838:	f43f af41 	beq.w	800a6be <_printf_float+0xc2>
 800a83c:	f04f 0800 	mov.w	r8, #0
 800a840:	f104 091a 	add.w	r9, r4, #26
 800a844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a846:	3b01      	subs	r3, #1
 800a848:	4543      	cmp	r3, r8
 800a84a:	dc09      	bgt.n	800a860 <_printf_float+0x264>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	079b      	lsls	r3, r3, #30
 800a850:	f100 8105 	bmi.w	800aa5e <_printf_float+0x462>
 800a854:	68e0      	ldr	r0, [r4, #12]
 800a856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a858:	4298      	cmp	r0, r3
 800a85a:	bfb8      	it	lt
 800a85c:	4618      	movlt	r0, r3
 800a85e:	e730      	b.n	800a6c2 <_printf_float+0xc6>
 800a860:	2301      	movs	r3, #1
 800a862:	464a      	mov	r2, r9
 800a864:	4631      	mov	r1, r6
 800a866:	4628      	mov	r0, r5
 800a868:	47b8      	blx	r7
 800a86a:	3001      	adds	r0, #1
 800a86c:	f43f af27 	beq.w	800a6be <_printf_float+0xc2>
 800a870:	f108 0801 	add.w	r8, r8, #1
 800a874:	e7e6      	b.n	800a844 <_printf_float+0x248>
 800a876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a878:	2b00      	cmp	r3, #0
 800a87a:	dc39      	bgt.n	800a8f0 <_printf_float+0x2f4>
 800a87c:	4a1b      	ldr	r2, [pc, #108]	; (800a8ec <_printf_float+0x2f0>)
 800a87e:	2301      	movs	r3, #1
 800a880:	4631      	mov	r1, r6
 800a882:	4628      	mov	r0, r5
 800a884:	47b8      	blx	r7
 800a886:	3001      	adds	r0, #1
 800a888:	f43f af19 	beq.w	800a6be <_printf_float+0xc2>
 800a88c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a890:	4313      	orrs	r3, r2
 800a892:	d102      	bne.n	800a89a <_printf_float+0x29e>
 800a894:	6823      	ldr	r3, [r4, #0]
 800a896:	07d9      	lsls	r1, r3, #31
 800a898:	d5d8      	bpl.n	800a84c <_printf_float+0x250>
 800a89a:	ee18 3a10 	vmov	r3, s16
 800a89e:	4652      	mov	r2, sl
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	47b8      	blx	r7
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	f43f af09 	beq.w	800a6be <_printf_float+0xc2>
 800a8ac:	f04f 0900 	mov.w	r9, #0
 800a8b0:	f104 0a1a 	add.w	sl, r4, #26
 800a8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b6:	425b      	negs	r3, r3
 800a8b8:	454b      	cmp	r3, r9
 800a8ba:	dc01      	bgt.n	800a8c0 <_printf_float+0x2c4>
 800a8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8be:	e792      	b.n	800a7e6 <_printf_float+0x1ea>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	4652      	mov	r2, sl
 800a8c4:	4631      	mov	r1, r6
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	47b8      	blx	r7
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	f43f aef7 	beq.w	800a6be <_printf_float+0xc2>
 800a8d0:	f109 0901 	add.w	r9, r9, #1
 800a8d4:	e7ee      	b.n	800a8b4 <_printf_float+0x2b8>
 800a8d6:	bf00      	nop
 800a8d8:	7fefffff 	.word	0x7fefffff
 800a8dc:	08010640 	.word	0x08010640
 800a8e0:	08010644 	.word	0x08010644
 800a8e4:	0801064c 	.word	0x0801064c
 800a8e8:	08010648 	.word	0x08010648
 800a8ec:	08010aa9 	.word	0x08010aa9
 800a8f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	bfa8      	it	ge
 800a8f8:	461a      	movge	r2, r3
 800a8fa:	2a00      	cmp	r2, #0
 800a8fc:	4691      	mov	r9, r2
 800a8fe:	dc37      	bgt.n	800a970 <_printf_float+0x374>
 800a900:	f04f 0b00 	mov.w	fp, #0
 800a904:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a908:	f104 021a 	add.w	r2, r4, #26
 800a90c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a90e:	9305      	str	r3, [sp, #20]
 800a910:	eba3 0309 	sub.w	r3, r3, r9
 800a914:	455b      	cmp	r3, fp
 800a916:	dc33      	bgt.n	800a980 <_printf_float+0x384>
 800a918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a91c:	429a      	cmp	r2, r3
 800a91e:	db3b      	blt.n	800a998 <_printf_float+0x39c>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	07da      	lsls	r2, r3, #31
 800a924:	d438      	bmi.n	800a998 <_printf_float+0x39c>
 800a926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a928:	9a05      	ldr	r2, [sp, #20]
 800a92a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a92c:	1a9a      	subs	r2, r3, r2
 800a92e:	eba3 0901 	sub.w	r9, r3, r1
 800a932:	4591      	cmp	r9, r2
 800a934:	bfa8      	it	ge
 800a936:	4691      	movge	r9, r2
 800a938:	f1b9 0f00 	cmp.w	r9, #0
 800a93c:	dc35      	bgt.n	800a9aa <_printf_float+0x3ae>
 800a93e:	f04f 0800 	mov.w	r8, #0
 800a942:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a946:	f104 0a1a 	add.w	sl, r4, #26
 800a94a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a94e:	1a9b      	subs	r3, r3, r2
 800a950:	eba3 0309 	sub.w	r3, r3, r9
 800a954:	4543      	cmp	r3, r8
 800a956:	f77f af79 	ble.w	800a84c <_printf_float+0x250>
 800a95a:	2301      	movs	r3, #1
 800a95c:	4652      	mov	r2, sl
 800a95e:	4631      	mov	r1, r6
 800a960:	4628      	mov	r0, r5
 800a962:	47b8      	blx	r7
 800a964:	3001      	adds	r0, #1
 800a966:	f43f aeaa 	beq.w	800a6be <_printf_float+0xc2>
 800a96a:	f108 0801 	add.w	r8, r8, #1
 800a96e:	e7ec      	b.n	800a94a <_printf_float+0x34e>
 800a970:	4613      	mov	r3, r2
 800a972:	4631      	mov	r1, r6
 800a974:	4642      	mov	r2, r8
 800a976:	4628      	mov	r0, r5
 800a978:	47b8      	blx	r7
 800a97a:	3001      	adds	r0, #1
 800a97c:	d1c0      	bne.n	800a900 <_printf_float+0x304>
 800a97e:	e69e      	b.n	800a6be <_printf_float+0xc2>
 800a980:	2301      	movs	r3, #1
 800a982:	4631      	mov	r1, r6
 800a984:	4628      	mov	r0, r5
 800a986:	9205      	str	r2, [sp, #20]
 800a988:	47b8      	blx	r7
 800a98a:	3001      	adds	r0, #1
 800a98c:	f43f ae97 	beq.w	800a6be <_printf_float+0xc2>
 800a990:	9a05      	ldr	r2, [sp, #20]
 800a992:	f10b 0b01 	add.w	fp, fp, #1
 800a996:	e7b9      	b.n	800a90c <_printf_float+0x310>
 800a998:	ee18 3a10 	vmov	r3, s16
 800a99c:	4652      	mov	r2, sl
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b8      	blx	r7
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d1be      	bne.n	800a926 <_printf_float+0x32a>
 800a9a8:	e689      	b.n	800a6be <_printf_float+0xc2>
 800a9aa:	9a05      	ldr	r2, [sp, #20]
 800a9ac:	464b      	mov	r3, r9
 800a9ae:	4442      	add	r2, r8
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	47b8      	blx	r7
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	d1c1      	bne.n	800a93e <_printf_float+0x342>
 800a9ba:	e680      	b.n	800a6be <_printf_float+0xc2>
 800a9bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9be:	2a01      	cmp	r2, #1
 800a9c0:	dc01      	bgt.n	800a9c6 <_printf_float+0x3ca>
 800a9c2:	07db      	lsls	r3, r3, #31
 800a9c4:	d538      	bpl.n	800aa38 <_printf_float+0x43c>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	47b8      	blx	r7
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	f43f ae74 	beq.w	800a6be <_printf_float+0xc2>
 800a9d6:	ee18 3a10 	vmov	r3, s16
 800a9da:	4652      	mov	r2, sl
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4628      	mov	r0, r5
 800a9e0:	47b8      	blx	r7
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	f43f ae6b 	beq.w	800a6be <_printf_float+0xc2>
 800a9e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	f7f6 f88a 	bl	8000b08 <__aeabi_dcmpeq>
 800a9f4:	b9d8      	cbnz	r0, 800aa2e <_printf_float+0x432>
 800a9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f8:	f108 0201 	add.w	r2, r8, #1
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b8      	blx	r7
 800aa04:	3001      	adds	r0, #1
 800aa06:	d10e      	bne.n	800aa26 <_printf_float+0x42a>
 800aa08:	e659      	b.n	800a6be <_printf_float+0xc2>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	4652      	mov	r2, sl
 800aa0e:	4631      	mov	r1, r6
 800aa10:	4628      	mov	r0, r5
 800aa12:	47b8      	blx	r7
 800aa14:	3001      	adds	r0, #1
 800aa16:	f43f ae52 	beq.w	800a6be <_printf_float+0xc2>
 800aa1a:	f108 0801 	add.w	r8, r8, #1
 800aa1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa20:	3b01      	subs	r3, #1
 800aa22:	4543      	cmp	r3, r8
 800aa24:	dcf1      	bgt.n	800aa0a <_printf_float+0x40e>
 800aa26:	464b      	mov	r3, r9
 800aa28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa2c:	e6dc      	b.n	800a7e8 <_printf_float+0x1ec>
 800aa2e:	f04f 0800 	mov.w	r8, #0
 800aa32:	f104 0a1a 	add.w	sl, r4, #26
 800aa36:	e7f2      	b.n	800aa1e <_printf_float+0x422>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	4642      	mov	r2, r8
 800aa3c:	e7df      	b.n	800a9fe <_printf_float+0x402>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	464a      	mov	r2, r9
 800aa42:	4631      	mov	r1, r6
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b8      	blx	r7
 800aa48:	3001      	adds	r0, #1
 800aa4a:	f43f ae38 	beq.w	800a6be <_printf_float+0xc2>
 800aa4e:	f108 0801 	add.w	r8, r8, #1
 800aa52:	68e3      	ldr	r3, [r4, #12]
 800aa54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa56:	1a5b      	subs	r3, r3, r1
 800aa58:	4543      	cmp	r3, r8
 800aa5a:	dcf0      	bgt.n	800aa3e <_printf_float+0x442>
 800aa5c:	e6fa      	b.n	800a854 <_printf_float+0x258>
 800aa5e:	f04f 0800 	mov.w	r8, #0
 800aa62:	f104 0919 	add.w	r9, r4, #25
 800aa66:	e7f4      	b.n	800aa52 <_printf_float+0x456>

0800aa68 <_printf_common>:
 800aa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa6c:	4616      	mov	r6, r2
 800aa6e:	4699      	mov	r9, r3
 800aa70:	688a      	ldr	r2, [r1, #8]
 800aa72:	690b      	ldr	r3, [r1, #16]
 800aa74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	bfb8      	it	lt
 800aa7c:	4613      	movlt	r3, r2
 800aa7e:	6033      	str	r3, [r6, #0]
 800aa80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa84:	4607      	mov	r7, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	b10a      	cbz	r2, 800aa8e <_printf_common+0x26>
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	6033      	str	r3, [r6, #0]
 800aa8e:	6823      	ldr	r3, [r4, #0]
 800aa90:	0699      	lsls	r1, r3, #26
 800aa92:	bf42      	ittt	mi
 800aa94:	6833      	ldrmi	r3, [r6, #0]
 800aa96:	3302      	addmi	r3, #2
 800aa98:	6033      	strmi	r3, [r6, #0]
 800aa9a:	6825      	ldr	r5, [r4, #0]
 800aa9c:	f015 0506 	ands.w	r5, r5, #6
 800aaa0:	d106      	bne.n	800aab0 <_printf_common+0x48>
 800aaa2:	f104 0a19 	add.w	sl, r4, #25
 800aaa6:	68e3      	ldr	r3, [r4, #12]
 800aaa8:	6832      	ldr	r2, [r6, #0]
 800aaaa:	1a9b      	subs	r3, r3, r2
 800aaac:	42ab      	cmp	r3, r5
 800aaae:	dc26      	bgt.n	800aafe <_printf_common+0x96>
 800aab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aab4:	1e13      	subs	r3, r2, #0
 800aab6:	6822      	ldr	r2, [r4, #0]
 800aab8:	bf18      	it	ne
 800aaba:	2301      	movne	r3, #1
 800aabc:	0692      	lsls	r2, r2, #26
 800aabe:	d42b      	bmi.n	800ab18 <_printf_common+0xb0>
 800aac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aac4:	4649      	mov	r1, r9
 800aac6:	4638      	mov	r0, r7
 800aac8:	47c0      	blx	r8
 800aaca:	3001      	adds	r0, #1
 800aacc:	d01e      	beq.n	800ab0c <_printf_common+0xa4>
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	68e5      	ldr	r5, [r4, #12]
 800aad2:	6832      	ldr	r2, [r6, #0]
 800aad4:	f003 0306 	and.w	r3, r3, #6
 800aad8:	2b04      	cmp	r3, #4
 800aada:	bf08      	it	eq
 800aadc:	1aad      	subeq	r5, r5, r2
 800aade:	68a3      	ldr	r3, [r4, #8]
 800aae0:	6922      	ldr	r2, [r4, #16]
 800aae2:	bf0c      	ite	eq
 800aae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aae8:	2500      	movne	r5, #0
 800aaea:	4293      	cmp	r3, r2
 800aaec:	bfc4      	itt	gt
 800aaee:	1a9b      	subgt	r3, r3, r2
 800aaf0:	18ed      	addgt	r5, r5, r3
 800aaf2:	2600      	movs	r6, #0
 800aaf4:	341a      	adds	r4, #26
 800aaf6:	42b5      	cmp	r5, r6
 800aaf8:	d11a      	bne.n	800ab30 <_printf_common+0xc8>
 800aafa:	2000      	movs	r0, #0
 800aafc:	e008      	b.n	800ab10 <_printf_common+0xa8>
 800aafe:	2301      	movs	r3, #1
 800ab00:	4652      	mov	r2, sl
 800ab02:	4649      	mov	r1, r9
 800ab04:	4638      	mov	r0, r7
 800ab06:	47c0      	blx	r8
 800ab08:	3001      	adds	r0, #1
 800ab0a:	d103      	bne.n	800ab14 <_printf_common+0xac>
 800ab0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab14:	3501      	adds	r5, #1
 800ab16:	e7c6      	b.n	800aaa6 <_printf_common+0x3e>
 800ab18:	18e1      	adds	r1, r4, r3
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	2030      	movs	r0, #48	; 0x30
 800ab1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab22:	4422      	add	r2, r4
 800ab24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab2c:	3302      	adds	r3, #2
 800ab2e:	e7c7      	b.n	800aac0 <_printf_common+0x58>
 800ab30:	2301      	movs	r3, #1
 800ab32:	4622      	mov	r2, r4
 800ab34:	4649      	mov	r1, r9
 800ab36:	4638      	mov	r0, r7
 800ab38:	47c0      	blx	r8
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	d0e6      	beq.n	800ab0c <_printf_common+0xa4>
 800ab3e:	3601      	adds	r6, #1
 800ab40:	e7d9      	b.n	800aaf6 <_printf_common+0x8e>
	...

0800ab44 <_printf_i>:
 800ab44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab48:	7e0f      	ldrb	r7, [r1, #24]
 800ab4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab4c:	2f78      	cmp	r7, #120	; 0x78
 800ab4e:	4691      	mov	r9, r2
 800ab50:	4680      	mov	r8, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	469a      	mov	sl, r3
 800ab56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab5a:	d807      	bhi.n	800ab6c <_printf_i+0x28>
 800ab5c:	2f62      	cmp	r7, #98	; 0x62
 800ab5e:	d80a      	bhi.n	800ab76 <_printf_i+0x32>
 800ab60:	2f00      	cmp	r7, #0
 800ab62:	f000 80d8 	beq.w	800ad16 <_printf_i+0x1d2>
 800ab66:	2f58      	cmp	r7, #88	; 0x58
 800ab68:	f000 80a3 	beq.w	800acb2 <_printf_i+0x16e>
 800ab6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab74:	e03a      	b.n	800abec <_printf_i+0xa8>
 800ab76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab7a:	2b15      	cmp	r3, #21
 800ab7c:	d8f6      	bhi.n	800ab6c <_printf_i+0x28>
 800ab7e:	a101      	add	r1, pc, #4	; (adr r1, 800ab84 <_printf_i+0x40>)
 800ab80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab84:	0800abdd 	.word	0x0800abdd
 800ab88:	0800abf1 	.word	0x0800abf1
 800ab8c:	0800ab6d 	.word	0x0800ab6d
 800ab90:	0800ab6d 	.word	0x0800ab6d
 800ab94:	0800ab6d 	.word	0x0800ab6d
 800ab98:	0800ab6d 	.word	0x0800ab6d
 800ab9c:	0800abf1 	.word	0x0800abf1
 800aba0:	0800ab6d 	.word	0x0800ab6d
 800aba4:	0800ab6d 	.word	0x0800ab6d
 800aba8:	0800ab6d 	.word	0x0800ab6d
 800abac:	0800ab6d 	.word	0x0800ab6d
 800abb0:	0800acfd 	.word	0x0800acfd
 800abb4:	0800ac21 	.word	0x0800ac21
 800abb8:	0800acdf 	.word	0x0800acdf
 800abbc:	0800ab6d 	.word	0x0800ab6d
 800abc0:	0800ab6d 	.word	0x0800ab6d
 800abc4:	0800ad1f 	.word	0x0800ad1f
 800abc8:	0800ab6d 	.word	0x0800ab6d
 800abcc:	0800ac21 	.word	0x0800ac21
 800abd0:	0800ab6d 	.word	0x0800ab6d
 800abd4:	0800ab6d 	.word	0x0800ab6d
 800abd8:	0800ace7 	.word	0x0800ace7
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	1d1a      	adds	r2, r3, #4
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	602a      	str	r2, [r5, #0]
 800abe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abec:	2301      	movs	r3, #1
 800abee:	e0a3      	b.n	800ad38 <_printf_i+0x1f4>
 800abf0:	6820      	ldr	r0, [r4, #0]
 800abf2:	6829      	ldr	r1, [r5, #0]
 800abf4:	0606      	lsls	r6, r0, #24
 800abf6:	f101 0304 	add.w	r3, r1, #4
 800abfa:	d50a      	bpl.n	800ac12 <_printf_i+0xce>
 800abfc:	680e      	ldr	r6, [r1, #0]
 800abfe:	602b      	str	r3, [r5, #0]
 800ac00:	2e00      	cmp	r6, #0
 800ac02:	da03      	bge.n	800ac0c <_printf_i+0xc8>
 800ac04:	232d      	movs	r3, #45	; 0x2d
 800ac06:	4276      	negs	r6, r6
 800ac08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac0c:	485e      	ldr	r0, [pc, #376]	; (800ad88 <_printf_i+0x244>)
 800ac0e:	230a      	movs	r3, #10
 800ac10:	e019      	b.n	800ac46 <_printf_i+0x102>
 800ac12:	680e      	ldr	r6, [r1, #0]
 800ac14:	602b      	str	r3, [r5, #0]
 800ac16:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac1a:	bf18      	it	ne
 800ac1c:	b236      	sxthne	r6, r6
 800ac1e:	e7ef      	b.n	800ac00 <_printf_i+0xbc>
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	6820      	ldr	r0, [r4, #0]
 800ac24:	1d19      	adds	r1, r3, #4
 800ac26:	6029      	str	r1, [r5, #0]
 800ac28:	0601      	lsls	r1, r0, #24
 800ac2a:	d501      	bpl.n	800ac30 <_printf_i+0xec>
 800ac2c:	681e      	ldr	r6, [r3, #0]
 800ac2e:	e002      	b.n	800ac36 <_printf_i+0xf2>
 800ac30:	0646      	lsls	r6, r0, #25
 800ac32:	d5fb      	bpl.n	800ac2c <_printf_i+0xe8>
 800ac34:	881e      	ldrh	r6, [r3, #0]
 800ac36:	4854      	ldr	r0, [pc, #336]	; (800ad88 <_printf_i+0x244>)
 800ac38:	2f6f      	cmp	r7, #111	; 0x6f
 800ac3a:	bf0c      	ite	eq
 800ac3c:	2308      	moveq	r3, #8
 800ac3e:	230a      	movne	r3, #10
 800ac40:	2100      	movs	r1, #0
 800ac42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac46:	6865      	ldr	r5, [r4, #4]
 800ac48:	60a5      	str	r5, [r4, #8]
 800ac4a:	2d00      	cmp	r5, #0
 800ac4c:	bfa2      	ittt	ge
 800ac4e:	6821      	ldrge	r1, [r4, #0]
 800ac50:	f021 0104 	bicge.w	r1, r1, #4
 800ac54:	6021      	strge	r1, [r4, #0]
 800ac56:	b90e      	cbnz	r6, 800ac5c <_printf_i+0x118>
 800ac58:	2d00      	cmp	r5, #0
 800ac5a:	d04d      	beq.n	800acf8 <_printf_i+0x1b4>
 800ac5c:	4615      	mov	r5, r2
 800ac5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac62:	fb03 6711 	mls	r7, r3, r1, r6
 800ac66:	5dc7      	ldrb	r7, [r0, r7]
 800ac68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac6c:	4637      	mov	r7, r6
 800ac6e:	42bb      	cmp	r3, r7
 800ac70:	460e      	mov	r6, r1
 800ac72:	d9f4      	bls.n	800ac5e <_printf_i+0x11a>
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	d10b      	bne.n	800ac90 <_printf_i+0x14c>
 800ac78:	6823      	ldr	r3, [r4, #0]
 800ac7a:	07de      	lsls	r6, r3, #31
 800ac7c:	d508      	bpl.n	800ac90 <_printf_i+0x14c>
 800ac7e:	6923      	ldr	r3, [r4, #16]
 800ac80:	6861      	ldr	r1, [r4, #4]
 800ac82:	4299      	cmp	r1, r3
 800ac84:	bfde      	ittt	le
 800ac86:	2330      	movle	r3, #48	; 0x30
 800ac88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac90:	1b52      	subs	r2, r2, r5
 800ac92:	6122      	str	r2, [r4, #16]
 800ac94:	f8cd a000 	str.w	sl, [sp]
 800ac98:	464b      	mov	r3, r9
 800ac9a:	aa03      	add	r2, sp, #12
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4640      	mov	r0, r8
 800aca0:	f7ff fee2 	bl	800aa68 <_printf_common>
 800aca4:	3001      	adds	r0, #1
 800aca6:	d14c      	bne.n	800ad42 <_printf_i+0x1fe>
 800aca8:	f04f 30ff 	mov.w	r0, #4294967295
 800acac:	b004      	add	sp, #16
 800acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb2:	4835      	ldr	r0, [pc, #212]	; (800ad88 <_printf_i+0x244>)
 800acb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800acb8:	6829      	ldr	r1, [r5, #0]
 800acba:	6823      	ldr	r3, [r4, #0]
 800acbc:	f851 6b04 	ldr.w	r6, [r1], #4
 800acc0:	6029      	str	r1, [r5, #0]
 800acc2:	061d      	lsls	r5, r3, #24
 800acc4:	d514      	bpl.n	800acf0 <_printf_i+0x1ac>
 800acc6:	07df      	lsls	r7, r3, #31
 800acc8:	bf44      	itt	mi
 800acca:	f043 0320 	orrmi.w	r3, r3, #32
 800acce:	6023      	strmi	r3, [r4, #0]
 800acd0:	b91e      	cbnz	r6, 800acda <_printf_i+0x196>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	f023 0320 	bic.w	r3, r3, #32
 800acd8:	6023      	str	r3, [r4, #0]
 800acda:	2310      	movs	r3, #16
 800acdc:	e7b0      	b.n	800ac40 <_printf_i+0xfc>
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	f043 0320 	orr.w	r3, r3, #32
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	2378      	movs	r3, #120	; 0x78
 800ace8:	4828      	ldr	r0, [pc, #160]	; (800ad8c <_printf_i+0x248>)
 800acea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acee:	e7e3      	b.n	800acb8 <_printf_i+0x174>
 800acf0:	0659      	lsls	r1, r3, #25
 800acf2:	bf48      	it	mi
 800acf4:	b2b6      	uxthmi	r6, r6
 800acf6:	e7e6      	b.n	800acc6 <_printf_i+0x182>
 800acf8:	4615      	mov	r5, r2
 800acfa:	e7bb      	b.n	800ac74 <_printf_i+0x130>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	6826      	ldr	r6, [r4, #0]
 800ad00:	6961      	ldr	r1, [r4, #20]
 800ad02:	1d18      	adds	r0, r3, #4
 800ad04:	6028      	str	r0, [r5, #0]
 800ad06:	0635      	lsls	r5, r6, #24
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	d501      	bpl.n	800ad10 <_printf_i+0x1cc>
 800ad0c:	6019      	str	r1, [r3, #0]
 800ad0e:	e002      	b.n	800ad16 <_printf_i+0x1d2>
 800ad10:	0670      	lsls	r0, r6, #25
 800ad12:	d5fb      	bpl.n	800ad0c <_printf_i+0x1c8>
 800ad14:	8019      	strh	r1, [r3, #0]
 800ad16:	2300      	movs	r3, #0
 800ad18:	6123      	str	r3, [r4, #16]
 800ad1a:	4615      	mov	r5, r2
 800ad1c:	e7ba      	b.n	800ac94 <_printf_i+0x150>
 800ad1e:	682b      	ldr	r3, [r5, #0]
 800ad20:	1d1a      	adds	r2, r3, #4
 800ad22:	602a      	str	r2, [r5, #0]
 800ad24:	681d      	ldr	r5, [r3, #0]
 800ad26:	6862      	ldr	r2, [r4, #4]
 800ad28:	2100      	movs	r1, #0
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	f7f5 fa78 	bl	8000220 <memchr>
 800ad30:	b108      	cbz	r0, 800ad36 <_printf_i+0x1f2>
 800ad32:	1b40      	subs	r0, r0, r5
 800ad34:	6060      	str	r0, [r4, #4]
 800ad36:	6863      	ldr	r3, [r4, #4]
 800ad38:	6123      	str	r3, [r4, #16]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad40:	e7a8      	b.n	800ac94 <_printf_i+0x150>
 800ad42:	6923      	ldr	r3, [r4, #16]
 800ad44:	462a      	mov	r2, r5
 800ad46:	4649      	mov	r1, r9
 800ad48:	4640      	mov	r0, r8
 800ad4a:	47d0      	blx	sl
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	d0ab      	beq.n	800aca8 <_printf_i+0x164>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	079b      	lsls	r3, r3, #30
 800ad54:	d413      	bmi.n	800ad7e <_printf_i+0x23a>
 800ad56:	68e0      	ldr	r0, [r4, #12]
 800ad58:	9b03      	ldr	r3, [sp, #12]
 800ad5a:	4298      	cmp	r0, r3
 800ad5c:	bfb8      	it	lt
 800ad5e:	4618      	movlt	r0, r3
 800ad60:	e7a4      	b.n	800acac <_printf_i+0x168>
 800ad62:	2301      	movs	r3, #1
 800ad64:	4632      	mov	r2, r6
 800ad66:	4649      	mov	r1, r9
 800ad68:	4640      	mov	r0, r8
 800ad6a:	47d0      	blx	sl
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	d09b      	beq.n	800aca8 <_printf_i+0x164>
 800ad70:	3501      	adds	r5, #1
 800ad72:	68e3      	ldr	r3, [r4, #12]
 800ad74:	9903      	ldr	r1, [sp, #12]
 800ad76:	1a5b      	subs	r3, r3, r1
 800ad78:	42ab      	cmp	r3, r5
 800ad7a:	dcf2      	bgt.n	800ad62 <_printf_i+0x21e>
 800ad7c:	e7eb      	b.n	800ad56 <_printf_i+0x212>
 800ad7e:	2500      	movs	r5, #0
 800ad80:	f104 0619 	add.w	r6, r4, #25
 800ad84:	e7f5      	b.n	800ad72 <_printf_i+0x22e>
 800ad86:	bf00      	nop
 800ad88:	08010650 	.word	0x08010650
 800ad8c:	08010661 	.word	0x08010661

0800ad90 <_scanf_float>:
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	b087      	sub	sp, #28
 800ad96:	4617      	mov	r7, r2
 800ad98:	9303      	str	r3, [sp, #12]
 800ad9a:	688b      	ldr	r3, [r1, #8]
 800ad9c:	1e5a      	subs	r2, r3, #1
 800ad9e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ada2:	bf83      	ittte	hi
 800ada4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ada8:	195b      	addhi	r3, r3, r5
 800adaa:	9302      	strhi	r3, [sp, #8]
 800adac:	2300      	movls	r3, #0
 800adae:	bf86      	itte	hi
 800adb0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800adb4:	608b      	strhi	r3, [r1, #8]
 800adb6:	9302      	strls	r3, [sp, #8]
 800adb8:	680b      	ldr	r3, [r1, #0]
 800adba:	468b      	mov	fp, r1
 800adbc:	2500      	movs	r5, #0
 800adbe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800adc2:	f84b 3b1c 	str.w	r3, [fp], #28
 800adc6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800adca:	4680      	mov	r8, r0
 800adcc:	460c      	mov	r4, r1
 800adce:	465e      	mov	r6, fp
 800add0:	46aa      	mov	sl, r5
 800add2:	46a9      	mov	r9, r5
 800add4:	9501      	str	r5, [sp, #4]
 800add6:	68a2      	ldr	r2, [r4, #8]
 800add8:	b152      	cbz	r2, 800adf0 <_scanf_float+0x60>
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	2b4e      	cmp	r3, #78	; 0x4e
 800ade0:	d864      	bhi.n	800aeac <_scanf_float+0x11c>
 800ade2:	2b40      	cmp	r3, #64	; 0x40
 800ade4:	d83c      	bhi.n	800ae60 <_scanf_float+0xd0>
 800ade6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800adea:	b2c8      	uxtb	r0, r1
 800adec:	280e      	cmp	r0, #14
 800adee:	d93a      	bls.n	800ae66 <_scanf_float+0xd6>
 800adf0:	f1b9 0f00 	cmp.w	r9, #0
 800adf4:	d003      	beq.n	800adfe <_scanf_float+0x6e>
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae02:	f1ba 0f01 	cmp.w	sl, #1
 800ae06:	f200 8113 	bhi.w	800b030 <_scanf_float+0x2a0>
 800ae0a:	455e      	cmp	r6, fp
 800ae0c:	f200 8105 	bhi.w	800b01a <_scanf_float+0x28a>
 800ae10:	2501      	movs	r5, #1
 800ae12:	4628      	mov	r0, r5
 800ae14:	b007      	add	sp, #28
 800ae16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ae1e:	2a0d      	cmp	r2, #13
 800ae20:	d8e6      	bhi.n	800adf0 <_scanf_float+0x60>
 800ae22:	a101      	add	r1, pc, #4	; (adr r1, 800ae28 <_scanf_float+0x98>)
 800ae24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae28:	0800af67 	.word	0x0800af67
 800ae2c:	0800adf1 	.word	0x0800adf1
 800ae30:	0800adf1 	.word	0x0800adf1
 800ae34:	0800adf1 	.word	0x0800adf1
 800ae38:	0800afc7 	.word	0x0800afc7
 800ae3c:	0800af9f 	.word	0x0800af9f
 800ae40:	0800adf1 	.word	0x0800adf1
 800ae44:	0800adf1 	.word	0x0800adf1
 800ae48:	0800af75 	.word	0x0800af75
 800ae4c:	0800adf1 	.word	0x0800adf1
 800ae50:	0800adf1 	.word	0x0800adf1
 800ae54:	0800adf1 	.word	0x0800adf1
 800ae58:	0800adf1 	.word	0x0800adf1
 800ae5c:	0800af2d 	.word	0x0800af2d
 800ae60:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ae64:	e7db      	b.n	800ae1e <_scanf_float+0x8e>
 800ae66:	290e      	cmp	r1, #14
 800ae68:	d8c2      	bhi.n	800adf0 <_scanf_float+0x60>
 800ae6a:	a001      	add	r0, pc, #4	; (adr r0, 800ae70 <_scanf_float+0xe0>)
 800ae6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae70:	0800af1f 	.word	0x0800af1f
 800ae74:	0800adf1 	.word	0x0800adf1
 800ae78:	0800af1f 	.word	0x0800af1f
 800ae7c:	0800afb3 	.word	0x0800afb3
 800ae80:	0800adf1 	.word	0x0800adf1
 800ae84:	0800aecd 	.word	0x0800aecd
 800ae88:	0800af09 	.word	0x0800af09
 800ae8c:	0800af09 	.word	0x0800af09
 800ae90:	0800af09 	.word	0x0800af09
 800ae94:	0800af09 	.word	0x0800af09
 800ae98:	0800af09 	.word	0x0800af09
 800ae9c:	0800af09 	.word	0x0800af09
 800aea0:	0800af09 	.word	0x0800af09
 800aea4:	0800af09 	.word	0x0800af09
 800aea8:	0800af09 	.word	0x0800af09
 800aeac:	2b6e      	cmp	r3, #110	; 0x6e
 800aeae:	d809      	bhi.n	800aec4 <_scanf_float+0x134>
 800aeb0:	2b60      	cmp	r3, #96	; 0x60
 800aeb2:	d8b2      	bhi.n	800ae1a <_scanf_float+0x8a>
 800aeb4:	2b54      	cmp	r3, #84	; 0x54
 800aeb6:	d077      	beq.n	800afa8 <_scanf_float+0x218>
 800aeb8:	2b59      	cmp	r3, #89	; 0x59
 800aeba:	d199      	bne.n	800adf0 <_scanf_float+0x60>
 800aebc:	2d07      	cmp	r5, #7
 800aebe:	d197      	bne.n	800adf0 <_scanf_float+0x60>
 800aec0:	2508      	movs	r5, #8
 800aec2:	e029      	b.n	800af18 <_scanf_float+0x188>
 800aec4:	2b74      	cmp	r3, #116	; 0x74
 800aec6:	d06f      	beq.n	800afa8 <_scanf_float+0x218>
 800aec8:	2b79      	cmp	r3, #121	; 0x79
 800aeca:	e7f6      	b.n	800aeba <_scanf_float+0x12a>
 800aecc:	6821      	ldr	r1, [r4, #0]
 800aece:	05c8      	lsls	r0, r1, #23
 800aed0:	d51a      	bpl.n	800af08 <_scanf_float+0x178>
 800aed2:	9b02      	ldr	r3, [sp, #8]
 800aed4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800aed8:	6021      	str	r1, [r4, #0]
 800aeda:	f109 0901 	add.w	r9, r9, #1
 800aede:	b11b      	cbz	r3, 800aee8 <_scanf_float+0x158>
 800aee0:	3b01      	subs	r3, #1
 800aee2:	3201      	adds	r2, #1
 800aee4:	9302      	str	r3, [sp, #8]
 800aee6:	60a2      	str	r2, [r4, #8]
 800aee8:	68a3      	ldr	r3, [r4, #8]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	60a3      	str	r3, [r4, #8]
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	3301      	adds	r3, #1
 800aef2:	6123      	str	r3, [r4, #16]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3b01      	subs	r3, #1
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	607b      	str	r3, [r7, #4]
 800aefc:	f340 8084 	ble.w	800b008 <_scanf_float+0x278>
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	3301      	adds	r3, #1
 800af04:	603b      	str	r3, [r7, #0]
 800af06:	e766      	b.n	800add6 <_scanf_float+0x46>
 800af08:	eb1a 0f05 	cmn.w	sl, r5
 800af0c:	f47f af70 	bne.w	800adf0 <_scanf_float+0x60>
 800af10:	6822      	ldr	r2, [r4, #0]
 800af12:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800af16:	6022      	str	r2, [r4, #0]
 800af18:	f806 3b01 	strb.w	r3, [r6], #1
 800af1c:	e7e4      	b.n	800aee8 <_scanf_float+0x158>
 800af1e:	6822      	ldr	r2, [r4, #0]
 800af20:	0610      	lsls	r0, r2, #24
 800af22:	f57f af65 	bpl.w	800adf0 <_scanf_float+0x60>
 800af26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af2a:	e7f4      	b.n	800af16 <_scanf_float+0x186>
 800af2c:	f1ba 0f00 	cmp.w	sl, #0
 800af30:	d10e      	bne.n	800af50 <_scanf_float+0x1c0>
 800af32:	f1b9 0f00 	cmp.w	r9, #0
 800af36:	d10e      	bne.n	800af56 <_scanf_float+0x1c6>
 800af38:	6822      	ldr	r2, [r4, #0]
 800af3a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af3e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af42:	d108      	bne.n	800af56 <_scanf_float+0x1c6>
 800af44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af48:	6022      	str	r2, [r4, #0]
 800af4a:	f04f 0a01 	mov.w	sl, #1
 800af4e:	e7e3      	b.n	800af18 <_scanf_float+0x188>
 800af50:	f1ba 0f02 	cmp.w	sl, #2
 800af54:	d055      	beq.n	800b002 <_scanf_float+0x272>
 800af56:	2d01      	cmp	r5, #1
 800af58:	d002      	beq.n	800af60 <_scanf_float+0x1d0>
 800af5a:	2d04      	cmp	r5, #4
 800af5c:	f47f af48 	bne.w	800adf0 <_scanf_float+0x60>
 800af60:	3501      	adds	r5, #1
 800af62:	b2ed      	uxtb	r5, r5
 800af64:	e7d8      	b.n	800af18 <_scanf_float+0x188>
 800af66:	f1ba 0f01 	cmp.w	sl, #1
 800af6a:	f47f af41 	bne.w	800adf0 <_scanf_float+0x60>
 800af6e:	f04f 0a02 	mov.w	sl, #2
 800af72:	e7d1      	b.n	800af18 <_scanf_float+0x188>
 800af74:	b97d      	cbnz	r5, 800af96 <_scanf_float+0x206>
 800af76:	f1b9 0f00 	cmp.w	r9, #0
 800af7a:	f47f af3c 	bne.w	800adf6 <_scanf_float+0x66>
 800af7e:	6822      	ldr	r2, [r4, #0]
 800af80:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af84:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af88:	f47f af39 	bne.w	800adfe <_scanf_float+0x6e>
 800af8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af90:	6022      	str	r2, [r4, #0]
 800af92:	2501      	movs	r5, #1
 800af94:	e7c0      	b.n	800af18 <_scanf_float+0x188>
 800af96:	2d03      	cmp	r5, #3
 800af98:	d0e2      	beq.n	800af60 <_scanf_float+0x1d0>
 800af9a:	2d05      	cmp	r5, #5
 800af9c:	e7de      	b.n	800af5c <_scanf_float+0x1cc>
 800af9e:	2d02      	cmp	r5, #2
 800afa0:	f47f af26 	bne.w	800adf0 <_scanf_float+0x60>
 800afa4:	2503      	movs	r5, #3
 800afa6:	e7b7      	b.n	800af18 <_scanf_float+0x188>
 800afa8:	2d06      	cmp	r5, #6
 800afaa:	f47f af21 	bne.w	800adf0 <_scanf_float+0x60>
 800afae:	2507      	movs	r5, #7
 800afb0:	e7b2      	b.n	800af18 <_scanf_float+0x188>
 800afb2:	6822      	ldr	r2, [r4, #0]
 800afb4:	0591      	lsls	r1, r2, #22
 800afb6:	f57f af1b 	bpl.w	800adf0 <_scanf_float+0x60>
 800afba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800afbe:	6022      	str	r2, [r4, #0]
 800afc0:	f8cd 9004 	str.w	r9, [sp, #4]
 800afc4:	e7a8      	b.n	800af18 <_scanf_float+0x188>
 800afc6:	6822      	ldr	r2, [r4, #0]
 800afc8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800afcc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800afd0:	d006      	beq.n	800afe0 <_scanf_float+0x250>
 800afd2:	0550      	lsls	r0, r2, #21
 800afd4:	f57f af0c 	bpl.w	800adf0 <_scanf_float+0x60>
 800afd8:	f1b9 0f00 	cmp.w	r9, #0
 800afdc:	f43f af0f 	beq.w	800adfe <_scanf_float+0x6e>
 800afe0:	0591      	lsls	r1, r2, #22
 800afe2:	bf58      	it	pl
 800afe4:	9901      	ldrpl	r1, [sp, #4]
 800afe6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800afea:	bf58      	it	pl
 800afec:	eba9 0101 	subpl.w	r1, r9, r1
 800aff0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aff4:	bf58      	it	pl
 800aff6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800affa:	6022      	str	r2, [r4, #0]
 800affc:	f04f 0900 	mov.w	r9, #0
 800b000:	e78a      	b.n	800af18 <_scanf_float+0x188>
 800b002:	f04f 0a03 	mov.w	sl, #3
 800b006:	e787      	b.n	800af18 <_scanf_float+0x188>
 800b008:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b00c:	4639      	mov	r1, r7
 800b00e:	4640      	mov	r0, r8
 800b010:	4798      	blx	r3
 800b012:	2800      	cmp	r0, #0
 800b014:	f43f aedf 	beq.w	800add6 <_scanf_float+0x46>
 800b018:	e6ea      	b.n	800adf0 <_scanf_float+0x60>
 800b01a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b01e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b022:	463a      	mov	r2, r7
 800b024:	4640      	mov	r0, r8
 800b026:	4798      	blx	r3
 800b028:	6923      	ldr	r3, [r4, #16]
 800b02a:	3b01      	subs	r3, #1
 800b02c:	6123      	str	r3, [r4, #16]
 800b02e:	e6ec      	b.n	800ae0a <_scanf_float+0x7a>
 800b030:	1e6b      	subs	r3, r5, #1
 800b032:	2b06      	cmp	r3, #6
 800b034:	d825      	bhi.n	800b082 <_scanf_float+0x2f2>
 800b036:	2d02      	cmp	r5, #2
 800b038:	d836      	bhi.n	800b0a8 <_scanf_float+0x318>
 800b03a:	455e      	cmp	r6, fp
 800b03c:	f67f aee8 	bls.w	800ae10 <_scanf_float+0x80>
 800b040:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b044:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b048:	463a      	mov	r2, r7
 800b04a:	4640      	mov	r0, r8
 800b04c:	4798      	blx	r3
 800b04e:	6923      	ldr	r3, [r4, #16]
 800b050:	3b01      	subs	r3, #1
 800b052:	6123      	str	r3, [r4, #16]
 800b054:	e7f1      	b.n	800b03a <_scanf_float+0x2aa>
 800b056:	9802      	ldr	r0, [sp, #8]
 800b058:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b05c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b060:	9002      	str	r0, [sp, #8]
 800b062:	463a      	mov	r2, r7
 800b064:	4640      	mov	r0, r8
 800b066:	4798      	blx	r3
 800b068:	6923      	ldr	r3, [r4, #16]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	6123      	str	r3, [r4, #16]
 800b06e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b072:	fa5f fa8a 	uxtb.w	sl, sl
 800b076:	f1ba 0f02 	cmp.w	sl, #2
 800b07a:	d1ec      	bne.n	800b056 <_scanf_float+0x2c6>
 800b07c:	3d03      	subs	r5, #3
 800b07e:	b2ed      	uxtb	r5, r5
 800b080:	1b76      	subs	r6, r6, r5
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	05da      	lsls	r2, r3, #23
 800b086:	d52f      	bpl.n	800b0e8 <_scanf_float+0x358>
 800b088:	055b      	lsls	r3, r3, #21
 800b08a:	d510      	bpl.n	800b0ae <_scanf_float+0x31e>
 800b08c:	455e      	cmp	r6, fp
 800b08e:	f67f aebf 	bls.w	800ae10 <_scanf_float+0x80>
 800b092:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b096:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b09a:	463a      	mov	r2, r7
 800b09c:	4640      	mov	r0, r8
 800b09e:	4798      	blx	r3
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	6123      	str	r3, [r4, #16]
 800b0a6:	e7f1      	b.n	800b08c <_scanf_float+0x2fc>
 800b0a8:	46aa      	mov	sl, r5
 800b0aa:	9602      	str	r6, [sp, #8]
 800b0ac:	e7df      	b.n	800b06e <_scanf_float+0x2de>
 800b0ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b0b2:	6923      	ldr	r3, [r4, #16]
 800b0b4:	2965      	cmp	r1, #101	; 0x65
 800b0b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0ba:	f106 35ff 	add.w	r5, r6, #4294967295
 800b0be:	6123      	str	r3, [r4, #16]
 800b0c0:	d00c      	beq.n	800b0dc <_scanf_float+0x34c>
 800b0c2:	2945      	cmp	r1, #69	; 0x45
 800b0c4:	d00a      	beq.n	800b0dc <_scanf_float+0x34c>
 800b0c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0ca:	463a      	mov	r2, r7
 800b0cc:	4640      	mov	r0, r8
 800b0ce:	4798      	blx	r3
 800b0d0:	6923      	ldr	r3, [r4, #16]
 800b0d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	1eb5      	subs	r5, r6, #2
 800b0da:	6123      	str	r3, [r4, #16]
 800b0dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0e0:	463a      	mov	r2, r7
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	4798      	blx	r3
 800b0e6:	462e      	mov	r6, r5
 800b0e8:	6825      	ldr	r5, [r4, #0]
 800b0ea:	f015 0510 	ands.w	r5, r5, #16
 800b0ee:	d159      	bne.n	800b1a4 <_scanf_float+0x414>
 800b0f0:	7035      	strb	r5, [r6, #0]
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0fc:	d11b      	bne.n	800b136 <_scanf_float+0x3a6>
 800b0fe:	9b01      	ldr	r3, [sp, #4]
 800b100:	454b      	cmp	r3, r9
 800b102:	eba3 0209 	sub.w	r2, r3, r9
 800b106:	d123      	bne.n	800b150 <_scanf_float+0x3c0>
 800b108:	2200      	movs	r2, #0
 800b10a:	4659      	mov	r1, fp
 800b10c:	4640      	mov	r0, r8
 800b10e:	f001 f88d 	bl	800c22c <_strtod_r>
 800b112:	6822      	ldr	r2, [r4, #0]
 800b114:	9b03      	ldr	r3, [sp, #12]
 800b116:	f012 0f02 	tst.w	r2, #2
 800b11a:	ec57 6b10 	vmov	r6, r7, d0
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	d021      	beq.n	800b166 <_scanf_float+0x3d6>
 800b122:	9903      	ldr	r1, [sp, #12]
 800b124:	1d1a      	adds	r2, r3, #4
 800b126:	600a      	str	r2, [r1, #0]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	e9c3 6700 	strd	r6, r7, [r3]
 800b12e:	68e3      	ldr	r3, [r4, #12]
 800b130:	3301      	adds	r3, #1
 800b132:	60e3      	str	r3, [r4, #12]
 800b134:	e66d      	b.n	800ae12 <_scanf_float+0x82>
 800b136:	9b04      	ldr	r3, [sp, #16]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d0e5      	beq.n	800b108 <_scanf_float+0x378>
 800b13c:	9905      	ldr	r1, [sp, #20]
 800b13e:	230a      	movs	r3, #10
 800b140:	462a      	mov	r2, r5
 800b142:	3101      	adds	r1, #1
 800b144:	4640      	mov	r0, r8
 800b146:	f001 f8f9 	bl	800c33c <_strtol_r>
 800b14a:	9b04      	ldr	r3, [sp, #16]
 800b14c:	9e05      	ldr	r6, [sp, #20]
 800b14e:	1ac2      	subs	r2, r0, r3
 800b150:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b154:	429e      	cmp	r6, r3
 800b156:	bf28      	it	cs
 800b158:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b15c:	4912      	ldr	r1, [pc, #72]	; (800b1a8 <_scanf_float+0x418>)
 800b15e:	4630      	mov	r0, r6
 800b160:	f000 f998 	bl	800b494 <siprintf>
 800b164:	e7d0      	b.n	800b108 <_scanf_float+0x378>
 800b166:	9903      	ldr	r1, [sp, #12]
 800b168:	f012 0f04 	tst.w	r2, #4
 800b16c:	f103 0204 	add.w	r2, r3, #4
 800b170:	600a      	str	r2, [r1, #0]
 800b172:	d1d9      	bne.n	800b128 <_scanf_float+0x398>
 800b174:	f8d3 8000 	ldr.w	r8, [r3]
 800b178:	ee10 2a10 	vmov	r2, s0
 800b17c:	ee10 0a10 	vmov	r0, s0
 800b180:	463b      	mov	r3, r7
 800b182:	4639      	mov	r1, r7
 800b184:	f7f5 fcf2 	bl	8000b6c <__aeabi_dcmpun>
 800b188:	b128      	cbz	r0, 800b196 <_scanf_float+0x406>
 800b18a:	4808      	ldr	r0, [pc, #32]	; (800b1ac <_scanf_float+0x41c>)
 800b18c:	f000 f97c 	bl	800b488 <nanf>
 800b190:	ed88 0a00 	vstr	s0, [r8]
 800b194:	e7cb      	b.n	800b12e <_scanf_float+0x39e>
 800b196:	4630      	mov	r0, r6
 800b198:	4639      	mov	r1, r7
 800b19a:	f7f5 fd45 	bl	8000c28 <__aeabi_d2f>
 800b19e:	f8c8 0000 	str.w	r0, [r8]
 800b1a2:	e7c4      	b.n	800b12e <_scanf_float+0x39e>
 800b1a4:	2500      	movs	r5, #0
 800b1a6:	e634      	b.n	800ae12 <_scanf_float+0x82>
 800b1a8:	08010672 	.word	0x08010672
 800b1ac:	08010afb 	.word	0x08010afb

0800b1b0 <iprintf>:
 800b1b0:	b40f      	push	{r0, r1, r2, r3}
 800b1b2:	4b0a      	ldr	r3, [pc, #40]	; (800b1dc <iprintf+0x2c>)
 800b1b4:	b513      	push	{r0, r1, r4, lr}
 800b1b6:	681c      	ldr	r4, [r3, #0]
 800b1b8:	b124      	cbz	r4, 800b1c4 <iprintf+0x14>
 800b1ba:	69a3      	ldr	r3, [r4, #24]
 800b1bc:	b913      	cbnz	r3, 800b1c4 <iprintf+0x14>
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f002 f948 	bl	800d454 <__sinit>
 800b1c4:	ab05      	add	r3, sp, #20
 800b1c6:	9a04      	ldr	r2, [sp, #16]
 800b1c8:	68a1      	ldr	r1, [r4, #8]
 800b1ca:	9301      	str	r3, [sp, #4]
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f003 ff23 	bl	800f018 <_vfiprintf_r>
 800b1d2:	b002      	add	sp, #8
 800b1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1d8:	b004      	add	sp, #16
 800b1da:	4770      	bx	lr
 800b1dc:	2000000c 	.word	0x2000000c

0800b1e0 <_puts_r>:
 800b1e0:	b570      	push	{r4, r5, r6, lr}
 800b1e2:	460e      	mov	r6, r1
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	b118      	cbz	r0, 800b1f0 <_puts_r+0x10>
 800b1e8:	6983      	ldr	r3, [r0, #24]
 800b1ea:	b90b      	cbnz	r3, 800b1f0 <_puts_r+0x10>
 800b1ec:	f002 f932 	bl	800d454 <__sinit>
 800b1f0:	69ab      	ldr	r3, [r5, #24]
 800b1f2:	68ac      	ldr	r4, [r5, #8]
 800b1f4:	b913      	cbnz	r3, 800b1fc <_puts_r+0x1c>
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	f002 f92c 	bl	800d454 <__sinit>
 800b1fc:	4b2c      	ldr	r3, [pc, #176]	; (800b2b0 <_puts_r+0xd0>)
 800b1fe:	429c      	cmp	r4, r3
 800b200:	d120      	bne.n	800b244 <_puts_r+0x64>
 800b202:	686c      	ldr	r4, [r5, #4]
 800b204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b206:	07db      	lsls	r3, r3, #31
 800b208:	d405      	bmi.n	800b216 <_puts_r+0x36>
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	0598      	lsls	r0, r3, #22
 800b20e:	d402      	bmi.n	800b216 <_puts_r+0x36>
 800b210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b212:	f002 fd4e 	bl	800dcb2 <__retarget_lock_acquire_recursive>
 800b216:	89a3      	ldrh	r3, [r4, #12]
 800b218:	0719      	lsls	r1, r3, #28
 800b21a:	d51d      	bpl.n	800b258 <_puts_r+0x78>
 800b21c:	6923      	ldr	r3, [r4, #16]
 800b21e:	b1db      	cbz	r3, 800b258 <_puts_r+0x78>
 800b220:	3e01      	subs	r6, #1
 800b222:	68a3      	ldr	r3, [r4, #8]
 800b224:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b228:	3b01      	subs	r3, #1
 800b22a:	60a3      	str	r3, [r4, #8]
 800b22c:	bb39      	cbnz	r1, 800b27e <_puts_r+0x9e>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	da38      	bge.n	800b2a4 <_puts_r+0xc4>
 800b232:	4622      	mov	r2, r4
 800b234:	210a      	movs	r1, #10
 800b236:	4628      	mov	r0, r5
 800b238:	f001 f882 	bl	800c340 <__swbuf_r>
 800b23c:	3001      	adds	r0, #1
 800b23e:	d011      	beq.n	800b264 <_puts_r+0x84>
 800b240:	250a      	movs	r5, #10
 800b242:	e011      	b.n	800b268 <_puts_r+0x88>
 800b244:	4b1b      	ldr	r3, [pc, #108]	; (800b2b4 <_puts_r+0xd4>)
 800b246:	429c      	cmp	r4, r3
 800b248:	d101      	bne.n	800b24e <_puts_r+0x6e>
 800b24a:	68ac      	ldr	r4, [r5, #8]
 800b24c:	e7da      	b.n	800b204 <_puts_r+0x24>
 800b24e:	4b1a      	ldr	r3, [pc, #104]	; (800b2b8 <_puts_r+0xd8>)
 800b250:	429c      	cmp	r4, r3
 800b252:	bf08      	it	eq
 800b254:	68ec      	ldreq	r4, [r5, #12]
 800b256:	e7d5      	b.n	800b204 <_puts_r+0x24>
 800b258:	4621      	mov	r1, r4
 800b25a:	4628      	mov	r0, r5
 800b25c:	f001 f8d4 	bl	800c408 <__swsetup_r>
 800b260:	2800      	cmp	r0, #0
 800b262:	d0dd      	beq.n	800b220 <_puts_r+0x40>
 800b264:	f04f 35ff 	mov.w	r5, #4294967295
 800b268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b26a:	07da      	lsls	r2, r3, #31
 800b26c:	d405      	bmi.n	800b27a <_puts_r+0x9a>
 800b26e:	89a3      	ldrh	r3, [r4, #12]
 800b270:	059b      	lsls	r3, r3, #22
 800b272:	d402      	bmi.n	800b27a <_puts_r+0x9a>
 800b274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b276:	f002 fd1d 	bl	800dcb4 <__retarget_lock_release_recursive>
 800b27a:	4628      	mov	r0, r5
 800b27c:	bd70      	pop	{r4, r5, r6, pc}
 800b27e:	2b00      	cmp	r3, #0
 800b280:	da04      	bge.n	800b28c <_puts_r+0xac>
 800b282:	69a2      	ldr	r2, [r4, #24]
 800b284:	429a      	cmp	r2, r3
 800b286:	dc06      	bgt.n	800b296 <_puts_r+0xb6>
 800b288:	290a      	cmp	r1, #10
 800b28a:	d004      	beq.n	800b296 <_puts_r+0xb6>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	6022      	str	r2, [r4, #0]
 800b292:	7019      	strb	r1, [r3, #0]
 800b294:	e7c5      	b.n	800b222 <_puts_r+0x42>
 800b296:	4622      	mov	r2, r4
 800b298:	4628      	mov	r0, r5
 800b29a:	f001 f851 	bl	800c340 <__swbuf_r>
 800b29e:	3001      	adds	r0, #1
 800b2a0:	d1bf      	bne.n	800b222 <_puts_r+0x42>
 800b2a2:	e7df      	b.n	800b264 <_puts_r+0x84>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	250a      	movs	r5, #10
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	6022      	str	r2, [r4, #0]
 800b2ac:	701d      	strb	r5, [r3, #0]
 800b2ae:	e7db      	b.n	800b268 <_puts_r+0x88>
 800b2b0:	0801087c 	.word	0x0801087c
 800b2b4:	0801089c 	.word	0x0801089c
 800b2b8:	0801085c 	.word	0x0801085c

0800b2bc <puts>:
 800b2bc:	4b02      	ldr	r3, [pc, #8]	; (800b2c8 <puts+0xc>)
 800b2be:	4601      	mov	r1, r0
 800b2c0:	6818      	ldr	r0, [r3, #0]
 800b2c2:	f7ff bf8d 	b.w	800b1e0 <_puts_r>
 800b2c6:	bf00      	nop
 800b2c8:	2000000c 	.word	0x2000000c

0800b2cc <iscanf>:
 800b2cc:	b40f      	push	{r0, r1, r2, r3}
 800b2ce:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <iscanf+0x2c>)
 800b2d0:	b513      	push	{r0, r1, r4, lr}
 800b2d2:	681c      	ldr	r4, [r3, #0]
 800b2d4:	b124      	cbz	r4, 800b2e0 <iscanf+0x14>
 800b2d6:	69a3      	ldr	r3, [r4, #24]
 800b2d8:	b913      	cbnz	r3, 800b2e0 <iscanf+0x14>
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f002 f8ba 	bl	800d454 <__sinit>
 800b2e0:	ab05      	add	r3, sp, #20
 800b2e2:	9a04      	ldr	r2, [sp, #16]
 800b2e4:	6861      	ldr	r1, [r4, #4]
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f004 f96b 	bl	800f5c4 <_vfiscanf_r>
 800b2ee:	b002      	add	sp, #8
 800b2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2f4:	b004      	add	sp, #16
 800b2f6:	4770      	bx	lr
 800b2f8:	2000000c 	.word	0x2000000c

0800b2fc <setvbuf>:
 800b2fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b300:	461d      	mov	r5, r3
 800b302:	4b5d      	ldr	r3, [pc, #372]	; (800b478 <setvbuf+0x17c>)
 800b304:	681f      	ldr	r7, [r3, #0]
 800b306:	4604      	mov	r4, r0
 800b308:	460e      	mov	r6, r1
 800b30a:	4690      	mov	r8, r2
 800b30c:	b127      	cbz	r7, 800b318 <setvbuf+0x1c>
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	b913      	cbnz	r3, 800b318 <setvbuf+0x1c>
 800b312:	4638      	mov	r0, r7
 800b314:	f002 f89e 	bl	800d454 <__sinit>
 800b318:	4b58      	ldr	r3, [pc, #352]	; (800b47c <setvbuf+0x180>)
 800b31a:	429c      	cmp	r4, r3
 800b31c:	d167      	bne.n	800b3ee <setvbuf+0xf2>
 800b31e:	687c      	ldr	r4, [r7, #4]
 800b320:	f1b8 0f02 	cmp.w	r8, #2
 800b324:	d006      	beq.n	800b334 <setvbuf+0x38>
 800b326:	f1b8 0f01 	cmp.w	r8, #1
 800b32a:	f200 809f 	bhi.w	800b46c <setvbuf+0x170>
 800b32e:	2d00      	cmp	r5, #0
 800b330:	f2c0 809c 	blt.w	800b46c <setvbuf+0x170>
 800b334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b336:	07db      	lsls	r3, r3, #31
 800b338:	d405      	bmi.n	800b346 <setvbuf+0x4a>
 800b33a:	89a3      	ldrh	r3, [r4, #12]
 800b33c:	0598      	lsls	r0, r3, #22
 800b33e:	d402      	bmi.n	800b346 <setvbuf+0x4a>
 800b340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b342:	f002 fcb6 	bl	800dcb2 <__retarget_lock_acquire_recursive>
 800b346:	4621      	mov	r1, r4
 800b348:	4638      	mov	r0, r7
 800b34a:	f001 ffdd 	bl	800d308 <_fflush_r>
 800b34e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b350:	b141      	cbz	r1, 800b364 <setvbuf+0x68>
 800b352:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b356:	4299      	cmp	r1, r3
 800b358:	d002      	beq.n	800b360 <setvbuf+0x64>
 800b35a:	4638      	mov	r0, r7
 800b35c:	f003 fa24 	bl	800e7a8 <_free_r>
 800b360:	2300      	movs	r3, #0
 800b362:	6363      	str	r3, [r4, #52]	; 0x34
 800b364:	2300      	movs	r3, #0
 800b366:	61a3      	str	r3, [r4, #24]
 800b368:	6063      	str	r3, [r4, #4]
 800b36a:	89a3      	ldrh	r3, [r4, #12]
 800b36c:	0619      	lsls	r1, r3, #24
 800b36e:	d503      	bpl.n	800b378 <setvbuf+0x7c>
 800b370:	6921      	ldr	r1, [r4, #16]
 800b372:	4638      	mov	r0, r7
 800b374:	f003 fa18 	bl	800e7a8 <_free_r>
 800b378:	89a3      	ldrh	r3, [r4, #12]
 800b37a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b37e:	f023 0303 	bic.w	r3, r3, #3
 800b382:	f1b8 0f02 	cmp.w	r8, #2
 800b386:	81a3      	strh	r3, [r4, #12]
 800b388:	d06c      	beq.n	800b464 <setvbuf+0x168>
 800b38a:	ab01      	add	r3, sp, #4
 800b38c:	466a      	mov	r2, sp
 800b38e:	4621      	mov	r1, r4
 800b390:	4638      	mov	r0, r7
 800b392:	f002 fca3 	bl	800dcdc <__swhatbuf_r>
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	4318      	orrs	r0, r3
 800b39a:	81a0      	strh	r0, [r4, #12]
 800b39c:	2d00      	cmp	r5, #0
 800b39e:	d130      	bne.n	800b402 <setvbuf+0x106>
 800b3a0:	9d00      	ldr	r5, [sp, #0]
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	f002 fd00 	bl	800dda8 <malloc>
 800b3a8:	4606      	mov	r6, r0
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	d155      	bne.n	800b45a <setvbuf+0x15e>
 800b3ae:	f8dd 9000 	ldr.w	r9, [sp]
 800b3b2:	45a9      	cmp	r9, r5
 800b3b4:	d14a      	bne.n	800b44c <setvbuf+0x150>
 800b3b6:	f04f 35ff 	mov.w	r5, #4294967295
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	60a2      	str	r2, [r4, #8]
 800b3be:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b3c2:	6022      	str	r2, [r4, #0]
 800b3c4:	6122      	str	r2, [r4, #16]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3cc:	6162      	str	r2, [r4, #20]
 800b3ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3d0:	f043 0302 	orr.w	r3, r3, #2
 800b3d4:	07d2      	lsls	r2, r2, #31
 800b3d6:	81a3      	strh	r3, [r4, #12]
 800b3d8:	d405      	bmi.n	800b3e6 <setvbuf+0xea>
 800b3da:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b3de:	d102      	bne.n	800b3e6 <setvbuf+0xea>
 800b3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3e2:	f002 fc67 	bl	800dcb4 <__retarget_lock_release_recursive>
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	b003      	add	sp, #12
 800b3ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3ee:	4b24      	ldr	r3, [pc, #144]	; (800b480 <setvbuf+0x184>)
 800b3f0:	429c      	cmp	r4, r3
 800b3f2:	d101      	bne.n	800b3f8 <setvbuf+0xfc>
 800b3f4:	68bc      	ldr	r4, [r7, #8]
 800b3f6:	e793      	b.n	800b320 <setvbuf+0x24>
 800b3f8:	4b22      	ldr	r3, [pc, #136]	; (800b484 <setvbuf+0x188>)
 800b3fa:	429c      	cmp	r4, r3
 800b3fc:	bf08      	it	eq
 800b3fe:	68fc      	ldreq	r4, [r7, #12]
 800b400:	e78e      	b.n	800b320 <setvbuf+0x24>
 800b402:	2e00      	cmp	r6, #0
 800b404:	d0cd      	beq.n	800b3a2 <setvbuf+0xa6>
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	b913      	cbnz	r3, 800b410 <setvbuf+0x114>
 800b40a:	4638      	mov	r0, r7
 800b40c:	f002 f822 	bl	800d454 <__sinit>
 800b410:	f1b8 0f01 	cmp.w	r8, #1
 800b414:	bf08      	it	eq
 800b416:	89a3      	ldrheq	r3, [r4, #12]
 800b418:	6026      	str	r6, [r4, #0]
 800b41a:	bf04      	itt	eq
 800b41c:	f043 0301 	orreq.w	r3, r3, #1
 800b420:	81a3      	strheq	r3, [r4, #12]
 800b422:	89a2      	ldrh	r2, [r4, #12]
 800b424:	f012 0308 	ands.w	r3, r2, #8
 800b428:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b42c:	d01c      	beq.n	800b468 <setvbuf+0x16c>
 800b42e:	07d3      	lsls	r3, r2, #31
 800b430:	bf41      	itttt	mi
 800b432:	2300      	movmi	r3, #0
 800b434:	426d      	negmi	r5, r5
 800b436:	60a3      	strmi	r3, [r4, #8]
 800b438:	61a5      	strmi	r5, [r4, #24]
 800b43a:	bf58      	it	pl
 800b43c:	60a5      	strpl	r5, [r4, #8]
 800b43e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b440:	f015 0501 	ands.w	r5, r5, #1
 800b444:	d115      	bne.n	800b472 <setvbuf+0x176>
 800b446:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b44a:	e7c8      	b.n	800b3de <setvbuf+0xe2>
 800b44c:	4648      	mov	r0, r9
 800b44e:	f002 fcab 	bl	800dda8 <malloc>
 800b452:	4606      	mov	r6, r0
 800b454:	2800      	cmp	r0, #0
 800b456:	d0ae      	beq.n	800b3b6 <setvbuf+0xba>
 800b458:	464d      	mov	r5, r9
 800b45a:	89a3      	ldrh	r3, [r4, #12]
 800b45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b460:	81a3      	strh	r3, [r4, #12]
 800b462:	e7d0      	b.n	800b406 <setvbuf+0x10a>
 800b464:	2500      	movs	r5, #0
 800b466:	e7a8      	b.n	800b3ba <setvbuf+0xbe>
 800b468:	60a3      	str	r3, [r4, #8]
 800b46a:	e7e8      	b.n	800b43e <setvbuf+0x142>
 800b46c:	f04f 35ff 	mov.w	r5, #4294967295
 800b470:	e7b9      	b.n	800b3e6 <setvbuf+0xea>
 800b472:	2500      	movs	r5, #0
 800b474:	e7b7      	b.n	800b3e6 <setvbuf+0xea>
 800b476:	bf00      	nop
 800b478:	2000000c 	.word	0x2000000c
 800b47c:	0801087c 	.word	0x0801087c
 800b480:	0801089c 	.word	0x0801089c
 800b484:	0801085c 	.word	0x0801085c

0800b488 <nanf>:
 800b488:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b490 <nanf+0x8>
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	7fc00000 	.word	0x7fc00000

0800b494 <siprintf>:
 800b494:	b40e      	push	{r1, r2, r3}
 800b496:	b500      	push	{lr}
 800b498:	b09c      	sub	sp, #112	; 0x70
 800b49a:	ab1d      	add	r3, sp, #116	; 0x74
 800b49c:	9002      	str	r0, [sp, #8]
 800b49e:	9006      	str	r0, [sp, #24]
 800b4a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b4a4:	4809      	ldr	r0, [pc, #36]	; (800b4cc <siprintf+0x38>)
 800b4a6:	9107      	str	r1, [sp, #28]
 800b4a8:	9104      	str	r1, [sp, #16]
 800b4aa:	4909      	ldr	r1, [pc, #36]	; (800b4d0 <siprintf+0x3c>)
 800b4ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4b0:	9105      	str	r1, [sp, #20]
 800b4b2:	6800      	ldr	r0, [r0, #0]
 800b4b4:	9301      	str	r3, [sp, #4]
 800b4b6:	a902      	add	r1, sp, #8
 800b4b8:	f003 fab2 	bl	800ea20 <_svfiprintf_r>
 800b4bc:	9b02      	ldr	r3, [sp, #8]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	701a      	strb	r2, [r3, #0]
 800b4c2:	b01c      	add	sp, #112	; 0x70
 800b4c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4c8:	b003      	add	sp, #12
 800b4ca:	4770      	bx	lr
 800b4cc:	2000000c 	.word	0x2000000c
 800b4d0:	ffff0208 	.word	0xffff0208

0800b4d4 <siscanf>:
 800b4d4:	b40e      	push	{r1, r2, r3}
 800b4d6:	b510      	push	{r4, lr}
 800b4d8:	b09f      	sub	sp, #124	; 0x7c
 800b4da:	ac21      	add	r4, sp, #132	; 0x84
 800b4dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b4e0:	f854 2b04 	ldr.w	r2, [r4], #4
 800b4e4:	9201      	str	r2, [sp, #4]
 800b4e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b4ea:	9004      	str	r0, [sp, #16]
 800b4ec:	9008      	str	r0, [sp, #32]
 800b4ee:	f7f4 fe8f 	bl	8000210 <strlen>
 800b4f2:	4b0c      	ldr	r3, [pc, #48]	; (800b524 <siscanf+0x50>)
 800b4f4:	9005      	str	r0, [sp, #20]
 800b4f6:	9009      	str	r0, [sp, #36]	; 0x24
 800b4f8:	930d      	str	r3, [sp, #52]	; 0x34
 800b4fa:	480b      	ldr	r0, [pc, #44]	; (800b528 <siscanf+0x54>)
 800b4fc:	9a01      	ldr	r2, [sp, #4]
 800b4fe:	6800      	ldr	r0, [r0, #0]
 800b500:	9403      	str	r4, [sp, #12]
 800b502:	2300      	movs	r3, #0
 800b504:	9311      	str	r3, [sp, #68]	; 0x44
 800b506:	9316      	str	r3, [sp, #88]	; 0x58
 800b508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b50c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b510:	a904      	add	r1, sp, #16
 800b512:	4623      	mov	r3, r4
 800b514:	f003 fbde 	bl	800ecd4 <__ssvfiscanf_r>
 800b518:	b01f      	add	sp, #124	; 0x7c
 800b51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b51e:	b003      	add	sp, #12
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	0800b54f 	.word	0x0800b54f
 800b528:	2000000c 	.word	0x2000000c

0800b52c <__sread>:
 800b52c:	b510      	push	{r4, lr}
 800b52e:	460c      	mov	r4, r1
 800b530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b534:	f004 f9c0 	bl	800f8b8 <_read_r>
 800b538:	2800      	cmp	r0, #0
 800b53a:	bfab      	itete	ge
 800b53c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b53e:	89a3      	ldrhlt	r3, [r4, #12]
 800b540:	181b      	addge	r3, r3, r0
 800b542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b546:	bfac      	ite	ge
 800b548:	6563      	strge	r3, [r4, #84]	; 0x54
 800b54a:	81a3      	strhlt	r3, [r4, #12]
 800b54c:	bd10      	pop	{r4, pc}

0800b54e <__seofread>:
 800b54e:	2000      	movs	r0, #0
 800b550:	4770      	bx	lr

0800b552 <__swrite>:
 800b552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b556:	461f      	mov	r7, r3
 800b558:	898b      	ldrh	r3, [r1, #12]
 800b55a:	05db      	lsls	r3, r3, #23
 800b55c:	4605      	mov	r5, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	4616      	mov	r6, r2
 800b562:	d505      	bpl.n	800b570 <__swrite+0x1e>
 800b564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b568:	2302      	movs	r3, #2
 800b56a:	2200      	movs	r2, #0
 800b56c:	f002 fba4 	bl	800dcb8 <_lseek_r>
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b57a:	81a3      	strh	r3, [r4, #12]
 800b57c:	4632      	mov	r2, r6
 800b57e:	463b      	mov	r3, r7
 800b580:	4628      	mov	r0, r5
 800b582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b586:	f000 bf2d 	b.w	800c3e4 <_write_r>

0800b58a <__sseek>:
 800b58a:	b510      	push	{r4, lr}
 800b58c:	460c      	mov	r4, r1
 800b58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b592:	f002 fb91 	bl	800dcb8 <_lseek_r>
 800b596:	1c43      	adds	r3, r0, #1
 800b598:	89a3      	ldrh	r3, [r4, #12]
 800b59a:	bf15      	itete	ne
 800b59c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b59e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5a6:	81a3      	strheq	r3, [r4, #12]
 800b5a8:	bf18      	it	ne
 800b5aa:	81a3      	strhne	r3, [r4, #12]
 800b5ac:	bd10      	pop	{r4, pc}

0800b5ae <__sclose>:
 800b5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b2:	f000 bf97 	b.w	800c4e4 <_close_r>

0800b5b6 <strstr>:
 800b5b6:	780a      	ldrb	r2, [r1, #0]
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	b96a      	cbnz	r2, 800b5d8 <strstr+0x22>
 800b5bc:	bd70      	pop	{r4, r5, r6, pc}
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d109      	bne.n	800b5d6 <strstr+0x20>
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0f6      	beq.n	800b5bc <strstr+0x6>
 800b5ce:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b5d2:	429e      	cmp	r6, r3
 800b5d4:	d0f7      	beq.n	800b5c6 <strstr+0x10>
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	7803      	ldrb	r3, [r0, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1ef      	bne.n	800b5be <strstr+0x8>
 800b5de:	4618      	mov	r0, r3
 800b5e0:	e7ec      	b.n	800b5bc <strstr+0x6>

0800b5e2 <sulp>:
 800b5e2:	b570      	push	{r4, r5, r6, lr}
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	460d      	mov	r5, r1
 800b5e8:	ec45 4b10 	vmov	d0, r4, r5
 800b5ec:	4616      	mov	r6, r2
 800b5ee:	f002 ff75 	bl	800e4dc <__ulp>
 800b5f2:	ec51 0b10 	vmov	r0, r1, d0
 800b5f6:	b17e      	cbz	r6, 800b618 <sulp+0x36>
 800b5f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b5fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b600:	2b00      	cmp	r3, #0
 800b602:	dd09      	ble.n	800b618 <sulp+0x36>
 800b604:	051b      	lsls	r3, r3, #20
 800b606:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b60a:	2400      	movs	r4, #0
 800b60c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b610:	4622      	mov	r2, r4
 800b612:	462b      	mov	r3, r5
 800b614:	f7f5 f810 	bl	8000638 <__aeabi_dmul>
 800b618:	bd70      	pop	{r4, r5, r6, pc}
 800b61a:	0000      	movs	r0, r0
 800b61c:	0000      	movs	r0, r0
	...

0800b620 <_strtod_l>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	ed2d 8b02 	vpush	{d8}
 800b628:	b09d      	sub	sp, #116	; 0x74
 800b62a:	461f      	mov	r7, r3
 800b62c:	2300      	movs	r3, #0
 800b62e:	9318      	str	r3, [sp, #96]	; 0x60
 800b630:	4ba2      	ldr	r3, [pc, #648]	; (800b8bc <_strtod_l+0x29c>)
 800b632:	9213      	str	r2, [sp, #76]	; 0x4c
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	9305      	str	r3, [sp, #20]
 800b638:	4604      	mov	r4, r0
 800b63a:	4618      	mov	r0, r3
 800b63c:	4688      	mov	r8, r1
 800b63e:	f7f4 fde7 	bl	8000210 <strlen>
 800b642:	f04f 0a00 	mov.w	sl, #0
 800b646:	4605      	mov	r5, r0
 800b648:	f04f 0b00 	mov.w	fp, #0
 800b64c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b652:	781a      	ldrb	r2, [r3, #0]
 800b654:	2a2b      	cmp	r2, #43	; 0x2b
 800b656:	d04e      	beq.n	800b6f6 <_strtod_l+0xd6>
 800b658:	d83b      	bhi.n	800b6d2 <_strtod_l+0xb2>
 800b65a:	2a0d      	cmp	r2, #13
 800b65c:	d834      	bhi.n	800b6c8 <_strtod_l+0xa8>
 800b65e:	2a08      	cmp	r2, #8
 800b660:	d834      	bhi.n	800b6cc <_strtod_l+0xac>
 800b662:	2a00      	cmp	r2, #0
 800b664:	d03e      	beq.n	800b6e4 <_strtod_l+0xc4>
 800b666:	2300      	movs	r3, #0
 800b668:	930a      	str	r3, [sp, #40]	; 0x28
 800b66a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b66c:	7833      	ldrb	r3, [r6, #0]
 800b66e:	2b30      	cmp	r3, #48	; 0x30
 800b670:	f040 80b0 	bne.w	800b7d4 <_strtod_l+0x1b4>
 800b674:	7873      	ldrb	r3, [r6, #1]
 800b676:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b67a:	2b58      	cmp	r3, #88	; 0x58
 800b67c:	d168      	bne.n	800b750 <_strtod_l+0x130>
 800b67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	ab18      	add	r3, sp, #96	; 0x60
 800b684:	9702      	str	r7, [sp, #8]
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	4a8d      	ldr	r2, [pc, #564]	; (800b8c0 <_strtod_l+0x2a0>)
 800b68a:	ab19      	add	r3, sp, #100	; 0x64
 800b68c:	a917      	add	r1, sp, #92	; 0x5c
 800b68e:	4620      	mov	r0, r4
 800b690:	f002 f802 	bl	800d698 <__gethex>
 800b694:	f010 0707 	ands.w	r7, r0, #7
 800b698:	4605      	mov	r5, r0
 800b69a:	d005      	beq.n	800b6a8 <_strtod_l+0x88>
 800b69c:	2f06      	cmp	r7, #6
 800b69e:	d12c      	bne.n	800b6fa <_strtod_l+0xda>
 800b6a0:	3601      	adds	r6, #1
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	9617      	str	r6, [sp, #92]	; 0x5c
 800b6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f040 8590 	bne.w	800c1d0 <_strtod_l+0xbb0>
 800b6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b2:	b1eb      	cbz	r3, 800b6f0 <_strtod_l+0xd0>
 800b6b4:	4652      	mov	r2, sl
 800b6b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b6ba:	ec43 2b10 	vmov	d0, r2, r3
 800b6be:	b01d      	add	sp, #116	; 0x74
 800b6c0:	ecbd 8b02 	vpop	{d8}
 800b6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c8:	2a20      	cmp	r2, #32
 800b6ca:	d1cc      	bne.n	800b666 <_strtod_l+0x46>
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	9317      	str	r3, [sp, #92]	; 0x5c
 800b6d0:	e7be      	b.n	800b650 <_strtod_l+0x30>
 800b6d2:	2a2d      	cmp	r2, #45	; 0x2d
 800b6d4:	d1c7      	bne.n	800b666 <_strtod_l+0x46>
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	920a      	str	r2, [sp, #40]	; 0x28
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6de:	785b      	ldrb	r3, [r3, #1]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1c2      	bne.n	800b66a <_strtod_l+0x4a>
 800b6e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f040 856e 	bne.w	800c1cc <_strtod_l+0xbac>
 800b6f0:	4652      	mov	r2, sl
 800b6f2:	465b      	mov	r3, fp
 800b6f4:	e7e1      	b.n	800b6ba <_strtod_l+0x9a>
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	e7ee      	b.n	800b6d8 <_strtod_l+0xb8>
 800b6fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b6fc:	b13a      	cbz	r2, 800b70e <_strtod_l+0xee>
 800b6fe:	2135      	movs	r1, #53	; 0x35
 800b700:	a81a      	add	r0, sp, #104	; 0x68
 800b702:	f002 fff6 	bl	800e6f2 <__copybits>
 800b706:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b708:	4620      	mov	r0, r4
 800b70a:	f002 fbb5 	bl	800de78 <_Bfree>
 800b70e:	3f01      	subs	r7, #1
 800b710:	2f04      	cmp	r7, #4
 800b712:	d806      	bhi.n	800b722 <_strtod_l+0x102>
 800b714:	e8df f007 	tbb	[pc, r7]
 800b718:	1714030a 	.word	0x1714030a
 800b71c:	0a          	.byte	0x0a
 800b71d:	00          	.byte	0x00
 800b71e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b722:	0728      	lsls	r0, r5, #28
 800b724:	d5c0      	bpl.n	800b6a8 <_strtod_l+0x88>
 800b726:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b72a:	e7bd      	b.n	800b6a8 <_strtod_l+0x88>
 800b72c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b730:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b732:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b736:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b73a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b73e:	e7f0      	b.n	800b722 <_strtod_l+0x102>
 800b740:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b8c4 <_strtod_l+0x2a4>
 800b744:	e7ed      	b.n	800b722 <_strtod_l+0x102>
 800b746:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b74a:	f04f 3aff 	mov.w	sl, #4294967295
 800b74e:	e7e8      	b.n	800b722 <_strtod_l+0x102>
 800b750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	9217      	str	r2, [sp, #92]	; 0x5c
 800b756:	785b      	ldrb	r3, [r3, #1]
 800b758:	2b30      	cmp	r3, #48	; 0x30
 800b75a:	d0f9      	beq.n	800b750 <_strtod_l+0x130>
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d0a3      	beq.n	800b6a8 <_strtod_l+0x88>
 800b760:	2301      	movs	r3, #1
 800b762:	f04f 0900 	mov.w	r9, #0
 800b766:	9304      	str	r3, [sp, #16]
 800b768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b76a:	9308      	str	r3, [sp, #32]
 800b76c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b770:	464f      	mov	r7, r9
 800b772:	220a      	movs	r2, #10
 800b774:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b776:	7806      	ldrb	r6, [r0, #0]
 800b778:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b77c:	b2d9      	uxtb	r1, r3
 800b77e:	2909      	cmp	r1, #9
 800b780:	d92a      	bls.n	800b7d8 <_strtod_l+0x1b8>
 800b782:	9905      	ldr	r1, [sp, #20]
 800b784:	462a      	mov	r2, r5
 800b786:	f004 f98f 	bl	800faa8 <strncmp>
 800b78a:	b398      	cbz	r0, 800b7f4 <_strtod_l+0x1d4>
 800b78c:	2000      	movs	r0, #0
 800b78e:	4632      	mov	r2, r6
 800b790:	463d      	mov	r5, r7
 800b792:	9005      	str	r0, [sp, #20]
 800b794:	4603      	mov	r3, r0
 800b796:	2a65      	cmp	r2, #101	; 0x65
 800b798:	d001      	beq.n	800b79e <_strtod_l+0x17e>
 800b79a:	2a45      	cmp	r2, #69	; 0x45
 800b79c:	d118      	bne.n	800b7d0 <_strtod_l+0x1b0>
 800b79e:	b91d      	cbnz	r5, 800b7a8 <_strtod_l+0x188>
 800b7a0:	9a04      	ldr	r2, [sp, #16]
 800b7a2:	4302      	orrs	r2, r0
 800b7a4:	d09e      	beq.n	800b6e4 <_strtod_l+0xc4>
 800b7a6:	2500      	movs	r5, #0
 800b7a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b7ac:	f108 0201 	add.w	r2, r8, #1
 800b7b0:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b7b6:	2a2b      	cmp	r2, #43	; 0x2b
 800b7b8:	d075      	beq.n	800b8a6 <_strtod_l+0x286>
 800b7ba:	2a2d      	cmp	r2, #45	; 0x2d
 800b7bc:	d07b      	beq.n	800b8b6 <_strtod_l+0x296>
 800b7be:	f04f 0c00 	mov.w	ip, #0
 800b7c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b7c6:	2909      	cmp	r1, #9
 800b7c8:	f240 8082 	bls.w	800b8d0 <_strtod_l+0x2b0>
 800b7cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b7d0:	2600      	movs	r6, #0
 800b7d2:	e09d      	b.n	800b910 <_strtod_l+0x2f0>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	e7c4      	b.n	800b762 <_strtod_l+0x142>
 800b7d8:	2f08      	cmp	r7, #8
 800b7da:	bfd8      	it	le
 800b7dc:	9907      	ldrle	r1, [sp, #28]
 800b7de:	f100 0001 	add.w	r0, r0, #1
 800b7e2:	bfda      	itte	le
 800b7e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7e8:	9307      	strle	r3, [sp, #28]
 800b7ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b7ee:	3701      	adds	r7, #1
 800b7f0:	9017      	str	r0, [sp, #92]	; 0x5c
 800b7f2:	e7bf      	b.n	800b774 <_strtod_l+0x154>
 800b7f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7f6:	195a      	adds	r2, r3, r5
 800b7f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7fa:	5d5a      	ldrb	r2, [r3, r5]
 800b7fc:	2f00      	cmp	r7, #0
 800b7fe:	d037      	beq.n	800b870 <_strtod_l+0x250>
 800b800:	9005      	str	r0, [sp, #20]
 800b802:	463d      	mov	r5, r7
 800b804:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b808:	2b09      	cmp	r3, #9
 800b80a:	d912      	bls.n	800b832 <_strtod_l+0x212>
 800b80c:	2301      	movs	r3, #1
 800b80e:	e7c2      	b.n	800b796 <_strtod_l+0x176>
 800b810:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b812:	1c5a      	adds	r2, r3, #1
 800b814:	9217      	str	r2, [sp, #92]	; 0x5c
 800b816:	785a      	ldrb	r2, [r3, #1]
 800b818:	3001      	adds	r0, #1
 800b81a:	2a30      	cmp	r2, #48	; 0x30
 800b81c:	d0f8      	beq.n	800b810 <_strtod_l+0x1f0>
 800b81e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b822:	2b08      	cmp	r3, #8
 800b824:	f200 84d9 	bhi.w	800c1da <_strtod_l+0xbba>
 800b828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b82a:	9005      	str	r0, [sp, #20]
 800b82c:	2000      	movs	r0, #0
 800b82e:	9308      	str	r3, [sp, #32]
 800b830:	4605      	mov	r5, r0
 800b832:	3a30      	subs	r2, #48	; 0x30
 800b834:	f100 0301 	add.w	r3, r0, #1
 800b838:	d014      	beq.n	800b864 <_strtod_l+0x244>
 800b83a:	9905      	ldr	r1, [sp, #20]
 800b83c:	4419      	add	r1, r3
 800b83e:	9105      	str	r1, [sp, #20]
 800b840:	462b      	mov	r3, r5
 800b842:	eb00 0e05 	add.w	lr, r0, r5
 800b846:	210a      	movs	r1, #10
 800b848:	4573      	cmp	r3, lr
 800b84a:	d113      	bne.n	800b874 <_strtod_l+0x254>
 800b84c:	182b      	adds	r3, r5, r0
 800b84e:	2b08      	cmp	r3, #8
 800b850:	f105 0501 	add.w	r5, r5, #1
 800b854:	4405      	add	r5, r0
 800b856:	dc1c      	bgt.n	800b892 <_strtod_l+0x272>
 800b858:	9907      	ldr	r1, [sp, #28]
 800b85a:	230a      	movs	r3, #10
 800b85c:	fb03 2301 	mla	r3, r3, r1, r2
 800b860:	9307      	str	r3, [sp, #28]
 800b862:	2300      	movs	r3, #0
 800b864:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b866:	1c51      	adds	r1, r2, #1
 800b868:	9117      	str	r1, [sp, #92]	; 0x5c
 800b86a:	7852      	ldrb	r2, [r2, #1]
 800b86c:	4618      	mov	r0, r3
 800b86e:	e7c9      	b.n	800b804 <_strtod_l+0x1e4>
 800b870:	4638      	mov	r0, r7
 800b872:	e7d2      	b.n	800b81a <_strtod_l+0x1fa>
 800b874:	2b08      	cmp	r3, #8
 800b876:	dc04      	bgt.n	800b882 <_strtod_l+0x262>
 800b878:	9e07      	ldr	r6, [sp, #28]
 800b87a:	434e      	muls	r6, r1
 800b87c:	9607      	str	r6, [sp, #28]
 800b87e:	3301      	adds	r3, #1
 800b880:	e7e2      	b.n	800b848 <_strtod_l+0x228>
 800b882:	f103 0c01 	add.w	ip, r3, #1
 800b886:	f1bc 0f10 	cmp.w	ip, #16
 800b88a:	bfd8      	it	le
 800b88c:	fb01 f909 	mulle.w	r9, r1, r9
 800b890:	e7f5      	b.n	800b87e <_strtod_l+0x25e>
 800b892:	2d10      	cmp	r5, #16
 800b894:	bfdc      	itt	le
 800b896:	230a      	movle	r3, #10
 800b898:	fb03 2909 	mlale	r9, r3, r9, r2
 800b89c:	e7e1      	b.n	800b862 <_strtod_l+0x242>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	9305      	str	r3, [sp, #20]
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e77c      	b.n	800b7a0 <_strtod_l+0x180>
 800b8a6:	f04f 0c00 	mov.w	ip, #0
 800b8aa:	f108 0202 	add.w	r2, r8, #2
 800b8ae:	9217      	str	r2, [sp, #92]	; 0x5c
 800b8b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b8b4:	e785      	b.n	800b7c2 <_strtod_l+0x1a2>
 800b8b6:	f04f 0c01 	mov.w	ip, #1
 800b8ba:	e7f6      	b.n	800b8aa <_strtod_l+0x28a>
 800b8bc:	08010924 	.word	0x08010924
 800b8c0:	08010678 	.word	0x08010678
 800b8c4:	7ff00000 	.word	0x7ff00000
 800b8c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b8ca:	1c51      	adds	r1, r2, #1
 800b8cc:	9117      	str	r1, [sp, #92]	; 0x5c
 800b8ce:	7852      	ldrb	r2, [r2, #1]
 800b8d0:	2a30      	cmp	r2, #48	; 0x30
 800b8d2:	d0f9      	beq.n	800b8c8 <_strtod_l+0x2a8>
 800b8d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b8d8:	2908      	cmp	r1, #8
 800b8da:	f63f af79 	bhi.w	800b7d0 <_strtod_l+0x1b0>
 800b8de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b8e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b8e4:	9206      	str	r2, [sp, #24]
 800b8e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b8e8:	1c51      	adds	r1, r2, #1
 800b8ea:	9117      	str	r1, [sp, #92]	; 0x5c
 800b8ec:	7852      	ldrb	r2, [r2, #1]
 800b8ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b8f2:	2e09      	cmp	r6, #9
 800b8f4:	d937      	bls.n	800b966 <_strtod_l+0x346>
 800b8f6:	9e06      	ldr	r6, [sp, #24]
 800b8f8:	1b89      	subs	r1, r1, r6
 800b8fa:	2908      	cmp	r1, #8
 800b8fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b900:	dc02      	bgt.n	800b908 <_strtod_l+0x2e8>
 800b902:	4576      	cmp	r6, lr
 800b904:	bfa8      	it	ge
 800b906:	4676      	movge	r6, lr
 800b908:	f1bc 0f00 	cmp.w	ip, #0
 800b90c:	d000      	beq.n	800b910 <_strtod_l+0x2f0>
 800b90e:	4276      	negs	r6, r6
 800b910:	2d00      	cmp	r5, #0
 800b912:	d14d      	bne.n	800b9b0 <_strtod_l+0x390>
 800b914:	9904      	ldr	r1, [sp, #16]
 800b916:	4301      	orrs	r1, r0
 800b918:	f47f aec6 	bne.w	800b6a8 <_strtod_l+0x88>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f47f aee1 	bne.w	800b6e4 <_strtod_l+0xc4>
 800b922:	2a69      	cmp	r2, #105	; 0x69
 800b924:	d027      	beq.n	800b976 <_strtod_l+0x356>
 800b926:	dc24      	bgt.n	800b972 <_strtod_l+0x352>
 800b928:	2a49      	cmp	r2, #73	; 0x49
 800b92a:	d024      	beq.n	800b976 <_strtod_l+0x356>
 800b92c:	2a4e      	cmp	r2, #78	; 0x4e
 800b92e:	f47f aed9 	bne.w	800b6e4 <_strtod_l+0xc4>
 800b932:	499f      	ldr	r1, [pc, #636]	; (800bbb0 <_strtod_l+0x590>)
 800b934:	a817      	add	r0, sp, #92	; 0x5c
 800b936:	f002 f907 	bl	800db48 <__match>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	f43f aed2 	beq.w	800b6e4 <_strtod_l+0xc4>
 800b940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b28      	cmp	r3, #40	; 0x28
 800b946:	d12d      	bne.n	800b9a4 <_strtod_l+0x384>
 800b948:	499a      	ldr	r1, [pc, #616]	; (800bbb4 <_strtod_l+0x594>)
 800b94a:	aa1a      	add	r2, sp, #104	; 0x68
 800b94c:	a817      	add	r0, sp, #92	; 0x5c
 800b94e:	f002 f90f 	bl	800db70 <__hexnan>
 800b952:	2805      	cmp	r0, #5
 800b954:	d126      	bne.n	800b9a4 <_strtod_l+0x384>
 800b956:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b958:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b95c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b960:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b964:	e6a0      	b.n	800b6a8 <_strtod_l+0x88>
 800b966:	210a      	movs	r1, #10
 800b968:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b96c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b970:	e7b9      	b.n	800b8e6 <_strtod_l+0x2c6>
 800b972:	2a6e      	cmp	r2, #110	; 0x6e
 800b974:	e7db      	b.n	800b92e <_strtod_l+0x30e>
 800b976:	4990      	ldr	r1, [pc, #576]	; (800bbb8 <_strtod_l+0x598>)
 800b978:	a817      	add	r0, sp, #92	; 0x5c
 800b97a:	f002 f8e5 	bl	800db48 <__match>
 800b97e:	2800      	cmp	r0, #0
 800b980:	f43f aeb0 	beq.w	800b6e4 <_strtod_l+0xc4>
 800b984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b986:	498d      	ldr	r1, [pc, #564]	; (800bbbc <_strtod_l+0x59c>)
 800b988:	3b01      	subs	r3, #1
 800b98a:	a817      	add	r0, sp, #92	; 0x5c
 800b98c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b98e:	f002 f8db 	bl	800db48 <__match>
 800b992:	b910      	cbnz	r0, 800b99a <_strtod_l+0x37a>
 800b994:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b996:	3301      	adds	r3, #1
 800b998:	9317      	str	r3, [sp, #92]	; 0x5c
 800b99a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bbcc <_strtod_l+0x5ac>
 800b99e:	f04f 0a00 	mov.w	sl, #0
 800b9a2:	e681      	b.n	800b6a8 <_strtod_l+0x88>
 800b9a4:	4886      	ldr	r0, [pc, #536]	; (800bbc0 <_strtod_l+0x5a0>)
 800b9a6:	f004 f82f 	bl	800fa08 <nan>
 800b9aa:	ec5b ab10 	vmov	sl, fp, d0
 800b9ae:	e67b      	b.n	800b6a8 <_strtod_l+0x88>
 800b9b0:	9b05      	ldr	r3, [sp, #20]
 800b9b2:	9807      	ldr	r0, [sp, #28]
 800b9b4:	1af3      	subs	r3, r6, r3
 800b9b6:	2f00      	cmp	r7, #0
 800b9b8:	bf08      	it	eq
 800b9ba:	462f      	moveq	r7, r5
 800b9bc:	2d10      	cmp	r5, #16
 800b9be:	9306      	str	r3, [sp, #24]
 800b9c0:	46a8      	mov	r8, r5
 800b9c2:	bfa8      	it	ge
 800b9c4:	f04f 0810 	movge.w	r8, #16
 800b9c8:	f7f4 fdbc 	bl	8000544 <__aeabi_ui2d>
 800b9cc:	2d09      	cmp	r5, #9
 800b9ce:	4682      	mov	sl, r0
 800b9d0:	468b      	mov	fp, r1
 800b9d2:	dd13      	ble.n	800b9fc <_strtod_l+0x3dc>
 800b9d4:	4b7b      	ldr	r3, [pc, #492]	; (800bbc4 <_strtod_l+0x5a4>)
 800b9d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b9da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b9de:	f7f4 fe2b 	bl	8000638 <__aeabi_dmul>
 800b9e2:	4682      	mov	sl, r0
 800b9e4:	4648      	mov	r0, r9
 800b9e6:	468b      	mov	fp, r1
 800b9e8:	f7f4 fdac 	bl	8000544 <__aeabi_ui2d>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	4650      	mov	r0, sl
 800b9f2:	4659      	mov	r1, fp
 800b9f4:	f7f4 fc6a 	bl	80002cc <__adddf3>
 800b9f8:	4682      	mov	sl, r0
 800b9fa:	468b      	mov	fp, r1
 800b9fc:	2d0f      	cmp	r5, #15
 800b9fe:	dc38      	bgt.n	800ba72 <_strtod_l+0x452>
 800ba00:	9b06      	ldr	r3, [sp, #24]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f43f ae50 	beq.w	800b6a8 <_strtod_l+0x88>
 800ba08:	dd24      	ble.n	800ba54 <_strtod_l+0x434>
 800ba0a:	2b16      	cmp	r3, #22
 800ba0c:	dc0b      	bgt.n	800ba26 <_strtod_l+0x406>
 800ba0e:	496d      	ldr	r1, [pc, #436]	; (800bbc4 <_strtod_l+0x5a4>)
 800ba10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba18:	4652      	mov	r2, sl
 800ba1a:	465b      	mov	r3, fp
 800ba1c:	f7f4 fe0c 	bl	8000638 <__aeabi_dmul>
 800ba20:	4682      	mov	sl, r0
 800ba22:	468b      	mov	fp, r1
 800ba24:	e640      	b.n	800b6a8 <_strtod_l+0x88>
 800ba26:	9a06      	ldr	r2, [sp, #24]
 800ba28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	db20      	blt.n	800ba72 <_strtod_l+0x452>
 800ba30:	4c64      	ldr	r4, [pc, #400]	; (800bbc4 <_strtod_l+0x5a4>)
 800ba32:	f1c5 050f 	rsb	r5, r5, #15
 800ba36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba3a:	4652      	mov	r2, sl
 800ba3c:	465b      	mov	r3, fp
 800ba3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba42:	f7f4 fdf9 	bl	8000638 <__aeabi_dmul>
 800ba46:	9b06      	ldr	r3, [sp, #24]
 800ba48:	1b5d      	subs	r5, r3, r5
 800ba4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba52:	e7e3      	b.n	800ba1c <_strtod_l+0x3fc>
 800ba54:	9b06      	ldr	r3, [sp, #24]
 800ba56:	3316      	adds	r3, #22
 800ba58:	db0b      	blt.n	800ba72 <_strtod_l+0x452>
 800ba5a:	9b05      	ldr	r3, [sp, #20]
 800ba5c:	1b9e      	subs	r6, r3, r6
 800ba5e:	4b59      	ldr	r3, [pc, #356]	; (800bbc4 <_strtod_l+0x5a4>)
 800ba60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ba64:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba68:	4650      	mov	r0, sl
 800ba6a:	4659      	mov	r1, fp
 800ba6c:	f7f4 ff0e 	bl	800088c <__aeabi_ddiv>
 800ba70:	e7d6      	b.n	800ba20 <_strtod_l+0x400>
 800ba72:	9b06      	ldr	r3, [sp, #24]
 800ba74:	eba5 0808 	sub.w	r8, r5, r8
 800ba78:	4498      	add	r8, r3
 800ba7a:	f1b8 0f00 	cmp.w	r8, #0
 800ba7e:	dd74      	ble.n	800bb6a <_strtod_l+0x54a>
 800ba80:	f018 030f 	ands.w	r3, r8, #15
 800ba84:	d00a      	beq.n	800ba9c <_strtod_l+0x47c>
 800ba86:	494f      	ldr	r1, [pc, #316]	; (800bbc4 <_strtod_l+0x5a4>)
 800ba88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba8c:	4652      	mov	r2, sl
 800ba8e:	465b      	mov	r3, fp
 800ba90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba94:	f7f4 fdd0 	bl	8000638 <__aeabi_dmul>
 800ba98:	4682      	mov	sl, r0
 800ba9a:	468b      	mov	fp, r1
 800ba9c:	f038 080f 	bics.w	r8, r8, #15
 800baa0:	d04f      	beq.n	800bb42 <_strtod_l+0x522>
 800baa2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800baa6:	dd22      	ble.n	800baee <_strtod_l+0x4ce>
 800baa8:	2500      	movs	r5, #0
 800baaa:	462e      	mov	r6, r5
 800baac:	9507      	str	r5, [sp, #28]
 800baae:	9505      	str	r5, [sp, #20]
 800bab0:	2322      	movs	r3, #34	; 0x22
 800bab2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bbcc <_strtod_l+0x5ac>
 800bab6:	6023      	str	r3, [r4, #0]
 800bab8:	f04f 0a00 	mov.w	sl, #0
 800babc:	9b07      	ldr	r3, [sp, #28]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f43f adf2 	beq.w	800b6a8 <_strtod_l+0x88>
 800bac4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bac6:	4620      	mov	r0, r4
 800bac8:	f002 f9d6 	bl	800de78 <_Bfree>
 800bacc:	9905      	ldr	r1, [sp, #20]
 800bace:	4620      	mov	r0, r4
 800bad0:	f002 f9d2 	bl	800de78 <_Bfree>
 800bad4:	4631      	mov	r1, r6
 800bad6:	4620      	mov	r0, r4
 800bad8:	f002 f9ce 	bl	800de78 <_Bfree>
 800badc:	9907      	ldr	r1, [sp, #28]
 800bade:	4620      	mov	r0, r4
 800bae0:	f002 f9ca 	bl	800de78 <_Bfree>
 800bae4:	4629      	mov	r1, r5
 800bae6:	4620      	mov	r0, r4
 800bae8:	f002 f9c6 	bl	800de78 <_Bfree>
 800baec:	e5dc      	b.n	800b6a8 <_strtod_l+0x88>
 800baee:	4b36      	ldr	r3, [pc, #216]	; (800bbc8 <_strtod_l+0x5a8>)
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	2300      	movs	r3, #0
 800baf4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800baf8:	4650      	mov	r0, sl
 800bafa:	4659      	mov	r1, fp
 800bafc:	4699      	mov	r9, r3
 800bafe:	f1b8 0f01 	cmp.w	r8, #1
 800bb02:	dc21      	bgt.n	800bb48 <_strtod_l+0x528>
 800bb04:	b10b      	cbz	r3, 800bb0a <_strtod_l+0x4ea>
 800bb06:	4682      	mov	sl, r0
 800bb08:	468b      	mov	fp, r1
 800bb0a:	4b2f      	ldr	r3, [pc, #188]	; (800bbc8 <_strtod_l+0x5a8>)
 800bb0c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bb10:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bb14:	4652      	mov	r2, sl
 800bb16:	465b      	mov	r3, fp
 800bb18:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bb1c:	f7f4 fd8c 	bl	8000638 <__aeabi_dmul>
 800bb20:	4b2a      	ldr	r3, [pc, #168]	; (800bbcc <_strtod_l+0x5ac>)
 800bb22:	460a      	mov	r2, r1
 800bb24:	400b      	ands	r3, r1
 800bb26:	492a      	ldr	r1, [pc, #168]	; (800bbd0 <_strtod_l+0x5b0>)
 800bb28:	428b      	cmp	r3, r1
 800bb2a:	4682      	mov	sl, r0
 800bb2c:	d8bc      	bhi.n	800baa8 <_strtod_l+0x488>
 800bb2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bb32:	428b      	cmp	r3, r1
 800bb34:	bf86      	itte	hi
 800bb36:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bbd4 <_strtod_l+0x5b4>
 800bb3a:	f04f 3aff 	movhi.w	sl, #4294967295
 800bb3e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bb42:	2300      	movs	r3, #0
 800bb44:	9304      	str	r3, [sp, #16]
 800bb46:	e084      	b.n	800bc52 <_strtod_l+0x632>
 800bb48:	f018 0f01 	tst.w	r8, #1
 800bb4c:	d005      	beq.n	800bb5a <_strtod_l+0x53a>
 800bb4e:	9b04      	ldr	r3, [sp, #16]
 800bb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb54:	f7f4 fd70 	bl	8000638 <__aeabi_dmul>
 800bb58:	2301      	movs	r3, #1
 800bb5a:	9a04      	ldr	r2, [sp, #16]
 800bb5c:	3208      	adds	r2, #8
 800bb5e:	f109 0901 	add.w	r9, r9, #1
 800bb62:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb66:	9204      	str	r2, [sp, #16]
 800bb68:	e7c9      	b.n	800bafe <_strtod_l+0x4de>
 800bb6a:	d0ea      	beq.n	800bb42 <_strtod_l+0x522>
 800bb6c:	f1c8 0800 	rsb	r8, r8, #0
 800bb70:	f018 020f 	ands.w	r2, r8, #15
 800bb74:	d00a      	beq.n	800bb8c <_strtod_l+0x56c>
 800bb76:	4b13      	ldr	r3, [pc, #76]	; (800bbc4 <_strtod_l+0x5a4>)
 800bb78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb7c:	4650      	mov	r0, sl
 800bb7e:	4659      	mov	r1, fp
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	f7f4 fe82 	bl	800088c <__aeabi_ddiv>
 800bb88:	4682      	mov	sl, r0
 800bb8a:	468b      	mov	fp, r1
 800bb8c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bb90:	d0d7      	beq.n	800bb42 <_strtod_l+0x522>
 800bb92:	f1b8 0f1f 	cmp.w	r8, #31
 800bb96:	dd1f      	ble.n	800bbd8 <_strtod_l+0x5b8>
 800bb98:	2500      	movs	r5, #0
 800bb9a:	462e      	mov	r6, r5
 800bb9c:	9507      	str	r5, [sp, #28]
 800bb9e:	9505      	str	r5, [sp, #20]
 800bba0:	2322      	movs	r3, #34	; 0x22
 800bba2:	f04f 0a00 	mov.w	sl, #0
 800bba6:	f04f 0b00 	mov.w	fp, #0
 800bbaa:	6023      	str	r3, [r4, #0]
 800bbac:	e786      	b.n	800babc <_strtod_l+0x49c>
 800bbae:	bf00      	nop
 800bbb0:	0801064d 	.word	0x0801064d
 800bbb4:	0801068c 	.word	0x0801068c
 800bbb8:	08010645 	.word	0x08010645
 800bbbc:	080107cc 	.word	0x080107cc
 800bbc0:	08010afb 	.word	0x08010afb
 800bbc4:	080109c0 	.word	0x080109c0
 800bbc8:	08010998 	.word	0x08010998
 800bbcc:	7ff00000 	.word	0x7ff00000
 800bbd0:	7ca00000 	.word	0x7ca00000
 800bbd4:	7fefffff 	.word	0x7fefffff
 800bbd8:	f018 0310 	ands.w	r3, r8, #16
 800bbdc:	bf18      	it	ne
 800bbde:	236a      	movne	r3, #106	; 0x6a
 800bbe0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bf90 <_strtod_l+0x970>
 800bbe4:	9304      	str	r3, [sp, #16]
 800bbe6:	4650      	mov	r0, sl
 800bbe8:	4659      	mov	r1, fp
 800bbea:	2300      	movs	r3, #0
 800bbec:	f018 0f01 	tst.w	r8, #1
 800bbf0:	d004      	beq.n	800bbfc <_strtod_l+0x5dc>
 800bbf2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bbf6:	f7f4 fd1f 	bl	8000638 <__aeabi_dmul>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bc00:	f109 0908 	add.w	r9, r9, #8
 800bc04:	d1f2      	bne.n	800bbec <_strtod_l+0x5cc>
 800bc06:	b10b      	cbz	r3, 800bc0c <_strtod_l+0x5ec>
 800bc08:	4682      	mov	sl, r0
 800bc0a:	468b      	mov	fp, r1
 800bc0c:	9b04      	ldr	r3, [sp, #16]
 800bc0e:	b1c3      	cbz	r3, 800bc42 <_strtod_l+0x622>
 800bc10:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bc14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	4659      	mov	r1, fp
 800bc1c:	dd11      	ble.n	800bc42 <_strtod_l+0x622>
 800bc1e:	2b1f      	cmp	r3, #31
 800bc20:	f340 8124 	ble.w	800be6c <_strtod_l+0x84c>
 800bc24:	2b34      	cmp	r3, #52	; 0x34
 800bc26:	bfde      	ittt	le
 800bc28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bc2c:	f04f 33ff 	movle.w	r3, #4294967295
 800bc30:	fa03 f202 	lslle.w	r2, r3, r2
 800bc34:	f04f 0a00 	mov.w	sl, #0
 800bc38:	bfcc      	ite	gt
 800bc3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bc3e:	ea02 0b01 	andle.w	fp, r2, r1
 800bc42:	2200      	movs	r2, #0
 800bc44:	2300      	movs	r3, #0
 800bc46:	4650      	mov	r0, sl
 800bc48:	4659      	mov	r1, fp
 800bc4a:	f7f4 ff5d 	bl	8000b08 <__aeabi_dcmpeq>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d1a2      	bne.n	800bb98 <_strtod_l+0x578>
 800bc52:	9b07      	ldr	r3, [sp, #28]
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	9908      	ldr	r1, [sp, #32]
 800bc58:	462b      	mov	r3, r5
 800bc5a:	463a      	mov	r2, r7
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f002 f973 	bl	800df48 <__s2b>
 800bc62:	9007      	str	r0, [sp, #28]
 800bc64:	2800      	cmp	r0, #0
 800bc66:	f43f af1f 	beq.w	800baa8 <_strtod_l+0x488>
 800bc6a:	9b05      	ldr	r3, [sp, #20]
 800bc6c:	1b9e      	subs	r6, r3, r6
 800bc6e:	9b06      	ldr	r3, [sp, #24]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bfb4      	ite	lt
 800bc74:	4633      	movlt	r3, r6
 800bc76:	2300      	movge	r3, #0
 800bc78:	930c      	str	r3, [sp, #48]	; 0x30
 800bc7a:	9b06      	ldr	r3, [sp, #24]
 800bc7c:	2500      	movs	r5, #0
 800bc7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc82:	9312      	str	r3, [sp, #72]	; 0x48
 800bc84:	462e      	mov	r6, r5
 800bc86:	9b07      	ldr	r3, [sp, #28]
 800bc88:	4620      	mov	r0, r4
 800bc8a:	6859      	ldr	r1, [r3, #4]
 800bc8c:	f002 f8b4 	bl	800ddf8 <_Balloc>
 800bc90:	9005      	str	r0, [sp, #20]
 800bc92:	2800      	cmp	r0, #0
 800bc94:	f43f af0c 	beq.w	800bab0 <_strtod_l+0x490>
 800bc98:	9b07      	ldr	r3, [sp, #28]
 800bc9a:	691a      	ldr	r2, [r3, #16]
 800bc9c:	3202      	adds	r2, #2
 800bc9e:	f103 010c 	add.w	r1, r3, #12
 800bca2:	0092      	lsls	r2, r2, #2
 800bca4:	300c      	adds	r0, #12
 800bca6:	f002 f899 	bl	800dddc <memcpy>
 800bcaa:	ec4b ab10 	vmov	d0, sl, fp
 800bcae:	aa1a      	add	r2, sp, #104	; 0x68
 800bcb0:	a919      	add	r1, sp, #100	; 0x64
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f002 fc8e 	bl	800e5d4 <__d2b>
 800bcb8:	ec4b ab18 	vmov	d8, sl, fp
 800bcbc:	9018      	str	r0, [sp, #96]	; 0x60
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	f43f aef6 	beq.w	800bab0 <_strtod_l+0x490>
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f002 f9d8 	bl	800e07c <__i2b>
 800bccc:	4606      	mov	r6, r0
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	f43f aeee 	beq.w	800bab0 <_strtod_l+0x490>
 800bcd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bcd6:	9904      	ldr	r1, [sp, #16]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	bfab      	itete	ge
 800bcdc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bcde:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bce0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bce2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bce6:	bfac      	ite	ge
 800bce8:	eb03 0902 	addge.w	r9, r3, r2
 800bcec:	1ad7      	sublt	r7, r2, r3
 800bcee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bcf0:	eba3 0801 	sub.w	r8, r3, r1
 800bcf4:	4490      	add	r8, r2
 800bcf6:	4ba1      	ldr	r3, [pc, #644]	; (800bf7c <_strtod_l+0x95c>)
 800bcf8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcfc:	4598      	cmp	r8, r3
 800bcfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bd02:	f280 80c7 	bge.w	800be94 <_strtod_l+0x874>
 800bd06:	eba3 0308 	sub.w	r3, r3, r8
 800bd0a:	2b1f      	cmp	r3, #31
 800bd0c:	eba2 0203 	sub.w	r2, r2, r3
 800bd10:	f04f 0101 	mov.w	r1, #1
 800bd14:	f300 80b1 	bgt.w	800be7a <_strtod_l+0x85a>
 800bd18:	fa01 f303 	lsl.w	r3, r1, r3
 800bd1c:	930d      	str	r3, [sp, #52]	; 0x34
 800bd1e:	2300      	movs	r3, #0
 800bd20:	9308      	str	r3, [sp, #32]
 800bd22:	eb09 0802 	add.w	r8, r9, r2
 800bd26:	9b04      	ldr	r3, [sp, #16]
 800bd28:	45c1      	cmp	r9, r8
 800bd2a:	4417      	add	r7, r2
 800bd2c:	441f      	add	r7, r3
 800bd2e:	464b      	mov	r3, r9
 800bd30:	bfa8      	it	ge
 800bd32:	4643      	movge	r3, r8
 800bd34:	42bb      	cmp	r3, r7
 800bd36:	bfa8      	it	ge
 800bd38:	463b      	movge	r3, r7
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	bfc2      	ittt	gt
 800bd3e:	eba8 0803 	subgt.w	r8, r8, r3
 800bd42:	1aff      	subgt	r7, r7, r3
 800bd44:	eba9 0903 	subgt.w	r9, r9, r3
 800bd48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	dd17      	ble.n	800bd7e <_strtod_l+0x75e>
 800bd4e:	4631      	mov	r1, r6
 800bd50:	461a      	mov	r2, r3
 800bd52:	4620      	mov	r0, r4
 800bd54:	f002 fa52 	bl	800e1fc <__pow5mult>
 800bd58:	4606      	mov	r6, r0
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	f43f aea8 	beq.w	800bab0 <_strtod_l+0x490>
 800bd60:	4601      	mov	r1, r0
 800bd62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bd64:	4620      	mov	r0, r4
 800bd66:	f002 f99f 	bl	800e0a8 <__multiply>
 800bd6a:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	f43f ae9f 	beq.w	800bab0 <_strtod_l+0x490>
 800bd72:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd74:	4620      	mov	r0, r4
 800bd76:	f002 f87f 	bl	800de78 <_Bfree>
 800bd7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd7c:	9318      	str	r3, [sp, #96]	; 0x60
 800bd7e:	f1b8 0f00 	cmp.w	r8, #0
 800bd82:	f300 808c 	bgt.w	800be9e <_strtod_l+0x87e>
 800bd86:	9b06      	ldr	r3, [sp, #24]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	dd08      	ble.n	800bd9e <_strtod_l+0x77e>
 800bd8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd8e:	9905      	ldr	r1, [sp, #20]
 800bd90:	4620      	mov	r0, r4
 800bd92:	f002 fa33 	bl	800e1fc <__pow5mult>
 800bd96:	9005      	str	r0, [sp, #20]
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	f43f ae89 	beq.w	800bab0 <_strtod_l+0x490>
 800bd9e:	2f00      	cmp	r7, #0
 800bda0:	dd08      	ble.n	800bdb4 <_strtod_l+0x794>
 800bda2:	9905      	ldr	r1, [sp, #20]
 800bda4:	463a      	mov	r2, r7
 800bda6:	4620      	mov	r0, r4
 800bda8:	f002 fa82 	bl	800e2b0 <__lshift>
 800bdac:	9005      	str	r0, [sp, #20]
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f43f ae7e 	beq.w	800bab0 <_strtod_l+0x490>
 800bdb4:	f1b9 0f00 	cmp.w	r9, #0
 800bdb8:	dd08      	ble.n	800bdcc <_strtod_l+0x7ac>
 800bdba:	4631      	mov	r1, r6
 800bdbc:	464a      	mov	r2, r9
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f002 fa76 	bl	800e2b0 <__lshift>
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	f43f ae72 	beq.w	800bab0 <_strtod_l+0x490>
 800bdcc:	9a05      	ldr	r2, [sp, #20]
 800bdce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f002 faf9 	bl	800e3c8 <__mdiff>
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	f43f ae69 	beq.w	800bab0 <_strtod_l+0x490>
 800bdde:	68c3      	ldr	r3, [r0, #12]
 800bde0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bde2:	2300      	movs	r3, #0
 800bde4:	60c3      	str	r3, [r0, #12]
 800bde6:	4631      	mov	r1, r6
 800bde8:	f002 fad2 	bl	800e390 <__mcmp>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	da60      	bge.n	800beb2 <_strtod_l+0x892>
 800bdf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdf2:	ea53 030a 	orrs.w	r3, r3, sl
 800bdf6:	f040 8082 	bne.w	800befe <_strtod_l+0x8de>
 800bdfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d17d      	bne.n	800befe <_strtod_l+0x8de>
 800be02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be06:	0d1b      	lsrs	r3, r3, #20
 800be08:	051b      	lsls	r3, r3, #20
 800be0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800be0e:	d976      	bls.n	800befe <_strtod_l+0x8de>
 800be10:	696b      	ldr	r3, [r5, #20]
 800be12:	b913      	cbnz	r3, 800be1a <_strtod_l+0x7fa>
 800be14:	692b      	ldr	r3, [r5, #16]
 800be16:	2b01      	cmp	r3, #1
 800be18:	dd71      	ble.n	800befe <_strtod_l+0x8de>
 800be1a:	4629      	mov	r1, r5
 800be1c:	2201      	movs	r2, #1
 800be1e:	4620      	mov	r0, r4
 800be20:	f002 fa46 	bl	800e2b0 <__lshift>
 800be24:	4631      	mov	r1, r6
 800be26:	4605      	mov	r5, r0
 800be28:	f002 fab2 	bl	800e390 <__mcmp>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	dd66      	ble.n	800befe <_strtod_l+0x8de>
 800be30:	9904      	ldr	r1, [sp, #16]
 800be32:	4a53      	ldr	r2, [pc, #332]	; (800bf80 <_strtod_l+0x960>)
 800be34:	465b      	mov	r3, fp
 800be36:	2900      	cmp	r1, #0
 800be38:	f000 8081 	beq.w	800bf3e <_strtod_l+0x91e>
 800be3c:	ea02 010b 	and.w	r1, r2, fp
 800be40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800be44:	dc7b      	bgt.n	800bf3e <_strtod_l+0x91e>
 800be46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800be4a:	f77f aea9 	ble.w	800bba0 <_strtod_l+0x580>
 800be4e:	4b4d      	ldr	r3, [pc, #308]	; (800bf84 <_strtod_l+0x964>)
 800be50:	4650      	mov	r0, sl
 800be52:	4659      	mov	r1, fp
 800be54:	2200      	movs	r2, #0
 800be56:	f7f4 fbef 	bl	8000638 <__aeabi_dmul>
 800be5a:	460b      	mov	r3, r1
 800be5c:	4303      	orrs	r3, r0
 800be5e:	bf08      	it	eq
 800be60:	2322      	moveq	r3, #34	; 0x22
 800be62:	4682      	mov	sl, r0
 800be64:	468b      	mov	fp, r1
 800be66:	bf08      	it	eq
 800be68:	6023      	streq	r3, [r4, #0]
 800be6a:	e62b      	b.n	800bac4 <_strtod_l+0x4a4>
 800be6c:	f04f 32ff 	mov.w	r2, #4294967295
 800be70:	fa02 f303 	lsl.w	r3, r2, r3
 800be74:	ea03 0a0a 	and.w	sl, r3, sl
 800be78:	e6e3      	b.n	800bc42 <_strtod_l+0x622>
 800be7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800be7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800be82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800be86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800be8a:	fa01 f308 	lsl.w	r3, r1, r8
 800be8e:	9308      	str	r3, [sp, #32]
 800be90:	910d      	str	r1, [sp, #52]	; 0x34
 800be92:	e746      	b.n	800bd22 <_strtod_l+0x702>
 800be94:	2300      	movs	r3, #0
 800be96:	9308      	str	r3, [sp, #32]
 800be98:	2301      	movs	r3, #1
 800be9a:	930d      	str	r3, [sp, #52]	; 0x34
 800be9c:	e741      	b.n	800bd22 <_strtod_l+0x702>
 800be9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bea0:	4642      	mov	r2, r8
 800bea2:	4620      	mov	r0, r4
 800bea4:	f002 fa04 	bl	800e2b0 <__lshift>
 800bea8:	9018      	str	r0, [sp, #96]	; 0x60
 800beaa:	2800      	cmp	r0, #0
 800beac:	f47f af6b 	bne.w	800bd86 <_strtod_l+0x766>
 800beb0:	e5fe      	b.n	800bab0 <_strtod_l+0x490>
 800beb2:	465f      	mov	r7, fp
 800beb4:	d16e      	bne.n	800bf94 <_strtod_l+0x974>
 800beb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800beb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bebc:	b342      	cbz	r2, 800bf10 <_strtod_l+0x8f0>
 800bebe:	4a32      	ldr	r2, [pc, #200]	; (800bf88 <_strtod_l+0x968>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d128      	bne.n	800bf16 <_strtod_l+0x8f6>
 800bec4:	9b04      	ldr	r3, [sp, #16]
 800bec6:	4651      	mov	r1, sl
 800bec8:	b1eb      	cbz	r3, 800bf06 <_strtod_l+0x8e6>
 800beca:	4b2d      	ldr	r3, [pc, #180]	; (800bf80 <_strtod_l+0x960>)
 800becc:	403b      	ands	r3, r7
 800bece:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bed2:	f04f 32ff 	mov.w	r2, #4294967295
 800bed6:	d819      	bhi.n	800bf0c <_strtod_l+0x8ec>
 800bed8:	0d1b      	lsrs	r3, r3, #20
 800beda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bede:	fa02 f303 	lsl.w	r3, r2, r3
 800bee2:	4299      	cmp	r1, r3
 800bee4:	d117      	bne.n	800bf16 <_strtod_l+0x8f6>
 800bee6:	4b29      	ldr	r3, [pc, #164]	; (800bf8c <_strtod_l+0x96c>)
 800bee8:	429f      	cmp	r7, r3
 800beea:	d102      	bne.n	800bef2 <_strtod_l+0x8d2>
 800beec:	3101      	adds	r1, #1
 800beee:	f43f addf 	beq.w	800bab0 <_strtod_l+0x490>
 800bef2:	4b23      	ldr	r3, [pc, #140]	; (800bf80 <_strtod_l+0x960>)
 800bef4:	403b      	ands	r3, r7
 800bef6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800befa:	f04f 0a00 	mov.w	sl, #0
 800befe:	9b04      	ldr	r3, [sp, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1a4      	bne.n	800be4e <_strtod_l+0x82e>
 800bf04:	e5de      	b.n	800bac4 <_strtod_l+0x4a4>
 800bf06:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0a:	e7ea      	b.n	800bee2 <_strtod_l+0x8c2>
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	e7e8      	b.n	800bee2 <_strtod_l+0x8c2>
 800bf10:	ea53 030a 	orrs.w	r3, r3, sl
 800bf14:	d08c      	beq.n	800be30 <_strtod_l+0x810>
 800bf16:	9b08      	ldr	r3, [sp, #32]
 800bf18:	b1db      	cbz	r3, 800bf52 <_strtod_l+0x932>
 800bf1a:	423b      	tst	r3, r7
 800bf1c:	d0ef      	beq.n	800befe <_strtod_l+0x8de>
 800bf1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf20:	9a04      	ldr	r2, [sp, #16]
 800bf22:	4650      	mov	r0, sl
 800bf24:	4659      	mov	r1, fp
 800bf26:	b1c3      	cbz	r3, 800bf5a <_strtod_l+0x93a>
 800bf28:	f7ff fb5b 	bl	800b5e2 <sulp>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	ec51 0b18 	vmov	r0, r1, d8
 800bf34:	f7f4 f9ca 	bl	80002cc <__adddf3>
 800bf38:	4682      	mov	sl, r0
 800bf3a:	468b      	mov	fp, r1
 800bf3c:	e7df      	b.n	800befe <_strtod_l+0x8de>
 800bf3e:	4013      	ands	r3, r2
 800bf40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bf44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf4c:	f04f 3aff 	mov.w	sl, #4294967295
 800bf50:	e7d5      	b.n	800befe <_strtod_l+0x8de>
 800bf52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf54:	ea13 0f0a 	tst.w	r3, sl
 800bf58:	e7e0      	b.n	800bf1c <_strtod_l+0x8fc>
 800bf5a:	f7ff fb42 	bl	800b5e2 <sulp>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	460b      	mov	r3, r1
 800bf62:	ec51 0b18 	vmov	r0, r1, d8
 800bf66:	f7f4 f9af 	bl	80002c8 <__aeabi_dsub>
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	4682      	mov	sl, r0
 800bf70:	468b      	mov	fp, r1
 800bf72:	f7f4 fdc9 	bl	8000b08 <__aeabi_dcmpeq>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	d0c1      	beq.n	800befe <_strtod_l+0x8de>
 800bf7a:	e611      	b.n	800bba0 <_strtod_l+0x580>
 800bf7c:	fffffc02 	.word	0xfffffc02
 800bf80:	7ff00000 	.word	0x7ff00000
 800bf84:	39500000 	.word	0x39500000
 800bf88:	000fffff 	.word	0x000fffff
 800bf8c:	7fefffff 	.word	0x7fefffff
 800bf90:	080106a0 	.word	0x080106a0
 800bf94:	4631      	mov	r1, r6
 800bf96:	4628      	mov	r0, r5
 800bf98:	f002 fb78 	bl	800e68c <__ratio>
 800bf9c:	ec59 8b10 	vmov	r8, r9, d0
 800bfa0:	ee10 0a10 	vmov	r0, s0
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfaa:	4649      	mov	r1, r9
 800bfac:	f7f4 fdc0 	bl	8000b30 <__aeabi_dcmple>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d07a      	beq.n	800c0aa <_strtod_l+0xa8a>
 800bfb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d04a      	beq.n	800c050 <_strtod_l+0xa30>
 800bfba:	4b95      	ldr	r3, [pc, #596]	; (800c210 <_strtod_l+0xbf0>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bfc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c210 <_strtod_l+0xbf0>
 800bfc6:	f04f 0800 	mov.w	r8, #0
 800bfca:	4b92      	ldr	r3, [pc, #584]	; (800c214 <_strtod_l+0xbf4>)
 800bfcc:	403b      	ands	r3, r7
 800bfce:	930d      	str	r3, [sp, #52]	; 0x34
 800bfd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfd2:	4b91      	ldr	r3, [pc, #580]	; (800c218 <_strtod_l+0xbf8>)
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	f040 80b0 	bne.w	800c13a <_strtod_l+0xb1a>
 800bfda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bfde:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bfe2:	ec4b ab10 	vmov	d0, sl, fp
 800bfe6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bfea:	f002 fa77 	bl	800e4dc <__ulp>
 800bfee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bff2:	ec53 2b10 	vmov	r2, r3, d0
 800bff6:	f7f4 fb1f 	bl	8000638 <__aeabi_dmul>
 800bffa:	4652      	mov	r2, sl
 800bffc:	465b      	mov	r3, fp
 800bffe:	f7f4 f965 	bl	80002cc <__adddf3>
 800c002:	460b      	mov	r3, r1
 800c004:	4983      	ldr	r1, [pc, #524]	; (800c214 <_strtod_l+0xbf4>)
 800c006:	4a85      	ldr	r2, [pc, #532]	; (800c21c <_strtod_l+0xbfc>)
 800c008:	4019      	ands	r1, r3
 800c00a:	4291      	cmp	r1, r2
 800c00c:	4682      	mov	sl, r0
 800c00e:	d960      	bls.n	800c0d2 <_strtod_l+0xab2>
 800c010:	ee18 3a90 	vmov	r3, s17
 800c014:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c018:	4293      	cmp	r3, r2
 800c01a:	d104      	bne.n	800c026 <_strtod_l+0xa06>
 800c01c:	ee18 3a10 	vmov	r3, s16
 800c020:	3301      	adds	r3, #1
 800c022:	f43f ad45 	beq.w	800bab0 <_strtod_l+0x490>
 800c026:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c228 <_strtod_l+0xc08>
 800c02a:	f04f 3aff 	mov.w	sl, #4294967295
 800c02e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c030:	4620      	mov	r0, r4
 800c032:	f001 ff21 	bl	800de78 <_Bfree>
 800c036:	9905      	ldr	r1, [sp, #20]
 800c038:	4620      	mov	r0, r4
 800c03a:	f001 ff1d 	bl	800de78 <_Bfree>
 800c03e:	4631      	mov	r1, r6
 800c040:	4620      	mov	r0, r4
 800c042:	f001 ff19 	bl	800de78 <_Bfree>
 800c046:	4629      	mov	r1, r5
 800c048:	4620      	mov	r0, r4
 800c04a:	f001 ff15 	bl	800de78 <_Bfree>
 800c04e:	e61a      	b.n	800bc86 <_strtod_l+0x666>
 800c050:	f1ba 0f00 	cmp.w	sl, #0
 800c054:	d11b      	bne.n	800c08e <_strtod_l+0xa6e>
 800c056:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c05a:	b9f3      	cbnz	r3, 800c09a <_strtod_l+0xa7a>
 800c05c:	4b6c      	ldr	r3, [pc, #432]	; (800c210 <_strtod_l+0xbf0>)
 800c05e:	2200      	movs	r2, #0
 800c060:	4640      	mov	r0, r8
 800c062:	4649      	mov	r1, r9
 800c064:	f7f4 fd5a 	bl	8000b1c <__aeabi_dcmplt>
 800c068:	b9d0      	cbnz	r0, 800c0a0 <_strtod_l+0xa80>
 800c06a:	4640      	mov	r0, r8
 800c06c:	4649      	mov	r1, r9
 800c06e:	4b6c      	ldr	r3, [pc, #432]	; (800c220 <_strtod_l+0xc00>)
 800c070:	2200      	movs	r2, #0
 800c072:	f7f4 fae1 	bl	8000638 <__aeabi_dmul>
 800c076:	4680      	mov	r8, r0
 800c078:	4689      	mov	r9, r1
 800c07a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c07e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c082:	9315      	str	r3, [sp, #84]	; 0x54
 800c084:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c088:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c08c:	e79d      	b.n	800bfca <_strtod_l+0x9aa>
 800c08e:	f1ba 0f01 	cmp.w	sl, #1
 800c092:	d102      	bne.n	800c09a <_strtod_l+0xa7a>
 800c094:	2f00      	cmp	r7, #0
 800c096:	f43f ad83 	beq.w	800bba0 <_strtod_l+0x580>
 800c09a:	4b62      	ldr	r3, [pc, #392]	; (800c224 <_strtod_l+0xc04>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	e78e      	b.n	800bfbe <_strtod_l+0x99e>
 800c0a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c220 <_strtod_l+0xc00>
 800c0a4:	f04f 0800 	mov.w	r8, #0
 800c0a8:	e7e7      	b.n	800c07a <_strtod_l+0xa5a>
 800c0aa:	4b5d      	ldr	r3, [pc, #372]	; (800c220 <_strtod_l+0xc00>)
 800c0ac:	4640      	mov	r0, r8
 800c0ae:	4649      	mov	r1, r9
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f7f4 fac1 	bl	8000638 <__aeabi_dmul>
 800c0b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0b8:	4680      	mov	r8, r0
 800c0ba:	4689      	mov	r9, r1
 800c0bc:	b933      	cbnz	r3, 800c0cc <_strtod_l+0xaac>
 800c0be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0c2:	900e      	str	r0, [sp, #56]	; 0x38
 800c0c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c0ca:	e7dd      	b.n	800c088 <_strtod_l+0xa68>
 800c0cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c0d0:	e7f9      	b.n	800c0c6 <_strtod_l+0xaa6>
 800c0d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c0d6:	9b04      	ldr	r3, [sp, #16]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1a8      	bne.n	800c02e <_strtod_l+0xa0e>
 800c0dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0e2:	0d1b      	lsrs	r3, r3, #20
 800c0e4:	051b      	lsls	r3, r3, #20
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d1a1      	bne.n	800c02e <_strtod_l+0xa0e>
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	4649      	mov	r1, r9
 800c0ee:	f7f4 fe03 	bl	8000cf8 <__aeabi_d2lz>
 800c0f2:	f7f4 fa73 	bl	80005dc <__aeabi_l2d>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	4649      	mov	r1, r9
 800c0fe:	f7f4 f8e3 	bl	80002c8 <__aeabi_dsub>
 800c102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c108:	ea43 030a 	orr.w	r3, r3, sl
 800c10c:	4313      	orrs	r3, r2
 800c10e:	4680      	mov	r8, r0
 800c110:	4689      	mov	r9, r1
 800c112:	d055      	beq.n	800c1c0 <_strtod_l+0xba0>
 800c114:	a336      	add	r3, pc, #216	; (adr r3, 800c1f0 <_strtod_l+0xbd0>)
 800c116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11a:	f7f4 fcff 	bl	8000b1c <__aeabi_dcmplt>
 800c11e:	2800      	cmp	r0, #0
 800c120:	f47f acd0 	bne.w	800bac4 <_strtod_l+0x4a4>
 800c124:	a334      	add	r3, pc, #208	; (adr r3, 800c1f8 <_strtod_l+0xbd8>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	4640      	mov	r0, r8
 800c12c:	4649      	mov	r1, r9
 800c12e:	f7f4 fd13 	bl	8000b58 <__aeabi_dcmpgt>
 800c132:	2800      	cmp	r0, #0
 800c134:	f43f af7b 	beq.w	800c02e <_strtod_l+0xa0e>
 800c138:	e4c4      	b.n	800bac4 <_strtod_l+0x4a4>
 800c13a:	9b04      	ldr	r3, [sp, #16]
 800c13c:	b333      	cbz	r3, 800c18c <_strtod_l+0xb6c>
 800c13e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c140:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c144:	d822      	bhi.n	800c18c <_strtod_l+0xb6c>
 800c146:	a32e      	add	r3, pc, #184	; (adr r3, 800c200 <_strtod_l+0xbe0>)
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	4640      	mov	r0, r8
 800c14e:	4649      	mov	r1, r9
 800c150:	f7f4 fcee 	bl	8000b30 <__aeabi_dcmple>
 800c154:	b1a0      	cbz	r0, 800c180 <_strtod_l+0xb60>
 800c156:	4649      	mov	r1, r9
 800c158:	4640      	mov	r0, r8
 800c15a:	f7f4 fd45 	bl	8000be8 <__aeabi_d2uiz>
 800c15e:	2801      	cmp	r0, #1
 800c160:	bf38      	it	cc
 800c162:	2001      	movcc	r0, #1
 800c164:	f7f4 f9ee 	bl	8000544 <__aeabi_ui2d>
 800c168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c16a:	4680      	mov	r8, r0
 800c16c:	4689      	mov	r9, r1
 800c16e:	bb23      	cbnz	r3, 800c1ba <_strtod_l+0xb9a>
 800c170:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c174:	9010      	str	r0, [sp, #64]	; 0x40
 800c176:	9311      	str	r3, [sp, #68]	; 0x44
 800c178:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c17c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c182:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c184:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c188:	1a9b      	subs	r3, r3, r2
 800c18a:	9309      	str	r3, [sp, #36]	; 0x24
 800c18c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c190:	eeb0 0a48 	vmov.f32	s0, s16
 800c194:	eef0 0a68 	vmov.f32	s1, s17
 800c198:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c19c:	f002 f99e 	bl	800e4dc <__ulp>
 800c1a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1a4:	ec53 2b10 	vmov	r2, r3, d0
 800c1a8:	f7f4 fa46 	bl	8000638 <__aeabi_dmul>
 800c1ac:	ec53 2b18 	vmov	r2, r3, d8
 800c1b0:	f7f4 f88c 	bl	80002cc <__adddf3>
 800c1b4:	4682      	mov	sl, r0
 800c1b6:	468b      	mov	fp, r1
 800c1b8:	e78d      	b.n	800c0d6 <_strtod_l+0xab6>
 800c1ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c1be:	e7db      	b.n	800c178 <_strtod_l+0xb58>
 800c1c0:	a311      	add	r3, pc, #68	; (adr r3, 800c208 <_strtod_l+0xbe8>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	f7f4 fca9 	bl	8000b1c <__aeabi_dcmplt>
 800c1ca:	e7b2      	b.n	800c132 <_strtod_l+0xb12>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c1d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c1d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1d4:	6013      	str	r3, [r2, #0]
 800c1d6:	f7ff ba6b 	b.w	800b6b0 <_strtod_l+0x90>
 800c1da:	2a65      	cmp	r2, #101	; 0x65
 800c1dc:	f43f ab5f 	beq.w	800b89e <_strtod_l+0x27e>
 800c1e0:	2a45      	cmp	r2, #69	; 0x45
 800c1e2:	f43f ab5c 	beq.w	800b89e <_strtod_l+0x27e>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	f7ff bb94 	b.w	800b914 <_strtod_l+0x2f4>
 800c1ec:	f3af 8000 	nop.w
 800c1f0:	94a03595 	.word	0x94a03595
 800c1f4:	3fdfffff 	.word	0x3fdfffff
 800c1f8:	35afe535 	.word	0x35afe535
 800c1fc:	3fe00000 	.word	0x3fe00000
 800c200:	ffc00000 	.word	0xffc00000
 800c204:	41dfffff 	.word	0x41dfffff
 800c208:	94a03595 	.word	0x94a03595
 800c20c:	3fcfffff 	.word	0x3fcfffff
 800c210:	3ff00000 	.word	0x3ff00000
 800c214:	7ff00000 	.word	0x7ff00000
 800c218:	7fe00000 	.word	0x7fe00000
 800c21c:	7c9fffff 	.word	0x7c9fffff
 800c220:	3fe00000 	.word	0x3fe00000
 800c224:	bff00000 	.word	0xbff00000
 800c228:	7fefffff 	.word	0x7fefffff

0800c22c <_strtod_r>:
 800c22c:	4b01      	ldr	r3, [pc, #4]	; (800c234 <_strtod_r+0x8>)
 800c22e:	f7ff b9f7 	b.w	800b620 <_strtod_l>
 800c232:	bf00      	nop
 800c234:	20000074 	.word	0x20000074

0800c238 <_strtol_l.constprop.0>:
 800c238:	2b01      	cmp	r3, #1
 800c23a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c23e:	d001      	beq.n	800c244 <_strtol_l.constprop.0+0xc>
 800c240:	2b24      	cmp	r3, #36	; 0x24
 800c242:	d906      	bls.n	800c252 <_strtol_l.constprop.0+0x1a>
 800c244:	f7fe f908 	bl	800a458 <__errno>
 800c248:	2316      	movs	r3, #22
 800c24a:	6003      	str	r3, [r0, #0]
 800c24c:	2000      	movs	r0, #0
 800c24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c252:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c338 <_strtol_l.constprop.0+0x100>
 800c256:	460d      	mov	r5, r1
 800c258:	462e      	mov	r6, r5
 800c25a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c25e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c262:	f017 0708 	ands.w	r7, r7, #8
 800c266:	d1f7      	bne.n	800c258 <_strtol_l.constprop.0+0x20>
 800c268:	2c2d      	cmp	r4, #45	; 0x2d
 800c26a:	d132      	bne.n	800c2d2 <_strtol_l.constprop.0+0x9a>
 800c26c:	782c      	ldrb	r4, [r5, #0]
 800c26e:	2701      	movs	r7, #1
 800c270:	1cb5      	adds	r5, r6, #2
 800c272:	2b00      	cmp	r3, #0
 800c274:	d05b      	beq.n	800c32e <_strtol_l.constprop.0+0xf6>
 800c276:	2b10      	cmp	r3, #16
 800c278:	d109      	bne.n	800c28e <_strtol_l.constprop.0+0x56>
 800c27a:	2c30      	cmp	r4, #48	; 0x30
 800c27c:	d107      	bne.n	800c28e <_strtol_l.constprop.0+0x56>
 800c27e:	782c      	ldrb	r4, [r5, #0]
 800c280:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c284:	2c58      	cmp	r4, #88	; 0x58
 800c286:	d14d      	bne.n	800c324 <_strtol_l.constprop.0+0xec>
 800c288:	786c      	ldrb	r4, [r5, #1]
 800c28a:	2310      	movs	r3, #16
 800c28c:	3502      	adds	r5, #2
 800c28e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c292:	f108 38ff 	add.w	r8, r8, #4294967295
 800c296:	f04f 0c00 	mov.w	ip, #0
 800c29a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c29e:	4666      	mov	r6, ip
 800c2a0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c2a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c2a8:	f1be 0f09 	cmp.w	lr, #9
 800c2ac:	d816      	bhi.n	800c2dc <_strtol_l.constprop.0+0xa4>
 800c2ae:	4674      	mov	r4, lr
 800c2b0:	42a3      	cmp	r3, r4
 800c2b2:	dd24      	ble.n	800c2fe <_strtol_l.constprop.0+0xc6>
 800c2b4:	f1bc 0f00 	cmp.w	ip, #0
 800c2b8:	db1e      	blt.n	800c2f8 <_strtol_l.constprop.0+0xc0>
 800c2ba:	45b1      	cmp	r9, r6
 800c2bc:	d31c      	bcc.n	800c2f8 <_strtol_l.constprop.0+0xc0>
 800c2be:	d101      	bne.n	800c2c4 <_strtol_l.constprop.0+0x8c>
 800c2c0:	45a2      	cmp	sl, r4
 800c2c2:	db19      	blt.n	800c2f8 <_strtol_l.constprop.0+0xc0>
 800c2c4:	fb06 4603 	mla	r6, r6, r3, r4
 800c2c8:	f04f 0c01 	mov.w	ip, #1
 800c2cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2d0:	e7e8      	b.n	800c2a4 <_strtol_l.constprop.0+0x6c>
 800c2d2:	2c2b      	cmp	r4, #43	; 0x2b
 800c2d4:	bf04      	itt	eq
 800c2d6:	782c      	ldrbeq	r4, [r5, #0]
 800c2d8:	1cb5      	addeq	r5, r6, #2
 800c2da:	e7ca      	b.n	800c272 <_strtol_l.constprop.0+0x3a>
 800c2dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c2e0:	f1be 0f19 	cmp.w	lr, #25
 800c2e4:	d801      	bhi.n	800c2ea <_strtol_l.constprop.0+0xb2>
 800c2e6:	3c37      	subs	r4, #55	; 0x37
 800c2e8:	e7e2      	b.n	800c2b0 <_strtol_l.constprop.0+0x78>
 800c2ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c2ee:	f1be 0f19 	cmp.w	lr, #25
 800c2f2:	d804      	bhi.n	800c2fe <_strtol_l.constprop.0+0xc6>
 800c2f4:	3c57      	subs	r4, #87	; 0x57
 800c2f6:	e7db      	b.n	800c2b0 <_strtol_l.constprop.0+0x78>
 800c2f8:	f04f 3cff 	mov.w	ip, #4294967295
 800c2fc:	e7e6      	b.n	800c2cc <_strtol_l.constprop.0+0x94>
 800c2fe:	f1bc 0f00 	cmp.w	ip, #0
 800c302:	da05      	bge.n	800c310 <_strtol_l.constprop.0+0xd8>
 800c304:	2322      	movs	r3, #34	; 0x22
 800c306:	6003      	str	r3, [r0, #0]
 800c308:	4646      	mov	r6, r8
 800c30a:	b942      	cbnz	r2, 800c31e <_strtol_l.constprop.0+0xe6>
 800c30c:	4630      	mov	r0, r6
 800c30e:	e79e      	b.n	800c24e <_strtol_l.constprop.0+0x16>
 800c310:	b107      	cbz	r7, 800c314 <_strtol_l.constprop.0+0xdc>
 800c312:	4276      	negs	r6, r6
 800c314:	2a00      	cmp	r2, #0
 800c316:	d0f9      	beq.n	800c30c <_strtol_l.constprop.0+0xd4>
 800c318:	f1bc 0f00 	cmp.w	ip, #0
 800c31c:	d000      	beq.n	800c320 <_strtol_l.constprop.0+0xe8>
 800c31e:	1e69      	subs	r1, r5, #1
 800c320:	6011      	str	r1, [r2, #0]
 800c322:	e7f3      	b.n	800c30c <_strtol_l.constprop.0+0xd4>
 800c324:	2430      	movs	r4, #48	; 0x30
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1b1      	bne.n	800c28e <_strtol_l.constprop.0+0x56>
 800c32a:	2308      	movs	r3, #8
 800c32c:	e7af      	b.n	800c28e <_strtol_l.constprop.0+0x56>
 800c32e:	2c30      	cmp	r4, #48	; 0x30
 800c330:	d0a5      	beq.n	800c27e <_strtol_l.constprop.0+0x46>
 800c332:	230a      	movs	r3, #10
 800c334:	e7ab      	b.n	800c28e <_strtol_l.constprop.0+0x56>
 800c336:	bf00      	nop
 800c338:	080106c9 	.word	0x080106c9

0800c33c <_strtol_r>:
 800c33c:	f7ff bf7c 	b.w	800c238 <_strtol_l.constprop.0>

0800c340 <__swbuf_r>:
 800c340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c342:	460e      	mov	r6, r1
 800c344:	4614      	mov	r4, r2
 800c346:	4605      	mov	r5, r0
 800c348:	b118      	cbz	r0, 800c352 <__swbuf_r+0x12>
 800c34a:	6983      	ldr	r3, [r0, #24]
 800c34c:	b90b      	cbnz	r3, 800c352 <__swbuf_r+0x12>
 800c34e:	f001 f881 	bl	800d454 <__sinit>
 800c352:	4b21      	ldr	r3, [pc, #132]	; (800c3d8 <__swbuf_r+0x98>)
 800c354:	429c      	cmp	r4, r3
 800c356:	d12b      	bne.n	800c3b0 <__swbuf_r+0x70>
 800c358:	686c      	ldr	r4, [r5, #4]
 800c35a:	69a3      	ldr	r3, [r4, #24]
 800c35c:	60a3      	str	r3, [r4, #8]
 800c35e:	89a3      	ldrh	r3, [r4, #12]
 800c360:	071a      	lsls	r2, r3, #28
 800c362:	d52f      	bpl.n	800c3c4 <__swbuf_r+0x84>
 800c364:	6923      	ldr	r3, [r4, #16]
 800c366:	b36b      	cbz	r3, 800c3c4 <__swbuf_r+0x84>
 800c368:	6923      	ldr	r3, [r4, #16]
 800c36a:	6820      	ldr	r0, [r4, #0]
 800c36c:	1ac0      	subs	r0, r0, r3
 800c36e:	6963      	ldr	r3, [r4, #20]
 800c370:	b2f6      	uxtb	r6, r6
 800c372:	4283      	cmp	r3, r0
 800c374:	4637      	mov	r7, r6
 800c376:	dc04      	bgt.n	800c382 <__swbuf_r+0x42>
 800c378:	4621      	mov	r1, r4
 800c37a:	4628      	mov	r0, r5
 800c37c:	f000 ffc4 	bl	800d308 <_fflush_r>
 800c380:	bb30      	cbnz	r0, 800c3d0 <__swbuf_r+0x90>
 800c382:	68a3      	ldr	r3, [r4, #8]
 800c384:	3b01      	subs	r3, #1
 800c386:	60a3      	str	r3, [r4, #8]
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	6022      	str	r2, [r4, #0]
 800c38e:	701e      	strb	r6, [r3, #0]
 800c390:	6963      	ldr	r3, [r4, #20]
 800c392:	3001      	adds	r0, #1
 800c394:	4283      	cmp	r3, r0
 800c396:	d004      	beq.n	800c3a2 <__swbuf_r+0x62>
 800c398:	89a3      	ldrh	r3, [r4, #12]
 800c39a:	07db      	lsls	r3, r3, #31
 800c39c:	d506      	bpl.n	800c3ac <__swbuf_r+0x6c>
 800c39e:	2e0a      	cmp	r6, #10
 800c3a0:	d104      	bne.n	800c3ac <__swbuf_r+0x6c>
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	f000 ffaf 	bl	800d308 <_fflush_r>
 800c3aa:	b988      	cbnz	r0, 800c3d0 <__swbuf_r+0x90>
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3b0:	4b0a      	ldr	r3, [pc, #40]	; (800c3dc <__swbuf_r+0x9c>)
 800c3b2:	429c      	cmp	r4, r3
 800c3b4:	d101      	bne.n	800c3ba <__swbuf_r+0x7a>
 800c3b6:	68ac      	ldr	r4, [r5, #8]
 800c3b8:	e7cf      	b.n	800c35a <__swbuf_r+0x1a>
 800c3ba:	4b09      	ldr	r3, [pc, #36]	; (800c3e0 <__swbuf_r+0xa0>)
 800c3bc:	429c      	cmp	r4, r3
 800c3be:	bf08      	it	eq
 800c3c0:	68ec      	ldreq	r4, [r5, #12]
 800c3c2:	e7ca      	b.n	800c35a <__swbuf_r+0x1a>
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f000 f81e 	bl	800c408 <__swsetup_r>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d0cb      	beq.n	800c368 <__swbuf_r+0x28>
 800c3d0:	f04f 37ff 	mov.w	r7, #4294967295
 800c3d4:	e7ea      	b.n	800c3ac <__swbuf_r+0x6c>
 800c3d6:	bf00      	nop
 800c3d8:	0801087c 	.word	0x0801087c
 800c3dc:	0801089c 	.word	0x0801089c
 800c3e0:	0801085c 	.word	0x0801085c

0800c3e4 <_write_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	4d07      	ldr	r5, [pc, #28]	; (800c404 <_write_r+0x20>)
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	4608      	mov	r0, r1
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	602a      	str	r2, [r5, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	f7f5 fffb 	bl	80023ee <_write>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d102      	bne.n	800c402 <_write_r+0x1e>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	b103      	cbz	r3, 800c402 <_write_r+0x1e>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	200004dc 	.word	0x200004dc

0800c408 <__swsetup_r>:
 800c408:	4b32      	ldr	r3, [pc, #200]	; (800c4d4 <__swsetup_r+0xcc>)
 800c40a:	b570      	push	{r4, r5, r6, lr}
 800c40c:	681d      	ldr	r5, [r3, #0]
 800c40e:	4606      	mov	r6, r0
 800c410:	460c      	mov	r4, r1
 800c412:	b125      	cbz	r5, 800c41e <__swsetup_r+0x16>
 800c414:	69ab      	ldr	r3, [r5, #24]
 800c416:	b913      	cbnz	r3, 800c41e <__swsetup_r+0x16>
 800c418:	4628      	mov	r0, r5
 800c41a:	f001 f81b 	bl	800d454 <__sinit>
 800c41e:	4b2e      	ldr	r3, [pc, #184]	; (800c4d8 <__swsetup_r+0xd0>)
 800c420:	429c      	cmp	r4, r3
 800c422:	d10f      	bne.n	800c444 <__swsetup_r+0x3c>
 800c424:	686c      	ldr	r4, [r5, #4]
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c42c:	0719      	lsls	r1, r3, #28
 800c42e:	d42c      	bmi.n	800c48a <__swsetup_r+0x82>
 800c430:	06dd      	lsls	r5, r3, #27
 800c432:	d411      	bmi.n	800c458 <__swsetup_r+0x50>
 800c434:	2309      	movs	r3, #9
 800c436:	6033      	str	r3, [r6, #0]
 800c438:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c43c:	81a3      	strh	r3, [r4, #12]
 800c43e:	f04f 30ff 	mov.w	r0, #4294967295
 800c442:	e03e      	b.n	800c4c2 <__swsetup_r+0xba>
 800c444:	4b25      	ldr	r3, [pc, #148]	; (800c4dc <__swsetup_r+0xd4>)
 800c446:	429c      	cmp	r4, r3
 800c448:	d101      	bne.n	800c44e <__swsetup_r+0x46>
 800c44a:	68ac      	ldr	r4, [r5, #8]
 800c44c:	e7eb      	b.n	800c426 <__swsetup_r+0x1e>
 800c44e:	4b24      	ldr	r3, [pc, #144]	; (800c4e0 <__swsetup_r+0xd8>)
 800c450:	429c      	cmp	r4, r3
 800c452:	bf08      	it	eq
 800c454:	68ec      	ldreq	r4, [r5, #12]
 800c456:	e7e6      	b.n	800c426 <__swsetup_r+0x1e>
 800c458:	0758      	lsls	r0, r3, #29
 800c45a:	d512      	bpl.n	800c482 <__swsetup_r+0x7a>
 800c45c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c45e:	b141      	cbz	r1, 800c472 <__swsetup_r+0x6a>
 800c460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c464:	4299      	cmp	r1, r3
 800c466:	d002      	beq.n	800c46e <__swsetup_r+0x66>
 800c468:	4630      	mov	r0, r6
 800c46a:	f002 f99d 	bl	800e7a8 <_free_r>
 800c46e:	2300      	movs	r3, #0
 800c470:	6363      	str	r3, [r4, #52]	; 0x34
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c478:	81a3      	strh	r3, [r4, #12]
 800c47a:	2300      	movs	r3, #0
 800c47c:	6063      	str	r3, [r4, #4]
 800c47e:	6923      	ldr	r3, [r4, #16]
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	f043 0308 	orr.w	r3, r3, #8
 800c488:	81a3      	strh	r3, [r4, #12]
 800c48a:	6923      	ldr	r3, [r4, #16]
 800c48c:	b94b      	cbnz	r3, 800c4a2 <__swsetup_r+0x9a>
 800c48e:	89a3      	ldrh	r3, [r4, #12]
 800c490:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c498:	d003      	beq.n	800c4a2 <__swsetup_r+0x9a>
 800c49a:	4621      	mov	r1, r4
 800c49c:	4630      	mov	r0, r6
 800c49e:	f001 fc43 	bl	800dd28 <__smakebuf_r>
 800c4a2:	89a0      	ldrh	r0, [r4, #12]
 800c4a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4a8:	f010 0301 	ands.w	r3, r0, #1
 800c4ac:	d00a      	beq.n	800c4c4 <__swsetup_r+0xbc>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	60a3      	str	r3, [r4, #8]
 800c4b2:	6963      	ldr	r3, [r4, #20]
 800c4b4:	425b      	negs	r3, r3
 800c4b6:	61a3      	str	r3, [r4, #24]
 800c4b8:	6923      	ldr	r3, [r4, #16]
 800c4ba:	b943      	cbnz	r3, 800c4ce <__swsetup_r+0xc6>
 800c4bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4c0:	d1ba      	bne.n	800c438 <__swsetup_r+0x30>
 800c4c2:	bd70      	pop	{r4, r5, r6, pc}
 800c4c4:	0781      	lsls	r1, r0, #30
 800c4c6:	bf58      	it	pl
 800c4c8:	6963      	ldrpl	r3, [r4, #20]
 800c4ca:	60a3      	str	r3, [r4, #8]
 800c4cc:	e7f4      	b.n	800c4b8 <__swsetup_r+0xb0>
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	e7f7      	b.n	800c4c2 <__swsetup_r+0xba>
 800c4d2:	bf00      	nop
 800c4d4:	2000000c 	.word	0x2000000c
 800c4d8:	0801087c 	.word	0x0801087c
 800c4dc:	0801089c 	.word	0x0801089c
 800c4e0:	0801085c 	.word	0x0801085c

0800c4e4 <_close_r>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	4d06      	ldr	r5, [pc, #24]	; (800c500 <_close_r+0x1c>)
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	4608      	mov	r0, r1
 800c4ee:	602b      	str	r3, [r5, #0]
 800c4f0:	f7f5 ff99 	bl	8002426 <_close>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	d102      	bne.n	800c4fe <_close_r+0x1a>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	b103      	cbz	r3, 800c4fe <_close_r+0x1a>
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}
 800c500:	200004dc 	.word	0x200004dc

0800c504 <quorem>:
 800c504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c508:	6903      	ldr	r3, [r0, #16]
 800c50a:	690c      	ldr	r4, [r1, #16]
 800c50c:	42a3      	cmp	r3, r4
 800c50e:	4607      	mov	r7, r0
 800c510:	f2c0 8081 	blt.w	800c616 <quorem+0x112>
 800c514:	3c01      	subs	r4, #1
 800c516:	f101 0814 	add.w	r8, r1, #20
 800c51a:	f100 0514 	add.w	r5, r0, #20
 800c51e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c522:	9301      	str	r3, [sp, #4]
 800c524:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c528:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c52c:	3301      	adds	r3, #1
 800c52e:	429a      	cmp	r2, r3
 800c530:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c534:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c538:	fbb2 f6f3 	udiv	r6, r2, r3
 800c53c:	d331      	bcc.n	800c5a2 <quorem+0x9e>
 800c53e:	f04f 0e00 	mov.w	lr, #0
 800c542:	4640      	mov	r0, r8
 800c544:	46ac      	mov	ip, r5
 800c546:	46f2      	mov	sl, lr
 800c548:	f850 2b04 	ldr.w	r2, [r0], #4
 800c54c:	b293      	uxth	r3, r2
 800c54e:	fb06 e303 	mla	r3, r6, r3, lr
 800c552:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c556:	b29b      	uxth	r3, r3
 800c558:	ebaa 0303 	sub.w	r3, sl, r3
 800c55c:	f8dc a000 	ldr.w	sl, [ip]
 800c560:	0c12      	lsrs	r2, r2, #16
 800c562:	fa13 f38a 	uxtah	r3, r3, sl
 800c566:	fb06 e202 	mla	r2, r6, r2, lr
 800c56a:	9300      	str	r3, [sp, #0]
 800c56c:	9b00      	ldr	r3, [sp, #0]
 800c56e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c572:	b292      	uxth	r2, r2
 800c574:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c578:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c57c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c580:	4581      	cmp	r9, r0
 800c582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c586:	f84c 3b04 	str.w	r3, [ip], #4
 800c58a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c58e:	d2db      	bcs.n	800c548 <quorem+0x44>
 800c590:	f855 300b 	ldr.w	r3, [r5, fp]
 800c594:	b92b      	cbnz	r3, 800c5a2 <quorem+0x9e>
 800c596:	9b01      	ldr	r3, [sp, #4]
 800c598:	3b04      	subs	r3, #4
 800c59a:	429d      	cmp	r5, r3
 800c59c:	461a      	mov	r2, r3
 800c59e:	d32e      	bcc.n	800c5fe <quorem+0xfa>
 800c5a0:	613c      	str	r4, [r7, #16]
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	f001 fef4 	bl	800e390 <__mcmp>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	db24      	blt.n	800c5f6 <quorem+0xf2>
 800c5ac:	3601      	adds	r6, #1
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f04f 0c00 	mov.w	ip, #0
 800c5b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5b8:	f8d0 e000 	ldr.w	lr, [r0]
 800c5bc:	b293      	uxth	r3, r2
 800c5be:	ebac 0303 	sub.w	r3, ip, r3
 800c5c2:	0c12      	lsrs	r2, r2, #16
 800c5c4:	fa13 f38e 	uxtah	r3, r3, lr
 800c5c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c5cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5d6:	45c1      	cmp	r9, r8
 800c5d8:	f840 3b04 	str.w	r3, [r0], #4
 800c5dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c5e0:	d2e8      	bcs.n	800c5b4 <quorem+0xb0>
 800c5e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5ea:	b922      	cbnz	r2, 800c5f6 <quorem+0xf2>
 800c5ec:	3b04      	subs	r3, #4
 800c5ee:	429d      	cmp	r5, r3
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	d30a      	bcc.n	800c60a <quorem+0x106>
 800c5f4:	613c      	str	r4, [r7, #16]
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	b003      	add	sp, #12
 800c5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fe:	6812      	ldr	r2, [r2, #0]
 800c600:	3b04      	subs	r3, #4
 800c602:	2a00      	cmp	r2, #0
 800c604:	d1cc      	bne.n	800c5a0 <quorem+0x9c>
 800c606:	3c01      	subs	r4, #1
 800c608:	e7c7      	b.n	800c59a <quorem+0x96>
 800c60a:	6812      	ldr	r2, [r2, #0]
 800c60c:	3b04      	subs	r3, #4
 800c60e:	2a00      	cmp	r2, #0
 800c610:	d1f0      	bne.n	800c5f4 <quorem+0xf0>
 800c612:	3c01      	subs	r4, #1
 800c614:	e7eb      	b.n	800c5ee <quorem+0xea>
 800c616:	2000      	movs	r0, #0
 800c618:	e7ee      	b.n	800c5f8 <quorem+0xf4>
 800c61a:	0000      	movs	r0, r0
 800c61c:	0000      	movs	r0, r0
	...

0800c620 <_dtoa_r>:
 800c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c624:	ed2d 8b04 	vpush	{d8-d9}
 800c628:	ec57 6b10 	vmov	r6, r7, d0
 800c62c:	b093      	sub	sp, #76	; 0x4c
 800c62e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c630:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c634:	9106      	str	r1, [sp, #24]
 800c636:	ee10 aa10 	vmov	sl, s0
 800c63a:	4604      	mov	r4, r0
 800c63c:	9209      	str	r2, [sp, #36]	; 0x24
 800c63e:	930c      	str	r3, [sp, #48]	; 0x30
 800c640:	46bb      	mov	fp, r7
 800c642:	b975      	cbnz	r5, 800c662 <_dtoa_r+0x42>
 800c644:	2010      	movs	r0, #16
 800c646:	f001 fbaf 	bl	800dda8 <malloc>
 800c64a:	4602      	mov	r2, r0
 800c64c:	6260      	str	r0, [r4, #36]	; 0x24
 800c64e:	b920      	cbnz	r0, 800c65a <_dtoa_r+0x3a>
 800c650:	4ba7      	ldr	r3, [pc, #668]	; (800c8f0 <_dtoa_r+0x2d0>)
 800c652:	21ea      	movs	r1, #234	; 0xea
 800c654:	48a7      	ldr	r0, [pc, #668]	; (800c8f4 <_dtoa_r+0x2d4>)
 800c656:	f003 fb8f 	bl	800fd78 <__assert_func>
 800c65a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c65e:	6005      	str	r5, [r0, #0]
 800c660:	60c5      	str	r5, [r0, #12]
 800c662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c664:	6819      	ldr	r1, [r3, #0]
 800c666:	b151      	cbz	r1, 800c67e <_dtoa_r+0x5e>
 800c668:	685a      	ldr	r2, [r3, #4]
 800c66a:	604a      	str	r2, [r1, #4]
 800c66c:	2301      	movs	r3, #1
 800c66e:	4093      	lsls	r3, r2
 800c670:	608b      	str	r3, [r1, #8]
 800c672:	4620      	mov	r0, r4
 800c674:	f001 fc00 	bl	800de78 <_Bfree>
 800c678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c67a:	2200      	movs	r2, #0
 800c67c:	601a      	str	r2, [r3, #0]
 800c67e:	1e3b      	subs	r3, r7, #0
 800c680:	bfaa      	itet	ge
 800c682:	2300      	movge	r3, #0
 800c684:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c688:	f8c8 3000 	strge.w	r3, [r8]
 800c68c:	4b9a      	ldr	r3, [pc, #616]	; (800c8f8 <_dtoa_r+0x2d8>)
 800c68e:	bfbc      	itt	lt
 800c690:	2201      	movlt	r2, #1
 800c692:	f8c8 2000 	strlt.w	r2, [r8]
 800c696:	ea33 030b 	bics.w	r3, r3, fp
 800c69a:	d11b      	bne.n	800c6d4 <_dtoa_r+0xb4>
 800c69c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c69e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c6a2:	6013      	str	r3, [r2, #0]
 800c6a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6a8:	4333      	orrs	r3, r6
 800c6aa:	f000 8592 	beq.w	800d1d2 <_dtoa_r+0xbb2>
 800c6ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6b0:	b963      	cbnz	r3, 800c6cc <_dtoa_r+0xac>
 800c6b2:	4b92      	ldr	r3, [pc, #584]	; (800c8fc <_dtoa_r+0x2dc>)
 800c6b4:	e022      	b.n	800c6fc <_dtoa_r+0xdc>
 800c6b6:	4b92      	ldr	r3, [pc, #584]	; (800c900 <_dtoa_r+0x2e0>)
 800c6b8:	9301      	str	r3, [sp, #4]
 800c6ba:	3308      	adds	r3, #8
 800c6bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6be:	6013      	str	r3, [r2, #0]
 800c6c0:	9801      	ldr	r0, [sp, #4]
 800c6c2:	b013      	add	sp, #76	; 0x4c
 800c6c4:	ecbd 8b04 	vpop	{d8-d9}
 800c6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6cc:	4b8b      	ldr	r3, [pc, #556]	; (800c8fc <_dtoa_r+0x2dc>)
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	3303      	adds	r3, #3
 800c6d2:	e7f3      	b.n	800c6bc <_dtoa_r+0x9c>
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	4650      	mov	r0, sl
 800c6da:	4659      	mov	r1, fp
 800c6dc:	f7f4 fa14 	bl	8000b08 <__aeabi_dcmpeq>
 800c6e0:	ec4b ab19 	vmov	d9, sl, fp
 800c6e4:	4680      	mov	r8, r0
 800c6e6:	b158      	cbz	r0, 800c700 <_dtoa_r+0xe0>
 800c6e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	6013      	str	r3, [r2, #0]
 800c6ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f000 856b 	beq.w	800d1cc <_dtoa_r+0xbac>
 800c6f6:	4883      	ldr	r0, [pc, #524]	; (800c904 <_dtoa_r+0x2e4>)
 800c6f8:	6018      	str	r0, [r3, #0]
 800c6fa:	1e43      	subs	r3, r0, #1
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	e7df      	b.n	800c6c0 <_dtoa_r+0xa0>
 800c700:	ec4b ab10 	vmov	d0, sl, fp
 800c704:	aa10      	add	r2, sp, #64	; 0x40
 800c706:	a911      	add	r1, sp, #68	; 0x44
 800c708:	4620      	mov	r0, r4
 800c70a:	f001 ff63 	bl	800e5d4 <__d2b>
 800c70e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c712:	ee08 0a10 	vmov	s16, r0
 800c716:	2d00      	cmp	r5, #0
 800c718:	f000 8084 	beq.w	800c824 <_dtoa_r+0x204>
 800c71c:	ee19 3a90 	vmov	r3, s19
 800c720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c724:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c728:	4656      	mov	r6, sl
 800c72a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c72e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c732:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c736:	4b74      	ldr	r3, [pc, #464]	; (800c908 <_dtoa_r+0x2e8>)
 800c738:	2200      	movs	r2, #0
 800c73a:	4630      	mov	r0, r6
 800c73c:	4639      	mov	r1, r7
 800c73e:	f7f3 fdc3 	bl	80002c8 <__aeabi_dsub>
 800c742:	a365      	add	r3, pc, #404	; (adr r3, 800c8d8 <_dtoa_r+0x2b8>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 ff76 	bl	8000638 <__aeabi_dmul>
 800c74c:	a364      	add	r3, pc, #400	; (adr r3, 800c8e0 <_dtoa_r+0x2c0>)
 800c74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c752:	f7f3 fdbb 	bl	80002cc <__adddf3>
 800c756:	4606      	mov	r6, r0
 800c758:	4628      	mov	r0, r5
 800c75a:	460f      	mov	r7, r1
 800c75c:	f7f3 ff02 	bl	8000564 <__aeabi_i2d>
 800c760:	a361      	add	r3, pc, #388	; (adr r3, 800c8e8 <_dtoa_r+0x2c8>)
 800c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c766:	f7f3 ff67 	bl	8000638 <__aeabi_dmul>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	4630      	mov	r0, r6
 800c770:	4639      	mov	r1, r7
 800c772:	f7f3 fdab 	bl	80002cc <__adddf3>
 800c776:	4606      	mov	r6, r0
 800c778:	460f      	mov	r7, r1
 800c77a:	f7f4 fa0d 	bl	8000b98 <__aeabi_d2iz>
 800c77e:	2200      	movs	r2, #0
 800c780:	9000      	str	r0, [sp, #0]
 800c782:	2300      	movs	r3, #0
 800c784:	4630      	mov	r0, r6
 800c786:	4639      	mov	r1, r7
 800c788:	f7f4 f9c8 	bl	8000b1c <__aeabi_dcmplt>
 800c78c:	b150      	cbz	r0, 800c7a4 <_dtoa_r+0x184>
 800c78e:	9800      	ldr	r0, [sp, #0]
 800c790:	f7f3 fee8 	bl	8000564 <__aeabi_i2d>
 800c794:	4632      	mov	r2, r6
 800c796:	463b      	mov	r3, r7
 800c798:	f7f4 f9b6 	bl	8000b08 <__aeabi_dcmpeq>
 800c79c:	b910      	cbnz	r0, 800c7a4 <_dtoa_r+0x184>
 800c79e:	9b00      	ldr	r3, [sp, #0]
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	9b00      	ldr	r3, [sp, #0]
 800c7a6:	2b16      	cmp	r3, #22
 800c7a8:	d85a      	bhi.n	800c860 <_dtoa_r+0x240>
 800c7aa:	9a00      	ldr	r2, [sp, #0]
 800c7ac:	4b57      	ldr	r3, [pc, #348]	; (800c90c <_dtoa_r+0x2ec>)
 800c7ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b6:	ec51 0b19 	vmov	r0, r1, d9
 800c7ba:	f7f4 f9af 	bl	8000b1c <__aeabi_dcmplt>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d050      	beq.n	800c864 <_dtoa_r+0x244>
 800c7c2:	9b00      	ldr	r3, [sp, #0]
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7ce:	1b5d      	subs	r5, r3, r5
 800c7d0:	1e6b      	subs	r3, r5, #1
 800c7d2:	9305      	str	r3, [sp, #20]
 800c7d4:	bf45      	ittet	mi
 800c7d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c7da:	9304      	strmi	r3, [sp, #16]
 800c7dc:	2300      	movpl	r3, #0
 800c7de:	2300      	movmi	r3, #0
 800c7e0:	bf4c      	ite	mi
 800c7e2:	9305      	strmi	r3, [sp, #20]
 800c7e4:	9304      	strpl	r3, [sp, #16]
 800c7e6:	9b00      	ldr	r3, [sp, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	db3d      	blt.n	800c868 <_dtoa_r+0x248>
 800c7ec:	9b05      	ldr	r3, [sp, #20]
 800c7ee:	9a00      	ldr	r2, [sp, #0]
 800c7f0:	920a      	str	r2, [sp, #40]	; 0x28
 800c7f2:	4413      	add	r3, r2
 800c7f4:	9305      	str	r3, [sp, #20]
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	9307      	str	r3, [sp, #28]
 800c7fa:	9b06      	ldr	r3, [sp, #24]
 800c7fc:	2b09      	cmp	r3, #9
 800c7fe:	f200 8089 	bhi.w	800c914 <_dtoa_r+0x2f4>
 800c802:	2b05      	cmp	r3, #5
 800c804:	bfc4      	itt	gt
 800c806:	3b04      	subgt	r3, #4
 800c808:	9306      	strgt	r3, [sp, #24]
 800c80a:	9b06      	ldr	r3, [sp, #24]
 800c80c:	f1a3 0302 	sub.w	r3, r3, #2
 800c810:	bfcc      	ite	gt
 800c812:	2500      	movgt	r5, #0
 800c814:	2501      	movle	r5, #1
 800c816:	2b03      	cmp	r3, #3
 800c818:	f200 8087 	bhi.w	800c92a <_dtoa_r+0x30a>
 800c81c:	e8df f003 	tbb	[pc, r3]
 800c820:	59383a2d 	.word	0x59383a2d
 800c824:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c828:	441d      	add	r5, r3
 800c82a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c82e:	2b20      	cmp	r3, #32
 800c830:	bfc1      	itttt	gt
 800c832:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c836:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c83a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c83e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c842:	bfda      	itte	le
 800c844:	f1c3 0320 	rsble	r3, r3, #32
 800c848:	fa06 f003 	lslle.w	r0, r6, r3
 800c84c:	4318      	orrgt	r0, r3
 800c84e:	f7f3 fe79 	bl	8000544 <__aeabi_ui2d>
 800c852:	2301      	movs	r3, #1
 800c854:	4606      	mov	r6, r0
 800c856:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c85a:	3d01      	subs	r5, #1
 800c85c:	930e      	str	r3, [sp, #56]	; 0x38
 800c85e:	e76a      	b.n	800c736 <_dtoa_r+0x116>
 800c860:	2301      	movs	r3, #1
 800c862:	e7b2      	b.n	800c7ca <_dtoa_r+0x1aa>
 800c864:	900b      	str	r0, [sp, #44]	; 0x2c
 800c866:	e7b1      	b.n	800c7cc <_dtoa_r+0x1ac>
 800c868:	9b04      	ldr	r3, [sp, #16]
 800c86a:	9a00      	ldr	r2, [sp, #0]
 800c86c:	1a9b      	subs	r3, r3, r2
 800c86e:	9304      	str	r3, [sp, #16]
 800c870:	4253      	negs	r3, r2
 800c872:	9307      	str	r3, [sp, #28]
 800c874:	2300      	movs	r3, #0
 800c876:	930a      	str	r3, [sp, #40]	; 0x28
 800c878:	e7bf      	b.n	800c7fa <_dtoa_r+0x1da>
 800c87a:	2300      	movs	r3, #0
 800c87c:	9308      	str	r3, [sp, #32]
 800c87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c880:	2b00      	cmp	r3, #0
 800c882:	dc55      	bgt.n	800c930 <_dtoa_r+0x310>
 800c884:	2301      	movs	r3, #1
 800c886:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c88a:	461a      	mov	r2, r3
 800c88c:	9209      	str	r2, [sp, #36]	; 0x24
 800c88e:	e00c      	b.n	800c8aa <_dtoa_r+0x28a>
 800c890:	2301      	movs	r3, #1
 800c892:	e7f3      	b.n	800c87c <_dtoa_r+0x25c>
 800c894:	2300      	movs	r3, #0
 800c896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c898:	9308      	str	r3, [sp, #32]
 800c89a:	9b00      	ldr	r3, [sp, #0]
 800c89c:	4413      	add	r3, r2
 800c89e:	9302      	str	r3, [sp, #8]
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	9303      	str	r3, [sp, #12]
 800c8a6:	bfb8      	it	lt
 800c8a8:	2301      	movlt	r3, #1
 800c8aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	6042      	str	r2, [r0, #4]
 800c8b0:	2204      	movs	r2, #4
 800c8b2:	f102 0614 	add.w	r6, r2, #20
 800c8b6:	429e      	cmp	r6, r3
 800c8b8:	6841      	ldr	r1, [r0, #4]
 800c8ba:	d93d      	bls.n	800c938 <_dtoa_r+0x318>
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f001 fa9b 	bl	800ddf8 <_Balloc>
 800c8c2:	9001      	str	r0, [sp, #4]
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d13b      	bne.n	800c940 <_dtoa_r+0x320>
 800c8c8:	4b11      	ldr	r3, [pc, #68]	; (800c910 <_dtoa_r+0x2f0>)
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c8d0:	e6c0      	b.n	800c654 <_dtoa_r+0x34>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e7df      	b.n	800c896 <_dtoa_r+0x276>
 800c8d6:	bf00      	nop
 800c8d8:	636f4361 	.word	0x636f4361
 800c8dc:	3fd287a7 	.word	0x3fd287a7
 800c8e0:	8b60c8b3 	.word	0x8b60c8b3
 800c8e4:	3fc68a28 	.word	0x3fc68a28
 800c8e8:	509f79fb 	.word	0x509f79fb
 800c8ec:	3fd34413 	.word	0x3fd34413
 800c8f0:	080107d6 	.word	0x080107d6
 800c8f4:	080107ed 	.word	0x080107ed
 800c8f8:	7ff00000 	.word	0x7ff00000
 800c8fc:	080107d2 	.word	0x080107d2
 800c900:	080107c9 	.word	0x080107c9
 800c904:	08010aaa 	.word	0x08010aaa
 800c908:	3ff80000 	.word	0x3ff80000
 800c90c:	080109c0 	.word	0x080109c0
 800c910:	08010848 	.word	0x08010848
 800c914:	2501      	movs	r5, #1
 800c916:	2300      	movs	r3, #0
 800c918:	9306      	str	r3, [sp, #24]
 800c91a:	9508      	str	r5, [sp, #32]
 800c91c:	f04f 33ff 	mov.w	r3, #4294967295
 800c920:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c924:	2200      	movs	r2, #0
 800c926:	2312      	movs	r3, #18
 800c928:	e7b0      	b.n	800c88c <_dtoa_r+0x26c>
 800c92a:	2301      	movs	r3, #1
 800c92c:	9308      	str	r3, [sp, #32]
 800c92e:	e7f5      	b.n	800c91c <_dtoa_r+0x2fc>
 800c930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c932:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c936:	e7b8      	b.n	800c8aa <_dtoa_r+0x28a>
 800c938:	3101      	adds	r1, #1
 800c93a:	6041      	str	r1, [r0, #4]
 800c93c:	0052      	lsls	r2, r2, #1
 800c93e:	e7b8      	b.n	800c8b2 <_dtoa_r+0x292>
 800c940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c942:	9a01      	ldr	r2, [sp, #4]
 800c944:	601a      	str	r2, [r3, #0]
 800c946:	9b03      	ldr	r3, [sp, #12]
 800c948:	2b0e      	cmp	r3, #14
 800c94a:	f200 809d 	bhi.w	800ca88 <_dtoa_r+0x468>
 800c94e:	2d00      	cmp	r5, #0
 800c950:	f000 809a 	beq.w	800ca88 <_dtoa_r+0x468>
 800c954:	9b00      	ldr	r3, [sp, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	dd32      	ble.n	800c9c0 <_dtoa_r+0x3a0>
 800c95a:	4ab7      	ldr	r2, [pc, #732]	; (800cc38 <_dtoa_r+0x618>)
 800c95c:	f003 030f 	and.w	r3, r3, #15
 800c960:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c964:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c968:	9b00      	ldr	r3, [sp, #0]
 800c96a:	05d8      	lsls	r0, r3, #23
 800c96c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c970:	d516      	bpl.n	800c9a0 <_dtoa_r+0x380>
 800c972:	4bb2      	ldr	r3, [pc, #712]	; (800cc3c <_dtoa_r+0x61c>)
 800c974:	ec51 0b19 	vmov	r0, r1, d9
 800c978:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c97c:	f7f3 ff86 	bl	800088c <__aeabi_ddiv>
 800c980:	f007 070f 	and.w	r7, r7, #15
 800c984:	4682      	mov	sl, r0
 800c986:	468b      	mov	fp, r1
 800c988:	2503      	movs	r5, #3
 800c98a:	4eac      	ldr	r6, [pc, #688]	; (800cc3c <_dtoa_r+0x61c>)
 800c98c:	b957      	cbnz	r7, 800c9a4 <_dtoa_r+0x384>
 800c98e:	4642      	mov	r2, r8
 800c990:	464b      	mov	r3, r9
 800c992:	4650      	mov	r0, sl
 800c994:	4659      	mov	r1, fp
 800c996:	f7f3 ff79 	bl	800088c <__aeabi_ddiv>
 800c99a:	4682      	mov	sl, r0
 800c99c:	468b      	mov	fp, r1
 800c99e:	e028      	b.n	800c9f2 <_dtoa_r+0x3d2>
 800c9a0:	2502      	movs	r5, #2
 800c9a2:	e7f2      	b.n	800c98a <_dtoa_r+0x36a>
 800c9a4:	07f9      	lsls	r1, r7, #31
 800c9a6:	d508      	bpl.n	800c9ba <_dtoa_r+0x39a>
 800c9a8:	4640      	mov	r0, r8
 800c9aa:	4649      	mov	r1, r9
 800c9ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c9b0:	f7f3 fe42 	bl	8000638 <__aeabi_dmul>
 800c9b4:	3501      	adds	r5, #1
 800c9b6:	4680      	mov	r8, r0
 800c9b8:	4689      	mov	r9, r1
 800c9ba:	107f      	asrs	r7, r7, #1
 800c9bc:	3608      	adds	r6, #8
 800c9be:	e7e5      	b.n	800c98c <_dtoa_r+0x36c>
 800c9c0:	f000 809b 	beq.w	800cafa <_dtoa_r+0x4da>
 800c9c4:	9b00      	ldr	r3, [sp, #0]
 800c9c6:	4f9d      	ldr	r7, [pc, #628]	; (800cc3c <_dtoa_r+0x61c>)
 800c9c8:	425e      	negs	r6, r3
 800c9ca:	4b9b      	ldr	r3, [pc, #620]	; (800cc38 <_dtoa_r+0x618>)
 800c9cc:	f006 020f 	and.w	r2, r6, #15
 800c9d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	ec51 0b19 	vmov	r0, r1, d9
 800c9dc:	f7f3 fe2c 	bl	8000638 <__aeabi_dmul>
 800c9e0:	1136      	asrs	r6, r6, #4
 800c9e2:	4682      	mov	sl, r0
 800c9e4:	468b      	mov	fp, r1
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	2502      	movs	r5, #2
 800c9ea:	2e00      	cmp	r6, #0
 800c9ec:	d17a      	bne.n	800cae4 <_dtoa_r+0x4c4>
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1d3      	bne.n	800c99a <_dtoa_r+0x37a>
 800c9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f000 8082 	beq.w	800cafe <_dtoa_r+0x4de>
 800c9fa:	4b91      	ldr	r3, [pc, #580]	; (800cc40 <_dtoa_r+0x620>)
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	4650      	mov	r0, sl
 800ca00:	4659      	mov	r1, fp
 800ca02:	f7f4 f88b 	bl	8000b1c <__aeabi_dcmplt>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d079      	beq.n	800cafe <_dtoa_r+0x4de>
 800ca0a:	9b03      	ldr	r3, [sp, #12]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d076      	beq.n	800cafe <_dtoa_r+0x4de>
 800ca10:	9b02      	ldr	r3, [sp, #8]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	dd36      	ble.n	800ca84 <_dtoa_r+0x464>
 800ca16:	9b00      	ldr	r3, [sp, #0]
 800ca18:	4650      	mov	r0, sl
 800ca1a:	4659      	mov	r1, fp
 800ca1c:	1e5f      	subs	r7, r3, #1
 800ca1e:	2200      	movs	r2, #0
 800ca20:	4b88      	ldr	r3, [pc, #544]	; (800cc44 <_dtoa_r+0x624>)
 800ca22:	f7f3 fe09 	bl	8000638 <__aeabi_dmul>
 800ca26:	9e02      	ldr	r6, [sp, #8]
 800ca28:	4682      	mov	sl, r0
 800ca2a:	468b      	mov	fp, r1
 800ca2c:	3501      	adds	r5, #1
 800ca2e:	4628      	mov	r0, r5
 800ca30:	f7f3 fd98 	bl	8000564 <__aeabi_i2d>
 800ca34:	4652      	mov	r2, sl
 800ca36:	465b      	mov	r3, fp
 800ca38:	f7f3 fdfe 	bl	8000638 <__aeabi_dmul>
 800ca3c:	4b82      	ldr	r3, [pc, #520]	; (800cc48 <_dtoa_r+0x628>)
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f7f3 fc44 	bl	80002cc <__adddf3>
 800ca44:	46d0      	mov	r8, sl
 800ca46:	46d9      	mov	r9, fp
 800ca48:	4682      	mov	sl, r0
 800ca4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ca4e:	2e00      	cmp	r6, #0
 800ca50:	d158      	bne.n	800cb04 <_dtoa_r+0x4e4>
 800ca52:	4b7e      	ldr	r3, [pc, #504]	; (800cc4c <_dtoa_r+0x62c>)
 800ca54:	2200      	movs	r2, #0
 800ca56:	4640      	mov	r0, r8
 800ca58:	4649      	mov	r1, r9
 800ca5a:	f7f3 fc35 	bl	80002c8 <__aeabi_dsub>
 800ca5e:	4652      	mov	r2, sl
 800ca60:	465b      	mov	r3, fp
 800ca62:	4680      	mov	r8, r0
 800ca64:	4689      	mov	r9, r1
 800ca66:	f7f4 f877 	bl	8000b58 <__aeabi_dcmpgt>
 800ca6a:	2800      	cmp	r0, #0
 800ca6c:	f040 8295 	bne.w	800cf9a <_dtoa_r+0x97a>
 800ca70:	4652      	mov	r2, sl
 800ca72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ca76:	4640      	mov	r0, r8
 800ca78:	4649      	mov	r1, r9
 800ca7a:	f7f4 f84f 	bl	8000b1c <__aeabi_dcmplt>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	f040 8289 	bne.w	800cf96 <_dtoa_r+0x976>
 800ca84:	ec5b ab19 	vmov	sl, fp, d9
 800ca88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f2c0 8148 	blt.w	800cd20 <_dtoa_r+0x700>
 800ca90:	9a00      	ldr	r2, [sp, #0]
 800ca92:	2a0e      	cmp	r2, #14
 800ca94:	f300 8144 	bgt.w	800cd20 <_dtoa_r+0x700>
 800ca98:	4b67      	ldr	r3, [pc, #412]	; (800cc38 <_dtoa_r+0x618>)
 800ca9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800caa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f280 80d5 	bge.w	800cc54 <_dtoa_r+0x634>
 800caaa:	9b03      	ldr	r3, [sp, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	f300 80d1 	bgt.w	800cc54 <_dtoa_r+0x634>
 800cab2:	f040 826f 	bne.w	800cf94 <_dtoa_r+0x974>
 800cab6:	4b65      	ldr	r3, [pc, #404]	; (800cc4c <_dtoa_r+0x62c>)
 800cab8:	2200      	movs	r2, #0
 800caba:	4640      	mov	r0, r8
 800cabc:	4649      	mov	r1, r9
 800cabe:	f7f3 fdbb 	bl	8000638 <__aeabi_dmul>
 800cac2:	4652      	mov	r2, sl
 800cac4:	465b      	mov	r3, fp
 800cac6:	f7f4 f83d 	bl	8000b44 <__aeabi_dcmpge>
 800caca:	9e03      	ldr	r6, [sp, #12]
 800cacc:	4637      	mov	r7, r6
 800cace:	2800      	cmp	r0, #0
 800cad0:	f040 8245 	bne.w	800cf5e <_dtoa_r+0x93e>
 800cad4:	9d01      	ldr	r5, [sp, #4]
 800cad6:	2331      	movs	r3, #49	; 0x31
 800cad8:	f805 3b01 	strb.w	r3, [r5], #1
 800cadc:	9b00      	ldr	r3, [sp, #0]
 800cade:	3301      	adds	r3, #1
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	e240      	b.n	800cf66 <_dtoa_r+0x946>
 800cae4:	07f2      	lsls	r2, r6, #31
 800cae6:	d505      	bpl.n	800caf4 <_dtoa_r+0x4d4>
 800cae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caec:	f7f3 fda4 	bl	8000638 <__aeabi_dmul>
 800caf0:	3501      	adds	r5, #1
 800caf2:	2301      	movs	r3, #1
 800caf4:	1076      	asrs	r6, r6, #1
 800caf6:	3708      	adds	r7, #8
 800caf8:	e777      	b.n	800c9ea <_dtoa_r+0x3ca>
 800cafa:	2502      	movs	r5, #2
 800cafc:	e779      	b.n	800c9f2 <_dtoa_r+0x3d2>
 800cafe:	9f00      	ldr	r7, [sp, #0]
 800cb00:	9e03      	ldr	r6, [sp, #12]
 800cb02:	e794      	b.n	800ca2e <_dtoa_r+0x40e>
 800cb04:	9901      	ldr	r1, [sp, #4]
 800cb06:	4b4c      	ldr	r3, [pc, #304]	; (800cc38 <_dtoa_r+0x618>)
 800cb08:	4431      	add	r1, r6
 800cb0a:	910d      	str	r1, [sp, #52]	; 0x34
 800cb0c:	9908      	ldr	r1, [sp, #32]
 800cb0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb16:	2900      	cmp	r1, #0
 800cb18:	d043      	beq.n	800cba2 <_dtoa_r+0x582>
 800cb1a:	494d      	ldr	r1, [pc, #308]	; (800cc50 <_dtoa_r+0x630>)
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	f7f3 feb5 	bl	800088c <__aeabi_ddiv>
 800cb22:	4652      	mov	r2, sl
 800cb24:	465b      	mov	r3, fp
 800cb26:	f7f3 fbcf 	bl	80002c8 <__aeabi_dsub>
 800cb2a:	9d01      	ldr	r5, [sp, #4]
 800cb2c:	4682      	mov	sl, r0
 800cb2e:	468b      	mov	fp, r1
 800cb30:	4649      	mov	r1, r9
 800cb32:	4640      	mov	r0, r8
 800cb34:	f7f4 f830 	bl	8000b98 <__aeabi_d2iz>
 800cb38:	4606      	mov	r6, r0
 800cb3a:	f7f3 fd13 	bl	8000564 <__aeabi_i2d>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	4640      	mov	r0, r8
 800cb44:	4649      	mov	r1, r9
 800cb46:	f7f3 fbbf 	bl	80002c8 <__aeabi_dsub>
 800cb4a:	3630      	adds	r6, #48	; 0x30
 800cb4c:	f805 6b01 	strb.w	r6, [r5], #1
 800cb50:	4652      	mov	r2, sl
 800cb52:	465b      	mov	r3, fp
 800cb54:	4680      	mov	r8, r0
 800cb56:	4689      	mov	r9, r1
 800cb58:	f7f3 ffe0 	bl	8000b1c <__aeabi_dcmplt>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d163      	bne.n	800cc28 <_dtoa_r+0x608>
 800cb60:	4642      	mov	r2, r8
 800cb62:	464b      	mov	r3, r9
 800cb64:	4936      	ldr	r1, [pc, #216]	; (800cc40 <_dtoa_r+0x620>)
 800cb66:	2000      	movs	r0, #0
 800cb68:	f7f3 fbae 	bl	80002c8 <__aeabi_dsub>
 800cb6c:	4652      	mov	r2, sl
 800cb6e:	465b      	mov	r3, fp
 800cb70:	f7f3 ffd4 	bl	8000b1c <__aeabi_dcmplt>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	f040 80b5 	bne.w	800cce4 <_dtoa_r+0x6c4>
 800cb7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb7c:	429d      	cmp	r5, r3
 800cb7e:	d081      	beq.n	800ca84 <_dtoa_r+0x464>
 800cb80:	4b30      	ldr	r3, [pc, #192]	; (800cc44 <_dtoa_r+0x624>)
 800cb82:	2200      	movs	r2, #0
 800cb84:	4650      	mov	r0, sl
 800cb86:	4659      	mov	r1, fp
 800cb88:	f7f3 fd56 	bl	8000638 <__aeabi_dmul>
 800cb8c:	4b2d      	ldr	r3, [pc, #180]	; (800cc44 <_dtoa_r+0x624>)
 800cb8e:	4682      	mov	sl, r0
 800cb90:	468b      	mov	fp, r1
 800cb92:	4640      	mov	r0, r8
 800cb94:	4649      	mov	r1, r9
 800cb96:	2200      	movs	r2, #0
 800cb98:	f7f3 fd4e 	bl	8000638 <__aeabi_dmul>
 800cb9c:	4680      	mov	r8, r0
 800cb9e:	4689      	mov	r9, r1
 800cba0:	e7c6      	b.n	800cb30 <_dtoa_r+0x510>
 800cba2:	4650      	mov	r0, sl
 800cba4:	4659      	mov	r1, fp
 800cba6:	f7f3 fd47 	bl	8000638 <__aeabi_dmul>
 800cbaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbac:	9d01      	ldr	r5, [sp, #4]
 800cbae:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbb0:	4682      	mov	sl, r0
 800cbb2:	468b      	mov	fp, r1
 800cbb4:	4649      	mov	r1, r9
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	f7f3 ffee 	bl	8000b98 <__aeabi_d2iz>
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	f7f3 fcd1 	bl	8000564 <__aeabi_i2d>
 800cbc2:	3630      	adds	r6, #48	; 0x30
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4640      	mov	r0, r8
 800cbca:	4649      	mov	r1, r9
 800cbcc:	f7f3 fb7c 	bl	80002c8 <__aeabi_dsub>
 800cbd0:	f805 6b01 	strb.w	r6, [r5], #1
 800cbd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbd6:	429d      	cmp	r5, r3
 800cbd8:	4680      	mov	r8, r0
 800cbda:	4689      	mov	r9, r1
 800cbdc:	f04f 0200 	mov.w	r2, #0
 800cbe0:	d124      	bne.n	800cc2c <_dtoa_r+0x60c>
 800cbe2:	4b1b      	ldr	r3, [pc, #108]	; (800cc50 <_dtoa_r+0x630>)
 800cbe4:	4650      	mov	r0, sl
 800cbe6:	4659      	mov	r1, fp
 800cbe8:	f7f3 fb70 	bl	80002cc <__adddf3>
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	4640      	mov	r0, r8
 800cbf2:	4649      	mov	r1, r9
 800cbf4:	f7f3 ffb0 	bl	8000b58 <__aeabi_dcmpgt>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	d173      	bne.n	800cce4 <_dtoa_r+0x6c4>
 800cbfc:	4652      	mov	r2, sl
 800cbfe:	465b      	mov	r3, fp
 800cc00:	4913      	ldr	r1, [pc, #76]	; (800cc50 <_dtoa_r+0x630>)
 800cc02:	2000      	movs	r0, #0
 800cc04:	f7f3 fb60 	bl	80002c8 <__aeabi_dsub>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	4640      	mov	r0, r8
 800cc0e:	4649      	mov	r1, r9
 800cc10:	f7f3 ff84 	bl	8000b1c <__aeabi_dcmplt>
 800cc14:	2800      	cmp	r0, #0
 800cc16:	f43f af35 	beq.w	800ca84 <_dtoa_r+0x464>
 800cc1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc1c:	1e6b      	subs	r3, r5, #1
 800cc1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc24:	2b30      	cmp	r3, #48	; 0x30
 800cc26:	d0f8      	beq.n	800cc1a <_dtoa_r+0x5fa>
 800cc28:	9700      	str	r7, [sp, #0]
 800cc2a:	e049      	b.n	800ccc0 <_dtoa_r+0x6a0>
 800cc2c:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <_dtoa_r+0x624>)
 800cc2e:	f7f3 fd03 	bl	8000638 <__aeabi_dmul>
 800cc32:	4680      	mov	r8, r0
 800cc34:	4689      	mov	r9, r1
 800cc36:	e7bd      	b.n	800cbb4 <_dtoa_r+0x594>
 800cc38:	080109c0 	.word	0x080109c0
 800cc3c:	08010998 	.word	0x08010998
 800cc40:	3ff00000 	.word	0x3ff00000
 800cc44:	40240000 	.word	0x40240000
 800cc48:	401c0000 	.word	0x401c0000
 800cc4c:	40140000 	.word	0x40140000
 800cc50:	3fe00000 	.word	0x3fe00000
 800cc54:	9d01      	ldr	r5, [sp, #4]
 800cc56:	4656      	mov	r6, sl
 800cc58:	465f      	mov	r7, fp
 800cc5a:	4642      	mov	r2, r8
 800cc5c:	464b      	mov	r3, r9
 800cc5e:	4630      	mov	r0, r6
 800cc60:	4639      	mov	r1, r7
 800cc62:	f7f3 fe13 	bl	800088c <__aeabi_ddiv>
 800cc66:	f7f3 ff97 	bl	8000b98 <__aeabi_d2iz>
 800cc6a:	4682      	mov	sl, r0
 800cc6c:	f7f3 fc7a 	bl	8000564 <__aeabi_i2d>
 800cc70:	4642      	mov	r2, r8
 800cc72:	464b      	mov	r3, r9
 800cc74:	f7f3 fce0 	bl	8000638 <__aeabi_dmul>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	4639      	mov	r1, r7
 800cc80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cc84:	f7f3 fb20 	bl	80002c8 <__aeabi_dsub>
 800cc88:	f805 6b01 	strb.w	r6, [r5], #1
 800cc8c:	9e01      	ldr	r6, [sp, #4]
 800cc8e:	9f03      	ldr	r7, [sp, #12]
 800cc90:	1bae      	subs	r6, r5, r6
 800cc92:	42b7      	cmp	r7, r6
 800cc94:	4602      	mov	r2, r0
 800cc96:	460b      	mov	r3, r1
 800cc98:	d135      	bne.n	800cd06 <_dtoa_r+0x6e6>
 800cc9a:	f7f3 fb17 	bl	80002cc <__adddf3>
 800cc9e:	4642      	mov	r2, r8
 800cca0:	464b      	mov	r3, r9
 800cca2:	4606      	mov	r6, r0
 800cca4:	460f      	mov	r7, r1
 800cca6:	f7f3 ff57 	bl	8000b58 <__aeabi_dcmpgt>
 800ccaa:	b9d0      	cbnz	r0, 800cce2 <_dtoa_r+0x6c2>
 800ccac:	4642      	mov	r2, r8
 800ccae:	464b      	mov	r3, r9
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	4639      	mov	r1, r7
 800ccb4:	f7f3 ff28 	bl	8000b08 <__aeabi_dcmpeq>
 800ccb8:	b110      	cbz	r0, 800ccc0 <_dtoa_r+0x6a0>
 800ccba:	f01a 0f01 	tst.w	sl, #1
 800ccbe:	d110      	bne.n	800cce2 <_dtoa_r+0x6c2>
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	ee18 1a10 	vmov	r1, s16
 800ccc6:	f001 f8d7 	bl	800de78 <_Bfree>
 800ccca:	2300      	movs	r3, #0
 800cccc:	9800      	ldr	r0, [sp, #0]
 800ccce:	702b      	strb	r3, [r5, #0]
 800ccd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccd2:	3001      	adds	r0, #1
 800ccd4:	6018      	str	r0, [r3, #0]
 800ccd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f43f acf1 	beq.w	800c6c0 <_dtoa_r+0xa0>
 800ccde:	601d      	str	r5, [r3, #0]
 800cce0:	e4ee      	b.n	800c6c0 <_dtoa_r+0xa0>
 800cce2:	9f00      	ldr	r7, [sp, #0]
 800cce4:	462b      	mov	r3, r5
 800cce6:	461d      	mov	r5, r3
 800cce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccec:	2a39      	cmp	r2, #57	; 0x39
 800ccee:	d106      	bne.n	800ccfe <_dtoa_r+0x6de>
 800ccf0:	9a01      	ldr	r2, [sp, #4]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d1f7      	bne.n	800cce6 <_dtoa_r+0x6c6>
 800ccf6:	9901      	ldr	r1, [sp, #4]
 800ccf8:	2230      	movs	r2, #48	; 0x30
 800ccfa:	3701      	adds	r7, #1
 800ccfc:	700a      	strb	r2, [r1, #0]
 800ccfe:	781a      	ldrb	r2, [r3, #0]
 800cd00:	3201      	adds	r2, #1
 800cd02:	701a      	strb	r2, [r3, #0]
 800cd04:	e790      	b.n	800cc28 <_dtoa_r+0x608>
 800cd06:	4ba6      	ldr	r3, [pc, #664]	; (800cfa0 <_dtoa_r+0x980>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f7f3 fc95 	bl	8000638 <__aeabi_dmul>
 800cd0e:	2200      	movs	r2, #0
 800cd10:	2300      	movs	r3, #0
 800cd12:	4606      	mov	r6, r0
 800cd14:	460f      	mov	r7, r1
 800cd16:	f7f3 fef7 	bl	8000b08 <__aeabi_dcmpeq>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	d09d      	beq.n	800cc5a <_dtoa_r+0x63a>
 800cd1e:	e7cf      	b.n	800ccc0 <_dtoa_r+0x6a0>
 800cd20:	9a08      	ldr	r2, [sp, #32]
 800cd22:	2a00      	cmp	r2, #0
 800cd24:	f000 80d7 	beq.w	800ced6 <_dtoa_r+0x8b6>
 800cd28:	9a06      	ldr	r2, [sp, #24]
 800cd2a:	2a01      	cmp	r2, #1
 800cd2c:	f300 80ba 	bgt.w	800cea4 <_dtoa_r+0x884>
 800cd30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd32:	2a00      	cmp	r2, #0
 800cd34:	f000 80b2 	beq.w	800ce9c <_dtoa_r+0x87c>
 800cd38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd3c:	9e07      	ldr	r6, [sp, #28]
 800cd3e:	9d04      	ldr	r5, [sp, #16]
 800cd40:	9a04      	ldr	r2, [sp, #16]
 800cd42:	441a      	add	r2, r3
 800cd44:	9204      	str	r2, [sp, #16]
 800cd46:	9a05      	ldr	r2, [sp, #20]
 800cd48:	2101      	movs	r1, #1
 800cd4a:	441a      	add	r2, r3
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	9205      	str	r2, [sp, #20]
 800cd50:	f001 f994 	bl	800e07c <__i2b>
 800cd54:	4607      	mov	r7, r0
 800cd56:	2d00      	cmp	r5, #0
 800cd58:	dd0c      	ble.n	800cd74 <_dtoa_r+0x754>
 800cd5a:	9b05      	ldr	r3, [sp, #20]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	dd09      	ble.n	800cd74 <_dtoa_r+0x754>
 800cd60:	42ab      	cmp	r3, r5
 800cd62:	9a04      	ldr	r2, [sp, #16]
 800cd64:	bfa8      	it	ge
 800cd66:	462b      	movge	r3, r5
 800cd68:	1ad2      	subs	r2, r2, r3
 800cd6a:	9204      	str	r2, [sp, #16]
 800cd6c:	9a05      	ldr	r2, [sp, #20]
 800cd6e:	1aed      	subs	r5, r5, r3
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	9305      	str	r3, [sp, #20]
 800cd74:	9b07      	ldr	r3, [sp, #28]
 800cd76:	b31b      	cbz	r3, 800cdc0 <_dtoa_r+0x7a0>
 800cd78:	9b08      	ldr	r3, [sp, #32]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	f000 80af 	beq.w	800cede <_dtoa_r+0x8be>
 800cd80:	2e00      	cmp	r6, #0
 800cd82:	dd13      	ble.n	800cdac <_dtoa_r+0x78c>
 800cd84:	4639      	mov	r1, r7
 800cd86:	4632      	mov	r2, r6
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f001 fa37 	bl	800e1fc <__pow5mult>
 800cd8e:	ee18 2a10 	vmov	r2, s16
 800cd92:	4601      	mov	r1, r0
 800cd94:	4607      	mov	r7, r0
 800cd96:	4620      	mov	r0, r4
 800cd98:	f001 f986 	bl	800e0a8 <__multiply>
 800cd9c:	ee18 1a10 	vmov	r1, s16
 800cda0:	4680      	mov	r8, r0
 800cda2:	4620      	mov	r0, r4
 800cda4:	f001 f868 	bl	800de78 <_Bfree>
 800cda8:	ee08 8a10 	vmov	s16, r8
 800cdac:	9b07      	ldr	r3, [sp, #28]
 800cdae:	1b9a      	subs	r2, r3, r6
 800cdb0:	d006      	beq.n	800cdc0 <_dtoa_r+0x7a0>
 800cdb2:	ee18 1a10 	vmov	r1, s16
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f001 fa20 	bl	800e1fc <__pow5mult>
 800cdbc:	ee08 0a10 	vmov	s16, r0
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f001 f95a 	bl	800e07c <__i2b>
 800cdc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	4606      	mov	r6, r0
 800cdce:	f340 8088 	ble.w	800cee2 <_dtoa_r+0x8c2>
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	4601      	mov	r1, r0
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f001 fa10 	bl	800e1fc <__pow5mult>
 800cddc:	9b06      	ldr	r3, [sp, #24]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	4606      	mov	r6, r0
 800cde2:	f340 8081 	ble.w	800cee8 <_dtoa_r+0x8c8>
 800cde6:	f04f 0800 	mov.w	r8, #0
 800cdea:	6933      	ldr	r3, [r6, #16]
 800cdec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cdf0:	6918      	ldr	r0, [r3, #16]
 800cdf2:	f001 f8f3 	bl	800dfdc <__hi0bits>
 800cdf6:	f1c0 0020 	rsb	r0, r0, #32
 800cdfa:	9b05      	ldr	r3, [sp, #20]
 800cdfc:	4418      	add	r0, r3
 800cdfe:	f010 001f 	ands.w	r0, r0, #31
 800ce02:	f000 8092 	beq.w	800cf2a <_dtoa_r+0x90a>
 800ce06:	f1c0 0320 	rsb	r3, r0, #32
 800ce0a:	2b04      	cmp	r3, #4
 800ce0c:	f340 808a 	ble.w	800cf24 <_dtoa_r+0x904>
 800ce10:	f1c0 001c 	rsb	r0, r0, #28
 800ce14:	9b04      	ldr	r3, [sp, #16]
 800ce16:	4403      	add	r3, r0
 800ce18:	9304      	str	r3, [sp, #16]
 800ce1a:	9b05      	ldr	r3, [sp, #20]
 800ce1c:	4403      	add	r3, r0
 800ce1e:	4405      	add	r5, r0
 800ce20:	9305      	str	r3, [sp, #20]
 800ce22:	9b04      	ldr	r3, [sp, #16]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	dd07      	ble.n	800ce38 <_dtoa_r+0x818>
 800ce28:	ee18 1a10 	vmov	r1, s16
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f001 fa3e 	bl	800e2b0 <__lshift>
 800ce34:	ee08 0a10 	vmov	s16, r0
 800ce38:	9b05      	ldr	r3, [sp, #20]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	dd05      	ble.n	800ce4a <_dtoa_r+0x82a>
 800ce3e:	4631      	mov	r1, r6
 800ce40:	461a      	mov	r2, r3
 800ce42:	4620      	mov	r0, r4
 800ce44:	f001 fa34 	bl	800e2b0 <__lshift>
 800ce48:	4606      	mov	r6, r0
 800ce4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d06e      	beq.n	800cf2e <_dtoa_r+0x90e>
 800ce50:	ee18 0a10 	vmov	r0, s16
 800ce54:	4631      	mov	r1, r6
 800ce56:	f001 fa9b 	bl	800e390 <__mcmp>
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	da67      	bge.n	800cf2e <_dtoa_r+0x90e>
 800ce5e:	9b00      	ldr	r3, [sp, #0]
 800ce60:	3b01      	subs	r3, #1
 800ce62:	ee18 1a10 	vmov	r1, s16
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	220a      	movs	r2, #10
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f001 f825 	bl	800debc <__multadd>
 800ce72:	9b08      	ldr	r3, [sp, #32]
 800ce74:	ee08 0a10 	vmov	s16, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	f000 81b1 	beq.w	800d1e0 <_dtoa_r+0xbc0>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	4639      	mov	r1, r7
 800ce82:	220a      	movs	r2, #10
 800ce84:	4620      	mov	r0, r4
 800ce86:	f001 f819 	bl	800debc <__multadd>
 800ce8a:	9b02      	ldr	r3, [sp, #8]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	4607      	mov	r7, r0
 800ce90:	f300 808e 	bgt.w	800cfb0 <_dtoa_r+0x990>
 800ce94:	9b06      	ldr	r3, [sp, #24]
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	dc51      	bgt.n	800cf3e <_dtoa_r+0x91e>
 800ce9a:	e089      	b.n	800cfb0 <_dtoa_r+0x990>
 800ce9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cea2:	e74b      	b.n	800cd3c <_dtoa_r+0x71c>
 800cea4:	9b03      	ldr	r3, [sp, #12]
 800cea6:	1e5e      	subs	r6, r3, #1
 800cea8:	9b07      	ldr	r3, [sp, #28]
 800ceaa:	42b3      	cmp	r3, r6
 800ceac:	bfbf      	itttt	lt
 800ceae:	9b07      	ldrlt	r3, [sp, #28]
 800ceb0:	9607      	strlt	r6, [sp, #28]
 800ceb2:	1af2      	sublt	r2, r6, r3
 800ceb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ceb6:	bfb6      	itet	lt
 800ceb8:	189b      	addlt	r3, r3, r2
 800ceba:	1b9e      	subge	r6, r3, r6
 800cebc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cebe:	9b03      	ldr	r3, [sp, #12]
 800cec0:	bfb8      	it	lt
 800cec2:	2600      	movlt	r6, #0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	bfb7      	itett	lt
 800cec8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cecc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ced0:	1a9d      	sublt	r5, r3, r2
 800ced2:	2300      	movlt	r3, #0
 800ced4:	e734      	b.n	800cd40 <_dtoa_r+0x720>
 800ced6:	9e07      	ldr	r6, [sp, #28]
 800ced8:	9d04      	ldr	r5, [sp, #16]
 800ceda:	9f08      	ldr	r7, [sp, #32]
 800cedc:	e73b      	b.n	800cd56 <_dtoa_r+0x736>
 800cede:	9a07      	ldr	r2, [sp, #28]
 800cee0:	e767      	b.n	800cdb2 <_dtoa_r+0x792>
 800cee2:	9b06      	ldr	r3, [sp, #24]
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	dc18      	bgt.n	800cf1a <_dtoa_r+0x8fa>
 800cee8:	f1ba 0f00 	cmp.w	sl, #0
 800ceec:	d115      	bne.n	800cf1a <_dtoa_r+0x8fa>
 800ceee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cef2:	b993      	cbnz	r3, 800cf1a <_dtoa_r+0x8fa>
 800cef4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cef8:	0d1b      	lsrs	r3, r3, #20
 800cefa:	051b      	lsls	r3, r3, #20
 800cefc:	b183      	cbz	r3, 800cf20 <_dtoa_r+0x900>
 800cefe:	9b04      	ldr	r3, [sp, #16]
 800cf00:	3301      	adds	r3, #1
 800cf02:	9304      	str	r3, [sp, #16]
 800cf04:	9b05      	ldr	r3, [sp, #20]
 800cf06:	3301      	adds	r3, #1
 800cf08:	9305      	str	r3, [sp, #20]
 800cf0a:	f04f 0801 	mov.w	r8, #1
 800cf0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f47f af6a 	bne.w	800cdea <_dtoa_r+0x7ca>
 800cf16:	2001      	movs	r0, #1
 800cf18:	e76f      	b.n	800cdfa <_dtoa_r+0x7da>
 800cf1a:	f04f 0800 	mov.w	r8, #0
 800cf1e:	e7f6      	b.n	800cf0e <_dtoa_r+0x8ee>
 800cf20:	4698      	mov	r8, r3
 800cf22:	e7f4      	b.n	800cf0e <_dtoa_r+0x8ee>
 800cf24:	f43f af7d 	beq.w	800ce22 <_dtoa_r+0x802>
 800cf28:	4618      	mov	r0, r3
 800cf2a:	301c      	adds	r0, #28
 800cf2c:	e772      	b.n	800ce14 <_dtoa_r+0x7f4>
 800cf2e:	9b03      	ldr	r3, [sp, #12]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	dc37      	bgt.n	800cfa4 <_dtoa_r+0x984>
 800cf34:	9b06      	ldr	r3, [sp, #24]
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	dd34      	ble.n	800cfa4 <_dtoa_r+0x984>
 800cf3a:	9b03      	ldr	r3, [sp, #12]
 800cf3c:	9302      	str	r3, [sp, #8]
 800cf3e:	9b02      	ldr	r3, [sp, #8]
 800cf40:	b96b      	cbnz	r3, 800cf5e <_dtoa_r+0x93e>
 800cf42:	4631      	mov	r1, r6
 800cf44:	2205      	movs	r2, #5
 800cf46:	4620      	mov	r0, r4
 800cf48:	f000 ffb8 	bl	800debc <__multadd>
 800cf4c:	4601      	mov	r1, r0
 800cf4e:	4606      	mov	r6, r0
 800cf50:	ee18 0a10 	vmov	r0, s16
 800cf54:	f001 fa1c 	bl	800e390 <__mcmp>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	f73f adbb 	bgt.w	800cad4 <_dtoa_r+0x4b4>
 800cf5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf60:	9d01      	ldr	r5, [sp, #4]
 800cf62:	43db      	mvns	r3, r3
 800cf64:	9300      	str	r3, [sp, #0]
 800cf66:	f04f 0800 	mov.w	r8, #0
 800cf6a:	4631      	mov	r1, r6
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f000 ff83 	bl	800de78 <_Bfree>
 800cf72:	2f00      	cmp	r7, #0
 800cf74:	f43f aea4 	beq.w	800ccc0 <_dtoa_r+0x6a0>
 800cf78:	f1b8 0f00 	cmp.w	r8, #0
 800cf7c:	d005      	beq.n	800cf8a <_dtoa_r+0x96a>
 800cf7e:	45b8      	cmp	r8, r7
 800cf80:	d003      	beq.n	800cf8a <_dtoa_r+0x96a>
 800cf82:	4641      	mov	r1, r8
 800cf84:	4620      	mov	r0, r4
 800cf86:	f000 ff77 	bl	800de78 <_Bfree>
 800cf8a:	4639      	mov	r1, r7
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	f000 ff73 	bl	800de78 <_Bfree>
 800cf92:	e695      	b.n	800ccc0 <_dtoa_r+0x6a0>
 800cf94:	2600      	movs	r6, #0
 800cf96:	4637      	mov	r7, r6
 800cf98:	e7e1      	b.n	800cf5e <_dtoa_r+0x93e>
 800cf9a:	9700      	str	r7, [sp, #0]
 800cf9c:	4637      	mov	r7, r6
 800cf9e:	e599      	b.n	800cad4 <_dtoa_r+0x4b4>
 800cfa0:	40240000 	.word	0x40240000
 800cfa4:	9b08      	ldr	r3, [sp, #32]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f000 80ca 	beq.w	800d140 <_dtoa_r+0xb20>
 800cfac:	9b03      	ldr	r3, [sp, #12]
 800cfae:	9302      	str	r3, [sp, #8]
 800cfb0:	2d00      	cmp	r5, #0
 800cfb2:	dd05      	ble.n	800cfc0 <_dtoa_r+0x9a0>
 800cfb4:	4639      	mov	r1, r7
 800cfb6:	462a      	mov	r2, r5
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f001 f979 	bl	800e2b0 <__lshift>
 800cfbe:	4607      	mov	r7, r0
 800cfc0:	f1b8 0f00 	cmp.w	r8, #0
 800cfc4:	d05b      	beq.n	800d07e <_dtoa_r+0xa5e>
 800cfc6:	6879      	ldr	r1, [r7, #4]
 800cfc8:	4620      	mov	r0, r4
 800cfca:	f000 ff15 	bl	800ddf8 <_Balloc>
 800cfce:	4605      	mov	r5, r0
 800cfd0:	b928      	cbnz	r0, 800cfde <_dtoa_r+0x9be>
 800cfd2:	4b87      	ldr	r3, [pc, #540]	; (800d1f0 <_dtoa_r+0xbd0>)
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cfda:	f7ff bb3b 	b.w	800c654 <_dtoa_r+0x34>
 800cfde:	693a      	ldr	r2, [r7, #16]
 800cfe0:	3202      	adds	r2, #2
 800cfe2:	0092      	lsls	r2, r2, #2
 800cfe4:	f107 010c 	add.w	r1, r7, #12
 800cfe8:	300c      	adds	r0, #12
 800cfea:	f000 fef7 	bl	800dddc <memcpy>
 800cfee:	2201      	movs	r2, #1
 800cff0:	4629      	mov	r1, r5
 800cff2:	4620      	mov	r0, r4
 800cff4:	f001 f95c 	bl	800e2b0 <__lshift>
 800cff8:	9b01      	ldr	r3, [sp, #4]
 800cffa:	f103 0901 	add.w	r9, r3, #1
 800cffe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d002:	4413      	add	r3, r2
 800d004:	9305      	str	r3, [sp, #20]
 800d006:	f00a 0301 	and.w	r3, sl, #1
 800d00a:	46b8      	mov	r8, r7
 800d00c:	9304      	str	r3, [sp, #16]
 800d00e:	4607      	mov	r7, r0
 800d010:	4631      	mov	r1, r6
 800d012:	ee18 0a10 	vmov	r0, s16
 800d016:	f7ff fa75 	bl	800c504 <quorem>
 800d01a:	4641      	mov	r1, r8
 800d01c:	9002      	str	r0, [sp, #8]
 800d01e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d022:	ee18 0a10 	vmov	r0, s16
 800d026:	f001 f9b3 	bl	800e390 <__mcmp>
 800d02a:	463a      	mov	r2, r7
 800d02c:	9003      	str	r0, [sp, #12]
 800d02e:	4631      	mov	r1, r6
 800d030:	4620      	mov	r0, r4
 800d032:	f001 f9c9 	bl	800e3c8 <__mdiff>
 800d036:	68c2      	ldr	r2, [r0, #12]
 800d038:	f109 3bff 	add.w	fp, r9, #4294967295
 800d03c:	4605      	mov	r5, r0
 800d03e:	bb02      	cbnz	r2, 800d082 <_dtoa_r+0xa62>
 800d040:	4601      	mov	r1, r0
 800d042:	ee18 0a10 	vmov	r0, s16
 800d046:	f001 f9a3 	bl	800e390 <__mcmp>
 800d04a:	4602      	mov	r2, r0
 800d04c:	4629      	mov	r1, r5
 800d04e:	4620      	mov	r0, r4
 800d050:	9207      	str	r2, [sp, #28]
 800d052:	f000 ff11 	bl	800de78 <_Bfree>
 800d056:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d05a:	ea43 0102 	orr.w	r1, r3, r2
 800d05e:	9b04      	ldr	r3, [sp, #16]
 800d060:	430b      	orrs	r3, r1
 800d062:	464d      	mov	r5, r9
 800d064:	d10f      	bne.n	800d086 <_dtoa_r+0xa66>
 800d066:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d06a:	d02a      	beq.n	800d0c2 <_dtoa_r+0xaa2>
 800d06c:	9b03      	ldr	r3, [sp, #12]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	dd02      	ble.n	800d078 <_dtoa_r+0xa58>
 800d072:	9b02      	ldr	r3, [sp, #8]
 800d074:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d078:	f88b a000 	strb.w	sl, [fp]
 800d07c:	e775      	b.n	800cf6a <_dtoa_r+0x94a>
 800d07e:	4638      	mov	r0, r7
 800d080:	e7ba      	b.n	800cff8 <_dtoa_r+0x9d8>
 800d082:	2201      	movs	r2, #1
 800d084:	e7e2      	b.n	800d04c <_dtoa_r+0xa2c>
 800d086:	9b03      	ldr	r3, [sp, #12]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	db04      	blt.n	800d096 <_dtoa_r+0xa76>
 800d08c:	9906      	ldr	r1, [sp, #24]
 800d08e:	430b      	orrs	r3, r1
 800d090:	9904      	ldr	r1, [sp, #16]
 800d092:	430b      	orrs	r3, r1
 800d094:	d122      	bne.n	800d0dc <_dtoa_r+0xabc>
 800d096:	2a00      	cmp	r2, #0
 800d098:	ddee      	ble.n	800d078 <_dtoa_r+0xa58>
 800d09a:	ee18 1a10 	vmov	r1, s16
 800d09e:	2201      	movs	r2, #1
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f001 f905 	bl	800e2b0 <__lshift>
 800d0a6:	4631      	mov	r1, r6
 800d0a8:	ee08 0a10 	vmov	s16, r0
 800d0ac:	f001 f970 	bl	800e390 <__mcmp>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	dc03      	bgt.n	800d0bc <_dtoa_r+0xa9c>
 800d0b4:	d1e0      	bne.n	800d078 <_dtoa_r+0xa58>
 800d0b6:	f01a 0f01 	tst.w	sl, #1
 800d0ba:	d0dd      	beq.n	800d078 <_dtoa_r+0xa58>
 800d0bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0c0:	d1d7      	bne.n	800d072 <_dtoa_r+0xa52>
 800d0c2:	2339      	movs	r3, #57	; 0x39
 800d0c4:	f88b 3000 	strb.w	r3, [fp]
 800d0c8:	462b      	mov	r3, r5
 800d0ca:	461d      	mov	r5, r3
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d0d2:	2a39      	cmp	r2, #57	; 0x39
 800d0d4:	d071      	beq.n	800d1ba <_dtoa_r+0xb9a>
 800d0d6:	3201      	adds	r2, #1
 800d0d8:	701a      	strb	r2, [r3, #0]
 800d0da:	e746      	b.n	800cf6a <_dtoa_r+0x94a>
 800d0dc:	2a00      	cmp	r2, #0
 800d0de:	dd07      	ble.n	800d0f0 <_dtoa_r+0xad0>
 800d0e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0e4:	d0ed      	beq.n	800d0c2 <_dtoa_r+0xaa2>
 800d0e6:	f10a 0301 	add.w	r3, sl, #1
 800d0ea:	f88b 3000 	strb.w	r3, [fp]
 800d0ee:	e73c      	b.n	800cf6a <_dtoa_r+0x94a>
 800d0f0:	9b05      	ldr	r3, [sp, #20]
 800d0f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d0f6:	4599      	cmp	r9, r3
 800d0f8:	d047      	beq.n	800d18a <_dtoa_r+0xb6a>
 800d0fa:	ee18 1a10 	vmov	r1, s16
 800d0fe:	2300      	movs	r3, #0
 800d100:	220a      	movs	r2, #10
 800d102:	4620      	mov	r0, r4
 800d104:	f000 feda 	bl	800debc <__multadd>
 800d108:	45b8      	cmp	r8, r7
 800d10a:	ee08 0a10 	vmov	s16, r0
 800d10e:	f04f 0300 	mov.w	r3, #0
 800d112:	f04f 020a 	mov.w	r2, #10
 800d116:	4641      	mov	r1, r8
 800d118:	4620      	mov	r0, r4
 800d11a:	d106      	bne.n	800d12a <_dtoa_r+0xb0a>
 800d11c:	f000 fece 	bl	800debc <__multadd>
 800d120:	4680      	mov	r8, r0
 800d122:	4607      	mov	r7, r0
 800d124:	f109 0901 	add.w	r9, r9, #1
 800d128:	e772      	b.n	800d010 <_dtoa_r+0x9f0>
 800d12a:	f000 fec7 	bl	800debc <__multadd>
 800d12e:	4639      	mov	r1, r7
 800d130:	4680      	mov	r8, r0
 800d132:	2300      	movs	r3, #0
 800d134:	220a      	movs	r2, #10
 800d136:	4620      	mov	r0, r4
 800d138:	f000 fec0 	bl	800debc <__multadd>
 800d13c:	4607      	mov	r7, r0
 800d13e:	e7f1      	b.n	800d124 <_dtoa_r+0xb04>
 800d140:	9b03      	ldr	r3, [sp, #12]
 800d142:	9302      	str	r3, [sp, #8]
 800d144:	9d01      	ldr	r5, [sp, #4]
 800d146:	ee18 0a10 	vmov	r0, s16
 800d14a:	4631      	mov	r1, r6
 800d14c:	f7ff f9da 	bl	800c504 <quorem>
 800d150:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d154:	9b01      	ldr	r3, [sp, #4]
 800d156:	f805 ab01 	strb.w	sl, [r5], #1
 800d15a:	1aea      	subs	r2, r5, r3
 800d15c:	9b02      	ldr	r3, [sp, #8]
 800d15e:	4293      	cmp	r3, r2
 800d160:	dd09      	ble.n	800d176 <_dtoa_r+0xb56>
 800d162:	ee18 1a10 	vmov	r1, s16
 800d166:	2300      	movs	r3, #0
 800d168:	220a      	movs	r2, #10
 800d16a:	4620      	mov	r0, r4
 800d16c:	f000 fea6 	bl	800debc <__multadd>
 800d170:	ee08 0a10 	vmov	s16, r0
 800d174:	e7e7      	b.n	800d146 <_dtoa_r+0xb26>
 800d176:	9b02      	ldr	r3, [sp, #8]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	bfc8      	it	gt
 800d17c:	461d      	movgt	r5, r3
 800d17e:	9b01      	ldr	r3, [sp, #4]
 800d180:	bfd8      	it	le
 800d182:	2501      	movle	r5, #1
 800d184:	441d      	add	r5, r3
 800d186:	f04f 0800 	mov.w	r8, #0
 800d18a:	ee18 1a10 	vmov	r1, s16
 800d18e:	2201      	movs	r2, #1
 800d190:	4620      	mov	r0, r4
 800d192:	f001 f88d 	bl	800e2b0 <__lshift>
 800d196:	4631      	mov	r1, r6
 800d198:	ee08 0a10 	vmov	s16, r0
 800d19c:	f001 f8f8 	bl	800e390 <__mcmp>
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	dc91      	bgt.n	800d0c8 <_dtoa_r+0xaa8>
 800d1a4:	d102      	bne.n	800d1ac <_dtoa_r+0xb8c>
 800d1a6:	f01a 0f01 	tst.w	sl, #1
 800d1aa:	d18d      	bne.n	800d0c8 <_dtoa_r+0xaa8>
 800d1ac:	462b      	mov	r3, r5
 800d1ae:	461d      	mov	r5, r3
 800d1b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1b4:	2a30      	cmp	r2, #48	; 0x30
 800d1b6:	d0fa      	beq.n	800d1ae <_dtoa_r+0xb8e>
 800d1b8:	e6d7      	b.n	800cf6a <_dtoa_r+0x94a>
 800d1ba:	9a01      	ldr	r2, [sp, #4]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d184      	bne.n	800d0ca <_dtoa_r+0xaaa>
 800d1c0:	9b00      	ldr	r3, [sp, #0]
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	9300      	str	r3, [sp, #0]
 800d1c6:	2331      	movs	r3, #49	; 0x31
 800d1c8:	7013      	strb	r3, [r2, #0]
 800d1ca:	e6ce      	b.n	800cf6a <_dtoa_r+0x94a>
 800d1cc:	4b09      	ldr	r3, [pc, #36]	; (800d1f4 <_dtoa_r+0xbd4>)
 800d1ce:	f7ff ba95 	b.w	800c6fc <_dtoa_r+0xdc>
 800d1d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f47f aa6e 	bne.w	800c6b6 <_dtoa_r+0x96>
 800d1da:	4b07      	ldr	r3, [pc, #28]	; (800d1f8 <_dtoa_r+0xbd8>)
 800d1dc:	f7ff ba8e 	b.w	800c6fc <_dtoa_r+0xdc>
 800d1e0:	9b02      	ldr	r3, [sp, #8]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	dcae      	bgt.n	800d144 <_dtoa_r+0xb24>
 800d1e6:	9b06      	ldr	r3, [sp, #24]
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	f73f aea8 	bgt.w	800cf3e <_dtoa_r+0x91e>
 800d1ee:	e7a9      	b.n	800d144 <_dtoa_r+0xb24>
 800d1f0:	08010848 	.word	0x08010848
 800d1f4:	08010aa9 	.word	0x08010aa9
 800d1f8:	080107c9 	.word	0x080107c9

0800d1fc <__sflush_r>:
 800d1fc:	898a      	ldrh	r2, [r1, #12]
 800d1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d202:	4605      	mov	r5, r0
 800d204:	0710      	lsls	r0, r2, #28
 800d206:	460c      	mov	r4, r1
 800d208:	d458      	bmi.n	800d2bc <__sflush_r+0xc0>
 800d20a:	684b      	ldr	r3, [r1, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	dc05      	bgt.n	800d21c <__sflush_r+0x20>
 800d210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d212:	2b00      	cmp	r3, #0
 800d214:	dc02      	bgt.n	800d21c <__sflush_r+0x20>
 800d216:	2000      	movs	r0, #0
 800d218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d21c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d21e:	2e00      	cmp	r6, #0
 800d220:	d0f9      	beq.n	800d216 <__sflush_r+0x1a>
 800d222:	2300      	movs	r3, #0
 800d224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d228:	682f      	ldr	r7, [r5, #0]
 800d22a:	602b      	str	r3, [r5, #0]
 800d22c:	d032      	beq.n	800d294 <__sflush_r+0x98>
 800d22e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	075a      	lsls	r2, r3, #29
 800d234:	d505      	bpl.n	800d242 <__sflush_r+0x46>
 800d236:	6863      	ldr	r3, [r4, #4]
 800d238:	1ac0      	subs	r0, r0, r3
 800d23a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d23c:	b10b      	cbz	r3, 800d242 <__sflush_r+0x46>
 800d23e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d240:	1ac0      	subs	r0, r0, r3
 800d242:	2300      	movs	r3, #0
 800d244:	4602      	mov	r2, r0
 800d246:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d248:	6a21      	ldr	r1, [r4, #32]
 800d24a:	4628      	mov	r0, r5
 800d24c:	47b0      	blx	r6
 800d24e:	1c43      	adds	r3, r0, #1
 800d250:	89a3      	ldrh	r3, [r4, #12]
 800d252:	d106      	bne.n	800d262 <__sflush_r+0x66>
 800d254:	6829      	ldr	r1, [r5, #0]
 800d256:	291d      	cmp	r1, #29
 800d258:	d82c      	bhi.n	800d2b4 <__sflush_r+0xb8>
 800d25a:	4a2a      	ldr	r2, [pc, #168]	; (800d304 <__sflush_r+0x108>)
 800d25c:	40ca      	lsrs	r2, r1
 800d25e:	07d6      	lsls	r6, r2, #31
 800d260:	d528      	bpl.n	800d2b4 <__sflush_r+0xb8>
 800d262:	2200      	movs	r2, #0
 800d264:	6062      	str	r2, [r4, #4]
 800d266:	04d9      	lsls	r1, r3, #19
 800d268:	6922      	ldr	r2, [r4, #16]
 800d26a:	6022      	str	r2, [r4, #0]
 800d26c:	d504      	bpl.n	800d278 <__sflush_r+0x7c>
 800d26e:	1c42      	adds	r2, r0, #1
 800d270:	d101      	bne.n	800d276 <__sflush_r+0x7a>
 800d272:	682b      	ldr	r3, [r5, #0]
 800d274:	b903      	cbnz	r3, 800d278 <__sflush_r+0x7c>
 800d276:	6560      	str	r0, [r4, #84]	; 0x54
 800d278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d27a:	602f      	str	r7, [r5, #0]
 800d27c:	2900      	cmp	r1, #0
 800d27e:	d0ca      	beq.n	800d216 <__sflush_r+0x1a>
 800d280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d284:	4299      	cmp	r1, r3
 800d286:	d002      	beq.n	800d28e <__sflush_r+0x92>
 800d288:	4628      	mov	r0, r5
 800d28a:	f001 fa8d 	bl	800e7a8 <_free_r>
 800d28e:	2000      	movs	r0, #0
 800d290:	6360      	str	r0, [r4, #52]	; 0x34
 800d292:	e7c1      	b.n	800d218 <__sflush_r+0x1c>
 800d294:	6a21      	ldr	r1, [r4, #32]
 800d296:	2301      	movs	r3, #1
 800d298:	4628      	mov	r0, r5
 800d29a:	47b0      	blx	r6
 800d29c:	1c41      	adds	r1, r0, #1
 800d29e:	d1c7      	bne.n	800d230 <__sflush_r+0x34>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d0c4      	beq.n	800d230 <__sflush_r+0x34>
 800d2a6:	2b1d      	cmp	r3, #29
 800d2a8:	d001      	beq.n	800d2ae <__sflush_r+0xb2>
 800d2aa:	2b16      	cmp	r3, #22
 800d2ac:	d101      	bne.n	800d2b2 <__sflush_r+0xb6>
 800d2ae:	602f      	str	r7, [r5, #0]
 800d2b0:	e7b1      	b.n	800d216 <__sflush_r+0x1a>
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2b8:	81a3      	strh	r3, [r4, #12]
 800d2ba:	e7ad      	b.n	800d218 <__sflush_r+0x1c>
 800d2bc:	690f      	ldr	r7, [r1, #16]
 800d2be:	2f00      	cmp	r7, #0
 800d2c0:	d0a9      	beq.n	800d216 <__sflush_r+0x1a>
 800d2c2:	0793      	lsls	r3, r2, #30
 800d2c4:	680e      	ldr	r6, [r1, #0]
 800d2c6:	bf08      	it	eq
 800d2c8:	694b      	ldreq	r3, [r1, #20]
 800d2ca:	600f      	str	r7, [r1, #0]
 800d2cc:	bf18      	it	ne
 800d2ce:	2300      	movne	r3, #0
 800d2d0:	eba6 0807 	sub.w	r8, r6, r7
 800d2d4:	608b      	str	r3, [r1, #8]
 800d2d6:	f1b8 0f00 	cmp.w	r8, #0
 800d2da:	dd9c      	ble.n	800d216 <__sflush_r+0x1a>
 800d2dc:	6a21      	ldr	r1, [r4, #32]
 800d2de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2e0:	4643      	mov	r3, r8
 800d2e2:	463a      	mov	r2, r7
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	47b0      	blx	r6
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	dc06      	bgt.n	800d2fa <__sflush_r+0xfe>
 800d2ec:	89a3      	ldrh	r3, [r4, #12]
 800d2ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2f2:	81a3      	strh	r3, [r4, #12]
 800d2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f8:	e78e      	b.n	800d218 <__sflush_r+0x1c>
 800d2fa:	4407      	add	r7, r0
 800d2fc:	eba8 0800 	sub.w	r8, r8, r0
 800d300:	e7e9      	b.n	800d2d6 <__sflush_r+0xda>
 800d302:	bf00      	nop
 800d304:	20400001 	.word	0x20400001

0800d308 <_fflush_r>:
 800d308:	b538      	push	{r3, r4, r5, lr}
 800d30a:	690b      	ldr	r3, [r1, #16]
 800d30c:	4605      	mov	r5, r0
 800d30e:	460c      	mov	r4, r1
 800d310:	b913      	cbnz	r3, 800d318 <_fflush_r+0x10>
 800d312:	2500      	movs	r5, #0
 800d314:	4628      	mov	r0, r5
 800d316:	bd38      	pop	{r3, r4, r5, pc}
 800d318:	b118      	cbz	r0, 800d322 <_fflush_r+0x1a>
 800d31a:	6983      	ldr	r3, [r0, #24]
 800d31c:	b90b      	cbnz	r3, 800d322 <_fflush_r+0x1a>
 800d31e:	f000 f899 	bl	800d454 <__sinit>
 800d322:	4b14      	ldr	r3, [pc, #80]	; (800d374 <_fflush_r+0x6c>)
 800d324:	429c      	cmp	r4, r3
 800d326:	d11b      	bne.n	800d360 <_fflush_r+0x58>
 800d328:	686c      	ldr	r4, [r5, #4]
 800d32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d0ef      	beq.n	800d312 <_fflush_r+0xa>
 800d332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d334:	07d0      	lsls	r0, r2, #31
 800d336:	d404      	bmi.n	800d342 <_fflush_r+0x3a>
 800d338:	0599      	lsls	r1, r3, #22
 800d33a:	d402      	bmi.n	800d342 <_fflush_r+0x3a>
 800d33c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d33e:	f000 fcb8 	bl	800dcb2 <__retarget_lock_acquire_recursive>
 800d342:	4628      	mov	r0, r5
 800d344:	4621      	mov	r1, r4
 800d346:	f7ff ff59 	bl	800d1fc <__sflush_r>
 800d34a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d34c:	07da      	lsls	r2, r3, #31
 800d34e:	4605      	mov	r5, r0
 800d350:	d4e0      	bmi.n	800d314 <_fflush_r+0xc>
 800d352:	89a3      	ldrh	r3, [r4, #12]
 800d354:	059b      	lsls	r3, r3, #22
 800d356:	d4dd      	bmi.n	800d314 <_fflush_r+0xc>
 800d358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d35a:	f000 fcab 	bl	800dcb4 <__retarget_lock_release_recursive>
 800d35e:	e7d9      	b.n	800d314 <_fflush_r+0xc>
 800d360:	4b05      	ldr	r3, [pc, #20]	; (800d378 <_fflush_r+0x70>)
 800d362:	429c      	cmp	r4, r3
 800d364:	d101      	bne.n	800d36a <_fflush_r+0x62>
 800d366:	68ac      	ldr	r4, [r5, #8]
 800d368:	e7df      	b.n	800d32a <_fflush_r+0x22>
 800d36a:	4b04      	ldr	r3, [pc, #16]	; (800d37c <_fflush_r+0x74>)
 800d36c:	429c      	cmp	r4, r3
 800d36e:	bf08      	it	eq
 800d370:	68ec      	ldreq	r4, [r5, #12]
 800d372:	e7da      	b.n	800d32a <_fflush_r+0x22>
 800d374:	0801087c 	.word	0x0801087c
 800d378:	0801089c 	.word	0x0801089c
 800d37c:	0801085c 	.word	0x0801085c

0800d380 <fflush>:
 800d380:	4601      	mov	r1, r0
 800d382:	b920      	cbnz	r0, 800d38e <fflush+0xe>
 800d384:	4b04      	ldr	r3, [pc, #16]	; (800d398 <fflush+0x18>)
 800d386:	4905      	ldr	r1, [pc, #20]	; (800d39c <fflush+0x1c>)
 800d388:	6818      	ldr	r0, [r3, #0]
 800d38a:	f000 b8fe 	b.w	800d58a <_fwalk_reent>
 800d38e:	4b04      	ldr	r3, [pc, #16]	; (800d3a0 <fflush+0x20>)
 800d390:	6818      	ldr	r0, [r3, #0]
 800d392:	f7ff bfb9 	b.w	800d308 <_fflush_r>
 800d396:	bf00      	nop
 800d398:	0801063c 	.word	0x0801063c
 800d39c:	0800d309 	.word	0x0800d309
 800d3a0:	2000000c 	.word	0x2000000c

0800d3a4 <std>:
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	b510      	push	{r4, lr}
 800d3a8:	4604      	mov	r4, r0
 800d3aa:	e9c0 3300 	strd	r3, r3, [r0]
 800d3ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3b2:	6083      	str	r3, [r0, #8]
 800d3b4:	8181      	strh	r1, [r0, #12]
 800d3b6:	6643      	str	r3, [r0, #100]	; 0x64
 800d3b8:	81c2      	strh	r2, [r0, #14]
 800d3ba:	6183      	str	r3, [r0, #24]
 800d3bc:	4619      	mov	r1, r3
 800d3be:	2208      	movs	r2, #8
 800d3c0:	305c      	adds	r0, #92	; 0x5c
 800d3c2:	f7fd f873 	bl	800a4ac <memset>
 800d3c6:	4b05      	ldr	r3, [pc, #20]	; (800d3dc <std+0x38>)
 800d3c8:	6263      	str	r3, [r4, #36]	; 0x24
 800d3ca:	4b05      	ldr	r3, [pc, #20]	; (800d3e0 <std+0x3c>)
 800d3cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3ce:	4b05      	ldr	r3, [pc, #20]	; (800d3e4 <std+0x40>)
 800d3d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3d2:	4b05      	ldr	r3, [pc, #20]	; (800d3e8 <std+0x44>)
 800d3d4:	6224      	str	r4, [r4, #32]
 800d3d6:	6323      	str	r3, [r4, #48]	; 0x30
 800d3d8:	bd10      	pop	{r4, pc}
 800d3da:	bf00      	nop
 800d3dc:	0800b52d 	.word	0x0800b52d
 800d3e0:	0800b553 	.word	0x0800b553
 800d3e4:	0800b58b 	.word	0x0800b58b
 800d3e8:	0800b5af 	.word	0x0800b5af

0800d3ec <_cleanup_r>:
 800d3ec:	4901      	ldr	r1, [pc, #4]	; (800d3f4 <_cleanup_r+0x8>)
 800d3ee:	f000 b8cc 	b.w	800d58a <_fwalk_reent>
 800d3f2:	bf00      	nop
 800d3f4:	0800d309 	.word	0x0800d309

0800d3f8 <__sfmoreglue>:
 800d3f8:	b570      	push	{r4, r5, r6, lr}
 800d3fa:	2268      	movs	r2, #104	; 0x68
 800d3fc:	1e4d      	subs	r5, r1, #1
 800d3fe:	4355      	muls	r5, r2
 800d400:	460e      	mov	r6, r1
 800d402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d406:	f001 fa3b 	bl	800e880 <_malloc_r>
 800d40a:	4604      	mov	r4, r0
 800d40c:	b140      	cbz	r0, 800d420 <__sfmoreglue+0x28>
 800d40e:	2100      	movs	r1, #0
 800d410:	e9c0 1600 	strd	r1, r6, [r0]
 800d414:	300c      	adds	r0, #12
 800d416:	60a0      	str	r0, [r4, #8]
 800d418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d41c:	f7fd f846 	bl	800a4ac <memset>
 800d420:	4620      	mov	r0, r4
 800d422:	bd70      	pop	{r4, r5, r6, pc}

0800d424 <__sfp_lock_acquire>:
 800d424:	4801      	ldr	r0, [pc, #4]	; (800d42c <__sfp_lock_acquire+0x8>)
 800d426:	f000 bc44 	b.w	800dcb2 <__retarget_lock_acquire_recursive>
 800d42a:	bf00      	nop
 800d42c:	200004d1 	.word	0x200004d1

0800d430 <__sfp_lock_release>:
 800d430:	4801      	ldr	r0, [pc, #4]	; (800d438 <__sfp_lock_release+0x8>)
 800d432:	f000 bc3f 	b.w	800dcb4 <__retarget_lock_release_recursive>
 800d436:	bf00      	nop
 800d438:	200004d1 	.word	0x200004d1

0800d43c <__sinit_lock_acquire>:
 800d43c:	4801      	ldr	r0, [pc, #4]	; (800d444 <__sinit_lock_acquire+0x8>)
 800d43e:	f000 bc38 	b.w	800dcb2 <__retarget_lock_acquire_recursive>
 800d442:	bf00      	nop
 800d444:	200004d2 	.word	0x200004d2

0800d448 <__sinit_lock_release>:
 800d448:	4801      	ldr	r0, [pc, #4]	; (800d450 <__sinit_lock_release+0x8>)
 800d44a:	f000 bc33 	b.w	800dcb4 <__retarget_lock_release_recursive>
 800d44e:	bf00      	nop
 800d450:	200004d2 	.word	0x200004d2

0800d454 <__sinit>:
 800d454:	b510      	push	{r4, lr}
 800d456:	4604      	mov	r4, r0
 800d458:	f7ff fff0 	bl	800d43c <__sinit_lock_acquire>
 800d45c:	69a3      	ldr	r3, [r4, #24]
 800d45e:	b11b      	cbz	r3, 800d468 <__sinit+0x14>
 800d460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d464:	f7ff bff0 	b.w	800d448 <__sinit_lock_release>
 800d468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d46c:	6523      	str	r3, [r4, #80]	; 0x50
 800d46e:	4b13      	ldr	r3, [pc, #76]	; (800d4bc <__sinit+0x68>)
 800d470:	4a13      	ldr	r2, [pc, #76]	; (800d4c0 <__sinit+0x6c>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	62a2      	str	r2, [r4, #40]	; 0x28
 800d476:	42a3      	cmp	r3, r4
 800d478:	bf04      	itt	eq
 800d47a:	2301      	moveq	r3, #1
 800d47c:	61a3      	streq	r3, [r4, #24]
 800d47e:	4620      	mov	r0, r4
 800d480:	f000 f820 	bl	800d4c4 <__sfp>
 800d484:	6060      	str	r0, [r4, #4]
 800d486:	4620      	mov	r0, r4
 800d488:	f000 f81c 	bl	800d4c4 <__sfp>
 800d48c:	60a0      	str	r0, [r4, #8]
 800d48e:	4620      	mov	r0, r4
 800d490:	f000 f818 	bl	800d4c4 <__sfp>
 800d494:	2200      	movs	r2, #0
 800d496:	60e0      	str	r0, [r4, #12]
 800d498:	2104      	movs	r1, #4
 800d49a:	6860      	ldr	r0, [r4, #4]
 800d49c:	f7ff ff82 	bl	800d3a4 <std>
 800d4a0:	68a0      	ldr	r0, [r4, #8]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	2109      	movs	r1, #9
 800d4a6:	f7ff ff7d 	bl	800d3a4 <std>
 800d4aa:	68e0      	ldr	r0, [r4, #12]
 800d4ac:	2202      	movs	r2, #2
 800d4ae:	2112      	movs	r1, #18
 800d4b0:	f7ff ff78 	bl	800d3a4 <std>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	61a3      	str	r3, [r4, #24]
 800d4b8:	e7d2      	b.n	800d460 <__sinit+0xc>
 800d4ba:	bf00      	nop
 800d4bc:	0801063c 	.word	0x0801063c
 800d4c0:	0800d3ed 	.word	0x0800d3ed

0800d4c4 <__sfp>:
 800d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c6:	4607      	mov	r7, r0
 800d4c8:	f7ff ffac 	bl	800d424 <__sfp_lock_acquire>
 800d4cc:	4b1e      	ldr	r3, [pc, #120]	; (800d548 <__sfp+0x84>)
 800d4ce:	681e      	ldr	r6, [r3, #0]
 800d4d0:	69b3      	ldr	r3, [r6, #24]
 800d4d2:	b913      	cbnz	r3, 800d4da <__sfp+0x16>
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f7ff ffbd 	bl	800d454 <__sinit>
 800d4da:	3648      	adds	r6, #72	; 0x48
 800d4dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	d503      	bpl.n	800d4ec <__sfp+0x28>
 800d4e4:	6833      	ldr	r3, [r6, #0]
 800d4e6:	b30b      	cbz	r3, 800d52c <__sfp+0x68>
 800d4e8:	6836      	ldr	r6, [r6, #0]
 800d4ea:	e7f7      	b.n	800d4dc <__sfp+0x18>
 800d4ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d4f0:	b9d5      	cbnz	r5, 800d528 <__sfp+0x64>
 800d4f2:	4b16      	ldr	r3, [pc, #88]	; (800d54c <__sfp+0x88>)
 800d4f4:	60e3      	str	r3, [r4, #12]
 800d4f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d4fa:	6665      	str	r5, [r4, #100]	; 0x64
 800d4fc:	f000 fbd8 	bl	800dcb0 <__retarget_lock_init_recursive>
 800d500:	f7ff ff96 	bl	800d430 <__sfp_lock_release>
 800d504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d50c:	6025      	str	r5, [r4, #0]
 800d50e:	61a5      	str	r5, [r4, #24]
 800d510:	2208      	movs	r2, #8
 800d512:	4629      	mov	r1, r5
 800d514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d518:	f7fc ffc8 	bl	800a4ac <memset>
 800d51c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d524:	4620      	mov	r0, r4
 800d526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d528:	3468      	adds	r4, #104	; 0x68
 800d52a:	e7d9      	b.n	800d4e0 <__sfp+0x1c>
 800d52c:	2104      	movs	r1, #4
 800d52e:	4638      	mov	r0, r7
 800d530:	f7ff ff62 	bl	800d3f8 <__sfmoreglue>
 800d534:	4604      	mov	r4, r0
 800d536:	6030      	str	r0, [r6, #0]
 800d538:	2800      	cmp	r0, #0
 800d53a:	d1d5      	bne.n	800d4e8 <__sfp+0x24>
 800d53c:	f7ff ff78 	bl	800d430 <__sfp_lock_release>
 800d540:	230c      	movs	r3, #12
 800d542:	603b      	str	r3, [r7, #0]
 800d544:	e7ee      	b.n	800d524 <__sfp+0x60>
 800d546:	bf00      	nop
 800d548:	0801063c 	.word	0x0801063c
 800d54c:	ffff0001 	.word	0xffff0001

0800d550 <_fwalk>:
 800d550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d554:	460f      	mov	r7, r1
 800d556:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d55a:	2600      	movs	r6, #0
 800d55c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800d560:	f1b8 0801 	subs.w	r8, r8, #1
 800d564:	d505      	bpl.n	800d572 <_fwalk+0x22>
 800d566:	6824      	ldr	r4, [r4, #0]
 800d568:	2c00      	cmp	r4, #0
 800d56a:	d1f7      	bne.n	800d55c <_fwalk+0xc>
 800d56c:	4630      	mov	r0, r6
 800d56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d572:	89ab      	ldrh	r3, [r5, #12]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d906      	bls.n	800d586 <_fwalk+0x36>
 800d578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d57c:	3301      	adds	r3, #1
 800d57e:	d002      	beq.n	800d586 <_fwalk+0x36>
 800d580:	4628      	mov	r0, r5
 800d582:	47b8      	blx	r7
 800d584:	4306      	orrs	r6, r0
 800d586:	3568      	adds	r5, #104	; 0x68
 800d588:	e7ea      	b.n	800d560 <_fwalk+0x10>

0800d58a <_fwalk_reent>:
 800d58a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d58e:	4606      	mov	r6, r0
 800d590:	4688      	mov	r8, r1
 800d592:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d596:	2700      	movs	r7, #0
 800d598:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d59c:	f1b9 0901 	subs.w	r9, r9, #1
 800d5a0:	d505      	bpl.n	800d5ae <_fwalk_reent+0x24>
 800d5a2:	6824      	ldr	r4, [r4, #0]
 800d5a4:	2c00      	cmp	r4, #0
 800d5a6:	d1f7      	bne.n	800d598 <_fwalk_reent+0xe>
 800d5a8:	4638      	mov	r0, r7
 800d5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ae:	89ab      	ldrh	r3, [r5, #12]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d907      	bls.n	800d5c4 <_fwalk_reent+0x3a>
 800d5b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	d003      	beq.n	800d5c4 <_fwalk_reent+0x3a>
 800d5bc:	4629      	mov	r1, r5
 800d5be:	4630      	mov	r0, r6
 800d5c0:	47c0      	blx	r8
 800d5c2:	4307      	orrs	r7, r0
 800d5c4:	3568      	adds	r5, #104	; 0x68
 800d5c6:	e7e9      	b.n	800d59c <_fwalk_reent+0x12>

0800d5c8 <rshift>:
 800d5c8:	6903      	ldr	r3, [r0, #16]
 800d5ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d5ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d5d6:	f100 0414 	add.w	r4, r0, #20
 800d5da:	dd45      	ble.n	800d668 <rshift+0xa0>
 800d5dc:	f011 011f 	ands.w	r1, r1, #31
 800d5e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d5e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d5e8:	d10c      	bne.n	800d604 <rshift+0x3c>
 800d5ea:	f100 0710 	add.w	r7, r0, #16
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	42b1      	cmp	r1, r6
 800d5f2:	d334      	bcc.n	800d65e <rshift+0x96>
 800d5f4:	1a9b      	subs	r3, r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	1eea      	subs	r2, r5, #3
 800d5fa:	4296      	cmp	r6, r2
 800d5fc:	bf38      	it	cc
 800d5fe:	2300      	movcc	r3, #0
 800d600:	4423      	add	r3, r4
 800d602:	e015      	b.n	800d630 <rshift+0x68>
 800d604:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d608:	f1c1 0820 	rsb	r8, r1, #32
 800d60c:	40cf      	lsrs	r7, r1
 800d60e:	f105 0e04 	add.w	lr, r5, #4
 800d612:	46a1      	mov	r9, r4
 800d614:	4576      	cmp	r6, lr
 800d616:	46f4      	mov	ip, lr
 800d618:	d815      	bhi.n	800d646 <rshift+0x7e>
 800d61a:	1a9a      	subs	r2, r3, r2
 800d61c:	0092      	lsls	r2, r2, #2
 800d61e:	3a04      	subs	r2, #4
 800d620:	3501      	adds	r5, #1
 800d622:	42ae      	cmp	r6, r5
 800d624:	bf38      	it	cc
 800d626:	2200      	movcc	r2, #0
 800d628:	18a3      	adds	r3, r4, r2
 800d62a:	50a7      	str	r7, [r4, r2]
 800d62c:	b107      	cbz	r7, 800d630 <rshift+0x68>
 800d62e:	3304      	adds	r3, #4
 800d630:	1b1a      	subs	r2, r3, r4
 800d632:	42a3      	cmp	r3, r4
 800d634:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d638:	bf08      	it	eq
 800d63a:	2300      	moveq	r3, #0
 800d63c:	6102      	str	r2, [r0, #16]
 800d63e:	bf08      	it	eq
 800d640:	6143      	streq	r3, [r0, #20]
 800d642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d646:	f8dc c000 	ldr.w	ip, [ip]
 800d64a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d64e:	ea4c 0707 	orr.w	r7, ip, r7
 800d652:	f849 7b04 	str.w	r7, [r9], #4
 800d656:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d65a:	40cf      	lsrs	r7, r1
 800d65c:	e7da      	b.n	800d614 <rshift+0x4c>
 800d65e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d662:	f847 cf04 	str.w	ip, [r7, #4]!
 800d666:	e7c3      	b.n	800d5f0 <rshift+0x28>
 800d668:	4623      	mov	r3, r4
 800d66a:	e7e1      	b.n	800d630 <rshift+0x68>

0800d66c <__hexdig_fun>:
 800d66c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d670:	2b09      	cmp	r3, #9
 800d672:	d802      	bhi.n	800d67a <__hexdig_fun+0xe>
 800d674:	3820      	subs	r0, #32
 800d676:	b2c0      	uxtb	r0, r0
 800d678:	4770      	bx	lr
 800d67a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d67e:	2b05      	cmp	r3, #5
 800d680:	d801      	bhi.n	800d686 <__hexdig_fun+0x1a>
 800d682:	3847      	subs	r0, #71	; 0x47
 800d684:	e7f7      	b.n	800d676 <__hexdig_fun+0xa>
 800d686:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d68a:	2b05      	cmp	r3, #5
 800d68c:	d801      	bhi.n	800d692 <__hexdig_fun+0x26>
 800d68e:	3827      	subs	r0, #39	; 0x27
 800d690:	e7f1      	b.n	800d676 <__hexdig_fun+0xa>
 800d692:	2000      	movs	r0, #0
 800d694:	4770      	bx	lr
	...

0800d698 <__gethex>:
 800d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	ed2d 8b02 	vpush	{d8}
 800d6a0:	b089      	sub	sp, #36	; 0x24
 800d6a2:	ee08 0a10 	vmov	s16, r0
 800d6a6:	9304      	str	r3, [sp, #16]
 800d6a8:	4bb4      	ldr	r3, [pc, #720]	; (800d97c <__gethex+0x2e4>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	468b      	mov	fp, r1
 800d6b2:	4690      	mov	r8, r2
 800d6b4:	f7f2 fdac 	bl	8000210 <strlen>
 800d6b8:	9b01      	ldr	r3, [sp, #4]
 800d6ba:	f8db 2000 	ldr.w	r2, [fp]
 800d6be:	4403      	add	r3, r0
 800d6c0:	4682      	mov	sl, r0
 800d6c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d6c6:	9305      	str	r3, [sp, #20]
 800d6c8:	1c93      	adds	r3, r2, #2
 800d6ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d6ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d6d2:	32fe      	adds	r2, #254	; 0xfe
 800d6d4:	18d1      	adds	r1, r2, r3
 800d6d6:	461f      	mov	r7, r3
 800d6d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d6dc:	9100      	str	r1, [sp, #0]
 800d6de:	2830      	cmp	r0, #48	; 0x30
 800d6e0:	d0f8      	beq.n	800d6d4 <__gethex+0x3c>
 800d6e2:	f7ff ffc3 	bl	800d66c <__hexdig_fun>
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	d13a      	bne.n	800d762 <__gethex+0xca>
 800d6ec:	9901      	ldr	r1, [sp, #4]
 800d6ee:	4652      	mov	r2, sl
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	f002 f9d9 	bl	800faa8 <strncmp>
 800d6f6:	4605      	mov	r5, r0
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	d168      	bne.n	800d7ce <__gethex+0x136>
 800d6fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d700:	eb07 060a 	add.w	r6, r7, sl
 800d704:	f7ff ffb2 	bl	800d66c <__hexdig_fun>
 800d708:	2800      	cmp	r0, #0
 800d70a:	d062      	beq.n	800d7d2 <__gethex+0x13a>
 800d70c:	4633      	mov	r3, r6
 800d70e:	7818      	ldrb	r0, [r3, #0]
 800d710:	2830      	cmp	r0, #48	; 0x30
 800d712:	461f      	mov	r7, r3
 800d714:	f103 0301 	add.w	r3, r3, #1
 800d718:	d0f9      	beq.n	800d70e <__gethex+0x76>
 800d71a:	f7ff ffa7 	bl	800d66c <__hexdig_fun>
 800d71e:	2301      	movs	r3, #1
 800d720:	fab0 f480 	clz	r4, r0
 800d724:	0964      	lsrs	r4, r4, #5
 800d726:	4635      	mov	r5, r6
 800d728:	9300      	str	r3, [sp, #0]
 800d72a:	463a      	mov	r2, r7
 800d72c:	4616      	mov	r6, r2
 800d72e:	3201      	adds	r2, #1
 800d730:	7830      	ldrb	r0, [r6, #0]
 800d732:	f7ff ff9b 	bl	800d66c <__hexdig_fun>
 800d736:	2800      	cmp	r0, #0
 800d738:	d1f8      	bne.n	800d72c <__gethex+0x94>
 800d73a:	9901      	ldr	r1, [sp, #4]
 800d73c:	4652      	mov	r2, sl
 800d73e:	4630      	mov	r0, r6
 800d740:	f002 f9b2 	bl	800faa8 <strncmp>
 800d744:	b980      	cbnz	r0, 800d768 <__gethex+0xd0>
 800d746:	b94d      	cbnz	r5, 800d75c <__gethex+0xc4>
 800d748:	eb06 050a 	add.w	r5, r6, sl
 800d74c:	462a      	mov	r2, r5
 800d74e:	4616      	mov	r6, r2
 800d750:	3201      	adds	r2, #1
 800d752:	7830      	ldrb	r0, [r6, #0]
 800d754:	f7ff ff8a 	bl	800d66c <__hexdig_fun>
 800d758:	2800      	cmp	r0, #0
 800d75a:	d1f8      	bne.n	800d74e <__gethex+0xb6>
 800d75c:	1bad      	subs	r5, r5, r6
 800d75e:	00ad      	lsls	r5, r5, #2
 800d760:	e004      	b.n	800d76c <__gethex+0xd4>
 800d762:	2400      	movs	r4, #0
 800d764:	4625      	mov	r5, r4
 800d766:	e7e0      	b.n	800d72a <__gethex+0x92>
 800d768:	2d00      	cmp	r5, #0
 800d76a:	d1f7      	bne.n	800d75c <__gethex+0xc4>
 800d76c:	7833      	ldrb	r3, [r6, #0]
 800d76e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d772:	2b50      	cmp	r3, #80	; 0x50
 800d774:	d13b      	bne.n	800d7ee <__gethex+0x156>
 800d776:	7873      	ldrb	r3, [r6, #1]
 800d778:	2b2b      	cmp	r3, #43	; 0x2b
 800d77a:	d02c      	beq.n	800d7d6 <__gethex+0x13e>
 800d77c:	2b2d      	cmp	r3, #45	; 0x2d
 800d77e:	d02e      	beq.n	800d7de <__gethex+0x146>
 800d780:	1c71      	adds	r1, r6, #1
 800d782:	f04f 0900 	mov.w	r9, #0
 800d786:	7808      	ldrb	r0, [r1, #0]
 800d788:	f7ff ff70 	bl	800d66c <__hexdig_fun>
 800d78c:	1e43      	subs	r3, r0, #1
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	2b18      	cmp	r3, #24
 800d792:	d82c      	bhi.n	800d7ee <__gethex+0x156>
 800d794:	f1a0 0210 	sub.w	r2, r0, #16
 800d798:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d79c:	f7ff ff66 	bl	800d66c <__hexdig_fun>
 800d7a0:	1e43      	subs	r3, r0, #1
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	2b18      	cmp	r3, #24
 800d7a6:	d91d      	bls.n	800d7e4 <__gethex+0x14c>
 800d7a8:	f1b9 0f00 	cmp.w	r9, #0
 800d7ac:	d000      	beq.n	800d7b0 <__gethex+0x118>
 800d7ae:	4252      	negs	r2, r2
 800d7b0:	4415      	add	r5, r2
 800d7b2:	f8cb 1000 	str.w	r1, [fp]
 800d7b6:	b1e4      	cbz	r4, 800d7f2 <__gethex+0x15a>
 800d7b8:	9b00      	ldr	r3, [sp, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	bf14      	ite	ne
 800d7be:	2700      	movne	r7, #0
 800d7c0:	2706      	moveq	r7, #6
 800d7c2:	4638      	mov	r0, r7
 800d7c4:	b009      	add	sp, #36	; 0x24
 800d7c6:	ecbd 8b02 	vpop	{d8}
 800d7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ce:	463e      	mov	r6, r7
 800d7d0:	4625      	mov	r5, r4
 800d7d2:	2401      	movs	r4, #1
 800d7d4:	e7ca      	b.n	800d76c <__gethex+0xd4>
 800d7d6:	f04f 0900 	mov.w	r9, #0
 800d7da:	1cb1      	adds	r1, r6, #2
 800d7dc:	e7d3      	b.n	800d786 <__gethex+0xee>
 800d7de:	f04f 0901 	mov.w	r9, #1
 800d7e2:	e7fa      	b.n	800d7da <__gethex+0x142>
 800d7e4:	230a      	movs	r3, #10
 800d7e6:	fb03 0202 	mla	r2, r3, r2, r0
 800d7ea:	3a10      	subs	r2, #16
 800d7ec:	e7d4      	b.n	800d798 <__gethex+0x100>
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	e7df      	b.n	800d7b2 <__gethex+0x11a>
 800d7f2:	1bf3      	subs	r3, r6, r7
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	4621      	mov	r1, r4
 800d7f8:	2b07      	cmp	r3, #7
 800d7fa:	dc0b      	bgt.n	800d814 <__gethex+0x17c>
 800d7fc:	ee18 0a10 	vmov	r0, s16
 800d800:	f000 fafa 	bl	800ddf8 <_Balloc>
 800d804:	4604      	mov	r4, r0
 800d806:	b940      	cbnz	r0, 800d81a <__gethex+0x182>
 800d808:	4b5d      	ldr	r3, [pc, #372]	; (800d980 <__gethex+0x2e8>)
 800d80a:	4602      	mov	r2, r0
 800d80c:	21de      	movs	r1, #222	; 0xde
 800d80e:	485d      	ldr	r0, [pc, #372]	; (800d984 <__gethex+0x2ec>)
 800d810:	f002 fab2 	bl	800fd78 <__assert_func>
 800d814:	3101      	adds	r1, #1
 800d816:	105b      	asrs	r3, r3, #1
 800d818:	e7ee      	b.n	800d7f8 <__gethex+0x160>
 800d81a:	f100 0914 	add.w	r9, r0, #20
 800d81e:	f04f 0b00 	mov.w	fp, #0
 800d822:	f1ca 0301 	rsb	r3, sl, #1
 800d826:	f8cd 9008 	str.w	r9, [sp, #8]
 800d82a:	f8cd b000 	str.w	fp, [sp]
 800d82e:	9306      	str	r3, [sp, #24]
 800d830:	42b7      	cmp	r7, r6
 800d832:	d340      	bcc.n	800d8b6 <__gethex+0x21e>
 800d834:	9802      	ldr	r0, [sp, #8]
 800d836:	9b00      	ldr	r3, [sp, #0]
 800d838:	f840 3b04 	str.w	r3, [r0], #4
 800d83c:	eba0 0009 	sub.w	r0, r0, r9
 800d840:	1080      	asrs	r0, r0, #2
 800d842:	0146      	lsls	r6, r0, #5
 800d844:	6120      	str	r0, [r4, #16]
 800d846:	4618      	mov	r0, r3
 800d848:	f000 fbc8 	bl	800dfdc <__hi0bits>
 800d84c:	1a30      	subs	r0, r6, r0
 800d84e:	f8d8 6000 	ldr.w	r6, [r8]
 800d852:	42b0      	cmp	r0, r6
 800d854:	dd63      	ble.n	800d91e <__gethex+0x286>
 800d856:	1b87      	subs	r7, r0, r6
 800d858:	4639      	mov	r1, r7
 800d85a:	4620      	mov	r0, r4
 800d85c:	f000 ff6c 	bl	800e738 <__any_on>
 800d860:	4682      	mov	sl, r0
 800d862:	b1a8      	cbz	r0, 800d890 <__gethex+0x1f8>
 800d864:	1e7b      	subs	r3, r7, #1
 800d866:	1159      	asrs	r1, r3, #5
 800d868:	f003 021f 	and.w	r2, r3, #31
 800d86c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d870:	f04f 0a01 	mov.w	sl, #1
 800d874:	fa0a f202 	lsl.w	r2, sl, r2
 800d878:	420a      	tst	r2, r1
 800d87a:	d009      	beq.n	800d890 <__gethex+0x1f8>
 800d87c:	4553      	cmp	r3, sl
 800d87e:	dd05      	ble.n	800d88c <__gethex+0x1f4>
 800d880:	1eb9      	subs	r1, r7, #2
 800d882:	4620      	mov	r0, r4
 800d884:	f000 ff58 	bl	800e738 <__any_on>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d145      	bne.n	800d918 <__gethex+0x280>
 800d88c:	f04f 0a02 	mov.w	sl, #2
 800d890:	4639      	mov	r1, r7
 800d892:	4620      	mov	r0, r4
 800d894:	f7ff fe98 	bl	800d5c8 <rshift>
 800d898:	443d      	add	r5, r7
 800d89a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d89e:	42ab      	cmp	r3, r5
 800d8a0:	da4c      	bge.n	800d93c <__gethex+0x2a4>
 800d8a2:	ee18 0a10 	vmov	r0, s16
 800d8a6:	4621      	mov	r1, r4
 800d8a8:	f000 fae6 	bl	800de78 <_Bfree>
 800d8ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	6013      	str	r3, [r2, #0]
 800d8b2:	27a3      	movs	r7, #163	; 0xa3
 800d8b4:	e785      	b.n	800d7c2 <__gethex+0x12a>
 800d8b6:	1e73      	subs	r3, r6, #1
 800d8b8:	9a05      	ldr	r2, [sp, #20]
 800d8ba:	9303      	str	r3, [sp, #12]
 800d8bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d019      	beq.n	800d8f8 <__gethex+0x260>
 800d8c4:	f1bb 0f20 	cmp.w	fp, #32
 800d8c8:	d107      	bne.n	800d8da <__gethex+0x242>
 800d8ca:	9b02      	ldr	r3, [sp, #8]
 800d8cc:	9a00      	ldr	r2, [sp, #0]
 800d8ce:	f843 2b04 	str.w	r2, [r3], #4
 800d8d2:	9302      	str	r3, [sp, #8]
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	9300      	str	r3, [sp, #0]
 800d8d8:	469b      	mov	fp, r3
 800d8da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d8de:	f7ff fec5 	bl	800d66c <__hexdig_fun>
 800d8e2:	9b00      	ldr	r3, [sp, #0]
 800d8e4:	f000 000f 	and.w	r0, r0, #15
 800d8e8:	fa00 f00b 	lsl.w	r0, r0, fp
 800d8ec:	4303      	orrs	r3, r0
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	f10b 0b04 	add.w	fp, fp, #4
 800d8f4:	9b03      	ldr	r3, [sp, #12]
 800d8f6:	e00d      	b.n	800d914 <__gethex+0x27c>
 800d8f8:	9b03      	ldr	r3, [sp, #12]
 800d8fa:	9a06      	ldr	r2, [sp, #24]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	42bb      	cmp	r3, r7
 800d900:	d3e0      	bcc.n	800d8c4 <__gethex+0x22c>
 800d902:	4618      	mov	r0, r3
 800d904:	9901      	ldr	r1, [sp, #4]
 800d906:	9307      	str	r3, [sp, #28]
 800d908:	4652      	mov	r2, sl
 800d90a:	f002 f8cd 	bl	800faa8 <strncmp>
 800d90e:	9b07      	ldr	r3, [sp, #28]
 800d910:	2800      	cmp	r0, #0
 800d912:	d1d7      	bne.n	800d8c4 <__gethex+0x22c>
 800d914:	461e      	mov	r6, r3
 800d916:	e78b      	b.n	800d830 <__gethex+0x198>
 800d918:	f04f 0a03 	mov.w	sl, #3
 800d91c:	e7b8      	b.n	800d890 <__gethex+0x1f8>
 800d91e:	da0a      	bge.n	800d936 <__gethex+0x29e>
 800d920:	1a37      	subs	r7, r6, r0
 800d922:	4621      	mov	r1, r4
 800d924:	ee18 0a10 	vmov	r0, s16
 800d928:	463a      	mov	r2, r7
 800d92a:	f000 fcc1 	bl	800e2b0 <__lshift>
 800d92e:	1bed      	subs	r5, r5, r7
 800d930:	4604      	mov	r4, r0
 800d932:	f100 0914 	add.w	r9, r0, #20
 800d936:	f04f 0a00 	mov.w	sl, #0
 800d93a:	e7ae      	b.n	800d89a <__gethex+0x202>
 800d93c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d940:	42a8      	cmp	r0, r5
 800d942:	dd72      	ble.n	800da2a <__gethex+0x392>
 800d944:	1b45      	subs	r5, r0, r5
 800d946:	42ae      	cmp	r6, r5
 800d948:	dc36      	bgt.n	800d9b8 <__gethex+0x320>
 800d94a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d94e:	2b02      	cmp	r3, #2
 800d950:	d02a      	beq.n	800d9a8 <__gethex+0x310>
 800d952:	2b03      	cmp	r3, #3
 800d954:	d02c      	beq.n	800d9b0 <__gethex+0x318>
 800d956:	2b01      	cmp	r3, #1
 800d958:	d11c      	bne.n	800d994 <__gethex+0x2fc>
 800d95a:	42ae      	cmp	r6, r5
 800d95c:	d11a      	bne.n	800d994 <__gethex+0x2fc>
 800d95e:	2e01      	cmp	r6, #1
 800d960:	d112      	bne.n	800d988 <__gethex+0x2f0>
 800d962:	9a04      	ldr	r2, [sp, #16]
 800d964:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d968:	6013      	str	r3, [r2, #0]
 800d96a:	2301      	movs	r3, #1
 800d96c:	6123      	str	r3, [r4, #16]
 800d96e:	f8c9 3000 	str.w	r3, [r9]
 800d972:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d974:	2762      	movs	r7, #98	; 0x62
 800d976:	601c      	str	r4, [r3, #0]
 800d978:	e723      	b.n	800d7c2 <__gethex+0x12a>
 800d97a:	bf00      	nop
 800d97c:	08010924 	.word	0x08010924
 800d980:	08010848 	.word	0x08010848
 800d984:	080108bc 	.word	0x080108bc
 800d988:	1e71      	subs	r1, r6, #1
 800d98a:	4620      	mov	r0, r4
 800d98c:	f000 fed4 	bl	800e738 <__any_on>
 800d990:	2800      	cmp	r0, #0
 800d992:	d1e6      	bne.n	800d962 <__gethex+0x2ca>
 800d994:	ee18 0a10 	vmov	r0, s16
 800d998:	4621      	mov	r1, r4
 800d99a:	f000 fa6d 	bl	800de78 <_Bfree>
 800d99e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	6013      	str	r3, [r2, #0]
 800d9a4:	2750      	movs	r7, #80	; 0x50
 800d9a6:	e70c      	b.n	800d7c2 <__gethex+0x12a>
 800d9a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d1f2      	bne.n	800d994 <__gethex+0x2fc>
 800d9ae:	e7d8      	b.n	800d962 <__gethex+0x2ca>
 800d9b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1d5      	bne.n	800d962 <__gethex+0x2ca>
 800d9b6:	e7ed      	b.n	800d994 <__gethex+0x2fc>
 800d9b8:	1e6f      	subs	r7, r5, #1
 800d9ba:	f1ba 0f00 	cmp.w	sl, #0
 800d9be:	d131      	bne.n	800da24 <__gethex+0x38c>
 800d9c0:	b127      	cbz	r7, 800d9cc <__gethex+0x334>
 800d9c2:	4639      	mov	r1, r7
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	f000 feb7 	bl	800e738 <__any_on>
 800d9ca:	4682      	mov	sl, r0
 800d9cc:	117b      	asrs	r3, r7, #5
 800d9ce:	2101      	movs	r1, #1
 800d9d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d9d4:	f007 071f 	and.w	r7, r7, #31
 800d9d8:	fa01 f707 	lsl.w	r7, r1, r7
 800d9dc:	421f      	tst	r7, r3
 800d9de:	4629      	mov	r1, r5
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	bf18      	it	ne
 800d9e4:	f04a 0a02 	orrne.w	sl, sl, #2
 800d9e8:	1b76      	subs	r6, r6, r5
 800d9ea:	f7ff fded 	bl	800d5c8 <rshift>
 800d9ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d9f2:	2702      	movs	r7, #2
 800d9f4:	f1ba 0f00 	cmp.w	sl, #0
 800d9f8:	d048      	beq.n	800da8c <__gethex+0x3f4>
 800d9fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d015      	beq.n	800da2e <__gethex+0x396>
 800da02:	2b03      	cmp	r3, #3
 800da04:	d017      	beq.n	800da36 <__gethex+0x39e>
 800da06:	2b01      	cmp	r3, #1
 800da08:	d109      	bne.n	800da1e <__gethex+0x386>
 800da0a:	f01a 0f02 	tst.w	sl, #2
 800da0e:	d006      	beq.n	800da1e <__gethex+0x386>
 800da10:	f8d9 0000 	ldr.w	r0, [r9]
 800da14:	ea4a 0a00 	orr.w	sl, sl, r0
 800da18:	f01a 0f01 	tst.w	sl, #1
 800da1c:	d10e      	bne.n	800da3c <__gethex+0x3a4>
 800da1e:	f047 0710 	orr.w	r7, r7, #16
 800da22:	e033      	b.n	800da8c <__gethex+0x3f4>
 800da24:	f04f 0a01 	mov.w	sl, #1
 800da28:	e7d0      	b.n	800d9cc <__gethex+0x334>
 800da2a:	2701      	movs	r7, #1
 800da2c:	e7e2      	b.n	800d9f4 <__gethex+0x35c>
 800da2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da30:	f1c3 0301 	rsb	r3, r3, #1
 800da34:	9315      	str	r3, [sp, #84]	; 0x54
 800da36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d0f0      	beq.n	800da1e <__gethex+0x386>
 800da3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800da40:	f104 0314 	add.w	r3, r4, #20
 800da44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800da48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800da4c:	f04f 0c00 	mov.w	ip, #0
 800da50:	4618      	mov	r0, r3
 800da52:	f853 2b04 	ldr.w	r2, [r3], #4
 800da56:	f1b2 3fff 	cmp.w	r2, #4294967295
 800da5a:	d01c      	beq.n	800da96 <__gethex+0x3fe>
 800da5c:	3201      	adds	r2, #1
 800da5e:	6002      	str	r2, [r0, #0]
 800da60:	2f02      	cmp	r7, #2
 800da62:	f104 0314 	add.w	r3, r4, #20
 800da66:	d13f      	bne.n	800dae8 <__gethex+0x450>
 800da68:	f8d8 2000 	ldr.w	r2, [r8]
 800da6c:	3a01      	subs	r2, #1
 800da6e:	42b2      	cmp	r2, r6
 800da70:	d10a      	bne.n	800da88 <__gethex+0x3f0>
 800da72:	1171      	asrs	r1, r6, #5
 800da74:	2201      	movs	r2, #1
 800da76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da7a:	f006 061f 	and.w	r6, r6, #31
 800da7e:	fa02 f606 	lsl.w	r6, r2, r6
 800da82:	421e      	tst	r6, r3
 800da84:	bf18      	it	ne
 800da86:	4617      	movne	r7, r2
 800da88:	f047 0720 	orr.w	r7, r7, #32
 800da8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da8e:	601c      	str	r4, [r3, #0]
 800da90:	9b04      	ldr	r3, [sp, #16]
 800da92:	601d      	str	r5, [r3, #0]
 800da94:	e695      	b.n	800d7c2 <__gethex+0x12a>
 800da96:	4299      	cmp	r1, r3
 800da98:	f843 cc04 	str.w	ip, [r3, #-4]
 800da9c:	d8d8      	bhi.n	800da50 <__gethex+0x3b8>
 800da9e:	68a3      	ldr	r3, [r4, #8]
 800daa0:	459b      	cmp	fp, r3
 800daa2:	db19      	blt.n	800dad8 <__gethex+0x440>
 800daa4:	6861      	ldr	r1, [r4, #4]
 800daa6:	ee18 0a10 	vmov	r0, s16
 800daaa:	3101      	adds	r1, #1
 800daac:	f000 f9a4 	bl	800ddf8 <_Balloc>
 800dab0:	4681      	mov	r9, r0
 800dab2:	b918      	cbnz	r0, 800dabc <__gethex+0x424>
 800dab4:	4b1a      	ldr	r3, [pc, #104]	; (800db20 <__gethex+0x488>)
 800dab6:	4602      	mov	r2, r0
 800dab8:	2184      	movs	r1, #132	; 0x84
 800daba:	e6a8      	b.n	800d80e <__gethex+0x176>
 800dabc:	6922      	ldr	r2, [r4, #16]
 800dabe:	3202      	adds	r2, #2
 800dac0:	f104 010c 	add.w	r1, r4, #12
 800dac4:	0092      	lsls	r2, r2, #2
 800dac6:	300c      	adds	r0, #12
 800dac8:	f000 f988 	bl	800dddc <memcpy>
 800dacc:	4621      	mov	r1, r4
 800dace:	ee18 0a10 	vmov	r0, s16
 800dad2:	f000 f9d1 	bl	800de78 <_Bfree>
 800dad6:	464c      	mov	r4, r9
 800dad8:	6923      	ldr	r3, [r4, #16]
 800dada:	1c5a      	adds	r2, r3, #1
 800dadc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dae0:	6122      	str	r2, [r4, #16]
 800dae2:	2201      	movs	r2, #1
 800dae4:	615a      	str	r2, [r3, #20]
 800dae6:	e7bb      	b.n	800da60 <__gethex+0x3c8>
 800dae8:	6922      	ldr	r2, [r4, #16]
 800daea:	455a      	cmp	r2, fp
 800daec:	dd0b      	ble.n	800db06 <__gethex+0x46e>
 800daee:	2101      	movs	r1, #1
 800daf0:	4620      	mov	r0, r4
 800daf2:	f7ff fd69 	bl	800d5c8 <rshift>
 800daf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dafa:	3501      	adds	r5, #1
 800dafc:	42ab      	cmp	r3, r5
 800dafe:	f6ff aed0 	blt.w	800d8a2 <__gethex+0x20a>
 800db02:	2701      	movs	r7, #1
 800db04:	e7c0      	b.n	800da88 <__gethex+0x3f0>
 800db06:	f016 061f 	ands.w	r6, r6, #31
 800db0a:	d0fa      	beq.n	800db02 <__gethex+0x46a>
 800db0c:	4453      	add	r3, sl
 800db0e:	f1c6 0620 	rsb	r6, r6, #32
 800db12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db16:	f000 fa61 	bl	800dfdc <__hi0bits>
 800db1a:	42b0      	cmp	r0, r6
 800db1c:	dbe7      	blt.n	800daee <__gethex+0x456>
 800db1e:	e7f0      	b.n	800db02 <__gethex+0x46a>
 800db20:	08010848 	.word	0x08010848

0800db24 <L_shift>:
 800db24:	f1c2 0208 	rsb	r2, r2, #8
 800db28:	0092      	lsls	r2, r2, #2
 800db2a:	b570      	push	{r4, r5, r6, lr}
 800db2c:	f1c2 0620 	rsb	r6, r2, #32
 800db30:	6843      	ldr	r3, [r0, #4]
 800db32:	6804      	ldr	r4, [r0, #0]
 800db34:	fa03 f506 	lsl.w	r5, r3, r6
 800db38:	432c      	orrs	r4, r5
 800db3a:	40d3      	lsrs	r3, r2
 800db3c:	6004      	str	r4, [r0, #0]
 800db3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800db42:	4288      	cmp	r0, r1
 800db44:	d3f4      	bcc.n	800db30 <L_shift+0xc>
 800db46:	bd70      	pop	{r4, r5, r6, pc}

0800db48 <__match>:
 800db48:	b530      	push	{r4, r5, lr}
 800db4a:	6803      	ldr	r3, [r0, #0]
 800db4c:	3301      	adds	r3, #1
 800db4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db52:	b914      	cbnz	r4, 800db5a <__match+0x12>
 800db54:	6003      	str	r3, [r0, #0]
 800db56:	2001      	movs	r0, #1
 800db58:	bd30      	pop	{r4, r5, pc}
 800db5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800db62:	2d19      	cmp	r5, #25
 800db64:	bf98      	it	ls
 800db66:	3220      	addls	r2, #32
 800db68:	42a2      	cmp	r2, r4
 800db6a:	d0f0      	beq.n	800db4e <__match+0x6>
 800db6c:	2000      	movs	r0, #0
 800db6e:	e7f3      	b.n	800db58 <__match+0x10>

0800db70 <__hexnan>:
 800db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	680b      	ldr	r3, [r1, #0]
 800db76:	115e      	asrs	r6, r3, #5
 800db78:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db7c:	f013 031f 	ands.w	r3, r3, #31
 800db80:	b087      	sub	sp, #28
 800db82:	bf18      	it	ne
 800db84:	3604      	addne	r6, #4
 800db86:	2500      	movs	r5, #0
 800db88:	1f37      	subs	r7, r6, #4
 800db8a:	4690      	mov	r8, r2
 800db8c:	6802      	ldr	r2, [r0, #0]
 800db8e:	9301      	str	r3, [sp, #4]
 800db90:	4682      	mov	sl, r0
 800db92:	f846 5c04 	str.w	r5, [r6, #-4]
 800db96:	46b9      	mov	r9, r7
 800db98:	463c      	mov	r4, r7
 800db9a:	9502      	str	r5, [sp, #8]
 800db9c:	46ab      	mov	fp, r5
 800db9e:	7851      	ldrb	r1, [r2, #1]
 800dba0:	1c53      	adds	r3, r2, #1
 800dba2:	9303      	str	r3, [sp, #12]
 800dba4:	b341      	cbz	r1, 800dbf8 <__hexnan+0x88>
 800dba6:	4608      	mov	r0, r1
 800dba8:	9205      	str	r2, [sp, #20]
 800dbaa:	9104      	str	r1, [sp, #16]
 800dbac:	f7ff fd5e 	bl	800d66c <__hexdig_fun>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d14f      	bne.n	800dc54 <__hexnan+0xe4>
 800dbb4:	9904      	ldr	r1, [sp, #16]
 800dbb6:	9a05      	ldr	r2, [sp, #20]
 800dbb8:	2920      	cmp	r1, #32
 800dbba:	d818      	bhi.n	800dbee <__hexnan+0x7e>
 800dbbc:	9b02      	ldr	r3, [sp, #8]
 800dbbe:	459b      	cmp	fp, r3
 800dbc0:	dd13      	ble.n	800dbea <__hexnan+0x7a>
 800dbc2:	454c      	cmp	r4, r9
 800dbc4:	d206      	bcs.n	800dbd4 <__hexnan+0x64>
 800dbc6:	2d07      	cmp	r5, #7
 800dbc8:	dc04      	bgt.n	800dbd4 <__hexnan+0x64>
 800dbca:	462a      	mov	r2, r5
 800dbcc:	4649      	mov	r1, r9
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f7ff ffa8 	bl	800db24 <L_shift>
 800dbd4:	4544      	cmp	r4, r8
 800dbd6:	d950      	bls.n	800dc7a <__hexnan+0x10a>
 800dbd8:	2300      	movs	r3, #0
 800dbda:	f1a4 0904 	sub.w	r9, r4, #4
 800dbde:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbe2:	f8cd b008 	str.w	fp, [sp, #8]
 800dbe6:	464c      	mov	r4, r9
 800dbe8:	461d      	mov	r5, r3
 800dbea:	9a03      	ldr	r2, [sp, #12]
 800dbec:	e7d7      	b.n	800db9e <__hexnan+0x2e>
 800dbee:	2929      	cmp	r1, #41	; 0x29
 800dbf0:	d156      	bne.n	800dca0 <__hexnan+0x130>
 800dbf2:	3202      	adds	r2, #2
 800dbf4:	f8ca 2000 	str.w	r2, [sl]
 800dbf8:	f1bb 0f00 	cmp.w	fp, #0
 800dbfc:	d050      	beq.n	800dca0 <__hexnan+0x130>
 800dbfe:	454c      	cmp	r4, r9
 800dc00:	d206      	bcs.n	800dc10 <__hexnan+0xa0>
 800dc02:	2d07      	cmp	r5, #7
 800dc04:	dc04      	bgt.n	800dc10 <__hexnan+0xa0>
 800dc06:	462a      	mov	r2, r5
 800dc08:	4649      	mov	r1, r9
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	f7ff ff8a 	bl	800db24 <L_shift>
 800dc10:	4544      	cmp	r4, r8
 800dc12:	d934      	bls.n	800dc7e <__hexnan+0x10e>
 800dc14:	f1a8 0204 	sub.w	r2, r8, #4
 800dc18:	4623      	mov	r3, r4
 800dc1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc1e:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc22:	429f      	cmp	r7, r3
 800dc24:	d2f9      	bcs.n	800dc1a <__hexnan+0xaa>
 800dc26:	1b3b      	subs	r3, r7, r4
 800dc28:	f023 0303 	bic.w	r3, r3, #3
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	3401      	adds	r4, #1
 800dc30:	3e03      	subs	r6, #3
 800dc32:	42b4      	cmp	r4, r6
 800dc34:	bf88      	it	hi
 800dc36:	2304      	movhi	r3, #4
 800dc38:	4443      	add	r3, r8
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f843 2b04 	str.w	r2, [r3], #4
 800dc40:	429f      	cmp	r7, r3
 800dc42:	d2fb      	bcs.n	800dc3c <__hexnan+0xcc>
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	b91b      	cbnz	r3, 800dc50 <__hexnan+0xe0>
 800dc48:	4547      	cmp	r7, r8
 800dc4a:	d127      	bne.n	800dc9c <__hexnan+0x12c>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	603b      	str	r3, [r7, #0]
 800dc50:	2005      	movs	r0, #5
 800dc52:	e026      	b.n	800dca2 <__hexnan+0x132>
 800dc54:	3501      	adds	r5, #1
 800dc56:	2d08      	cmp	r5, #8
 800dc58:	f10b 0b01 	add.w	fp, fp, #1
 800dc5c:	dd06      	ble.n	800dc6c <__hexnan+0xfc>
 800dc5e:	4544      	cmp	r4, r8
 800dc60:	d9c3      	bls.n	800dbea <__hexnan+0x7a>
 800dc62:	2300      	movs	r3, #0
 800dc64:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc68:	2501      	movs	r5, #1
 800dc6a:	3c04      	subs	r4, #4
 800dc6c:	6822      	ldr	r2, [r4, #0]
 800dc6e:	f000 000f 	and.w	r0, r0, #15
 800dc72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dc76:	6022      	str	r2, [r4, #0]
 800dc78:	e7b7      	b.n	800dbea <__hexnan+0x7a>
 800dc7a:	2508      	movs	r5, #8
 800dc7c:	e7b5      	b.n	800dbea <__hexnan+0x7a>
 800dc7e:	9b01      	ldr	r3, [sp, #4]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d0df      	beq.n	800dc44 <__hexnan+0xd4>
 800dc84:	f04f 32ff 	mov.w	r2, #4294967295
 800dc88:	f1c3 0320 	rsb	r3, r3, #32
 800dc8c:	fa22 f303 	lsr.w	r3, r2, r3
 800dc90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dc94:	401a      	ands	r2, r3
 800dc96:	f846 2c04 	str.w	r2, [r6, #-4]
 800dc9a:	e7d3      	b.n	800dc44 <__hexnan+0xd4>
 800dc9c:	3f04      	subs	r7, #4
 800dc9e:	e7d1      	b.n	800dc44 <__hexnan+0xd4>
 800dca0:	2004      	movs	r0, #4
 800dca2:	b007      	add	sp, #28
 800dca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dca8 <_localeconv_r>:
 800dca8:	4800      	ldr	r0, [pc, #0]	; (800dcac <_localeconv_r+0x4>)
 800dcaa:	4770      	bx	lr
 800dcac:	20000164 	.word	0x20000164

0800dcb0 <__retarget_lock_init_recursive>:
 800dcb0:	4770      	bx	lr

0800dcb2 <__retarget_lock_acquire_recursive>:
 800dcb2:	4770      	bx	lr

0800dcb4 <__retarget_lock_release_recursive>:
 800dcb4:	4770      	bx	lr
	...

0800dcb8 <_lseek_r>:
 800dcb8:	b538      	push	{r3, r4, r5, lr}
 800dcba:	4d07      	ldr	r5, [pc, #28]	; (800dcd8 <_lseek_r+0x20>)
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	4608      	mov	r0, r1
 800dcc0:	4611      	mov	r1, r2
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	602a      	str	r2, [r5, #0]
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	f7f4 fbd4 	bl	8002474 <_lseek>
 800dccc:	1c43      	adds	r3, r0, #1
 800dcce:	d102      	bne.n	800dcd6 <_lseek_r+0x1e>
 800dcd0:	682b      	ldr	r3, [r5, #0]
 800dcd2:	b103      	cbz	r3, 800dcd6 <_lseek_r+0x1e>
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	bd38      	pop	{r3, r4, r5, pc}
 800dcd8:	200004dc 	.word	0x200004dc

0800dcdc <__swhatbuf_r>:
 800dcdc:	b570      	push	{r4, r5, r6, lr}
 800dcde:	460e      	mov	r6, r1
 800dce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dce4:	2900      	cmp	r1, #0
 800dce6:	b096      	sub	sp, #88	; 0x58
 800dce8:	4614      	mov	r4, r2
 800dcea:	461d      	mov	r5, r3
 800dcec:	da08      	bge.n	800dd00 <__swhatbuf_r+0x24>
 800dcee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	602a      	str	r2, [r5, #0]
 800dcf6:	061a      	lsls	r2, r3, #24
 800dcf8:	d410      	bmi.n	800dd1c <__swhatbuf_r+0x40>
 800dcfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcfe:	e00e      	b.n	800dd1e <__swhatbuf_r+0x42>
 800dd00:	466a      	mov	r2, sp
 800dd02:	f002 f869 	bl	800fdd8 <_fstat_r>
 800dd06:	2800      	cmp	r0, #0
 800dd08:	dbf1      	blt.n	800dcee <__swhatbuf_r+0x12>
 800dd0a:	9a01      	ldr	r2, [sp, #4]
 800dd0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dd10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dd14:	425a      	negs	r2, r3
 800dd16:	415a      	adcs	r2, r3
 800dd18:	602a      	str	r2, [r5, #0]
 800dd1a:	e7ee      	b.n	800dcfa <__swhatbuf_r+0x1e>
 800dd1c:	2340      	movs	r3, #64	; 0x40
 800dd1e:	2000      	movs	r0, #0
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	b016      	add	sp, #88	; 0x58
 800dd24:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dd28 <__smakebuf_r>:
 800dd28:	898b      	ldrh	r3, [r1, #12]
 800dd2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd2c:	079d      	lsls	r5, r3, #30
 800dd2e:	4606      	mov	r6, r0
 800dd30:	460c      	mov	r4, r1
 800dd32:	d507      	bpl.n	800dd44 <__smakebuf_r+0x1c>
 800dd34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd38:	6023      	str	r3, [r4, #0]
 800dd3a:	6123      	str	r3, [r4, #16]
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	6163      	str	r3, [r4, #20]
 800dd40:	b002      	add	sp, #8
 800dd42:	bd70      	pop	{r4, r5, r6, pc}
 800dd44:	ab01      	add	r3, sp, #4
 800dd46:	466a      	mov	r2, sp
 800dd48:	f7ff ffc8 	bl	800dcdc <__swhatbuf_r>
 800dd4c:	9900      	ldr	r1, [sp, #0]
 800dd4e:	4605      	mov	r5, r0
 800dd50:	4630      	mov	r0, r6
 800dd52:	f000 fd95 	bl	800e880 <_malloc_r>
 800dd56:	b948      	cbnz	r0, 800dd6c <__smakebuf_r+0x44>
 800dd58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd5c:	059a      	lsls	r2, r3, #22
 800dd5e:	d4ef      	bmi.n	800dd40 <__smakebuf_r+0x18>
 800dd60:	f023 0303 	bic.w	r3, r3, #3
 800dd64:	f043 0302 	orr.w	r3, r3, #2
 800dd68:	81a3      	strh	r3, [r4, #12]
 800dd6a:	e7e3      	b.n	800dd34 <__smakebuf_r+0xc>
 800dd6c:	4b0d      	ldr	r3, [pc, #52]	; (800dda4 <__smakebuf_r+0x7c>)
 800dd6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd70:	89a3      	ldrh	r3, [r4, #12]
 800dd72:	6020      	str	r0, [r4, #0]
 800dd74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd78:	81a3      	strh	r3, [r4, #12]
 800dd7a:	9b00      	ldr	r3, [sp, #0]
 800dd7c:	6163      	str	r3, [r4, #20]
 800dd7e:	9b01      	ldr	r3, [sp, #4]
 800dd80:	6120      	str	r0, [r4, #16]
 800dd82:	b15b      	cbz	r3, 800dd9c <__smakebuf_r+0x74>
 800dd84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd88:	4630      	mov	r0, r6
 800dd8a:	f002 f837 	bl	800fdfc <_isatty_r>
 800dd8e:	b128      	cbz	r0, 800dd9c <__smakebuf_r+0x74>
 800dd90:	89a3      	ldrh	r3, [r4, #12]
 800dd92:	f023 0303 	bic.w	r3, r3, #3
 800dd96:	f043 0301 	orr.w	r3, r3, #1
 800dd9a:	81a3      	strh	r3, [r4, #12]
 800dd9c:	89a0      	ldrh	r0, [r4, #12]
 800dd9e:	4305      	orrs	r5, r0
 800dda0:	81a5      	strh	r5, [r4, #12]
 800dda2:	e7cd      	b.n	800dd40 <__smakebuf_r+0x18>
 800dda4:	0800d3ed 	.word	0x0800d3ed

0800dda8 <malloc>:
 800dda8:	4b02      	ldr	r3, [pc, #8]	; (800ddb4 <malloc+0xc>)
 800ddaa:	4601      	mov	r1, r0
 800ddac:	6818      	ldr	r0, [r3, #0]
 800ddae:	f000 bd67 	b.w	800e880 <_malloc_r>
 800ddb2:	bf00      	nop
 800ddb4:	2000000c 	.word	0x2000000c

0800ddb8 <__ascii_mbtowc>:
 800ddb8:	b082      	sub	sp, #8
 800ddba:	b901      	cbnz	r1, 800ddbe <__ascii_mbtowc+0x6>
 800ddbc:	a901      	add	r1, sp, #4
 800ddbe:	b142      	cbz	r2, 800ddd2 <__ascii_mbtowc+0x1a>
 800ddc0:	b14b      	cbz	r3, 800ddd6 <__ascii_mbtowc+0x1e>
 800ddc2:	7813      	ldrb	r3, [r2, #0]
 800ddc4:	600b      	str	r3, [r1, #0]
 800ddc6:	7812      	ldrb	r2, [r2, #0]
 800ddc8:	1e10      	subs	r0, r2, #0
 800ddca:	bf18      	it	ne
 800ddcc:	2001      	movne	r0, #1
 800ddce:	b002      	add	sp, #8
 800ddd0:	4770      	bx	lr
 800ddd2:	4610      	mov	r0, r2
 800ddd4:	e7fb      	b.n	800ddce <__ascii_mbtowc+0x16>
 800ddd6:	f06f 0001 	mvn.w	r0, #1
 800ddda:	e7f8      	b.n	800ddce <__ascii_mbtowc+0x16>

0800dddc <memcpy>:
 800dddc:	440a      	add	r2, r1
 800ddde:	4291      	cmp	r1, r2
 800dde0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dde4:	d100      	bne.n	800dde8 <memcpy+0xc>
 800dde6:	4770      	bx	lr
 800dde8:	b510      	push	{r4, lr}
 800ddea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddf2:	4291      	cmp	r1, r2
 800ddf4:	d1f9      	bne.n	800ddea <memcpy+0xe>
 800ddf6:	bd10      	pop	{r4, pc}

0800ddf8 <_Balloc>:
 800ddf8:	b570      	push	{r4, r5, r6, lr}
 800ddfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	460d      	mov	r5, r1
 800de00:	b976      	cbnz	r6, 800de20 <_Balloc+0x28>
 800de02:	2010      	movs	r0, #16
 800de04:	f7ff ffd0 	bl	800dda8 <malloc>
 800de08:	4602      	mov	r2, r0
 800de0a:	6260      	str	r0, [r4, #36]	; 0x24
 800de0c:	b920      	cbnz	r0, 800de18 <_Balloc+0x20>
 800de0e:	4b18      	ldr	r3, [pc, #96]	; (800de70 <_Balloc+0x78>)
 800de10:	4818      	ldr	r0, [pc, #96]	; (800de74 <_Balloc+0x7c>)
 800de12:	2166      	movs	r1, #102	; 0x66
 800de14:	f001 ffb0 	bl	800fd78 <__assert_func>
 800de18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de1c:	6006      	str	r6, [r0, #0]
 800de1e:	60c6      	str	r6, [r0, #12]
 800de20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800de22:	68f3      	ldr	r3, [r6, #12]
 800de24:	b183      	cbz	r3, 800de48 <_Balloc+0x50>
 800de26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de28:	68db      	ldr	r3, [r3, #12]
 800de2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800de2e:	b9b8      	cbnz	r0, 800de60 <_Balloc+0x68>
 800de30:	2101      	movs	r1, #1
 800de32:	fa01 f605 	lsl.w	r6, r1, r5
 800de36:	1d72      	adds	r2, r6, #5
 800de38:	0092      	lsls	r2, r2, #2
 800de3a:	4620      	mov	r0, r4
 800de3c:	f000 fc9d 	bl	800e77a <_calloc_r>
 800de40:	b160      	cbz	r0, 800de5c <_Balloc+0x64>
 800de42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de46:	e00e      	b.n	800de66 <_Balloc+0x6e>
 800de48:	2221      	movs	r2, #33	; 0x21
 800de4a:	2104      	movs	r1, #4
 800de4c:	4620      	mov	r0, r4
 800de4e:	f000 fc94 	bl	800e77a <_calloc_r>
 800de52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de54:	60f0      	str	r0, [r6, #12]
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1e4      	bne.n	800de26 <_Balloc+0x2e>
 800de5c:	2000      	movs	r0, #0
 800de5e:	bd70      	pop	{r4, r5, r6, pc}
 800de60:	6802      	ldr	r2, [r0, #0]
 800de62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de66:	2300      	movs	r3, #0
 800de68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de6c:	e7f7      	b.n	800de5e <_Balloc+0x66>
 800de6e:	bf00      	nop
 800de70:	080107d6 	.word	0x080107d6
 800de74:	08010938 	.word	0x08010938

0800de78 <_Bfree>:
 800de78:	b570      	push	{r4, r5, r6, lr}
 800de7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de7c:	4605      	mov	r5, r0
 800de7e:	460c      	mov	r4, r1
 800de80:	b976      	cbnz	r6, 800dea0 <_Bfree+0x28>
 800de82:	2010      	movs	r0, #16
 800de84:	f7ff ff90 	bl	800dda8 <malloc>
 800de88:	4602      	mov	r2, r0
 800de8a:	6268      	str	r0, [r5, #36]	; 0x24
 800de8c:	b920      	cbnz	r0, 800de98 <_Bfree+0x20>
 800de8e:	4b09      	ldr	r3, [pc, #36]	; (800deb4 <_Bfree+0x3c>)
 800de90:	4809      	ldr	r0, [pc, #36]	; (800deb8 <_Bfree+0x40>)
 800de92:	218a      	movs	r1, #138	; 0x8a
 800de94:	f001 ff70 	bl	800fd78 <__assert_func>
 800de98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de9c:	6006      	str	r6, [r0, #0]
 800de9e:	60c6      	str	r6, [r0, #12]
 800dea0:	b13c      	cbz	r4, 800deb2 <_Bfree+0x3a>
 800dea2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dea4:	6862      	ldr	r2, [r4, #4]
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800deac:	6021      	str	r1, [r4, #0]
 800deae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800deb2:	bd70      	pop	{r4, r5, r6, pc}
 800deb4:	080107d6 	.word	0x080107d6
 800deb8:	08010938 	.word	0x08010938

0800debc <__multadd>:
 800debc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dec0:	690d      	ldr	r5, [r1, #16]
 800dec2:	4607      	mov	r7, r0
 800dec4:	460c      	mov	r4, r1
 800dec6:	461e      	mov	r6, r3
 800dec8:	f101 0c14 	add.w	ip, r1, #20
 800decc:	2000      	movs	r0, #0
 800dece:	f8dc 3000 	ldr.w	r3, [ip]
 800ded2:	b299      	uxth	r1, r3
 800ded4:	fb02 6101 	mla	r1, r2, r1, r6
 800ded8:	0c1e      	lsrs	r6, r3, #16
 800deda:	0c0b      	lsrs	r3, r1, #16
 800dedc:	fb02 3306 	mla	r3, r2, r6, r3
 800dee0:	b289      	uxth	r1, r1
 800dee2:	3001      	adds	r0, #1
 800dee4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dee8:	4285      	cmp	r5, r0
 800deea:	f84c 1b04 	str.w	r1, [ip], #4
 800deee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800def2:	dcec      	bgt.n	800dece <__multadd+0x12>
 800def4:	b30e      	cbz	r6, 800df3a <__multadd+0x7e>
 800def6:	68a3      	ldr	r3, [r4, #8]
 800def8:	42ab      	cmp	r3, r5
 800defa:	dc19      	bgt.n	800df30 <__multadd+0x74>
 800defc:	6861      	ldr	r1, [r4, #4]
 800defe:	4638      	mov	r0, r7
 800df00:	3101      	adds	r1, #1
 800df02:	f7ff ff79 	bl	800ddf8 <_Balloc>
 800df06:	4680      	mov	r8, r0
 800df08:	b928      	cbnz	r0, 800df16 <__multadd+0x5a>
 800df0a:	4602      	mov	r2, r0
 800df0c:	4b0c      	ldr	r3, [pc, #48]	; (800df40 <__multadd+0x84>)
 800df0e:	480d      	ldr	r0, [pc, #52]	; (800df44 <__multadd+0x88>)
 800df10:	21b5      	movs	r1, #181	; 0xb5
 800df12:	f001 ff31 	bl	800fd78 <__assert_func>
 800df16:	6922      	ldr	r2, [r4, #16]
 800df18:	3202      	adds	r2, #2
 800df1a:	f104 010c 	add.w	r1, r4, #12
 800df1e:	0092      	lsls	r2, r2, #2
 800df20:	300c      	adds	r0, #12
 800df22:	f7ff ff5b 	bl	800dddc <memcpy>
 800df26:	4621      	mov	r1, r4
 800df28:	4638      	mov	r0, r7
 800df2a:	f7ff ffa5 	bl	800de78 <_Bfree>
 800df2e:	4644      	mov	r4, r8
 800df30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df34:	3501      	adds	r5, #1
 800df36:	615e      	str	r6, [r3, #20]
 800df38:	6125      	str	r5, [r4, #16]
 800df3a:	4620      	mov	r0, r4
 800df3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df40:	08010848 	.word	0x08010848
 800df44:	08010938 	.word	0x08010938

0800df48 <__s2b>:
 800df48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df4c:	460c      	mov	r4, r1
 800df4e:	4615      	mov	r5, r2
 800df50:	461f      	mov	r7, r3
 800df52:	2209      	movs	r2, #9
 800df54:	3308      	adds	r3, #8
 800df56:	4606      	mov	r6, r0
 800df58:	fb93 f3f2 	sdiv	r3, r3, r2
 800df5c:	2100      	movs	r1, #0
 800df5e:	2201      	movs	r2, #1
 800df60:	429a      	cmp	r2, r3
 800df62:	db09      	blt.n	800df78 <__s2b+0x30>
 800df64:	4630      	mov	r0, r6
 800df66:	f7ff ff47 	bl	800ddf8 <_Balloc>
 800df6a:	b940      	cbnz	r0, 800df7e <__s2b+0x36>
 800df6c:	4602      	mov	r2, r0
 800df6e:	4b19      	ldr	r3, [pc, #100]	; (800dfd4 <__s2b+0x8c>)
 800df70:	4819      	ldr	r0, [pc, #100]	; (800dfd8 <__s2b+0x90>)
 800df72:	21ce      	movs	r1, #206	; 0xce
 800df74:	f001 ff00 	bl	800fd78 <__assert_func>
 800df78:	0052      	lsls	r2, r2, #1
 800df7a:	3101      	adds	r1, #1
 800df7c:	e7f0      	b.n	800df60 <__s2b+0x18>
 800df7e:	9b08      	ldr	r3, [sp, #32]
 800df80:	6143      	str	r3, [r0, #20]
 800df82:	2d09      	cmp	r5, #9
 800df84:	f04f 0301 	mov.w	r3, #1
 800df88:	6103      	str	r3, [r0, #16]
 800df8a:	dd16      	ble.n	800dfba <__s2b+0x72>
 800df8c:	f104 0909 	add.w	r9, r4, #9
 800df90:	46c8      	mov	r8, r9
 800df92:	442c      	add	r4, r5
 800df94:	f818 3b01 	ldrb.w	r3, [r8], #1
 800df98:	4601      	mov	r1, r0
 800df9a:	3b30      	subs	r3, #48	; 0x30
 800df9c:	220a      	movs	r2, #10
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f7ff ff8c 	bl	800debc <__multadd>
 800dfa4:	45a0      	cmp	r8, r4
 800dfa6:	d1f5      	bne.n	800df94 <__s2b+0x4c>
 800dfa8:	f1a5 0408 	sub.w	r4, r5, #8
 800dfac:	444c      	add	r4, r9
 800dfae:	1b2d      	subs	r5, r5, r4
 800dfb0:	1963      	adds	r3, r4, r5
 800dfb2:	42bb      	cmp	r3, r7
 800dfb4:	db04      	blt.n	800dfc0 <__s2b+0x78>
 800dfb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfba:	340a      	adds	r4, #10
 800dfbc:	2509      	movs	r5, #9
 800dfbe:	e7f6      	b.n	800dfae <__s2b+0x66>
 800dfc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dfc4:	4601      	mov	r1, r0
 800dfc6:	3b30      	subs	r3, #48	; 0x30
 800dfc8:	220a      	movs	r2, #10
 800dfca:	4630      	mov	r0, r6
 800dfcc:	f7ff ff76 	bl	800debc <__multadd>
 800dfd0:	e7ee      	b.n	800dfb0 <__s2b+0x68>
 800dfd2:	bf00      	nop
 800dfd4:	08010848 	.word	0x08010848
 800dfd8:	08010938 	.word	0x08010938

0800dfdc <__hi0bits>:
 800dfdc:	0c03      	lsrs	r3, r0, #16
 800dfde:	041b      	lsls	r3, r3, #16
 800dfe0:	b9d3      	cbnz	r3, 800e018 <__hi0bits+0x3c>
 800dfe2:	0400      	lsls	r0, r0, #16
 800dfe4:	2310      	movs	r3, #16
 800dfe6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dfea:	bf04      	itt	eq
 800dfec:	0200      	lsleq	r0, r0, #8
 800dfee:	3308      	addeq	r3, #8
 800dff0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dff4:	bf04      	itt	eq
 800dff6:	0100      	lsleq	r0, r0, #4
 800dff8:	3304      	addeq	r3, #4
 800dffa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dffe:	bf04      	itt	eq
 800e000:	0080      	lsleq	r0, r0, #2
 800e002:	3302      	addeq	r3, #2
 800e004:	2800      	cmp	r0, #0
 800e006:	db05      	blt.n	800e014 <__hi0bits+0x38>
 800e008:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e00c:	f103 0301 	add.w	r3, r3, #1
 800e010:	bf08      	it	eq
 800e012:	2320      	moveq	r3, #32
 800e014:	4618      	mov	r0, r3
 800e016:	4770      	bx	lr
 800e018:	2300      	movs	r3, #0
 800e01a:	e7e4      	b.n	800dfe6 <__hi0bits+0xa>

0800e01c <__lo0bits>:
 800e01c:	6803      	ldr	r3, [r0, #0]
 800e01e:	f013 0207 	ands.w	r2, r3, #7
 800e022:	4601      	mov	r1, r0
 800e024:	d00b      	beq.n	800e03e <__lo0bits+0x22>
 800e026:	07da      	lsls	r2, r3, #31
 800e028:	d423      	bmi.n	800e072 <__lo0bits+0x56>
 800e02a:	0798      	lsls	r0, r3, #30
 800e02c:	bf49      	itett	mi
 800e02e:	085b      	lsrmi	r3, r3, #1
 800e030:	089b      	lsrpl	r3, r3, #2
 800e032:	2001      	movmi	r0, #1
 800e034:	600b      	strmi	r3, [r1, #0]
 800e036:	bf5c      	itt	pl
 800e038:	600b      	strpl	r3, [r1, #0]
 800e03a:	2002      	movpl	r0, #2
 800e03c:	4770      	bx	lr
 800e03e:	b298      	uxth	r0, r3
 800e040:	b9a8      	cbnz	r0, 800e06e <__lo0bits+0x52>
 800e042:	0c1b      	lsrs	r3, r3, #16
 800e044:	2010      	movs	r0, #16
 800e046:	b2da      	uxtb	r2, r3
 800e048:	b90a      	cbnz	r2, 800e04e <__lo0bits+0x32>
 800e04a:	3008      	adds	r0, #8
 800e04c:	0a1b      	lsrs	r3, r3, #8
 800e04e:	071a      	lsls	r2, r3, #28
 800e050:	bf04      	itt	eq
 800e052:	091b      	lsreq	r3, r3, #4
 800e054:	3004      	addeq	r0, #4
 800e056:	079a      	lsls	r2, r3, #30
 800e058:	bf04      	itt	eq
 800e05a:	089b      	lsreq	r3, r3, #2
 800e05c:	3002      	addeq	r0, #2
 800e05e:	07da      	lsls	r2, r3, #31
 800e060:	d403      	bmi.n	800e06a <__lo0bits+0x4e>
 800e062:	085b      	lsrs	r3, r3, #1
 800e064:	f100 0001 	add.w	r0, r0, #1
 800e068:	d005      	beq.n	800e076 <__lo0bits+0x5a>
 800e06a:	600b      	str	r3, [r1, #0]
 800e06c:	4770      	bx	lr
 800e06e:	4610      	mov	r0, r2
 800e070:	e7e9      	b.n	800e046 <__lo0bits+0x2a>
 800e072:	2000      	movs	r0, #0
 800e074:	4770      	bx	lr
 800e076:	2020      	movs	r0, #32
 800e078:	4770      	bx	lr
	...

0800e07c <__i2b>:
 800e07c:	b510      	push	{r4, lr}
 800e07e:	460c      	mov	r4, r1
 800e080:	2101      	movs	r1, #1
 800e082:	f7ff feb9 	bl	800ddf8 <_Balloc>
 800e086:	4602      	mov	r2, r0
 800e088:	b928      	cbnz	r0, 800e096 <__i2b+0x1a>
 800e08a:	4b05      	ldr	r3, [pc, #20]	; (800e0a0 <__i2b+0x24>)
 800e08c:	4805      	ldr	r0, [pc, #20]	; (800e0a4 <__i2b+0x28>)
 800e08e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e092:	f001 fe71 	bl	800fd78 <__assert_func>
 800e096:	2301      	movs	r3, #1
 800e098:	6144      	str	r4, [r0, #20]
 800e09a:	6103      	str	r3, [r0, #16]
 800e09c:	bd10      	pop	{r4, pc}
 800e09e:	bf00      	nop
 800e0a0:	08010848 	.word	0x08010848
 800e0a4:	08010938 	.word	0x08010938

0800e0a8 <__multiply>:
 800e0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ac:	4691      	mov	r9, r2
 800e0ae:	690a      	ldr	r2, [r1, #16]
 800e0b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	bfb8      	it	lt
 800e0b8:	460b      	movlt	r3, r1
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	bfbc      	itt	lt
 800e0be:	464c      	movlt	r4, r9
 800e0c0:	4699      	movlt	r9, r3
 800e0c2:	6927      	ldr	r7, [r4, #16]
 800e0c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e0c8:	68a3      	ldr	r3, [r4, #8]
 800e0ca:	6861      	ldr	r1, [r4, #4]
 800e0cc:	eb07 060a 	add.w	r6, r7, sl
 800e0d0:	42b3      	cmp	r3, r6
 800e0d2:	b085      	sub	sp, #20
 800e0d4:	bfb8      	it	lt
 800e0d6:	3101      	addlt	r1, #1
 800e0d8:	f7ff fe8e 	bl	800ddf8 <_Balloc>
 800e0dc:	b930      	cbnz	r0, 800e0ec <__multiply+0x44>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	4b44      	ldr	r3, [pc, #272]	; (800e1f4 <__multiply+0x14c>)
 800e0e2:	4845      	ldr	r0, [pc, #276]	; (800e1f8 <__multiply+0x150>)
 800e0e4:	f240 115d 	movw	r1, #349	; 0x15d
 800e0e8:	f001 fe46 	bl	800fd78 <__assert_func>
 800e0ec:	f100 0514 	add.w	r5, r0, #20
 800e0f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e0f4:	462b      	mov	r3, r5
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	4543      	cmp	r3, r8
 800e0fa:	d321      	bcc.n	800e140 <__multiply+0x98>
 800e0fc:	f104 0314 	add.w	r3, r4, #20
 800e100:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e104:	f109 0314 	add.w	r3, r9, #20
 800e108:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e10c:	9202      	str	r2, [sp, #8]
 800e10e:	1b3a      	subs	r2, r7, r4
 800e110:	3a15      	subs	r2, #21
 800e112:	f022 0203 	bic.w	r2, r2, #3
 800e116:	3204      	adds	r2, #4
 800e118:	f104 0115 	add.w	r1, r4, #21
 800e11c:	428f      	cmp	r7, r1
 800e11e:	bf38      	it	cc
 800e120:	2204      	movcc	r2, #4
 800e122:	9201      	str	r2, [sp, #4]
 800e124:	9a02      	ldr	r2, [sp, #8]
 800e126:	9303      	str	r3, [sp, #12]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d80c      	bhi.n	800e146 <__multiply+0x9e>
 800e12c:	2e00      	cmp	r6, #0
 800e12e:	dd03      	ble.n	800e138 <__multiply+0x90>
 800e130:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e134:	2b00      	cmp	r3, #0
 800e136:	d05a      	beq.n	800e1ee <__multiply+0x146>
 800e138:	6106      	str	r6, [r0, #16]
 800e13a:	b005      	add	sp, #20
 800e13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e140:	f843 2b04 	str.w	r2, [r3], #4
 800e144:	e7d8      	b.n	800e0f8 <__multiply+0x50>
 800e146:	f8b3 a000 	ldrh.w	sl, [r3]
 800e14a:	f1ba 0f00 	cmp.w	sl, #0
 800e14e:	d024      	beq.n	800e19a <__multiply+0xf2>
 800e150:	f104 0e14 	add.w	lr, r4, #20
 800e154:	46a9      	mov	r9, r5
 800e156:	f04f 0c00 	mov.w	ip, #0
 800e15a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e15e:	f8d9 1000 	ldr.w	r1, [r9]
 800e162:	fa1f fb82 	uxth.w	fp, r2
 800e166:	b289      	uxth	r1, r1
 800e168:	fb0a 110b 	mla	r1, sl, fp, r1
 800e16c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e170:	f8d9 2000 	ldr.w	r2, [r9]
 800e174:	4461      	add	r1, ip
 800e176:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e17a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e17e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e182:	b289      	uxth	r1, r1
 800e184:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e188:	4577      	cmp	r7, lr
 800e18a:	f849 1b04 	str.w	r1, [r9], #4
 800e18e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e192:	d8e2      	bhi.n	800e15a <__multiply+0xb2>
 800e194:	9a01      	ldr	r2, [sp, #4]
 800e196:	f845 c002 	str.w	ip, [r5, r2]
 800e19a:	9a03      	ldr	r2, [sp, #12]
 800e19c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e1a0:	3304      	adds	r3, #4
 800e1a2:	f1b9 0f00 	cmp.w	r9, #0
 800e1a6:	d020      	beq.n	800e1ea <__multiply+0x142>
 800e1a8:	6829      	ldr	r1, [r5, #0]
 800e1aa:	f104 0c14 	add.w	ip, r4, #20
 800e1ae:	46ae      	mov	lr, r5
 800e1b0:	f04f 0a00 	mov.w	sl, #0
 800e1b4:	f8bc b000 	ldrh.w	fp, [ip]
 800e1b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e1bc:	fb09 220b 	mla	r2, r9, fp, r2
 800e1c0:	4492      	add	sl, r2
 800e1c2:	b289      	uxth	r1, r1
 800e1c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e1c8:	f84e 1b04 	str.w	r1, [lr], #4
 800e1cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e1d0:	f8be 1000 	ldrh.w	r1, [lr]
 800e1d4:	0c12      	lsrs	r2, r2, #16
 800e1d6:	fb09 1102 	mla	r1, r9, r2, r1
 800e1da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e1de:	4567      	cmp	r7, ip
 800e1e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e1e4:	d8e6      	bhi.n	800e1b4 <__multiply+0x10c>
 800e1e6:	9a01      	ldr	r2, [sp, #4]
 800e1e8:	50a9      	str	r1, [r5, r2]
 800e1ea:	3504      	adds	r5, #4
 800e1ec:	e79a      	b.n	800e124 <__multiply+0x7c>
 800e1ee:	3e01      	subs	r6, #1
 800e1f0:	e79c      	b.n	800e12c <__multiply+0x84>
 800e1f2:	bf00      	nop
 800e1f4:	08010848 	.word	0x08010848
 800e1f8:	08010938 	.word	0x08010938

0800e1fc <__pow5mult>:
 800e1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e200:	4615      	mov	r5, r2
 800e202:	f012 0203 	ands.w	r2, r2, #3
 800e206:	4606      	mov	r6, r0
 800e208:	460f      	mov	r7, r1
 800e20a:	d007      	beq.n	800e21c <__pow5mult+0x20>
 800e20c:	4c25      	ldr	r4, [pc, #148]	; (800e2a4 <__pow5mult+0xa8>)
 800e20e:	3a01      	subs	r2, #1
 800e210:	2300      	movs	r3, #0
 800e212:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e216:	f7ff fe51 	bl	800debc <__multadd>
 800e21a:	4607      	mov	r7, r0
 800e21c:	10ad      	asrs	r5, r5, #2
 800e21e:	d03d      	beq.n	800e29c <__pow5mult+0xa0>
 800e220:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e222:	b97c      	cbnz	r4, 800e244 <__pow5mult+0x48>
 800e224:	2010      	movs	r0, #16
 800e226:	f7ff fdbf 	bl	800dda8 <malloc>
 800e22a:	4602      	mov	r2, r0
 800e22c:	6270      	str	r0, [r6, #36]	; 0x24
 800e22e:	b928      	cbnz	r0, 800e23c <__pow5mult+0x40>
 800e230:	4b1d      	ldr	r3, [pc, #116]	; (800e2a8 <__pow5mult+0xac>)
 800e232:	481e      	ldr	r0, [pc, #120]	; (800e2ac <__pow5mult+0xb0>)
 800e234:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e238:	f001 fd9e 	bl	800fd78 <__assert_func>
 800e23c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e240:	6004      	str	r4, [r0, #0]
 800e242:	60c4      	str	r4, [r0, #12]
 800e244:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e248:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e24c:	b94c      	cbnz	r4, 800e262 <__pow5mult+0x66>
 800e24e:	f240 2171 	movw	r1, #625	; 0x271
 800e252:	4630      	mov	r0, r6
 800e254:	f7ff ff12 	bl	800e07c <__i2b>
 800e258:	2300      	movs	r3, #0
 800e25a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e25e:	4604      	mov	r4, r0
 800e260:	6003      	str	r3, [r0, #0]
 800e262:	f04f 0900 	mov.w	r9, #0
 800e266:	07eb      	lsls	r3, r5, #31
 800e268:	d50a      	bpl.n	800e280 <__pow5mult+0x84>
 800e26a:	4639      	mov	r1, r7
 800e26c:	4622      	mov	r2, r4
 800e26e:	4630      	mov	r0, r6
 800e270:	f7ff ff1a 	bl	800e0a8 <__multiply>
 800e274:	4639      	mov	r1, r7
 800e276:	4680      	mov	r8, r0
 800e278:	4630      	mov	r0, r6
 800e27a:	f7ff fdfd 	bl	800de78 <_Bfree>
 800e27e:	4647      	mov	r7, r8
 800e280:	106d      	asrs	r5, r5, #1
 800e282:	d00b      	beq.n	800e29c <__pow5mult+0xa0>
 800e284:	6820      	ldr	r0, [r4, #0]
 800e286:	b938      	cbnz	r0, 800e298 <__pow5mult+0x9c>
 800e288:	4622      	mov	r2, r4
 800e28a:	4621      	mov	r1, r4
 800e28c:	4630      	mov	r0, r6
 800e28e:	f7ff ff0b 	bl	800e0a8 <__multiply>
 800e292:	6020      	str	r0, [r4, #0]
 800e294:	f8c0 9000 	str.w	r9, [r0]
 800e298:	4604      	mov	r4, r0
 800e29a:	e7e4      	b.n	800e266 <__pow5mult+0x6a>
 800e29c:	4638      	mov	r0, r7
 800e29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2a2:	bf00      	nop
 800e2a4:	08010a88 	.word	0x08010a88
 800e2a8:	080107d6 	.word	0x080107d6
 800e2ac:	08010938 	.word	0x08010938

0800e2b0 <__lshift>:
 800e2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2b4:	460c      	mov	r4, r1
 800e2b6:	6849      	ldr	r1, [r1, #4]
 800e2b8:	6923      	ldr	r3, [r4, #16]
 800e2ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e2be:	68a3      	ldr	r3, [r4, #8]
 800e2c0:	4607      	mov	r7, r0
 800e2c2:	4691      	mov	r9, r2
 800e2c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e2c8:	f108 0601 	add.w	r6, r8, #1
 800e2cc:	42b3      	cmp	r3, r6
 800e2ce:	db0b      	blt.n	800e2e8 <__lshift+0x38>
 800e2d0:	4638      	mov	r0, r7
 800e2d2:	f7ff fd91 	bl	800ddf8 <_Balloc>
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	b948      	cbnz	r0, 800e2ee <__lshift+0x3e>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	4b2a      	ldr	r3, [pc, #168]	; (800e388 <__lshift+0xd8>)
 800e2de:	482b      	ldr	r0, [pc, #172]	; (800e38c <__lshift+0xdc>)
 800e2e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e2e4:	f001 fd48 	bl	800fd78 <__assert_func>
 800e2e8:	3101      	adds	r1, #1
 800e2ea:	005b      	lsls	r3, r3, #1
 800e2ec:	e7ee      	b.n	800e2cc <__lshift+0x1c>
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	f100 0114 	add.w	r1, r0, #20
 800e2f4:	f100 0210 	add.w	r2, r0, #16
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	4553      	cmp	r3, sl
 800e2fc:	db37      	blt.n	800e36e <__lshift+0xbe>
 800e2fe:	6920      	ldr	r0, [r4, #16]
 800e300:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e304:	f104 0314 	add.w	r3, r4, #20
 800e308:	f019 091f 	ands.w	r9, r9, #31
 800e30c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e310:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e314:	d02f      	beq.n	800e376 <__lshift+0xc6>
 800e316:	f1c9 0e20 	rsb	lr, r9, #32
 800e31a:	468a      	mov	sl, r1
 800e31c:	f04f 0c00 	mov.w	ip, #0
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	fa02 f209 	lsl.w	r2, r2, r9
 800e326:	ea42 020c 	orr.w	r2, r2, ip
 800e32a:	f84a 2b04 	str.w	r2, [sl], #4
 800e32e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e332:	4298      	cmp	r0, r3
 800e334:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e338:	d8f2      	bhi.n	800e320 <__lshift+0x70>
 800e33a:	1b03      	subs	r3, r0, r4
 800e33c:	3b15      	subs	r3, #21
 800e33e:	f023 0303 	bic.w	r3, r3, #3
 800e342:	3304      	adds	r3, #4
 800e344:	f104 0215 	add.w	r2, r4, #21
 800e348:	4290      	cmp	r0, r2
 800e34a:	bf38      	it	cc
 800e34c:	2304      	movcc	r3, #4
 800e34e:	f841 c003 	str.w	ip, [r1, r3]
 800e352:	f1bc 0f00 	cmp.w	ip, #0
 800e356:	d001      	beq.n	800e35c <__lshift+0xac>
 800e358:	f108 0602 	add.w	r6, r8, #2
 800e35c:	3e01      	subs	r6, #1
 800e35e:	4638      	mov	r0, r7
 800e360:	612e      	str	r6, [r5, #16]
 800e362:	4621      	mov	r1, r4
 800e364:	f7ff fd88 	bl	800de78 <_Bfree>
 800e368:	4628      	mov	r0, r5
 800e36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e36e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e372:	3301      	adds	r3, #1
 800e374:	e7c1      	b.n	800e2fa <__lshift+0x4a>
 800e376:	3904      	subs	r1, #4
 800e378:	f853 2b04 	ldr.w	r2, [r3], #4
 800e37c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e380:	4298      	cmp	r0, r3
 800e382:	d8f9      	bhi.n	800e378 <__lshift+0xc8>
 800e384:	e7ea      	b.n	800e35c <__lshift+0xac>
 800e386:	bf00      	nop
 800e388:	08010848 	.word	0x08010848
 800e38c:	08010938 	.word	0x08010938

0800e390 <__mcmp>:
 800e390:	b530      	push	{r4, r5, lr}
 800e392:	6902      	ldr	r2, [r0, #16]
 800e394:	690c      	ldr	r4, [r1, #16]
 800e396:	1b12      	subs	r2, r2, r4
 800e398:	d10e      	bne.n	800e3b8 <__mcmp+0x28>
 800e39a:	f100 0314 	add.w	r3, r0, #20
 800e39e:	3114      	adds	r1, #20
 800e3a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e3a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e3a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e3ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e3b0:	42a5      	cmp	r5, r4
 800e3b2:	d003      	beq.n	800e3bc <__mcmp+0x2c>
 800e3b4:	d305      	bcc.n	800e3c2 <__mcmp+0x32>
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	4610      	mov	r0, r2
 800e3ba:	bd30      	pop	{r4, r5, pc}
 800e3bc:	4283      	cmp	r3, r0
 800e3be:	d3f3      	bcc.n	800e3a8 <__mcmp+0x18>
 800e3c0:	e7fa      	b.n	800e3b8 <__mcmp+0x28>
 800e3c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c6:	e7f7      	b.n	800e3b8 <__mcmp+0x28>

0800e3c8 <__mdiff>:
 800e3c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3cc:	460c      	mov	r4, r1
 800e3ce:	4606      	mov	r6, r0
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	4690      	mov	r8, r2
 800e3d6:	f7ff ffdb 	bl	800e390 <__mcmp>
 800e3da:	1e05      	subs	r5, r0, #0
 800e3dc:	d110      	bne.n	800e400 <__mdiff+0x38>
 800e3de:	4629      	mov	r1, r5
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	f7ff fd09 	bl	800ddf8 <_Balloc>
 800e3e6:	b930      	cbnz	r0, 800e3f6 <__mdiff+0x2e>
 800e3e8:	4b3a      	ldr	r3, [pc, #232]	; (800e4d4 <__mdiff+0x10c>)
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	f240 2132 	movw	r1, #562	; 0x232
 800e3f0:	4839      	ldr	r0, [pc, #228]	; (800e4d8 <__mdiff+0x110>)
 800e3f2:	f001 fcc1 	bl	800fd78 <__assert_func>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e3fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e400:	bfa4      	itt	ge
 800e402:	4643      	movge	r3, r8
 800e404:	46a0      	movge	r8, r4
 800e406:	4630      	mov	r0, r6
 800e408:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e40c:	bfa6      	itte	ge
 800e40e:	461c      	movge	r4, r3
 800e410:	2500      	movge	r5, #0
 800e412:	2501      	movlt	r5, #1
 800e414:	f7ff fcf0 	bl	800ddf8 <_Balloc>
 800e418:	b920      	cbnz	r0, 800e424 <__mdiff+0x5c>
 800e41a:	4b2e      	ldr	r3, [pc, #184]	; (800e4d4 <__mdiff+0x10c>)
 800e41c:	4602      	mov	r2, r0
 800e41e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e422:	e7e5      	b.n	800e3f0 <__mdiff+0x28>
 800e424:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e428:	6926      	ldr	r6, [r4, #16]
 800e42a:	60c5      	str	r5, [r0, #12]
 800e42c:	f104 0914 	add.w	r9, r4, #20
 800e430:	f108 0514 	add.w	r5, r8, #20
 800e434:	f100 0e14 	add.w	lr, r0, #20
 800e438:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e43c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e440:	f108 0210 	add.w	r2, r8, #16
 800e444:	46f2      	mov	sl, lr
 800e446:	2100      	movs	r1, #0
 800e448:	f859 3b04 	ldr.w	r3, [r9], #4
 800e44c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e450:	fa1f f883 	uxth.w	r8, r3
 800e454:	fa11 f18b 	uxtah	r1, r1, fp
 800e458:	0c1b      	lsrs	r3, r3, #16
 800e45a:	eba1 0808 	sub.w	r8, r1, r8
 800e45e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e462:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e466:	fa1f f888 	uxth.w	r8, r8
 800e46a:	1419      	asrs	r1, r3, #16
 800e46c:	454e      	cmp	r6, r9
 800e46e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e472:	f84a 3b04 	str.w	r3, [sl], #4
 800e476:	d8e7      	bhi.n	800e448 <__mdiff+0x80>
 800e478:	1b33      	subs	r3, r6, r4
 800e47a:	3b15      	subs	r3, #21
 800e47c:	f023 0303 	bic.w	r3, r3, #3
 800e480:	3304      	adds	r3, #4
 800e482:	3415      	adds	r4, #21
 800e484:	42a6      	cmp	r6, r4
 800e486:	bf38      	it	cc
 800e488:	2304      	movcc	r3, #4
 800e48a:	441d      	add	r5, r3
 800e48c:	4473      	add	r3, lr
 800e48e:	469e      	mov	lr, r3
 800e490:	462e      	mov	r6, r5
 800e492:	4566      	cmp	r6, ip
 800e494:	d30e      	bcc.n	800e4b4 <__mdiff+0xec>
 800e496:	f10c 0203 	add.w	r2, ip, #3
 800e49a:	1b52      	subs	r2, r2, r5
 800e49c:	f022 0203 	bic.w	r2, r2, #3
 800e4a0:	3d03      	subs	r5, #3
 800e4a2:	45ac      	cmp	ip, r5
 800e4a4:	bf38      	it	cc
 800e4a6:	2200      	movcc	r2, #0
 800e4a8:	441a      	add	r2, r3
 800e4aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e4ae:	b17b      	cbz	r3, 800e4d0 <__mdiff+0x108>
 800e4b0:	6107      	str	r7, [r0, #16]
 800e4b2:	e7a3      	b.n	800e3fc <__mdiff+0x34>
 800e4b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800e4b8:	fa11 f288 	uxtah	r2, r1, r8
 800e4bc:	1414      	asrs	r4, r2, #16
 800e4be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e4c2:	b292      	uxth	r2, r2
 800e4c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e4c8:	f84e 2b04 	str.w	r2, [lr], #4
 800e4cc:	1421      	asrs	r1, r4, #16
 800e4ce:	e7e0      	b.n	800e492 <__mdiff+0xca>
 800e4d0:	3f01      	subs	r7, #1
 800e4d2:	e7ea      	b.n	800e4aa <__mdiff+0xe2>
 800e4d4:	08010848 	.word	0x08010848
 800e4d8:	08010938 	.word	0x08010938

0800e4dc <__ulp>:
 800e4dc:	b082      	sub	sp, #8
 800e4de:	ed8d 0b00 	vstr	d0, [sp]
 800e4e2:	9b01      	ldr	r3, [sp, #4]
 800e4e4:	4912      	ldr	r1, [pc, #72]	; (800e530 <__ulp+0x54>)
 800e4e6:	4019      	ands	r1, r3
 800e4e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e4ec:	2900      	cmp	r1, #0
 800e4ee:	dd05      	ble.n	800e4fc <__ulp+0x20>
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	ec43 2b10 	vmov	d0, r2, r3
 800e4f8:	b002      	add	sp, #8
 800e4fa:	4770      	bx	lr
 800e4fc:	4249      	negs	r1, r1
 800e4fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e502:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e506:	f04f 0200 	mov.w	r2, #0
 800e50a:	f04f 0300 	mov.w	r3, #0
 800e50e:	da04      	bge.n	800e51a <__ulp+0x3e>
 800e510:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e514:	fa41 f300 	asr.w	r3, r1, r0
 800e518:	e7ec      	b.n	800e4f4 <__ulp+0x18>
 800e51a:	f1a0 0114 	sub.w	r1, r0, #20
 800e51e:	291e      	cmp	r1, #30
 800e520:	bfda      	itte	le
 800e522:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e526:	fa20 f101 	lsrle.w	r1, r0, r1
 800e52a:	2101      	movgt	r1, #1
 800e52c:	460a      	mov	r2, r1
 800e52e:	e7e1      	b.n	800e4f4 <__ulp+0x18>
 800e530:	7ff00000 	.word	0x7ff00000

0800e534 <__b2d>:
 800e534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e536:	6905      	ldr	r5, [r0, #16]
 800e538:	f100 0714 	add.w	r7, r0, #20
 800e53c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e540:	1f2e      	subs	r6, r5, #4
 800e542:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e546:	4620      	mov	r0, r4
 800e548:	f7ff fd48 	bl	800dfdc <__hi0bits>
 800e54c:	f1c0 0320 	rsb	r3, r0, #32
 800e550:	280a      	cmp	r0, #10
 800e552:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e5d0 <__b2d+0x9c>
 800e556:	600b      	str	r3, [r1, #0]
 800e558:	dc14      	bgt.n	800e584 <__b2d+0x50>
 800e55a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e55e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e562:	42b7      	cmp	r7, r6
 800e564:	ea41 030c 	orr.w	r3, r1, ip
 800e568:	bf34      	ite	cc
 800e56a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e56e:	2100      	movcs	r1, #0
 800e570:	3015      	adds	r0, #21
 800e572:	fa04 f000 	lsl.w	r0, r4, r0
 800e576:	fa21 f10e 	lsr.w	r1, r1, lr
 800e57a:	ea40 0201 	orr.w	r2, r0, r1
 800e57e:	ec43 2b10 	vmov	d0, r2, r3
 800e582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e584:	42b7      	cmp	r7, r6
 800e586:	bf3a      	itte	cc
 800e588:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e58c:	f1a5 0608 	subcc.w	r6, r5, #8
 800e590:	2100      	movcs	r1, #0
 800e592:	380b      	subs	r0, #11
 800e594:	d017      	beq.n	800e5c6 <__b2d+0x92>
 800e596:	f1c0 0c20 	rsb	ip, r0, #32
 800e59a:	fa04 f500 	lsl.w	r5, r4, r0
 800e59e:	42be      	cmp	r6, r7
 800e5a0:	fa21 f40c 	lsr.w	r4, r1, ip
 800e5a4:	ea45 0504 	orr.w	r5, r5, r4
 800e5a8:	bf8c      	ite	hi
 800e5aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e5ae:	2400      	movls	r4, #0
 800e5b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e5b4:	fa01 f000 	lsl.w	r0, r1, r0
 800e5b8:	fa24 f40c 	lsr.w	r4, r4, ip
 800e5bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e5c0:	ea40 0204 	orr.w	r2, r0, r4
 800e5c4:	e7db      	b.n	800e57e <__b2d+0x4a>
 800e5c6:	ea44 030c 	orr.w	r3, r4, ip
 800e5ca:	460a      	mov	r2, r1
 800e5cc:	e7d7      	b.n	800e57e <__b2d+0x4a>
 800e5ce:	bf00      	nop
 800e5d0:	3ff00000 	.word	0x3ff00000

0800e5d4 <__d2b>:
 800e5d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5d8:	4689      	mov	r9, r1
 800e5da:	2101      	movs	r1, #1
 800e5dc:	ec57 6b10 	vmov	r6, r7, d0
 800e5e0:	4690      	mov	r8, r2
 800e5e2:	f7ff fc09 	bl	800ddf8 <_Balloc>
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	b930      	cbnz	r0, 800e5f8 <__d2b+0x24>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	4b25      	ldr	r3, [pc, #148]	; (800e684 <__d2b+0xb0>)
 800e5ee:	4826      	ldr	r0, [pc, #152]	; (800e688 <__d2b+0xb4>)
 800e5f0:	f240 310a 	movw	r1, #778	; 0x30a
 800e5f4:	f001 fbc0 	bl	800fd78 <__assert_func>
 800e5f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e5fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e600:	bb35      	cbnz	r5, 800e650 <__d2b+0x7c>
 800e602:	2e00      	cmp	r6, #0
 800e604:	9301      	str	r3, [sp, #4]
 800e606:	d028      	beq.n	800e65a <__d2b+0x86>
 800e608:	4668      	mov	r0, sp
 800e60a:	9600      	str	r6, [sp, #0]
 800e60c:	f7ff fd06 	bl	800e01c <__lo0bits>
 800e610:	9900      	ldr	r1, [sp, #0]
 800e612:	b300      	cbz	r0, 800e656 <__d2b+0x82>
 800e614:	9a01      	ldr	r2, [sp, #4]
 800e616:	f1c0 0320 	rsb	r3, r0, #32
 800e61a:	fa02 f303 	lsl.w	r3, r2, r3
 800e61e:	430b      	orrs	r3, r1
 800e620:	40c2      	lsrs	r2, r0
 800e622:	6163      	str	r3, [r4, #20]
 800e624:	9201      	str	r2, [sp, #4]
 800e626:	9b01      	ldr	r3, [sp, #4]
 800e628:	61a3      	str	r3, [r4, #24]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	bf14      	ite	ne
 800e62e:	2202      	movne	r2, #2
 800e630:	2201      	moveq	r2, #1
 800e632:	6122      	str	r2, [r4, #16]
 800e634:	b1d5      	cbz	r5, 800e66c <__d2b+0x98>
 800e636:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e63a:	4405      	add	r5, r0
 800e63c:	f8c9 5000 	str.w	r5, [r9]
 800e640:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e644:	f8c8 0000 	str.w	r0, [r8]
 800e648:	4620      	mov	r0, r4
 800e64a:	b003      	add	sp, #12
 800e64c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e654:	e7d5      	b.n	800e602 <__d2b+0x2e>
 800e656:	6161      	str	r1, [r4, #20]
 800e658:	e7e5      	b.n	800e626 <__d2b+0x52>
 800e65a:	a801      	add	r0, sp, #4
 800e65c:	f7ff fcde 	bl	800e01c <__lo0bits>
 800e660:	9b01      	ldr	r3, [sp, #4]
 800e662:	6163      	str	r3, [r4, #20]
 800e664:	2201      	movs	r2, #1
 800e666:	6122      	str	r2, [r4, #16]
 800e668:	3020      	adds	r0, #32
 800e66a:	e7e3      	b.n	800e634 <__d2b+0x60>
 800e66c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e674:	f8c9 0000 	str.w	r0, [r9]
 800e678:	6918      	ldr	r0, [r3, #16]
 800e67a:	f7ff fcaf 	bl	800dfdc <__hi0bits>
 800e67e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e682:	e7df      	b.n	800e644 <__d2b+0x70>
 800e684:	08010848 	.word	0x08010848
 800e688:	08010938 	.word	0x08010938

0800e68c <__ratio>:
 800e68c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e690:	4688      	mov	r8, r1
 800e692:	4669      	mov	r1, sp
 800e694:	4681      	mov	r9, r0
 800e696:	f7ff ff4d 	bl	800e534 <__b2d>
 800e69a:	a901      	add	r1, sp, #4
 800e69c:	4640      	mov	r0, r8
 800e69e:	ec55 4b10 	vmov	r4, r5, d0
 800e6a2:	f7ff ff47 	bl	800e534 <__b2d>
 800e6a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e6ae:	eba3 0c02 	sub.w	ip, r3, r2
 800e6b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e6b6:	1a9b      	subs	r3, r3, r2
 800e6b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e6bc:	ec51 0b10 	vmov	r0, r1, d0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	bfd6      	itet	le
 800e6c4:	460a      	movle	r2, r1
 800e6c6:	462a      	movgt	r2, r5
 800e6c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e6cc:	468b      	mov	fp, r1
 800e6ce:	462f      	mov	r7, r5
 800e6d0:	bfd4      	ite	le
 800e6d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e6d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e6da:	4620      	mov	r0, r4
 800e6dc:	ee10 2a10 	vmov	r2, s0
 800e6e0:	465b      	mov	r3, fp
 800e6e2:	4639      	mov	r1, r7
 800e6e4:	f7f2 f8d2 	bl	800088c <__aeabi_ddiv>
 800e6e8:	ec41 0b10 	vmov	d0, r0, r1
 800e6ec:	b003      	add	sp, #12
 800e6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e6f2 <__copybits>:
 800e6f2:	3901      	subs	r1, #1
 800e6f4:	b570      	push	{r4, r5, r6, lr}
 800e6f6:	1149      	asrs	r1, r1, #5
 800e6f8:	6914      	ldr	r4, [r2, #16]
 800e6fa:	3101      	adds	r1, #1
 800e6fc:	f102 0314 	add.w	r3, r2, #20
 800e700:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e704:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e708:	1f05      	subs	r5, r0, #4
 800e70a:	42a3      	cmp	r3, r4
 800e70c:	d30c      	bcc.n	800e728 <__copybits+0x36>
 800e70e:	1aa3      	subs	r3, r4, r2
 800e710:	3b11      	subs	r3, #17
 800e712:	f023 0303 	bic.w	r3, r3, #3
 800e716:	3211      	adds	r2, #17
 800e718:	42a2      	cmp	r2, r4
 800e71a:	bf88      	it	hi
 800e71c:	2300      	movhi	r3, #0
 800e71e:	4418      	add	r0, r3
 800e720:	2300      	movs	r3, #0
 800e722:	4288      	cmp	r0, r1
 800e724:	d305      	bcc.n	800e732 <__copybits+0x40>
 800e726:	bd70      	pop	{r4, r5, r6, pc}
 800e728:	f853 6b04 	ldr.w	r6, [r3], #4
 800e72c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e730:	e7eb      	b.n	800e70a <__copybits+0x18>
 800e732:	f840 3b04 	str.w	r3, [r0], #4
 800e736:	e7f4      	b.n	800e722 <__copybits+0x30>

0800e738 <__any_on>:
 800e738:	f100 0214 	add.w	r2, r0, #20
 800e73c:	6900      	ldr	r0, [r0, #16]
 800e73e:	114b      	asrs	r3, r1, #5
 800e740:	4298      	cmp	r0, r3
 800e742:	b510      	push	{r4, lr}
 800e744:	db11      	blt.n	800e76a <__any_on+0x32>
 800e746:	dd0a      	ble.n	800e75e <__any_on+0x26>
 800e748:	f011 011f 	ands.w	r1, r1, #31
 800e74c:	d007      	beq.n	800e75e <__any_on+0x26>
 800e74e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e752:	fa24 f001 	lsr.w	r0, r4, r1
 800e756:	fa00 f101 	lsl.w	r1, r0, r1
 800e75a:	428c      	cmp	r4, r1
 800e75c:	d10b      	bne.n	800e776 <__any_on+0x3e>
 800e75e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e762:	4293      	cmp	r3, r2
 800e764:	d803      	bhi.n	800e76e <__any_on+0x36>
 800e766:	2000      	movs	r0, #0
 800e768:	bd10      	pop	{r4, pc}
 800e76a:	4603      	mov	r3, r0
 800e76c:	e7f7      	b.n	800e75e <__any_on+0x26>
 800e76e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e772:	2900      	cmp	r1, #0
 800e774:	d0f5      	beq.n	800e762 <__any_on+0x2a>
 800e776:	2001      	movs	r0, #1
 800e778:	e7f6      	b.n	800e768 <__any_on+0x30>

0800e77a <_calloc_r>:
 800e77a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e77c:	fba1 2402 	umull	r2, r4, r1, r2
 800e780:	b94c      	cbnz	r4, 800e796 <_calloc_r+0x1c>
 800e782:	4611      	mov	r1, r2
 800e784:	9201      	str	r2, [sp, #4]
 800e786:	f000 f87b 	bl	800e880 <_malloc_r>
 800e78a:	9a01      	ldr	r2, [sp, #4]
 800e78c:	4605      	mov	r5, r0
 800e78e:	b930      	cbnz	r0, 800e79e <_calloc_r+0x24>
 800e790:	4628      	mov	r0, r5
 800e792:	b003      	add	sp, #12
 800e794:	bd30      	pop	{r4, r5, pc}
 800e796:	220c      	movs	r2, #12
 800e798:	6002      	str	r2, [r0, #0]
 800e79a:	2500      	movs	r5, #0
 800e79c:	e7f8      	b.n	800e790 <_calloc_r+0x16>
 800e79e:	4621      	mov	r1, r4
 800e7a0:	f7fb fe84 	bl	800a4ac <memset>
 800e7a4:	e7f4      	b.n	800e790 <_calloc_r+0x16>
	...

0800e7a8 <_free_r>:
 800e7a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7aa:	2900      	cmp	r1, #0
 800e7ac:	d044      	beq.n	800e838 <_free_r+0x90>
 800e7ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7b2:	9001      	str	r0, [sp, #4]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f1a1 0404 	sub.w	r4, r1, #4
 800e7ba:	bfb8      	it	lt
 800e7bc:	18e4      	addlt	r4, r4, r3
 800e7be:	f001 fb47 	bl	800fe50 <__malloc_lock>
 800e7c2:	4a1e      	ldr	r2, [pc, #120]	; (800e83c <_free_r+0x94>)
 800e7c4:	9801      	ldr	r0, [sp, #4]
 800e7c6:	6813      	ldr	r3, [r2, #0]
 800e7c8:	b933      	cbnz	r3, 800e7d8 <_free_r+0x30>
 800e7ca:	6063      	str	r3, [r4, #4]
 800e7cc:	6014      	str	r4, [r2, #0]
 800e7ce:	b003      	add	sp, #12
 800e7d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7d4:	f001 bb42 	b.w	800fe5c <__malloc_unlock>
 800e7d8:	42a3      	cmp	r3, r4
 800e7da:	d908      	bls.n	800e7ee <_free_r+0x46>
 800e7dc:	6825      	ldr	r5, [r4, #0]
 800e7de:	1961      	adds	r1, r4, r5
 800e7e0:	428b      	cmp	r3, r1
 800e7e2:	bf01      	itttt	eq
 800e7e4:	6819      	ldreq	r1, [r3, #0]
 800e7e6:	685b      	ldreq	r3, [r3, #4]
 800e7e8:	1949      	addeq	r1, r1, r5
 800e7ea:	6021      	streq	r1, [r4, #0]
 800e7ec:	e7ed      	b.n	800e7ca <_free_r+0x22>
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	b10b      	cbz	r3, 800e7f8 <_free_r+0x50>
 800e7f4:	42a3      	cmp	r3, r4
 800e7f6:	d9fa      	bls.n	800e7ee <_free_r+0x46>
 800e7f8:	6811      	ldr	r1, [r2, #0]
 800e7fa:	1855      	adds	r5, r2, r1
 800e7fc:	42a5      	cmp	r5, r4
 800e7fe:	d10b      	bne.n	800e818 <_free_r+0x70>
 800e800:	6824      	ldr	r4, [r4, #0]
 800e802:	4421      	add	r1, r4
 800e804:	1854      	adds	r4, r2, r1
 800e806:	42a3      	cmp	r3, r4
 800e808:	6011      	str	r1, [r2, #0]
 800e80a:	d1e0      	bne.n	800e7ce <_free_r+0x26>
 800e80c:	681c      	ldr	r4, [r3, #0]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	6053      	str	r3, [r2, #4]
 800e812:	4421      	add	r1, r4
 800e814:	6011      	str	r1, [r2, #0]
 800e816:	e7da      	b.n	800e7ce <_free_r+0x26>
 800e818:	d902      	bls.n	800e820 <_free_r+0x78>
 800e81a:	230c      	movs	r3, #12
 800e81c:	6003      	str	r3, [r0, #0]
 800e81e:	e7d6      	b.n	800e7ce <_free_r+0x26>
 800e820:	6825      	ldr	r5, [r4, #0]
 800e822:	1961      	adds	r1, r4, r5
 800e824:	428b      	cmp	r3, r1
 800e826:	bf04      	itt	eq
 800e828:	6819      	ldreq	r1, [r3, #0]
 800e82a:	685b      	ldreq	r3, [r3, #4]
 800e82c:	6063      	str	r3, [r4, #4]
 800e82e:	bf04      	itt	eq
 800e830:	1949      	addeq	r1, r1, r5
 800e832:	6021      	streq	r1, [r4, #0]
 800e834:	6054      	str	r4, [r2, #4]
 800e836:	e7ca      	b.n	800e7ce <_free_r+0x26>
 800e838:	b003      	add	sp, #12
 800e83a:	bd30      	pop	{r4, r5, pc}
 800e83c:	200004d4 	.word	0x200004d4

0800e840 <sbrk_aligned>:
 800e840:	b570      	push	{r4, r5, r6, lr}
 800e842:	4e0e      	ldr	r6, [pc, #56]	; (800e87c <sbrk_aligned+0x3c>)
 800e844:	460c      	mov	r4, r1
 800e846:	6831      	ldr	r1, [r6, #0]
 800e848:	4605      	mov	r5, r0
 800e84a:	b911      	cbnz	r1, 800e852 <sbrk_aligned+0x12>
 800e84c:	f001 f8e4 	bl	800fa18 <_sbrk_r>
 800e850:	6030      	str	r0, [r6, #0]
 800e852:	4621      	mov	r1, r4
 800e854:	4628      	mov	r0, r5
 800e856:	f001 f8df 	bl	800fa18 <_sbrk_r>
 800e85a:	1c43      	adds	r3, r0, #1
 800e85c:	d00a      	beq.n	800e874 <sbrk_aligned+0x34>
 800e85e:	1cc4      	adds	r4, r0, #3
 800e860:	f024 0403 	bic.w	r4, r4, #3
 800e864:	42a0      	cmp	r0, r4
 800e866:	d007      	beq.n	800e878 <sbrk_aligned+0x38>
 800e868:	1a21      	subs	r1, r4, r0
 800e86a:	4628      	mov	r0, r5
 800e86c:	f001 f8d4 	bl	800fa18 <_sbrk_r>
 800e870:	3001      	adds	r0, #1
 800e872:	d101      	bne.n	800e878 <sbrk_aligned+0x38>
 800e874:	f04f 34ff 	mov.w	r4, #4294967295
 800e878:	4620      	mov	r0, r4
 800e87a:	bd70      	pop	{r4, r5, r6, pc}
 800e87c:	200004d8 	.word	0x200004d8

0800e880 <_malloc_r>:
 800e880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e884:	1ccd      	adds	r5, r1, #3
 800e886:	f025 0503 	bic.w	r5, r5, #3
 800e88a:	3508      	adds	r5, #8
 800e88c:	2d0c      	cmp	r5, #12
 800e88e:	bf38      	it	cc
 800e890:	250c      	movcc	r5, #12
 800e892:	2d00      	cmp	r5, #0
 800e894:	4607      	mov	r7, r0
 800e896:	db01      	blt.n	800e89c <_malloc_r+0x1c>
 800e898:	42a9      	cmp	r1, r5
 800e89a:	d905      	bls.n	800e8a8 <_malloc_r+0x28>
 800e89c:	230c      	movs	r3, #12
 800e89e:	603b      	str	r3, [r7, #0]
 800e8a0:	2600      	movs	r6, #0
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8a8:	4e2e      	ldr	r6, [pc, #184]	; (800e964 <_malloc_r+0xe4>)
 800e8aa:	f001 fad1 	bl	800fe50 <__malloc_lock>
 800e8ae:	6833      	ldr	r3, [r6, #0]
 800e8b0:	461c      	mov	r4, r3
 800e8b2:	bb34      	cbnz	r4, 800e902 <_malloc_r+0x82>
 800e8b4:	4629      	mov	r1, r5
 800e8b6:	4638      	mov	r0, r7
 800e8b8:	f7ff ffc2 	bl	800e840 <sbrk_aligned>
 800e8bc:	1c43      	adds	r3, r0, #1
 800e8be:	4604      	mov	r4, r0
 800e8c0:	d14d      	bne.n	800e95e <_malloc_r+0xde>
 800e8c2:	6834      	ldr	r4, [r6, #0]
 800e8c4:	4626      	mov	r6, r4
 800e8c6:	2e00      	cmp	r6, #0
 800e8c8:	d140      	bne.n	800e94c <_malloc_r+0xcc>
 800e8ca:	6823      	ldr	r3, [r4, #0]
 800e8cc:	4631      	mov	r1, r6
 800e8ce:	4638      	mov	r0, r7
 800e8d0:	eb04 0803 	add.w	r8, r4, r3
 800e8d4:	f001 f8a0 	bl	800fa18 <_sbrk_r>
 800e8d8:	4580      	cmp	r8, r0
 800e8da:	d13a      	bne.n	800e952 <_malloc_r+0xd2>
 800e8dc:	6821      	ldr	r1, [r4, #0]
 800e8de:	3503      	adds	r5, #3
 800e8e0:	1a6d      	subs	r5, r5, r1
 800e8e2:	f025 0503 	bic.w	r5, r5, #3
 800e8e6:	3508      	adds	r5, #8
 800e8e8:	2d0c      	cmp	r5, #12
 800e8ea:	bf38      	it	cc
 800e8ec:	250c      	movcc	r5, #12
 800e8ee:	4629      	mov	r1, r5
 800e8f0:	4638      	mov	r0, r7
 800e8f2:	f7ff ffa5 	bl	800e840 <sbrk_aligned>
 800e8f6:	3001      	adds	r0, #1
 800e8f8:	d02b      	beq.n	800e952 <_malloc_r+0xd2>
 800e8fa:	6823      	ldr	r3, [r4, #0]
 800e8fc:	442b      	add	r3, r5
 800e8fe:	6023      	str	r3, [r4, #0]
 800e900:	e00e      	b.n	800e920 <_malloc_r+0xa0>
 800e902:	6822      	ldr	r2, [r4, #0]
 800e904:	1b52      	subs	r2, r2, r5
 800e906:	d41e      	bmi.n	800e946 <_malloc_r+0xc6>
 800e908:	2a0b      	cmp	r2, #11
 800e90a:	d916      	bls.n	800e93a <_malloc_r+0xba>
 800e90c:	1961      	adds	r1, r4, r5
 800e90e:	42a3      	cmp	r3, r4
 800e910:	6025      	str	r5, [r4, #0]
 800e912:	bf18      	it	ne
 800e914:	6059      	strne	r1, [r3, #4]
 800e916:	6863      	ldr	r3, [r4, #4]
 800e918:	bf08      	it	eq
 800e91a:	6031      	streq	r1, [r6, #0]
 800e91c:	5162      	str	r2, [r4, r5]
 800e91e:	604b      	str	r3, [r1, #4]
 800e920:	4638      	mov	r0, r7
 800e922:	f104 060b 	add.w	r6, r4, #11
 800e926:	f001 fa99 	bl	800fe5c <__malloc_unlock>
 800e92a:	f026 0607 	bic.w	r6, r6, #7
 800e92e:	1d23      	adds	r3, r4, #4
 800e930:	1af2      	subs	r2, r6, r3
 800e932:	d0b6      	beq.n	800e8a2 <_malloc_r+0x22>
 800e934:	1b9b      	subs	r3, r3, r6
 800e936:	50a3      	str	r3, [r4, r2]
 800e938:	e7b3      	b.n	800e8a2 <_malloc_r+0x22>
 800e93a:	6862      	ldr	r2, [r4, #4]
 800e93c:	42a3      	cmp	r3, r4
 800e93e:	bf0c      	ite	eq
 800e940:	6032      	streq	r2, [r6, #0]
 800e942:	605a      	strne	r2, [r3, #4]
 800e944:	e7ec      	b.n	800e920 <_malloc_r+0xa0>
 800e946:	4623      	mov	r3, r4
 800e948:	6864      	ldr	r4, [r4, #4]
 800e94a:	e7b2      	b.n	800e8b2 <_malloc_r+0x32>
 800e94c:	4634      	mov	r4, r6
 800e94e:	6876      	ldr	r6, [r6, #4]
 800e950:	e7b9      	b.n	800e8c6 <_malloc_r+0x46>
 800e952:	230c      	movs	r3, #12
 800e954:	603b      	str	r3, [r7, #0]
 800e956:	4638      	mov	r0, r7
 800e958:	f001 fa80 	bl	800fe5c <__malloc_unlock>
 800e95c:	e7a1      	b.n	800e8a2 <_malloc_r+0x22>
 800e95e:	6025      	str	r5, [r4, #0]
 800e960:	e7de      	b.n	800e920 <_malloc_r+0xa0>
 800e962:	bf00      	nop
 800e964:	200004d4 	.word	0x200004d4

0800e968 <__ssputs_r>:
 800e968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e96c:	688e      	ldr	r6, [r1, #8]
 800e96e:	429e      	cmp	r6, r3
 800e970:	4682      	mov	sl, r0
 800e972:	460c      	mov	r4, r1
 800e974:	4690      	mov	r8, r2
 800e976:	461f      	mov	r7, r3
 800e978:	d838      	bhi.n	800e9ec <__ssputs_r+0x84>
 800e97a:	898a      	ldrh	r2, [r1, #12]
 800e97c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e980:	d032      	beq.n	800e9e8 <__ssputs_r+0x80>
 800e982:	6825      	ldr	r5, [r4, #0]
 800e984:	6909      	ldr	r1, [r1, #16]
 800e986:	eba5 0901 	sub.w	r9, r5, r1
 800e98a:	6965      	ldr	r5, [r4, #20]
 800e98c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e994:	3301      	adds	r3, #1
 800e996:	444b      	add	r3, r9
 800e998:	106d      	asrs	r5, r5, #1
 800e99a:	429d      	cmp	r5, r3
 800e99c:	bf38      	it	cc
 800e99e:	461d      	movcc	r5, r3
 800e9a0:	0553      	lsls	r3, r2, #21
 800e9a2:	d531      	bpl.n	800ea08 <__ssputs_r+0xa0>
 800e9a4:	4629      	mov	r1, r5
 800e9a6:	f7ff ff6b 	bl	800e880 <_malloc_r>
 800e9aa:	4606      	mov	r6, r0
 800e9ac:	b950      	cbnz	r0, 800e9c4 <__ssputs_r+0x5c>
 800e9ae:	230c      	movs	r3, #12
 800e9b0:	f8ca 3000 	str.w	r3, [sl]
 800e9b4:	89a3      	ldrh	r3, [r4, #12]
 800e9b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9ba:	81a3      	strh	r3, [r4, #12]
 800e9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c4:	6921      	ldr	r1, [r4, #16]
 800e9c6:	464a      	mov	r2, r9
 800e9c8:	f7ff fa08 	bl	800dddc <memcpy>
 800e9cc:	89a3      	ldrh	r3, [r4, #12]
 800e9ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9d6:	81a3      	strh	r3, [r4, #12]
 800e9d8:	6126      	str	r6, [r4, #16]
 800e9da:	6165      	str	r5, [r4, #20]
 800e9dc:	444e      	add	r6, r9
 800e9de:	eba5 0509 	sub.w	r5, r5, r9
 800e9e2:	6026      	str	r6, [r4, #0]
 800e9e4:	60a5      	str	r5, [r4, #8]
 800e9e6:	463e      	mov	r6, r7
 800e9e8:	42be      	cmp	r6, r7
 800e9ea:	d900      	bls.n	800e9ee <__ssputs_r+0x86>
 800e9ec:	463e      	mov	r6, r7
 800e9ee:	6820      	ldr	r0, [r4, #0]
 800e9f0:	4632      	mov	r2, r6
 800e9f2:	4641      	mov	r1, r8
 800e9f4:	f001 fa12 	bl	800fe1c <memmove>
 800e9f8:	68a3      	ldr	r3, [r4, #8]
 800e9fa:	1b9b      	subs	r3, r3, r6
 800e9fc:	60a3      	str	r3, [r4, #8]
 800e9fe:	6823      	ldr	r3, [r4, #0]
 800ea00:	4433      	add	r3, r6
 800ea02:	6023      	str	r3, [r4, #0]
 800ea04:	2000      	movs	r0, #0
 800ea06:	e7db      	b.n	800e9c0 <__ssputs_r+0x58>
 800ea08:	462a      	mov	r2, r5
 800ea0a:	f001 fa2d 	bl	800fe68 <_realloc_r>
 800ea0e:	4606      	mov	r6, r0
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d1e1      	bne.n	800e9d8 <__ssputs_r+0x70>
 800ea14:	6921      	ldr	r1, [r4, #16]
 800ea16:	4650      	mov	r0, sl
 800ea18:	f7ff fec6 	bl	800e7a8 <_free_r>
 800ea1c:	e7c7      	b.n	800e9ae <__ssputs_r+0x46>
	...

0800ea20 <_svfiprintf_r>:
 800ea20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea24:	4698      	mov	r8, r3
 800ea26:	898b      	ldrh	r3, [r1, #12]
 800ea28:	061b      	lsls	r3, r3, #24
 800ea2a:	b09d      	sub	sp, #116	; 0x74
 800ea2c:	4607      	mov	r7, r0
 800ea2e:	460d      	mov	r5, r1
 800ea30:	4614      	mov	r4, r2
 800ea32:	d50e      	bpl.n	800ea52 <_svfiprintf_r+0x32>
 800ea34:	690b      	ldr	r3, [r1, #16]
 800ea36:	b963      	cbnz	r3, 800ea52 <_svfiprintf_r+0x32>
 800ea38:	2140      	movs	r1, #64	; 0x40
 800ea3a:	f7ff ff21 	bl	800e880 <_malloc_r>
 800ea3e:	6028      	str	r0, [r5, #0]
 800ea40:	6128      	str	r0, [r5, #16]
 800ea42:	b920      	cbnz	r0, 800ea4e <_svfiprintf_r+0x2e>
 800ea44:	230c      	movs	r3, #12
 800ea46:	603b      	str	r3, [r7, #0]
 800ea48:	f04f 30ff 	mov.w	r0, #4294967295
 800ea4c:	e0d1      	b.n	800ebf2 <_svfiprintf_r+0x1d2>
 800ea4e:	2340      	movs	r3, #64	; 0x40
 800ea50:	616b      	str	r3, [r5, #20]
 800ea52:	2300      	movs	r3, #0
 800ea54:	9309      	str	r3, [sp, #36]	; 0x24
 800ea56:	2320      	movs	r3, #32
 800ea58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea60:	2330      	movs	r3, #48	; 0x30
 800ea62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec0c <_svfiprintf_r+0x1ec>
 800ea66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea6a:	f04f 0901 	mov.w	r9, #1
 800ea6e:	4623      	mov	r3, r4
 800ea70:	469a      	mov	sl, r3
 800ea72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea76:	b10a      	cbz	r2, 800ea7c <_svfiprintf_r+0x5c>
 800ea78:	2a25      	cmp	r2, #37	; 0x25
 800ea7a:	d1f9      	bne.n	800ea70 <_svfiprintf_r+0x50>
 800ea7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ea80:	d00b      	beq.n	800ea9a <_svfiprintf_r+0x7a>
 800ea82:	465b      	mov	r3, fp
 800ea84:	4622      	mov	r2, r4
 800ea86:	4629      	mov	r1, r5
 800ea88:	4638      	mov	r0, r7
 800ea8a:	f7ff ff6d 	bl	800e968 <__ssputs_r>
 800ea8e:	3001      	adds	r0, #1
 800ea90:	f000 80aa 	beq.w	800ebe8 <_svfiprintf_r+0x1c8>
 800ea94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea96:	445a      	add	r2, fp
 800ea98:	9209      	str	r2, [sp, #36]	; 0x24
 800ea9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 80a2 	beq.w	800ebe8 <_svfiprintf_r+0x1c8>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	f04f 32ff 	mov.w	r2, #4294967295
 800eaaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eaae:	f10a 0a01 	add.w	sl, sl, #1
 800eab2:	9304      	str	r3, [sp, #16]
 800eab4:	9307      	str	r3, [sp, #28]
 800eab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaba:	931a      	str	r3, [sp, #104]	; 0x68
 800eabc:	4654      	mov	r4, sl
 800eabe:	2205      	movs	r2, #5
 800eac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eac4:	4851      	ldr	r0, [pc, #324]	; (800ec0c <_svfiprintf_r+0x1ec>)
 800eac6:	f7f1 fbab 	bl	8000220 <memchr>
 800eaca:	9a04      	ldr	r2, [sp, #16]
 800eacc:	b9d8      	cbnz	r0, 800eb06 <_svfiprintf_r+0xe6>
 800eace:	06d0      	lsls	r0, r2, #27
 800ead0:	bf44      	itt	mi
 800ead2:	2320      	movmi	r3, #32
 800ead4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ead8:	0711      	lsls	r1, r2, #28
 800eada:	bf44      	itt	mi
 800eadc:	232b      	movmi	r3, #43	; 0x2b
 800eade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eae2:	f89a 3000 	ldrb.w	r3, [sl]
 800eae6:	2b2a      	cmp	r3, #42	; 0x2a
 800eae8:	d015      	beq.n	800eb16 <_svfiprintf_r+0xf6>
 800eaea:	9a07      	ldr	r2, [sp, #28]
 800eaec:	4654      	mov	r4, sl
 800eaee:	2000      	movs	r0, #0
 800eaf0:	f04f 0c0a 	mov.w	ip, #10
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eafa:	3b30      	subs	r3, #48	; 0x30
 800eafc:	2b09      	cmp	r3, #9
 800eafe:	d94e      	bls.n	800eb9e <_svfiprintf_r+0x17e>
 800eb00:	b1b0      	cbz	r0, 800eb30 <_svfiprintf_r+0x110>
 800eb02:	9207      	str	r2, [sp, #28]
 800eb04:	e014      	b.n	800eb30 <_svfiprintf_r+0x110>
 800eb06:	eba0 0308 	sub.w	r3, r0, r8
 800eb0a:	fa09 f303 	lsl.w	r3, r9, r3
 800eb0e:	4313      	orrs	r3, r2
 800eb10:	9304      	str	r3, [sp, #16]
 800eb12:	46a2      	mov	sl, r4
 800eb14:	e7d2      	b.n	800eabc <_svfiprintf_r+0x9c>
 800eb16:	9b03      	ldr	r3, [sp, #12]
 800eb18:	1d19      	adds	r1, r3, #4
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	9103      	str	r1, [sp, #12]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	bfbb      	ittet	lt
 800eb22:	425b      	neglt	r3, r3
 800eb24:	f042 0202 	orrlt.w	r2, r2, #2
 800eb28:	9307      	strge	r3, [sp, #28]
 800eb2a:	9307      	strlt	r3, [sp, #28]
 800eb2c:	bfb8      	it	lt
 800eb2e:	9204      	strlt	r2, [sp, #16]
 800eb30:	7823      	ldrb	r3, [r4, #0]
 800eb32:	2b2e      	cmp	r3, #46	; 0x2e
 800eb34:	d10c      	bne.n	800eb50 <_svfiprintf_r+0x130>
 800eb36:	7863      	ldrb	r3, [r4, #1]
 800eb38:	2b2a      	cmp	r3, #42	; 0x2a
 800eb3a:	d135      	bne.n	800eba8 <_svfiprintf_r+0x188>
 800eb3c:	9b03      	ldr	r3, [sp, #12]
 800eb3e:	1d1a      	adds	r2, r3, #4
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	9203      	str	r2, [sp, #12]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	bfb8      	it	lt
 800eb48:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb4c:	3402      	adds	r4, #2
 800eb4e:	9305      	str	r3, [sp, #20]
 800eb50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec1c <_svfiprintf_r+0x1fc>
 800eb54:	7821      	ldrb	r1, [r4, #0]
 800eb56:	2203      	movs	r2, #3
 800eb58:	4650      	mov	r0, sl
 800eb5a:	f7f1 fb61 	bl	8000220 <memchr>
 800eb5e:	b140      	cbz	r0, 800eb72 <_svfiprintf_r+0x152>
 800eb60:	2340      	movs	r3, #64	; 0x40
 800eb62:	eba0 000a 	sub.w	r0, r0, sl
 800eb66:	fa03 f000 	lsl.w	r0, r3, r0
 800eb6a:	9b04      	ldr	r3, [sp, #16]
 800eb6c:	4303      	orrs	r3, r0
 800eb6e:	3401      	adds	r4, #1
 800eb70:	9304      	str	r3, [sp, #16]
 800eb72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb76:	4826      	ldr	r0, [pc, #152]	; (800ec10 <_svfiprintf_r+0x1f0>)
 800eb78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb7c:	2206      	movs	r2, #6
 800eb7e:	f7f1 fb4f 	bl	8000220 <memchr>
 800eb82:	2800      	cmp	r0, #0
 800eb84:	d038      	beq.n	800ebf8 <_svfiprintf_r+0x1d8>
 800eb86:	4b23      	ldr	r3, [pc, #140]	; (800ec14 <_svfiprintf_r+0x1f4>)
 800eb88:	bb1b      	cbnz	r3, 800ebd2 <_svfiprintf_r+0x1b2>
 800eb8a:	9b03      	ldr	r3, [sp, #12]
 800eb8c:	3307      	adds	r3, #7
 800eb8e:	f023 0307 	bic.w	r3, r3, #7
 800eb92:	3308      	adds	r3, #8
 800eb94:	9303      	str	r3, [sp, #12]
 800eb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb98:	4433      	add	r3, r6
 800eb9a:	9309      	str	r3, [sp, #36]	; 0x24
 800eb9c:	e767      	b.n	800ea6e <_svfiprintf_r+0x4e>
 800eb9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eba2:	460c      	mov	r4, r1
 800eba4:	2001      	movs	r0, #1
 800eba6:	e7a5      	b.n	800eaf4 <_svfiprintf_r+0xd4>
 800eba8:	2300      	movs	r3, #0
 800ebaa:	3401      	adds	r4, #1
 800ebac:	9305      	str	r3, [sp, #20]
 800ebae:	4619      	mov	r1, r3
 800ebb0:	f04f 0c0a 	mov.w	ip, #10
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebba:	3a30      	subs	r2, #48	; 0x30
 800ebbc:	2a09      	cmp	r2, #9
 800ebbe:	d903      	bls.n	800ebc8 <_svfiprintf_r+0x1a8>
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d0c5      	beq.n	800eb50 <_svfiprintf_r+0x130>
 800ebc4:	9105      	str	r1, [sp, #20]
 800ebc6:	e7c3      	b.n	800eb50 <_svfiprintf_r+0x130>
 800ebc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebcc:	4604      	mov	r4, r0
 800ebce:	2301      	movs	r3, #1
 800ebd0:	e7f0      	b.n	800ebb4 <_svfiprintf_r+0x194>
 800ebd2:	ab03      	add	r3, sp, #12
 800ebd4:	9300      	str	r3, [sp, #0]
 800ebd6:	462a      	mov	r2, r5
 800ebd8:	4b0f      	ldr	r3, [pc, #60]	; (800ec18 <_svfiprintf_r+0x1f8>)
 800ebda:	a904      	add	r1, sp, #16
 800ebdc:	4638      	mov	r0, r7
 800ebde:	f7fb fd0d 	bl	800a5fc <_printf_float>
 800ebe2:	1c42      	adds	r2, r0, #1
 800ebe4:	4606      	mov	r6, r0
 800ebe6:	d1d6      	bne.n	800eb96 <_svfiprintf_r+0x176>
 800ebe8:	89ab      	ldrh	r3, [r5, #12]
 800ebea:	065b      	lsls	r3, r3, #25
 800ebec:	f53f af2c 	bmi.w	800ea48 <_svfiprintf_r+0x28>
 800ebf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebf2:	b01d      	add	sp, #116	; 0x74
 800ebf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf8:	ab03      	add	r3, sp, #12
 800ebfa:	9300      	str	r3, [sp, #0]
 800ebfc:	462a      	mov	r2, r5
 800ebfe:	4b06      	ldr	r3, [pc, #24]	; (800ec18 <_svfiprintf_r+0x1f8>)
 800ec00:	a904      	add	r1, sp, #16
 800ec02:	4638      	mov	r0, r7
 800ec04:	f7fb ff9e 	bl	800ab44 <_printf_i>
 800ec08:	e7eb      	b.n	800ebe2 <_svfiprintf_r+0x1c2>
 800ec0a:	bf00      	nop
 800ec0c:	08010a94 	.word	0x08010a94
 800ec10:	08010a9e 	.word	0x08010a9e
 800ec14:	0800a5fd 	.word	0x0800a5fd
 800ec18:	0800e969 	.word	0x0800e969
 800ec1c:	08010a9a 	.word	0x08010a9a

0800ec20 <_sungetc_r>:
 800ec20:	b538      	push	{r3, r4, r5, lr}
 800ec22:	1c4b      	adds	r3, r1, #1
 800ec24:	4614      	mov	r4, r2
 800ec26:	d103      	bne.n	800ec30 <_sungetc_r+0x10>
 800ec28:	f04f 35ff 	mov.w	r5, #4294967295
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	bd38      	pop	{r3, r4, r5, pc}
 800ec30:	8993      	ldrh	r3, [r2, #12]
 800ec32:	f023 0320 	bic.w	r3, r3, #32
 800ec36:	8193      	strh	r3, [r2, #12]
 800ec38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec3a:	6852      	ldr	r2, [r2, #4]
 800ec3c:	b2cd      	uxtb	r5, r1
 800ec3e:	b18b      	cbz	r3, 800ec64 <_sungetc_r+0x44>
 800ec40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec42:	4293      	cmp	r3, r2
 800ec44:	dd08      	ble.n	800ec58 <_sungetc_r+0x38>
 800ec46:	6823      	ldr	r3, [r4, #0]
 800ec48:	1e5a      	subs	r2, r3, #1
 800ec4a:	6022      	str	r2, [r4, #0]
 800ec4c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ec50:	6863      	ldr	r3, [r4, #4]
 800ec52:	3301      	adds	r3, #1
 800ec54:	6063      	str	r3, [r4, #4]
 800ec56:	e7e9      	b.n	800ec2c <_sungetc_r+0xc>
 800ec58:	4621      	mov	r1, r4
 800ec5a:	f000 ffad 	bl	800fbb8 <__submore>
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	d0f1      	beq.n	800ec46 <_sungetc_r+0x26>
 800ec62:	e7e1      	b.n	800ec28 <_sungetc_r+0x8>
 800ec64:	6921      	ldr	r1, [r4, #16]
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	b151      	cbz	r1, 800ec80 <_sungetc_r+0x60>
 800ec6a:	4299      	cmp	r1, r3
 800ec6c:	d208      	bcs.n	800ec80 <_sungetc_r+0x60>
 800ec6e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ec72:	42a9      	cmp	r1, r5
 800ec74:	d104      	bne.n	800ec80 <_sungetc_r+0x60>
 800ec76:	3b01      	subs	r3, #1
 800ec78:	3201      	adds	r2, #1
 800ec7a:	6023      	str	r3, [r4, #0]
 800ec7c:	6062      	str	r2, [r4, #4]
 800ec7e:	e7d5      	b.n	800ec2c <_sungetc_r+0xc>
 800ec80:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ec84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec88:	6363      	str	r3, [r4, #52]	; 0x34
 800ec8a:	2303      	movs	r3, #3
 800ec8c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ec8e:	4623      	mov	r3, r4
 800ec90:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ec94:	6023      	str	r3, [r4, #0]
 800ec96:	2301      	movs	r3, #1
 800ec98:	e7dc      	b.n	800ec54 <_sungetc_r+0x34>

0800ec9a <__ssrefill_r>:
 800ec9a:	b510      	push	{r4, lr}
 800ec9c:	460c      	mov	r4, r1
 800ec9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800eca0:	b169      	cbz	r1, 800ecbe <__ssrefill_r+0x24>
 800eca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eca6:	4299      	cmp	r1, r3
 800eca8:	d001      	beq.n	800ecae <__ssrefill_r+0x14>
 800ecaa:	f7ff fd7d 	bl	800e7a8 <_free_r>
 800ecae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ecb0:	6063      	str	r3, [r4, #4]
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	6360      	str	r0, [r4, #52]	; 0x34
 800ecb6:	b113      	cbz	r3, 800ecbe <__ssrefill_r+0x24>
 800ecb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ecba:	6023      	str	r3, [r4, #0]
 800ecbc:	bd10      	pop	{r4, pc}
 800ecbe:	6923      	ldr	r3, [r4, #16]
 800ecc0:	6023      	str	r3, [r4, #0]
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	6063      	str	r3, [r4, #4]
 800ecc6:	89a3      	ldrh	r3, [r4, #12]
 800ecc8:	f043 0320 	orr.w	r3, r3, #32
 800eccc:	81a3      	strh	r3, [r4, #12]
 800ecce:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd2:	e7f3      	b.n	800ecbc <__ssrefill_r+0x22>

0800ecd4 <__ssvfiscanf_r>:
 800ecd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd8:	460c      	mov	r4, r1
 800ecda:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ecde:	2100      	movs	r1, #0
 800ece0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ece4:	49a6      	ldr	r1, [pc, #664]	; (800ef80 <__ssvfiscanf_r+0x2ac>)
 800ece6:	91a0      	str	r1, [sp, #640]	; 0x280
 800ece8:	f10d 0804 	add.w	r8, sp, #4
 800ecec:	49a5      	ldr	r1, [pc, #660]	; (800ef84 <__ssvfiscanf_r+0x2b0>)
 800ecee:	4fa6      	ldr	r7, [pc, #664]	; (800ef88 <__ssvfiscanf_r+0x2b4>)
 800ecf0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ef8c <__ssvfiscanf_r+0x2b8>
 800ecf4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ecf8:	4606      	mov	r6, r0
 800ecfa:	91a1      	str	r1, [sp, #644]	; 0x284
 800ecfc:	9300      	str	r3, [sp, #0]
 800ecfe:	7813      	ldrb	r3, [r2, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f000 815a 	beq.w	800efba <__ssvfiscanf_r+0x2e6>
 800ed06:	5dd9      	ldrb	r1, [r3, r7]
 800ed08:	f011 0108 	ands.w	r1, r1, #8
 800ed0c:	f102 0501 	add.w	r5, r2, #1
 800ed10:	d019      	beq.n	800ed46 <__ssvfiscanf_r+0x72>
 800ed12:	6863      	ldr	r3, [r4, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	dd0f      	ble.n	800ed38 <__ssvfiscanf_r+0x64>
 800ed18:	6823      	ldr	r3, [r4, #0]
 800ed1a:	781a      	ldrb	r2, [r3, #0]
 800ed1c:	5cba      	ldrb	r2, [r7, r2]
 800ed1e:	0712      	lsls	r2, r2, #28
 800ed20:	d401      	bmi.n	800ed26 <__ssvfiscanf_r+0x52>
 800ed22:	462a      	mov	r2, r5
 800ed24:	e7eb      	b.n	800ecfe <__ssvfiscanf_r+0x2a>
 800ed26:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ed28:	3201      	adds	r2, #1
 800ed2a:	9245      	str	r2, [sp, #276]	; 0x114
 800ed2c:	6862      	ldr	r2, [r4, #4]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	3a01      	subs	r2, #1
 800ed32:	6062      	str	r2, [r4, #4]
 800ed34:	6023      	str	r3, [r4, #0]
 800ed36:	e7ec      	b.n	800ed12 <__ssvfiscanf_r+0x3e>
 800ed38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ed3a:	4621      	mov	r1, r4
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	4798      	blx	r3
 800ed40:	2800      	cmp	r0, #0
 800ed42:	d0e9      	beq.n	800ed18 <__ssvfiscanf_r+0x44>
 800ed44:	e7ed      	b.n	800ed22 <__ssvfiscanf_r+0x4e>
 800ed46:	2b25      	cmp	r3, #37	; 0x25
 800ed48:	d012      	beq.n	800ed70 <__ssvfiscanf_r+0x9c>
 800ed4a:	469a      	mov	sl, r3
 800ed4c:	6863      	ldr	r3, [r4, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	f340 8091 	ble.w	800ee76 <__ssvfiscanf_r+0x1a2>
 800ed54:	6822      	ldr	r2, [r4, #0]
 800ed56:	7813      	ldrb	r3, [r2, #0]
 800ed58:	4553      	cmp	r3, sl
 800ed5a:	f040 812e 	bne.w	800efba <__ssvfiscanf_r+0x2e6>
 800ed5e:	6863      	ldr	r3, [r4, #4]
 800ed60:	3b01      	subs	r3, #1
 800ed62:	6063      	str	r3, [r4, #4]
 800ed64:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ed66:	3201      	adds	r2, #1
 800ed68:	3301      	adds	r3, #1
 800ed6a:	6022      	str	r2, [r4, #0]
 800ed6c:	9345      	str	r3, [sp, #276]	; 0x114
 800ed6e:	e7d8      	b.n	800ed22 <__ssvfiscanf_r+0x4e>
 800ed70:	9141      	str	r1, [sp, #260]	; 0x104
 800ed72:	9143      	str	r1, [sp, #268]	; 0x10c
 800ed74:	7853      	ldrb	r3, [r2, #1]
 800ed76:	2b2a      	cmp	r3, #42	; 0x2a
 800ed78:	bf02      	ittt	eq
 800ed7a:	2310      	moveq	r3, #16
 800ed7c:	1c95      	addeq	r5, r2, #2
 800ed7e:	9341      	streq	r3, [sp, #260]	; 0x104
 800ed80:	220a      	movs	r2, #10
 800ed82:	46aa      	mov	sl, r5
 800ed84:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ed88:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ed8c:	2b09      	cmp	r3, #9
 800ed8e:	d91d      	bls.n	800edcc <__ssvfiscanf_r+0xf8>
 800ed90:	487e      	ldr	r0, [pc, #504]	; (800ef8c <__ssvfiscanf_r+0x2b8>)
 800ed92:	2203      	movs	r2, #3
 800ed94:	f7f1 fa44 	bl	8000220 <memchr>
 800ed98:	b140      	cbz	r0, 800edac <__ssvfiscanf_r+0xd8>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	eba0 0009 	sub.w	r0, r0, r9
 800eda0:	fa03 f000 	lsl.w	r0, r3, r0
 800eda4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800eda6:	4318      	orrs	r0, r3
 800eda8:	9041      	str	r0, [sp, #260]	; 0x104
 800edaa:	4655      	mov	r5, sl
 800edac:	f815 3b01 	ldrb.w	r3, [r5], #1
 800edb0:	2b78      	cmp	r3, #120	; 0x78
 800edb2:	d806      	bhi.n	800edc2 <__ssvfiscanf_r+0xee>
 800edb4:	2b57      	cmp	r3, #87	; 0x57
 800edb6:	d810      	bhi.n	800edda <__ssvfiscanf_r+0x106>
 800edb8:	2b25      	cmp	r3, #37	; 0x25
 800edba:	d0c6      	beq.n	800ed4a <__ssvfiscanf_r+0x76>
 800edbc:	d856      	bhi.n	800ee6c <__ssvfiscanf_r+0x198>
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d064      	beq.n	800ee8c <__ssvfiscanf_r+0x1b8>
 800edc2:	2303      	movs	r3, #3
 800edc4:	9347      	str	r3, [sp, #284]	; 0x11c
 800edc6:	230a      	movs	r3, #10
 800edc8:	9342      	str	r3, [sp, #264]	; 0x108
 800edca:	e071      	b.n	800eeb0 <__ssvfiscanf_r+0x1dc>
 800edcc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800edce:	fb02 1103 	mla	r1, r2, r3, r1
 800edd2:	3930      	subs	r1, #48	; 0x30
 800edd4:	9143      	str	r1, [sp, #268]	; 0x10c
 800edd6:	4655      	mov	r5, sl
 800edd8:	e7d3      	b.n	800ed82 <__ssvfiscanf_r+0xae>
 800edda:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800edde:	2a20      	cmp	r2, #32
 800ede0:	d8ef      	bhi.n	800edc2 <__ssvfiscanf_r+0xee>
 800ede2:	a101      	add	r1, pc, #4	; (adr r1, 800ede8 <__ssvfiscanf_r+0x114>)
 800ede4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ede8:	0800ee9b 	.word	0x0800ee9b
 800edec:	0800edc3 	.word	0x0800edc3
 800edf0:	0800edc3 	.word	0x0800edc3
 800edf4:	0800eef9 	.word	0x0800eef9
 800edf8:	0800edc3 	.word	0x0800edc3
 800edfc:	0800edc3 	.word	0x0800edc3
 800ee00:	0800edc3 	.word	0x0800edc3
 800ee04:	0800edc3 	.word	0x0800edc3
 800ee08:	0800edc3 	.word	0x0800edc3
 800ee0c:	0800edc3 	.word	0x0800edc3
 800ee10:	0800edc3 	.word	0x0800edc3
 800ee14:	0800ef0f 	.word	0x0800ef0f
 800ee18:	0800eee5 	.word	0x0800eee5
 800ee1c:	0800ee73 	.word	0x0800ee73
 800ee20:	0800ee73 	.word	0x0800ee73
 800ee24:	0800ee73 	.word	0x0800ee73
 800ee28:	0800edc3 	.word	0x0800edc3
 800ee2c:	0800eee9 	.word	0x0800eee9
 800ee30:	0800edc3 	.word	0x0800edc3
 800ee34:	0800edc3 	.word	0x0800edc3
 800ee38:	0800edc3 	.word	0x0800edc3
 800ee3c:	0800edc3 	.word	0x0800edc3
 800ee40:	0800ef1f 	.word	0x0800ef1f
 800ee44:	0800eef1 	.word	0x0800eef1
 800ee48:	0800ee93 	.word	0x0800ee93
 800ee4c:	0800edc3 	.word	0x0800edc3
 800ee50:	0800edc3 	.word	0x0800edc3
 800ee54:	0800ef1b 	.word	0x0800ef1b
 800ee58:	0800edc3 	.word	0x0800edc3
 800ee5c:	0800eee5 	.word	0x0800eee5
 800ee60:	0800edc3 	.word	0x0800edc3
 800ee64:	0800edc3 	.word	0x0800edc3
 800ee68:	0800ee9b 	.word	0x0800ee9b
 800ee6c:	3b45      	subs	r3, #69	; 0x45
 800ee6e:	2b02      	cmp	r3, #2
 800ee70:	d8a7      	bhi.n	800edc2 <__ssvfiscanf_r+0xee>
 800ee72:	2305      	movs	r3, #5
 800ee74:	e01b      	b.n	800eeae <__ssvfiscanf_r+0x1da>
 800ee76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ee78:	4621      	mov	r1, r4
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	4798      	blx	r3
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	f43f af68 	beq.w	800ed54 <__ssvfiscanf_r+0x80>
 800ee84:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ee86:	2800      	cmp	r0, #0
 800ee88:	f040 808d 	bne.w	800efa6 <__ssvfiscanf_r+0x2d2>
 800ee8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee90:	e08f      	b.n	800efb2 <__ssvfiscanf_r+0x2de>
 800ee92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ee94:	f042 0220 	orr.w	r2, r2, #32
 800ee98:	9241      	str	r2, [sp, #260]	; 0x104
 800ee9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ee9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eea0:	9241      	str	r2, [sp, #260]	; 0x104
 800eea2:	2210      	movs	r2, #16
 800eea4:	2b6f      	cmp	r3, #111	; 0x6f
 800eea6:	9242      	str	r2, [sp, #264]	; 0x108
 800eea8:	bf34      	ite	cc
 800eeaa:	2303      	movcc	r3, #3
 800eeac:	2304      	movcs	r3, #4
 800eeae:	9347      	str	r3, [sp, #284]	; 0x11c
 800eeb0:	6863      	ldr	r3, [r4, #4]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	dd42      	ble.n	800ef3c <__ssvfiscanf_r+0x268>
 800eeb6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800eeb8:	0659      	lsls	r1, r3, #25
 800eeba:	d404      	bmi.n	800eec6 <__ssvfiscanf_r+0x1f2>
 800eebc:	6823      	ldr	r3, [r4, #0]
 800eebe:	781a      	ldrb	r2, [r3, #0]
 800eec0:	5cba      	ldrb	r2, [r7, r2]
 800eec2:	0712      	lsls	r2, r2, #28
 800eec4:	d441      	bmi.n	800ef4a <__ssvfiscanf_r+0x276>
 800eec6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800eec8:	2b02      	cmp	r3, #2
 800eeca:	dc50      	bgt.n	800ef6e <__ssvfiscanf_r+0x29a>
 800eecc:	466b      	mov	r3, sp
 800eece:	4622      	mov	r2, r4
 800eed0:	a941      	add	r1, sp, #260	; 0x104
 800eed2:	4630      	mov	r0, r6
 800eed4:	f000 fb9e 	bl	800f614 <_scanf_chars>
 800eed8:	2801      	cmp	r0, #1
 800eeda:	d06e      	beq.n	800efba <__ssvfiscanf_r+0x2e6>
 800eedc:	2802      	cmp	r0, #2
 800eede:	f47f af20 	bne.w	800ed22 <__ssvfiscanf_r+0x4e>
 800eee2:	e7cf      	b.n	800ee84 <__ssvfiscanf_r+0x1b0>
 800eee4:	220a      	movs	r2, #10
 800eee6:	e7dd      	b.n	800eea4 <__ssvfiscanf_r+0x1d0>
 800eee8:	2300      	movs	r3, #0
 800eeea:	9342      	str	r3, [sp, #264]	; 0x108
 800eeec:	2303      	movs	r3, #3
 800eeee:	e7de      	b.n	800eeae <__ssvfiscanf_r+0x1da>
 800eef0:	2308      	movs	r3, #8
 800eef2:	9342      	str	r3, [sp, #264]	; 0x108
 800eef4:	2304      	movs	r3, #4
 800eef6:	e7da      	b.n	800eeae <__ssvfiscanf_r+0x1da>
 800eef8:	4629      	mov	r1, r5
 800eefa:	4640      	mov	r0, r8
 800eefc:	f000 fd9c 	bl	800fa38 <__sccl>
 800ef00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ef02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef06:	9341      	str	r3, [sp, #260]	; 0x104
 800ef08:	4605      	mov	r5, r0
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	e7cf      	b.n	800eeae <__ssvfiscanf_r+0x1da>
 800ef0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ef10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef14:	9341      	str	r3, [sp, #260]	; 0x104
 800ef16:	2300      	movs	r3, #0
 800ef18:	e7c9      	b.n	800eeae <__ssvfiscanf_r+0x1da>
 800ef1a:	2302      	movs	r3, #2
 800ef1c:	e7c7      	b.n	800eeae <__ssvfiscanf_r+0x1da>
 800ef1e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ef20:	06c3      	lsls	r3, r0, #27
 800ef22:	f53f aefe 	bmi.w	800ed22 <__ssvfiscanf_r+0x4e>
 800ef26:	9b00      	ldr	r3, [sp, #0]
 800ef28:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ef2a:	1d19      	adds	r1, r3, #4
 800ef2c:	9100      	str	r1, [sp, #0]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f010 0f01 	tst.w	r0, #1
 800ef34:	bf14      	ite	ne
 800ef36:	801a      	strhne	r2, [r3, #0]
 800ef38:	601a      	streq	r2, [r3, #0]
 800ef3a:	e6f2      	b.n	800ed22 <__ssvfiscanf_r+0x4e>
 800ef3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ef3e:	4621      	mov	r1, r4
 800ef40:	4630      	mov	r0, r6
 800ef42:	4798      	blx	r3
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d0b6      	beq.n	800eeb6 <__ssvfiscanf_r+0x1e2>
 800ef48:	e79c      	b.n	800ee84 <__ssvfiscanf_r+0x1b0>
 800ef4a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ef4c:	3201      	adds	r2, #1
 800ef4e:	9245      	str	r2, [sp, #276]	; 0x114
 800ef50:	6862      	ldr	r2, [r4, #4]
 800ef52:	3a01      	subs	r2, #1
 800ef54:	2a00      	cmp	r2, #0
 800ef56:	6062      	str	r2, [r4, #4]
 800ef58:	dd02      	ble.n	800ef60 <__ssvfiscanf_r+0x28c>
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	e7ad      	b.n	800eebc <__ssvfiscanf_r+0x1e8>
 800ef60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ef62:	4621      	mov	r1, r4
 800ef64:	4630      	mov	r0, r6
 800ef66:	4798      	blx	r3
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	d0a7      	beq.n	800eebc <__ssvfiscanf_r+0x1e8>
 800ef6c:	e78a      	b.n	800ee84 <__ssvfiscanf_r+0x1b0>
 800ef6e:	2b04      	cmp	r3, #4
 800ef70:	dc0e      	bgt.n	800ef90 <__ssvfiscanf_r+0x2bc>
 800ef72:	466b      	mov	r3, sp
 800ef74:	4622      	mov	r2, r4
 800ef76:	a941      	add	r1, sp, #260	; 0x104
 800ef78:	4630      	mov	r0, r6
 800ef7a:	f000 fba5 	bl	800f6c8 <_scanf_i>
 800ef7e:	e7ab      	b.n	800eed8 <__ssvfiscanf_r+0x204>
 800ef80:	0800ec21 	.word	0x0800ec21
 800ef84:	0800ec9b 	.word	0x0800ec9b
 800ef88:	080106c9 	.word	0x080106c9
 800ef8c:	08010a9a 	.word	0x08010a9a
 800ef90:	4b0b      	ldr	r3, [pc, #44]	; (800efc0 <__ssvfiscanf_r+0x2ec>)
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f43f aec5 	beq.w	800ed22 <__ssvfiscanf_r+0x4e>
 800ef98:	466b      	mov	r3, sp
 800ef9a:	4622      	mov	r2, r4
 800ef9c:	a941      	add	r1, sp, #260	; 0x104
 800ef9e:	4630      	mov	r0, r6
 800efa0:	f7fb fef6 	bl	800ad90 <_scanf_float>
 800efa4:	e798      	b.n	800eed8 <__ssvfiscanf_r+0x204>
 800efa6:	89a3      	ldrh	r3, [r4, #12]
 800efa8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800efac:	bf18      	it	ne
 800efae:	f04f 30ff 	movne.w	r0, #4294967295
 800efb2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800efb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efba:	9844      	ldr	r0, [sp, #272]	; 0x110
 800efbc:	e7f9      	b.n	800efb2 <__ssvfiscanf_r+0x2de>
 800efbe:	bf00      	nop
 800efc0:	0800ad91 	.word	0x0800ad91

0800efc4 <__sfputc_r>:
 800efc4:	6893      	ldr	r3, [r2, #8]
 800efc6:	3b01      	subs	r3, #1
 800efc8:	2b00      	cmp	r3, #0
 800efca:	b410      	push	{r4}
 800efcc:	6093      	str	r3, [r2, #8]
 800efce:	da08      	bge.n	800efe2 <__sfputc_r+0x1e>
 800efd0:	6994      	ldr	r4, [r2, #24]
 800efd2:	42a3      	cmp	r3, r4
 800efd4:	db01      	blt.n	800efda <__sfputc_r+0x16>
 800efd6:	290a      	cmp	r1, #10
 800efd8:	d103      	bne.n	800efe2 <__sfputc_r+0x1e>
 800efda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efde:	f7fd b9af 	b.w	800c340 <__swbuf_r>
 800efe2:	6813      	ldr	r3, [r2, #0]
 800efe4:	1c58      	adds	r0, r3, #1
 800efe6:	6010      	str	r0, [r2, #0]
 800efe8:	7019      	strb	r1, [r3, #0]
 800efea:	4608      	mov	r0, r1
 800efec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eff0:	4770      	bx	lr

0800eff2 <__sfputs_r>:
 800eff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eff4:	4606      	mov	r6, r0
 800eff6:	460f      	mov	r7, r1
 800eff8:	4614      	mov	r4, r2
 800effa:	18d5      	adds	r5, r2, r3
 800effc:	42ac      	cmp	r4, r5
 800effe:	d101      	bne.n	800f004 <__sfputs_r+0x12>
 800f000:	2000      	movs	r0, #0
 800f002:	e007      	b.n	800f014 <__sfputs_r+0x22>
 800f004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f008:	463a      	mov	r2, r7
 800f00a:	4630      	mov	r0, r6
 800f00c:	f7ff ffda 	bl	800efc4 <__sfputc_r>
 800f010:	1c43      	adds	r3, r0, #1
 800f012:	d1f3      	bne.n	800effc <__sfputs_r+0xa>
 800f014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f018 <_vfiprintf_r>:
 800f018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f01c:	460d      	mov	r5, r1
 800f01e:	b09d      	sub	sp, #116	; 0x74
 800f020:	4614      	mov	r4, r2
 800f022:	4698      	mov	r8, r3
 800f024:	4606      	mov	r6, r0
 800f026:	b118      	cbz	r0, 800f030 <_vfiprintf_r+0x18>
 800f028:	6983      	ldr	r3, [r0, #24]
 800f02a:	b90b      	cbnz	r3, 800f030 <_vfiprintf_r+0x18>
 800f02c:	f7fe fa12 	bl	800d454 <__sinit>
 800f030:	4b89      	ldr	r3, [pc, #548]	; (800f258 <_vfiprintf_r+0x240>)
 800f032:	429d      	cmp	r5, r3
 800f034:	d11b      	bne.n	800f06e <_vfiprintf_r+0x56>
 800f036:	6875      	ldr	r5, [r6, #4]
 800f038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f03a:	07d9      	lsls	r1, r3, #31
 800f03c:	d405      	bmi.n	800f04a <_vfiprintf_r+0x32>
 800f03e:	89ab      	ldrh	r3, [r5, #12]
 800f040:	059a      	lsls	r2, r3, #22
 800f042:	d402      	bmi.n	800f04a <_vfiprintf_r+0x32>
 800f044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f046:	f7fe fe34 	bl	800dcb2 <__retarget_lock_acquire_recursive>
 800f04a:	89ab      	ldrh	r3, [r5, #12]
 800f04c:	071b      	lsls	r3, r3, #28
 800f04e:	d501      	bpl.n	800f054 <_vfiprintf_r+0x3c>
 800f050:	692b      	ldr	r3, [r5, #16]
 800f052:	b9eb      	cbnz	r3, 800f090 <_vfiprintf_r+0x78>
 800f054:	4629      	mov	r1, r5
 800f056:	4630      	mov	r0, r6
 800f058:	f7fd f9d6 	bl	800c408 <__swsetup_r>
 800f05c:	b1c0      	cbz	r0, 800f090 <_vfiprintf_r+0x78>
 800f05e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f060:	07dc      	lsls	r4, r3, #31
 800f062:	d50e      	bpl.n	800f082 <_vfiprintf_r+0x6a>
 800f064:	f04f 30ff 	mov.w	r0, #4294967295
 800f068:	b01d      	add	sp, #116	; 0x74
 800f06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f06e:	4b7b      	ldr	r3, [pc, #492]	; (800f25c <_vfiprintf_r+0x244>)
 800f070:	429d      	cmp	r5, r3
 800f072:	d101      	bne.n	800f078 <_vfiprintf_r+0x60>
 800f074:	68b5      	ldr	r5, [r6, #8]
 800f076:	e7df      	b.n	800f038 <_vfiprintf_r+0x20>
 800f078:	4b79      	ldr	r3, [pc, #484]	; (800f260 <_vfiprintf_r+0x248>)
 800f07a:	429d      	cmp	r5, r3
 800f07c:	bf08      	it	eq
 800f07e:	68f5      	ldreq	r5, [r6, #12]
 800f080:	e7da      	b.n	800f038 <_vfiprintf_r+0x20>
 800f082:	89ab      	ldrh	r3, [r5, #12]
 800f084:	0598      	lsls	r0, r3, #22
 800f086:	d4ed      	bmi.n	800f064 <_vfiprintf_r+0x4c>
 800f088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f08a:	f7fe fe13 	bl	800dcb4 <__retarget_lock_release_recursive>
 800f08e:	e7e9      	b.n	800f064 <_vfiprintf_r+0x4c>
 800f090:	2300      	movs	r3, #0
 800f092:	9309      	str	r3, [sp, #36]	; 0x24
 800f094:	2320      	movs	r3, #32
 800f096:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f09a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f09e:	2330      	movs	r3, #48	; 0x30
 800f0a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f264 <_vfiprintf_r+0x24c>
 800f0a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0a8:	f04f 0901 	mov.w	r9, #1
 800f0ac:	4623      	mov	r3, r4
 800f0ae:	469a      	mov	sl, r3
 800f0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0b4:	b10a      	cbz	r2, 800f0ba <_vfiprintf_r+0xa2>
 800f0b6:	2a25      	cmp	r2, #37	; 0x25
 800f0b8:	d1f9      	bne.n	800f0ae <_vfiprintf_r+0x96>
 800f0ba:	ebba 0b04 	subs.w	fp, sl, r4
 800f0be:	d00b      	beq.n	800f0d8 <_vfiprintf_r+0xc0>
 800f0c0:	465b      	mov	r3, fp
 800f0c2:	4622      	mov	r2, r4
 800f0c4:	4629      	mov	r1, r5
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	f7ff ff93 	bl	800eff2 <__sfputs_r>
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	f000 80aa 	beq.w	800f226 <_vfiprintf_r+0x20e>
 800f0d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0d4:	445a      	add	r2, fp
 800f0d6:	9209      	str	r2, [sp, #36]	; 0x24
 800f0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	f000 80a2 	beq.w	800f226 <_vfiprintf_r+0x20e>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f0e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0ec:	f10a 0a01 	add.w	sl, sl, #1
 800f0f0:	9304      	str	r3, [sp, #16]
 800f0f2:	9307      	str	r3, [sp, #28]
 800f0f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0f8:	931a      	str	r3, [sp, #104]	; 0x68
 800f0fa:	4654      	mov	r4, sl
 800f0fc:	2205      	movs	r2, #5
 800f0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f102:	4858      	ldr	r0, [pc, #352]	; (800f264 <_vfiprintf_r+0x24c>)
 800f104:	f7f1 f88c 	bl	8000220 <memchr>
 800f108:	9a04      	ldr	r2, [sp, #16]
 800f10a:	b9d8      	cbnz	r0, 800f144 <_vfiprintf_r+0x12c>
 800f10c:	06d1      	lsls	r1, r2, #27
 800f10e:	bf44      	itt	mi
 800f110:	2320      	movmi	r3, #32
 800f112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f116:	0713      	lsls	r3, r2, #28
 800f118:	bf44      	itt	mi
 800f11a:	232b      	movmi	r3, #43	; 0x2b
 800f11c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f120:	f89a 3000 	ldrb.w	r3, [sl]
 800f124:	2b2a      	cmp	r3, #42	; 0x2a
 800f126:	d015      	beq.n	800f154 <_vfiprintf_r+0x13c>
 800f128:	9a07      	ldr	r2, [sp, #28]
 800f12a:	4654      	mov	r4, sl
 800f12c:	2000      	movs	r0, #0
 800f12e:	f04f 0c0a 	mov.w	ip, #10
 800f132:	4621      	mov	r1, r4
 800f134:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f138:	3b30      	subs	r3, #48	; 0x30
 800f13a:	2b09      	cmp	r3, #9
 800f13c:	d94e      	bls.n	800f1dc <_vfiprintf_r+0x1c4>
 800f13e:	b1b0      	cbz	r0, 800f16e <_vfiprintf_r+0x156>
 800f140:	9207      	str	r2, [sp, #28]
 800f142:	e014      	b.n	800f16e <_vfiprintf_r+0x156>
 800f144:	eba0 0308 	sub.w	r3, r0, r8
 800f148:	fa09 f303 	lsl.w	r3, r9, r3
 800f14c:	4313      	orrs	r3, r2
 800f14e:	9304      	str	r3, [sp, #16]
 800f150:	46a2      	mov	sl, r4
 800f152:	e7d2      	b.n	800f0fa <_vfiprintf_r+0xe2>
 800f154:	9b03      	ldr	r3, [sp, #12]
 800f156:	1d19      	adds	r1, r3, #4
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	9103      	str	r1, [sp, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	bfbb      	ittet	lt
 800f160:	425b      	neglt	r3, r3
 800f162:	f042 0202 	orrlt.w	r2, r2, #2
 800f166:	9307      	strge	r3, [sp, #28]
 800f168:	9307      	strlt	r3, [sp, #28]
 800f16a:	bfb8      	it	lt
 800f16c:	9204      	strlt	r2, [sp, #16]
 800f16e:	7823      	ldrb	r3, [r4, #0]
 800f170:	2b2e      	cmp	r3, #46	; 0x2e
 800f172:	d10c      	bne.n	800f18e <_vfiprintf_r+0x176>
 800f174:	7863      	ldrb	r3, [r4, #1]
 800f176:	2b2a      	cmp	r3, #42	; 0x2a
 800f178:	d135      	bne.n	800f1e6 <_vfiprintf_r+0x1ce>
 800f17a:	9b03      	ldr	r3, [sp, #12]
 800f17c:	1d1a      	adds	r2, r3, #4
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	9203      	str	r2, [sp, #12]
 800f182:	2b00      	cmp	r3, #0
 800f184:	bfb8      	it	lt
 800f186:	f04f 33ff 	movlt.w	r3, #4294967295
 800f18a:	3402      	adds	r4, #2
 800f18c:	9305      	str	r3, [sp, #20]
 800f18e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f274 <_vfiprintf_r+0x25c>
 800f192:	7821      	ldrb	r1, [r4, #0]
 800f194:	2203      	movs	r2, #3
 800f196:	4650      	mov	r0, sl
 800f198:	f7f1 f842 	bl	8000220 <memchr>
 800f19c:	b140      	cbz	r0, 800f1b0 <_vfiprintf_r+0x198>
 800f19e:	2340      	movs	r3, #64	; 0x40
 800f1a0:	eba0 000a 	sub.w	r0, r0, sl
 800f1a4:	fa03 f000 	lsl.w	r0, r3, r0
 800f1a8:	9b04      	ldr	r3, [sp, #16]
 800f1aa:	4303      	orrs	r3, r0
 800f1ac:	3401      	adds	r4, #1
 800f1ae:	9304      	str	r3, [sp, #16]
 800f1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1b4:	482c      	ldr	r0, [pc, #176]	; (800f268 <_vfiprintf_r+0x250>)
 800f1b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1ba:	2206      	movs	r2, #6
 800f1bc:	f7f1 f830 	bl	8000220 <memchr>
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	d03f      	beq.n	800f244 <_vfiprintf_r+0x22c>
 800f1c4:	4b29      	ldr	r3, [pc, #164]	; (800f26c <_vfiprintf_r+0x254>)
 800f1c6:	bb1b      	cbnz	r3, 800f210 <_vfiprintf_r+0x1f8>
 800f1c8:	9b03      	ldr	r3, [sp, #12]
 800f1ca:	3307      	adds	r3, #7
 800f1cc:	f023 0307 	bic.w	r3, r3, #7
 800f1d0:	3308      	adds	r3, #8
 800f1d2:	9303      	str	r3, [sp, #12]
 800f1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1d6:	443b      	add	r3, r7
 800f1d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f1da:	e767      	b.n	800f0ac <_vfiprintf_r+0x94>
 800f1dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1e0:	460c      	mov	r4, r1
 800f1e2:	2001      	movs	r0, #1
 800f1e4:	e7a5      	b.n	800f132 <_vfiprintf_r+0x11a>
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	3401      	adds	r4, #1
 800f1ea:	9305      	str	r3, [sp, #20]
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	f04f 0c0a 	mov.w	ip, #10
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1f8:	3a30      	subs	r2, #48	; 0x30
 800f1fa:	2a09      	cmp	r2, #9
 800f1fc:	d903      	bls.n	800f206 <_vfiprintf_r+0x1ee>
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d0c5      	beq.n	800f18e <_vfiprintf_r+0x176>
 800f202:	9105      	str	r1, [sp, #20]
 800f204:	e7c3      	b.n	800f18e <_vfiprintf_r+0x176>
 800f206:	fb0c 2101 	mla	r1, ip, r1, r2
 800f20a:	4604      	mov	r4, r0
 800f20c:	2301      	movs	r3, #1
 800f20e:	e7f0      	b.n	800f1f2 <_vfiprintf_r+0x1da>
 800f210:	ab03      	add	r3, sp, #12
 800f212:	9300      	str	r3, [sp, #0]
 800f214:	462a      	mov	r2, r5
 800f216:	4b16      	ldr	r3, [pc, #88]	; (800f270 <_vfiprintf_r+0x258>)
 800f218:	a904      	add	r1, sp, #16
 800f21a:	4630      	mov	r0, r6
 800f21c:	f7fb f9ee 	bl	800a5fc <_printf_float>
 800f220:	4607      	mov	r7, r0
 800f222:	1c78      	adds	r0, r7, #1
 800f224:	d1d6      	bne.n	800f1d4 <_vfiprintf_r+0x1bc>
 800f226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f228:	07d9      	lsls	r1, r3, #31
 800f22a:	d405      	bmi.n	800f238 <_vfiprintf_r+0x220>
 800f22c:	89ab      	ldrh	r3, [r5, #12]
 800f22e:	059a      	lsls	r2, r3, #22
 800f230:	d402      	bmi.n	800f238 <_vfiprintf_r+0x220>
 800f232:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f234:	f7fe fd3e 	bl	800dcb4 <__retarget_lock_release_recursive>
 800f238:	89ab      	ldrh	r3, [r5, #12]
 800f23a:	065b      	lsls	r3, r3, #25
 800f23c:	f53f af12 	bmi.w	800f064 <_vfiprintf_r+0x4c>
 800f240:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f242:	e711      	b.n	800f068 <_vfiprintf_r+0x50>
 800f244:	ab03      	add	r3, sp, #12
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	462a      	mov	r2, r5
 800f24a:	4b09      	ldr	r3, [pc, #36]	; (800f270 <_vfiprintf_r+0x258>)
 800f24c:	a904      	add	r1, sp, #16
 800f24e:	4630      	mov	r0, r6
 800f250:	f7fb fc78 	bl	800ab44 <_printf_i>
 800f254:	e7e4      	b.n	800f220 <_vfiprintf_r+0x208>
 800f256:	bf00      	nop
 800f258:	0801087c 	.word	0x0801087c
 800f25c:	0801089c 	.word	0x0801089c
 800f260:	0801085c 	.word	0x0801085c
 800f264:	08010a94 	.word	0x08010a94
 800f268:	08010a9e 	.word	0x08010a9e
 800f26c:	0800a5fd 	.word	0x0800a5fd
 800f270:	0800eff3 	.word	0x0800eff3
 800f274:	08010a9a 	.word	0x08010a9a

0800f278 <__svfiscanf_r>:
 800f278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f27c:	461d      	mov	r5, r3
 800f27e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f280:	07df      	lsls	r7, r3, #31
 800f282:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f286:	4606      	mov	r6, r0
 800f288:	460c      	mov	r4, r1
 800f28a:	4692      	mov	sl, r2
 800f28c:	d405      	bmi.n	800f29a <__svfiscanf_r+0x22>
 800f28e:	898b      	ldrh	r3, [r1, #12]
 800f290:	0598      	lsls	r0, r3, #22
 800f292:	d402      	bmi.n	800f29a <__svfiscanf_r+0x22>
 800f294:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800f296:	f7fe fd0c 	bl	800dcb2 <__retarget_lock_acquire_recursive>
 800f29a:	2300      	movs	r3, #0
 800f29c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800f2a0:	4ba6      	ldr	r3, [pc, #664]	; (800f53c <__svfiscanf_r+0x2c4>)
 800f2a2:	93a0      	str	r3, [sp, #640]	; 0x280
 800f2a4:	f10d 0804 	add.w	r8, sp, #4
 800f2a8:	4ba5      	ldr	r3, [pc, #660]	; (800f540 <__svfiscanf_r+0x2c8>)
 800f2aa:	4fa6      	ldr	r7, [pc, #664]	; (800f544 <__svfiscanf_r+0x2cc>)
 800f2ac:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f548 <__svfiscanf_r+0x2d0>
 800f2b0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f2b4:	93a1      	str	r3, [sp, #644]	; 0x284
 800f2b6:	9500      	str	r5, [sp, #0]
 800f2b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f000 8173 	beq.w	800f5a8 <__svfiscanf_r+0x330>
 800f2c2:	5dd9      	ldrb	r1, [r3, r7]
 800f2c4:	f011 0108 	ands.w	r1, r1, #8
 800f2c8:	f10a 0501 	add.w	r5, sl, #1
 800f2cc:	d019      	beq.n	800f302 <__svfiscanf_r+0x8a>
 800f2ce:	6863      	ldr	r3, [r4, #4]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	dd0f      	ble.n	800f2f4 <__svfiscanf_r+0x7c>
 800f2d4:	6823      	ldr	r3, [r4, #0]
 800f2d6:	781a      	ldrb	r2, [r3, #0]
 800f2d8:	5cba      	ldrb	r2, [r7, r2]
 800f2da:	0711      	lsls	r1, r2, #28
 800f2dc:	d401      	bmi.n	800f2e2 <__svfiscanf_r+0x6a>
 800f2de:	46aa      	mov	sl, r5
 800f2e0:	e7ea      	b.n	800f2b8 <__svfiscanf_r+0x40>
 800f2e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f2e4:	3201      	adds	r2, #1
 800f2e6:	9245      	str	r2, [sp, #276]	; 0x114
 800f2e8:	6862      	ldr	r2, [r4, #4]
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	3a01      	subs	r2, #1
 800f2ee:	6062      	str	r2, [r4, #4]
 800f2f0:	6023      	str	r3, [r4, #0]
 800f2f2:	e7ec      	b.n	800f2ce <__svfiscanf_r+0x56>
 800f2f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f2f6:	4621      	mov	r1, r4
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	4798      	blx	r3
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	d0e9      	beq.n	800f2d4 <__svfiscanf_r+0x5c>
 800f300:	e7ed      	b.n	800f2de <__svfiscanf_r+0x66>
 800f302:	2b25      	cmp	r3, #37	; 0x25
 800f304:	d012      	beq.n	800f32c <__svfiscanf_r+0xb4>
 800f306:	469a      	mov	sl, r3
 800f308:	6863      	ldr	r3, [r4, #4]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	f340 8095 	ble.w	800f43a <__svfiscanf_r+0x1c2>
 800f310:	6822      	ldr	r2, [r4, #0]
 800f312:	7813      	ldrb	r3, [r2, #0]
 800f314:	4553      	cmp	r3, sl
 800f316:	f040 8147 	bne.w	800f5a8 <__svfiscanf_r+0x330>
 800f31a:	6863      	ldr	r3, [r4, #4]
 800f31c:	3b01      	subs	r3, #1
 800f31e:	6063      	str	r3, [r4, #4]
 800f320:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f322:	3201      	adds	r2, #1
 800f324:	3301      	adds	r3, #1
 800f326:	6022      	str	r2, [r4, #0]
 800f328:	9345      	str	r3, [sp, #276]	; 0x114
 800f32a:	e7d8      	b.n	800f2de <__svfiscanf_r+0x66>
 800f32c:	9141      	str	r1, [sp, #260]	; 0x104
 800f32e:	9143      	str	r1, [sp, #268]	; 0x10c
 800f330:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800f334:	2b2a      	cmp	r3, #42	; 0x2a
 800f336:	bf02      	ittt	eq
 800f338:	2310      	moveq	r3, #16
 800f33a:	9341      	streq	r3, [sp, #260]	; 0x104
 800f33c:	f10a 0502 	addeq.w	r5, sl, #2
 800f340:	220a      	movs	r2, #10
 800f342:	46aa      	mov	sl, r5
 800f344:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f348:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f34c:	2b09      	cmp	r3, #9
 800f34e:	d91e      	bls.n	800f38e <__svfiscanf_r+0x116>
 800f350:	487d      	ldr	r0, [pc, #500]	; (800f548 <__svfiscanf_r+0x2d0>)
 800f352:	2203      	movs	r2, #3
 800f354:	f7f0 ff64 	bl	8000220 <memchr>
 800f358:	b140      	cbz	r0, 800f36c <__svfiscanf_r+0xf4>
 800f35a:	2301      	movs	r3, #1
 800f35c:	eba0 0009 	sub.w	r0, r0, r9
 800f360:	fa03 f000 	lsl.w	r0, r3, r0
 800f364:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f366:	4318      	orrs	r0, r3
 800f368:	9041      	str	r0, [sp, #260]	; 0x104
 800f36a:	4655      	mov	r5, sl
 800f36c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f370:	2b78      	cmp	r3, #120	; 0x78
 800f372:	d807      	bhi.n	800f384 <__svfiscanf_r+0x10c>
 800f374:	2b57      	cmp	r3, #87	; 0x57
 800f376:	d811      	bhi.n	800f39c <__svfiscanf_r+0x124>
 800f378:	2b25      	cmp	r3, #37	; 0x25
 800f37a:	d0c4      	beq.n	800f306 <__svfiscanf_r+0x8e>
 800f37c:	d858      	bhi.n	800f430 <__svfiscanf_r+0x1b8>
 800f37e:	2b00      	cmp	r3, #0
 800f380:	f000 80c8 	beq.w	800f514 <__svfiscanf_r+0x29c>
 800f384:	2303      	movs	r3, #3
 800f386:	9347      	str	r3, [sp, #284]	; 0x11c
 800f388:	230a      	movs	r3, #10
 800f38a:	9342      	str	r3, [sp, #264]	; 0x108
 800f38c:	e07c      	b.n	800f488 <__svfiscanf_r+0x210>
 800f38e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f390:	fb02 1103 	mla	r1, r2, r3, r1
 800f394:	3930      	subs	r1, #48	; 0x30
 800f396:	9143      	str	r1, [sp, #268]	; 0x10c
 800f398:	4655      	mov	r5, sl
 800f39a:	e7d2      	b.n	800f342 <__svfiscanf_r+0xca>
 800f39c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f3a0:	2a20      	cmp	r2, #32
 800f3a2:	d8ef      	bhi.n	800f384 <__svfiscanf_r+0x10c>
 800f3a4:	a101      	add	r1, pc, #4	; (adr r1, 800f3ac <__svfiscanf_r+0x134>)
 800f3a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f3aa:	bf00      	nop
 800f3ac:	0800f473 	.word	0x0800f473
 800f3b0:	0800f385 	.word	0x0800f385
 800f3b4:	0800f385 	.word	0x0800f385
 800f3b8:	0800f4d1 	.word	0x0800f4d1
 800f3bc:	0800f385 	.word	0x0800f385
 800f3c0:	0800f385 	.word	0x0800f385
 800f3c4:	0800f385 	.word	0x0800f385
 800f3c8:	0800f385 	.word	0x0800f385
 800f3cc:	0800f385 	.word	0x0800f385
 800f3d0:	0800f385 	.word	0x0800f385
 800f3d4:	0800f385 	.word	0x0800f385
 800f3d8:	0800f4e7 	.word	0x0800f4e7
 800f3dc:	0800f4bd 	.word	0x0800f4bd
 800f3e0:	0800f437 	.word	0x0800f437
 800f3e4:	0800f437 	.word	0x0800f437
 800f3e8:	0800f437 	.word	0x0800f437
 800f3ec:	0800f385 	.word	0x0800f385
 800f3f0:	0800f4c1 	.word	0x0800f4c1
 800f3f4:	0800f385 	.word	0x0800f385
 800f3f8:	0800f385 	.word	0x0800f385
 800f3fc:	0800f385 	.word	0x0800f385
 800f400:	0800f385 	.word	0x0800f385
 800f404:	0800f4f7 	.word	0x0800f4f7
 800f408:	0800f4c9 	.word	0x0800f4c9
 800f40c:	0800f46b 	.word	0x0800f46b
 800f410:	0800f385 	.word	0x0800f385
 800f414:	0800f385 	.word	0x0800f385
 800f418:	0800f4f3 	.word	0x0800f4f3
 800f41c:	0800f385 	.word	0x0800f385
 800f420:	0800f4bd 	.word	0x0800f4bd
 800f424:	0800f385 	.word	0x0800f385
 800f428:	0800f385 	.word	0x0800f385
 800f42c:	0800f473 	.word	0x0800f473
 800f430:	3b45      	subs	r3, #69	; 0x45
 800f432:	2b02      	cmp	r3, #2
 800f434:	d8a6      	bhi.n	800f384 <__svfiscanf_r+0x10c>
 800f436:	2305      	movs	r3, #5
 800f438:	e025      	b.n	800f486 <__svfiscanf_r+0x20e>
 800f43a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f43c:	4621      	mov	r1, r4
 800f43e:	4630      	mov	r0, r6
 800f440:	4798      	blx	r3
 800f442:	2800      	cmp	r0, #0
 800f444:	f43f af64 	beq.w	800f310 <__svfiscanf_r+0x98>
 800f448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f44a:	07da      	lsls	r2, r3, #31
 800f44c:	f140 80a4 	bpl.w	800f598 <__svfiscanf_r+0x320>
 800f450:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f452:	2800      	cmp	r0, #0
 800f454:	d067      	beq.n	800f526 <__svfiscanf_r+0x2ae>
 800f456:	89a3      	ldrh	r3, [r4, #12]
 800f458:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f45c:	bf18      	it	ne
 800f45e:	f04f 30ff 	movne.w	r0, #4294967295
 800f462:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f46a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f46c:	f042 0220 	orr.w	r2, r2, #32
 800f470:	9241      	str	r2, [sp, #260]	; 0x104
 800f472:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f478:	9241      	str	r2, [sp, #260]	; 0x104
 800f47a:	2210      	movs	r2, #16
 800f47c:	2b6f      	cmp	r3, #111	; 0x6f
 800f47e:	9242      	str	r2, [sp, #264]	; 0x108
 800f480:	bf34      	ite	cc
 800f482:	2303      	movcc	r3, #3
 800f484:	2304      	movcs	r3, #4
 800f486:	9347      	str	r3, [sp, #284]	; 0x11c
 800f488:	6863      	ldr	r3, [r4, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	dd4e      	ble.n	800f52c <__svfiscanf_r+0x2b4>
 800f48e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f490:	065b      	lsls	r3, r3, #25
 800f492:	d404      	bmi.n	800f49e <__svfiscanf_r+0x226>
 800f494:	6823      	ldr	r3, [r4, #0]
 800f496:	781a      	ldrb	r2, [r3, #0]
 800f498:	5cba      	ldrb	r2, [r7, r2]
 800f49a:	0710      	lsls	r0, r2, #28
 800f49c:	d456      	bmi.n	800f54c <__svfiscanf_r+0x2d4>
 800f49e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	dc65      	bgt.n	800f570 <__svfiscanf_r+0x2f8>
 800f4a4:	466b      	mov	r3, sp
 800f4a6:	4622      	mov	r2, r4
 800f4a8:	a941      	add	r1, sp, #260	; 0x104
 800f4aa:	4630      	mov	r0, r6
 800f4ac:	f000 f8b2 	bl	800f614 <_scanf_chars>
 800f4b0:	2801      	cmp	r0, #1
 800f4b2:	d079      	beq.n	800f5a8 <__svfiscanf_r+0x330>
 800f4b4:	2802      	cmp	r0, #2
 800f4b6:	f47f af12 	bne.w	800f2de <__svfiscanf_r+0x66>
 800f4ba:	e7c5      	b.n	800f448 <__svfiscanf_r+0x1d0>
 800f4bc:	220a      	movs	r2, #10
 800f4be:	e7dd      	b.n	800f47c <__svfiscanf_r+0x204>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	9342      	str	r3, [sp, #264]	; 0x108
 800f4c4:	2303      	movs	r3, #3
 800f4c6:	e7de      	b.n	800f486 <__svfiscanf_r+0x20e>
 800f4c8:	2308      	movs	r3, #8
 800f4ca:	9342      	str	r3, [sp, #264]	; 0x108
 800f4cc:	2304      	movs	r3, #4
 800f4ce:	e7da      	b.n	800f486 <__svfiscanf_r+0x20e>
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	4640      	mov	r0, r8
 800f4d4:	f000 fab0 	bl	800fa38 <__sccl>
 800f4d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f4da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4de:	9341      	str	r3, [sp, #260]	; 0x104
 800f4e0:	4605      	mov	r5, r0
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e7cf      	b.n	800f486 <__svfiscanf_r+0x20e>
 800f4e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4ec:	9341      	str	r3, [sp, #260]	; 0x104
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e7c9      	b.n	800f486 <__svfiscanf_r+0x20e>
 800f4f2:	2302      	movs	r3, #2
 800f4f4:	e7c7      	b.n	800f486 <__svfiscanf_r+0x20e>
 800f4f6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f4f8:	06c3      	lsls	r3, r0, #27
 800f4fa:	f53f aef0 	bmi.w	800f2de <__svfiscanf_r+0x66>
 800f4fe:	9b00      	ldr	r3, [sp, #0]
 800f500:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f502:	1d19      	adds	r1, r3, #4
 800f504:	9100      	str	r1, [sp, #0]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f010 0f01 	tst.w	r0, #1
 800f50c:	bf14      	ite	ne
 800f50e:	801a      	strhne	r2, [r3, #0]
 800f510:	601a      	streq	r2, [r3, #0]
 800f512:	e6e4      	b.n	800f2de <__svfiscanf_r+0x66>
 800f514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f516:	07d8      	lsls	r0, r3, #31
 800f518:	d405      	bmi.n	800f526 <__svfiscanf_r+0x2ae>
 800f51a:	89a3      	ldrh	r3, [r4, #12]
 800f51c:	0599      	lsls	r1, r3, #22
 800f51e:	d402      	bmi.n	800f526 <__svfiscanf_r+0x2ae>
 800f520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f522:	f7fe fbc7 	bl	800dcb4 <__retarget_lock_release_recursive>
 800f526:	f04f 30ff 	mov.w	r0, #4294967295
 800f52a:	e79a      	b.n	800f462 <__svfiscanf_r+0x1ea>
 800f52c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f52e:	4621      	mov	r1, r4
 800f530:	4630      	mov	r0, r6
 800f532:	4798      	blx	r3
 800f534:	2800      	cmp	r0, #0
 800f536:	d0aa      	beq.n	800f48e <__svfiscanf_r+0x216>
 800f538:	e786      	b.n	800f448 <__svfiscanf_r+0x1d0>
 800f53a:	bf00      	nop
 800f53c:	0800fc2d 	.word	0x0800fc2d
 800f540:	0800f8f1 	.word	0x0800f8f1
 800f544:	080106c9 	.word	0x080106c9
 800f548:	08010a9a 	.word	0x08010a9a
 800f54c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f54e:	3201      	adds	r2, #1
 800f550:	9245      	str	r2, [sp, #276]	; 0x114
 800f552:	6862      	ldr	r2, [r4, #4]
 800f554:	3a01      	subs	r2, #1
 800f556:	2a00      	cmp	r2, #0
 800f558:	6062      	str	r2, [r4, #4]
 800f55a:	dd02      	ble.n	800f562 <__svfiscanf_r+0x2ea>
 800f55c:	3301      	adds	r3, #1
 800f55e:	6023      	str	r3, [r4, #0]
 800f560:	e798      	b.n	800f494 <__svfiscanf_r+0x21c>
 800f562:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f564:	4621      	mov	r1, r4
 800f566:	4630      	mov	r0, r6
 800f568:	4798      	blx	r3
 800f56a:	2800      	cmp	r0, #0
 800f56c:	d092      	beq.n	800f494 <__svfiscanf_r+0x21c>
 800f56e:	e76b      	b.n	800f448 <__svfiscanf_r+0x1d0>
 800f570:	2b04      	cmp	r3, #4
 800f572:	dc06      	bgt.n	800f582 <__svfiscanf_r+0x30a>
 800f574:	466b      	mov	r3, sp
 800f576:	4622      	mov	r2, r4
 800f578:	a941      	add	r1, sp, #260	; 0x104
 800f57a:	4630      	mov	r0, r6
 800f57c:	f000 f8a4 	bl	800f6c8 <_scanf_i>
 800f580:	e796      	b.n	800f4b0 <__svfiscanf_r+0x238>
 800f582:	4b0f      	ldr	r3, [pc, #60]	; (800f5c0 <__svfiscanf_r+0x348>)
 800f584:	2b00      	cmp	r3, #0
 800f586:	f43f aeaa 	beq.w	800f2de <__svfiscanf_r+0x66>
 800f58a:	466b      	mov	r3, sp
 800f58c:	4622      	mov	r2, r4
 800f58e:	a941      	add	r1, sp, #260	; 0x104
 800f590:	4630      	mov	r0, r6
 800f592:	f7fb fbfd 	bl	800ad90 <_scanf_float>
 800f596:	e78b      	b.n	800f4b0 <__svfiscanf_r+0x238>
 800f598:	89a3      	ldrh	r3, [r4, #12]
 800f59a:	0599      	lsls	r1, r3, #22
 800f59c:	f53f af58 	bmi.w	800f450 <__svfiscanf_r+0x1d8>
 800f5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5a2:	f7fe fb87 	bl	800dcb4 <__retarget_lock_release_recursive>
 800f5a6:	e753      	b.n	800f450 <__svfiscanf_r+0x1d8>
 800f5a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5aa:	07da      	lsls	r2, r3, #31
 800f5ac:	d405      	bmi.n	800f5ba <__svfiscanf_r+0x342>
 800f5ae:	89a3      	ldrh	r3, [r4, #12]
 800f5b0:	059b      	lsls	r3, r3, #22
 800f5b2:	d402      	bmi.n	800f5ba <__svfiscanf_r+0x342>
 800f5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5b6:	f7fe fb7d 	bl	800dcb4 <__retarget_lock_release_recursive>
 800f5ba:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f5bc:	e751      	b.n	800f462 <__svfiscanf_r+0x1ea>
 800f5be:	bf00      	nop
 800f5c0:	0800ad91 	.word	0x0800ad91

0800f5c4 <_vfiscanf_r>:
 800f5c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	4605      	mov	r5, r0
 800f5ca:	b138      	cbz	r0, 800f5dc <_vfiscanf_r+0x18>
 800f5cc:	6981      	ldr	r1, [r0, #24]
 800f5ce:	b929      	cbnz	r1, 800f5dc <_vfiscanf_r+0x18>
 800f5d0:	e9cd 2300 	strd	r2, r3, [sp]
 800f5d4:	f7fd ff3e 	bl	800d454 <__sinit>
 800f5d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5dc:	490a      	ldr	r1, [pc, #40]	; (800f608 <_vfiscanf_r+0x44>)
 800f5de:	428c      	cmp	r4, r1
 800f5e0:	d107      	bne.n	800f5f2 <_vfiscanf_r+0x2e>
 800f5e2:	686c      	ldr	r4, [r5, #4]
 800f5e4:	4621      	mov	r1, r4
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	b003      	add	sp, #12
 800f5ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5ee:	f7ff be43 	b.w	800f278 <__svfiscanf_r>
 800f5f2:	4906      	ldr	r1, [pc, #24]	; (800f60c <_vfiscanf_r+0x48>)
 800f5f4:	428c      	cmp	r4, r1
 800f5f6:	d101      	bne.n	800f5fc <_vfiscanf_r+0x38>
 800f5f8:	68ac      	ldr	r4, [r5, #8]
 800f5fa:	e7f3      	b.n	800f5e4 <_vfiscanf_r+0x20>
 800f5fc:	4904      	ldr	r1, [pc, #16]	; (800f610 <_vfiscanf_r+0x4c>)
 800f5fe:	428c      	cmp	r4, r1
 800f600:	bf08      	it	eq
 800f602:	68ec      	ldreq	r4, [r5, #12]
 800f604:	e7ee      	b.n	800f5e4 <_vfiscanf_r+0x20>
 800f606:	bf00      	nop
 800f608:	0801087c 	.word	0x0801087c
 800f60c:	0801089c 	.word	0x0801089c
 800f610:	0801085c 	.word	0x0801085c

0800f614 <_scanf_chars>:
 800f614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f618:	4615      	mov	r5, r2
 800f61a:	688a      	ldr	r2, [r1, #8]
 800f61c:	4680      	mov	r8, r0
 800f61e:	460c      	mov	r4, r1
 800f620:	b932      	cbnz	r2, 800f630 <_scanf_chars+0x1c>
 800f622:	698a      	ldr	r2, [r1, #24]
 800f624:	2a00      	cmp	r2, #0
 800f626:	bf0c      	ite	eq
 800f628:	2201      	moveq	r2, #1
 800f62a:	f04f 32ff 	movne.w	r2, #4294967295
 800f62e:	608a      	str	r2, [r1, #8]
 800f630:	6822      	ldr	r2, [r4, #0]
 800f632:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f6c4 <_scanf_chars+0xb0>
 800f636:	06d1      	lsls	r1, r2, #27
 800f638:	bf5f      	itttt	pl
 800f63a:	681a      	ldrpl	r2, [r3, #0]
 800f63c:	1d11      	addpl	r1, r2, #4
 800f63e:	6019      	strpl	r1, [r3, #0]
 800f640:	6816      	ldrpl	r6, [r2, #0]
 800f642:	2700      	movs	r7, #0
 800f644:	69a0      	ldr	r0, [r4, #24]
 800f646:	b188      	cbz	r0, 800f66c <_scanf_chars+0x58>
 800f648:	2801      	cmp	r0, #1
 800f64a:	d107      	bne.n	800f65c <_scanf_chars+0x48>
 800f64c:	682a      	ldr	r2, [r5, #0]
 800f64e:	7811      	ldrb	r1, [r2, #0]
 800f650:	6962      	ldr	r2, [r4, #20]
 800f652:	5c52      	ldrb	r2, [r2, r1]
 800f654:	b952      	cbnz	r2, 800f66c <_scanf_chars+0x58>
 800f656:	2f00      	cmp	r7, #0
 800f658:	d031      	beq.n	800f6be <_scanf_chars+0xaa>
 800f65a:	e022      	b.n	800f6a2 <_scanf_chars+0x8e>
 800f65c:	2802      	cmp	r0, #2
 800f65e:	d120      	bne.n	800f6a2 <_scanf_chars+0x8e>
 800f660:	682b      	ldr	r3, [r5, #0]
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f668:	071b      	lsls	r3, r3, #28
 800f66a:	d41a      	bmi.n	800f6a2 <_scanf_chars+0x8e>
 800f66c:	6823      	ldr	r3, [r4, #0]
 800f66e:	06da      	lsls	r2, r3, #27
 800f670:	bf5e      	ittt	pl
 800f672:	682b      	ldrpl	r3, [r5, #0]
 800f674:	781b      	ldrbpl	r3, [r3, #0]
 800f676:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f67a:	682a      	ldr	r2, [r5, #0]
 800f67c:	686b      	ldr	r3, [r5, #4]
 800f67e:	3201      	adds	r2, #1
 800f680:	602a      	str	r2, [r5, #0]
 800f682:	68a2      	ldr	r2, [r4, #8]
 800f684:	3b01      	subs	r3, #1
 800f686:	3a01      	subs	r2, #1
 800f688:	606b      	str	r3, [r5, #4]
 800f68a:	3701      	adds	r7, #1
 800f68c:	60a2      	str	r2, [r4, #8]
 800f68e:	b142      	cbz	r2, 800f6a2 <_scanf_chars+0x8e>
 800f690:	2b00      	cmp	r3, #0
 800f692:	dcd7      	bgt.n	800f644 <_scanf_chars+0x30>
 800f694:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f698:	4629      	mov	r1, r5
 800f69a:	4640      	mov	r0, r8
 800f69c:	4798      	blx	r3
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	d0d0      	beq.n	800f644 <_scanf_chars+0x30>
 800f6a2:	6823      	ldr	r3, [r4, #0]
 800f6a4:	f013 0310 	ands.w	r3, r3, #16
 800f6a8:	d105      	bne.n	800f6b6 <_scanf_chars+0xa2>
 800f6aa:	68e2      	ldr	r2, [r4, #12]
 800f6ac:	3201      	adds	r2, #1
 800f6ae:	60e2      	str	r2, [r4, #12]
 800f6b0:	69a2      	ldr	r2, [r4, #24]
 800f6b2:	b102      	cbz	r2, 800f6b6 <_scanf_chars+0xa2>
 800f6b4:	7033      	strb	r3, [r6, #0]
 800f6b6:	6923      	ldr	r3, [r4, #16]
 800f6b8:	443b      	add	r3, r7
 800f6ba:	6123      	str	r3, [r4, #16]
 800f6bc:	2000      	movs	r0, #0
 800f6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6c2:	bf00      	nop
 800f6c4:	080106c9 	.word	0x080106c9

0800f6c8 <_scanf_i>:
 800f6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6cc:	4698      	mov	r8, r3
 800f6ce:	4b76      	ldr	r3, [pc, #472]	; (800f8a8 <_scanf_i+0x1e0>)
 800f6d0:	460c      	mov	r4, r1
 800f6d2:	4682      	mov	sl, r0
 800f6d4:	4616      	mov	r6, r2
 800f6d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f6da:	b087      	sub	sp, #28
 800f6dc:	ab03      	add	r3, sp, #12
 800f6de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f6e2:	4b72      	ldr	r3, [pc, #456]	; (800f8ac <_scanf_i+0x1e4>)
 800f6e4:	69a1      	ldr	r1, [r4, #24]
 800f6e6:	4a72      	ldr	r2, [pc, #456]	; (800f8b0 <_scanf_i+0x1e8>)
 800f6e8:	2903      	cmp	r1, #3
 800f6ea:	bf18      	it	ne
 800f6ec:	461a      	movne	r2, r3
 800f6ee:	68a3      	ldr	r3, [r4, #8]
 800f6f0:	9201      	str	r2, [sp, #4]
 800f6f2:	1e5a      	subs	r2, r3, #1
 800f6f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f6f8:	bf88      	it	hi
 800f6fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f6fe:	4627      	mov	r7, r4
 800f700:	bf82      	ittt	hi
 800f702:	eb03 0905 	addhi.w	r9, r3, r5
 800f706:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f70a:	60a3      	strhi	r3, [r4, #8]
 800f70c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f710:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f714:	bf98      	it	ls
 800f716:	f04f 0900 	movls.w	r9, #0
 800f71a:	6023      	str	r3, [r4, #0]
 800f71c:	463d      	mov	r5, r7
 800f71e:	f04f 0b00 	mov.w	fp, #0
 800f722:	6831      	ldr	r1, [r6, #0]
 800f724:	ab03      	add	r3, sp, #12
 800f726:	7809      	ldrb	r1, [r1, #0]
 800f728:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f72c:	2202      	movs	r2, #2
 800f72e:	f7f0 fd77 	bl	8000220 <memchr>
 800f732:	b328      	cbz	r0, 800f780 <_scanf_i+0xb8>
 800f734:	f1bb 0f01 	cmp.w	fp, #1
 800f738:	d159      	bne.n	800f7ee <_scanf_i+0x126>
 800f73a:	6862      	ldr	r2, [r4, #4]
 800f73c:	b92a      	cbnz	r2, 800f74a <_scanf_i+0x82>
 800f73e:	6822      	ldr	r2, [r4, #0]
 800f740:	2308      	movs	r3, #8
 800f742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f746:	6063      	str	r3, [r4, #4]
 800f748:	6022      	str	r2, [r4, #0]
 800f74a:	6822      	ldr	r2, [r4, #0]
 800f74c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f750:	6022      	str	r2, [r4, #0]
 800f752:	68a2      	ldr	r2, [r4, #8]
 800f754:	1e51      	subs	r1, r2, #1
 800f756:	60a1      	str	r1, [r4, #8]
 800f758:	b192      	cbz	r2, 800f780 <_scanf_i+0xb8>
 800f75a:	6832      	ldr	r2, [r6, #0]
 800f75c:	1c51      	adds	r1, r2, #1
 800f75e:	6031      	str	r1, [r6, #0]
 800f760:	7812      	ldrb	r2, [r2, #0]
 800f762:	f805 2b01 	strb.w	r2, [r5], #1
 800f766:	6872      	ldr	r2, [r6, #4]
 800f768:	3a01      	subs	r2, #1
 800f76a:	2a00      	cmp	r2, #0
 800f76c:	6072      	str	r2, [r6, #4]
 800f76e:	dc07      	bgt.n	800f780 <_scanf_i+0xb8>
 800f770:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f774:	4631      	mov	r1, r6
 800f776:	4650      	mov	r0, sl
 800f778:	4790      	blx	r2
 800f77a:	2800      	cmp	r0, #0
 800f77c:	f040 8085 	bne.w	800f88a <_scanf_i+0x1c2>
 800f780:	f10b 0b01 	add.w	fp, fp, #1
 800f784:	f1bb 0f03 	cmp.w	fp, #3
 800f788:	d1cb      	bne.n	800f722 <_scanf_i+0x5a>
 800f78a:	6863      	ldr	r3, [r4, #4]
 800f78c:	b90b      	cbnz	r3, 800f792 <_scanf_i+0xca>
 800f78e:	230a      	movs	r3, #10
 800f790:	6063      	str	r3, [r4, #4]
 800f792:	6863      	ldr	r3, [r4, #4]
 800f794:	4947      	ldr	r1, [pc, #284]	; (800f8b4 <_scanf_i+0x1ec>)
 800f796:	6960      	ldr	r0, [r4, #20]
 800f798:	1ac9      	subs	r1, r1, r3
 800f79a:	f000 f94d 	bl	800fa38 <__sccl>
 800f79e:	f04f 0b00 	mov.w	fp, #0
 800f7a2:	68a3      	ldr	r3, [r4, #8]
 800f7a4:	6822      	ldr	r2, [r4, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d03d      	beq.n	800f826 <_scanf_i+0x15e>
 800f7aa:	6831      	ldr	r1, [r6, #0]
 800f7ac:	6960      	ldr	r0, [r4, #20]
 800f7ae:	f891 c000 	ldrb.w	ip, [r1]
 800f7b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d035      	beq.n	800f826 <_scanf_i+0x15e>
 800f7ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f7be:	d124      	bne.n	800f80a <_scanf_i+0x142>
 800f7c0:	0510      	lsls	r0, r2, #20
 800f7c2:	d522      	bpl.n	800f80a <_scanf_i+0x142>
 800f7c4:	f10b 0b01 	add.w	fp, fp, #1
 800f7c8:	f1b9 0f00 	cmp.w	r9, #0
 800f7cc:	d003      	beq.n	800f7d6 <_scanf_i+0x10e>
 800f7ce:	3301      	adds	r3, #1
 800f7d0:	f109 39ff 	add.w	r9, r9, #4294967295
 800f7d4:	60a3      	str	r3, [r4, #8]
 800f7d6:	6873      	ldr	r3, [r6, #4]
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	6073      	str	r3, [r6, #4]
 800f7de:	dd1b      	ble.n	800f818 <_scanf_i+0x150>
 800f7e0:	6833      	ldr	r3, [r6, #0]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	6033      	str	r3, [r6, #0]
 800f7e6:	68a3      	ldr	r3, [r4, #8]
 800f7e8:	3b01      	subs	r3, #1
 800f7ea:	60a3      	str	r3, [r4, #8]
 800f7ec:	e7d9      	b.n	800f7a2 <_scanf_i+0xda>
 800f7ee:	f1bb 0f02 	cmp.w	fp, #2
 800f7f2:	d1ae      	bne.n	800f752 <_scanf_i+0x8a>
 800f7f4:	6822      	ldr	r2, [r4, #0]
 800f7f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f7fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f7fe:	d1bf      	bne.n	800f780 <_scanf_i+0xb8>
 800f800:	2310      	movs	r3, #16
 800f802:	6063      	str	r3, [r4, #4]
 800f804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f808:	e7a2      	b.n	800f750 <_scanf_i+0x88>
 800f80a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f80e:	6022      	str	r2, [r4, #0]
 800f810:	780b      	ldrb	r3, [r1, #0]
 800f812:	f805 3b01 	strb.w	r3, [r5], #1
 800f816:	e7de      	b.n	800f7d6 <_scanf_i+0x10e>
 800f818:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f81c:	4631      	mov	r1, r6
 800f81e:	4650      	mov	r0, sl
 800f820:	4798      	blx	r3
 800f822:	2800      	cmp	r0, #0
 800f824:	d0df      	beq.n	800f7e6 <_scanf_i+0x11e>
 800f826:	6823      	ldr	r3, [r4, #0]
 800f828:	05db      	lsls	r3, r3, #23
 800f82a:	d50d      	bpl.n	800f848 <_scanf_i+0x180>
 800f82c:	42bd      	cmp	r5, r7
 800f82e:	d909      	bls.n	800f844 <_scanf_i+0x17c>
 800f830:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f834:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f838:	4632      	mov	r2, r6
 800f83a:	4650      	mov	r0, sl
 800f83c:	4798      	blx	r3
 800f83e:	f105 39ff 	add.w	r9, r5, #4294967295
 800f842:	464d      	mov	r5, r9
 800f844:	42bd      	cmp	r5, r7
 800f846:	d02d      	beq.n	800f8a4 <_scanf_i+0x1dc>
 800f848:	6822      	ldr	r2, [r4, #0]
 800f84a:	f012 0210 	ands.w	r2, r2, #16
 800f84e:	d113      	bne.n	800f878 <_scanf_i+0x1b0>
 800f850:	702a      	strb	r2, [r5, #0]
 800f852:	6863      	ldr	r3, [r4, #4]
 800f854:	9e01      	ldr	r6, [sp, #4]
 800f856:	4639      	mov	r1, r7
 800f858:	4650      	mov	r0, sl
 800f85a:	47b0      	blx	r6
 800f85c:	6821      	ldr	r1, [r4, #0]
 800f85e:	f8d8 3000 	ldr.w	r3, [r8]
 800f862:	f011 0f20 	tst.w	r1, #32
 800f866:	d013      	beq.n	800f890 <_scanf_i+0x1c8>
 800f868:	1d1a      	adds	r2, r3, #4
 800f86a:	f8c8 2000 	str.w	r2, [r8]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	6018      	str	r0, [r3, #0]
 800f872:	68e3      	ldr	r3, [r4, #12]
 800f874:	3301      	adds	r3, #1
 800f876:	60e3      	str	r3, [r4, #12]
 800f878:	1bed      	subs	r5, r5, r7
 800f87a:	44ab      	add	fp, r5
 800f87c:	6925      	ldr	r5, [r4, #16]
 800f87e:	445d      	add	r5, fp
 800f880:	6125      	str	r5, [r4, #16]
 800f882:	2000      	movs	r0, #0
 800f884:	b007      	add	sp, #28
 800f886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f88a:	f04f 0b00 	mov.w	fp, #0
 800f88e:	e7ca      	b.n	800f826 <_scanf_i+0x15e>
 800f890:	1d1a      	adds	r2, r3, #4
 800f892:	f8c8 2000 	str.w	r2, [r8]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f011 0f01 	tst.w	r1, #1
 800f89c:	bf14      	ite	ne
 800f89e:	8018      	strhne	r0, [r3, #0]
 800f8a0:	6018      	streq	r0, [r3, #0]
 800f8a2:	e7e6      	b.n	800f872 <_scanf_i+0x1aa>
 800f8a4:	2001      	movs	r0, #1
 800f8a6:	e7ed      	b.n	800f884 <_scanf_i+0x1bc>
 800f8a8:	08010610 	.word	0x08010610
 800f8ac:	0800fbb5 	.word	0x0800fbb5
 800f8b0:	0800c33d 	.word	0x0800c33d
 800f8b4:	08010abe 	.word	0x08010abe

0800f8b8 <_read_r>:
 800f8b8:	b538      	push	{r3, r4, r5, lr}
 800f8ba:	4d07      	ldr	r5, [pc, #28]	; (800f8d8 <_read_r+0x20>)
 800f8bc:	4604      	mov	r4, r0
 800f8be:	4608      	mov	r0, r1
 800f8c0:	4611      	mov	r1, r2
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	602a      	str	r2, [r5, #0]
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	f7f2 fd74 	bl	80023b4 <_read>
 800f8cc:	1c43      	adds	r3, r0, #1
 800f8ce:	d102      	bne.n	800f8d6 <_read_r+0x1e>
 800f8d0:	682b      	ldr	r3, [r5, #0]
 800f8d2:	b103      	cbz	r3, 800f8d6 <_read_r+0x1e>
 800f8d4:	6023      	str	r3, [r4, #0]
 800f8d6:	bd38      	pop	{r3, r4, r5, pc}
 800f8d8:	200004dc 	.word	0x200004dc

0800f8dc <lflush>:
 800f8dc:	8983      	ldrh	r3, [r0, #12]
 800f8de:	f003 0309 	and.w	r3, r3, #9
 800f8e2:	2b09      	cmp	r3, #9
 800f8e4:	d101      	bne.n	800f8ea <lflush+0xe>
 800f8e6:	f7fd bd4b 	b.w	800d380 <fflush>
 800f8ea:	2000      	movs	r0, #0
 800f8ec:	4770      	bx	lr
	...

0800f8f0 <__srefill_r>:
 800f8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8f2:	460c      	mov	r4, r1
 800f8f4:	4605      	mov	r5, r0
 800f8f6:	b118      	cbz	r0, 800f900 <__srefill_r+0x10>
 800f8f8:	6983      	ldr	r3, [r0, #24]
 800f8fa:	b90b      	cbnz	r3, 800f900 <__srefill_r+0x10>
 800f8fc:	f7fd fdaa 	bl	800d454 <__sinit>
 800f900:	4b3b      	ldr	r3, [pc, #236]	; (800f9f0 <__srefill_r+0x100>)
 800f902:	429c      	cmp	r4, r3
 800f904:	d10a      	bne.n	800f91c <__srefill_r+0x2c>
 800f906:	686c      	ldr	r4, [r5, #4]
 800f908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f90c:	2300      	movs	r3, #0
 800f90e:	6063      	str	r3, [r4, #4]
 800f910:	89a3      	ldrh	r3, [r4, #12]
 800f912:	069e      	lsls	r6, r3, #26
 800f914:	d50c      	bpl.n	800f930 <__srefill_r+0x40>
 800f916:	f04f 30ff 	mov.w	r0, #4294967295
 800f91a:	e066      	b.n	800f9ea <__srefill_r+0xfa>
 800f91c:	4b35      	ldr	r3, [pc, #212]	; (800f9f4 <__srefill_r+0x104>)
 800f91e:	429c      	cmp	r4, r3
 800f920:	d101      	bne.n	800f926 <__srefill_r+0x36>
 800f922:	68ac      	ldr	r4, [r5, #8]
 800f924:	e7f0      	b.n	800f908 <__srefill_r+0x18>
 800f926:	4b34      	ldr	r3, [pc, #208]	; (800f9f8 <__srefill_r+0x108>)
 800f928:	429c      	cmp	r4, r3
 800f92a:	bf08      	it	eq
 800f92c:	68ec      	ldreq	r4, [r5, #12]
 800f92e:	e7eb      	b.n	800f908 <__srefill_r+0x18>
 800f930:	0758      	lsls	r0, r3, #29
 800f932:	d448      	bmi.n	800f9c6 <__srefill_r+0xd6>
 800f934:	06d9      	lsls	r1, r3, #27
 800f936:	d405      	bmi.n	800f944 <__srefill_r+0x54>
 800f938:	2309      	movs	r3, #9
 800f93a:	602b      	str	r3, [r5, #0]
 800f93c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f940:	81a3      	strh	r3, [r4, #12]
 800f942:	e7e8      	b.n	800f916 <__srefill_r+0x26>
 800f944:	071a      	lsls	r2, r3, #28
 800f946:	d50b      	bpl.n	800f960 <__srefill_r+0x70>
 800f948:	4621      	mov	r1, r4
 800f94a:	4628      	mov	r0, r5
 800f94c:	f7fd fcdc 	bl	800d308 <_fflush_r>
 800f950:	2800      	cmp	r0, #0
 800f952:	d1e0      	bne.n	800f916 <__srefill_r+0x26>
 800f954:	89a3      	ldrh	r3, [r4, #12]
 800f956:	60a0      	str	r0, [r4, #8]
 800f958:	f023 0308 	bic.w	r3, r3, #8
 800f95c:	81a3      	strh	r3, [r4, #12]
 800f95e:	61a0      	str	r0, [r4, #24]
 800f960:	89a3      	ldrh	r3, [r4, #12]
 800f962:	f043 0304 	orr.w	r3, r3, #4
 800f966:	81a3      	strh	r3, [r4, #12]
 800f968:	6923      	ldr	r3, [r4, #16]
 800f96a:	b91b      	cbnz	r3, 800f974 <__srefill_r+0x84>
 800f96c:	4621      	mov	r1, r4
 800f96e:	4628      	mov	r0, r5
 800f970:	f7fe f9da 	bl	800dd28 <__smakebuf_r>
 800f974:	89a6      	ldrh	r6, [r4, #12]
 800f976:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800f97a:	07b3      	lsls	r3, r6, #30
 800f97c:	d00f      	beq.n	800f99e <__srefill_r+0xae>
 800f97e:	2301      	movs	r3, #1
 800f980:	81a3      	strh	r3, [r4, #12]
 800f982:	4b1e      	ldr	r3, [pc, #120]	; (800f9fc <__srefill_r+0x10c>)
 800f984:	491e      	ldr	r1, [pc, #120]	; (800fa00 <__srefill_r+0x110>)
 800f986:	6818      	ldr	r0, [r3, #0]
 800f988:	f006 0609 	and.w	r6, r6, #9
 800f98c:	f7fd fde0 	bl	800d550 <_fwalk>
 800f990:	2e09      	cmp	r6, #9
 800f992:	81a7      	strh	r7, [r4, #12]
 800f994:	d103      	bne.n	800f99e <__srefill_r+0xae>
 800f996:	4621      	mov	r1, r4
 800f998:	4628      	mov	r0, r5
 800f99a:	f7fd fc2f 	bl	800d1fc <__sflush_r>
 800f99e:	6922      	ldr	r2, [r4, #16]
 800f9a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f9a2:	6963      	ldr	r3, [r4, #20]
 800f9a4:	6a21      	ldr	r1, [r4, #32]
 800f9a6:	6022      	str	r2, [r4, #0]
 800f9a8:	4628      	mov	r0, r5
 800f9aa:	47b0      	blx	r6
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	6060      	str	r0, [r4, #4]
 800f9b0:	dc1c      	bgt.n	800f9ec <__srefill_r+0xfc>
 800f9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9b6:	bf17      	itett	ne
 800f9b8:	2200      	movne	r2, #0
 800f9ba:	f043 0320 	orreq.w	r3, r3, #32
 800f9be:	6062      	strne	r2, [r4, #4]
 800f9c0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800f9c4:	e7bc      	b.n	800f940 <__srefill_r+0x50>
 800f9c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9c8:	2900      	cmp	r1, #0
 800f9ca:	d0cd      	beq.n	800f968 <__srefill_r+0x78>
 800f9cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9d0:	4299      	cmp	r1, r3
 800f9d2:	d002      	beq.n	800f9da <__srefill_r+0xea>
 800f9d4:	4628      	mov	r0, r5
 800f9d6:	f7fe fee7 	bl	800e7a8 <_free_r>
 800f9da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f9dc:	6063      	str	r3, [r4, #4]
 800f9de:	2000      	movs	r0, #0
 800f9e0:	6360      	str	r0, [r4, #52]	; 0x34
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d0c0      	beq.n	800f968 <__srefill_r+0x78>
 800f9e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f9e8:	6023      	str	r3, [r4, #0]
 800f9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9ec:	2000      	movs	r0, #0
 800f9ee:	e7fc      	b.n	800f9ea <__srefill_r+0xfa>
 800f9f0:	0801087c 	.word	0x0801087c
 800f9f4:	0801089c 	.word	0x0801089c
 800f9f8:	0801085c 	.word	0x0801085c
 800f9fc:	0801063c 	.word	0x0801063c
 800fa00:	0800f8dd 	.word	0x0800f8dd
 800fa04:	00000000 	.word	0x00000000

0800fa08 <nan>:
 800fa08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fa10 <nan+0x8>
 800fa0c:	4770      	bx	lr
 800fa0e:	bf00      	nop
 800fa10:	00000000 	.word	0x00000000
 800fa14:	7ff80000 	.word	0x7ff80000

0800fa18 <_sbrk_r>:
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	4d06      	ldr	r5, [pc, #24]	; (800fa34 <_sbrk_r+0x1c>)
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	4604      	mov	r4, r0
 800fa20:	4608      	mov	r0, r1
 800fa22:	602b      	str	r3, [r5, #0]
 800fa24:	f7f2 fd34 	bl	8002490 <_sbrk>
 800fa28:	1c43      	adds	r3, r0, #1
 800fa2a:	d102      	bne.n	800fa32 <_sbrk_r+0x1a>
 800fa2c:	682b      	ldr	r3, [r5, #0]
 800fa2e:	b103      	cbz	r3, 800fa32 <_sbrk_r+0x1a>
 800fa30:	6023      	str	r3, [r4, #0]
 800fa32:	bd38      	pop	{r3, r4, r5, pc}
 800fa34:	200004dc 	.word	0x200004dc

0800fa38 <__sccl>:
 800fa38:	b570      	push	{r4, r5, r6, lr}
 800fa3a:	780b      	ldrb	r3, [r1, #0]
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	2b5e      	cmp	r3, #94	; 0x5e
 800fa40:	bf0b      	itete	eq
 800fa42:	784b      	ldrbeq	r3, [r1, #1]
 800fa44:	1c48      	addne	r0, r1, #1
 800fa46:	1c88      	addeq	r0, r1, #2
 800fa48:	2200      	movne	r2, #0
 800fa4a:	bf08      	it	eq
 800fa4c:	2201      	moveq	r2, #1
 800fa4e:	1e61      	subs	r1, r4, #1
 800fa50:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fa54:	f801 2f01 	strb.w	r2, [r1, #1]!
 800fa58:	42a9      	cmp	r1, r5
 800fa5a:	d1fb      	bne.n	800fa54 <__sccl+0x1c>
 800fa5c:	b90b      	cbnz	r3, 800fa62 <__sccl+0x2a>
 800fa5e:	3801      	subs	r0, #1
 800fa60:	bd70      	pop	{r4, r5, r6, pc}
 800fa62:	f082 0201 	eor.w	r2, r2, #1
 800fa66:	54e2      	strb	r2, [r4, r3]
 800fa68:	4605      	mov	r5, r0
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fa70:	292d      	cmp	r1, #45	; 0x2d
 800fa72:	d006      	beq.n	800fa82 <__sccl+0x4a>
 800fa74:	295d      	cmp	r1, #93	; 0x5d
 800fa76:	d0f3      	beq.n	800fa60 <__sccl+0x28>
 800fa78:	b909      	cbnz	r1, 800fa7e <__sccl+0x46>
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	e7f0      	b.n	800fa60 <__sccl+0x28>
 800fa7e:	460b      	mov	r3, r1
 800fa80:	e7f1      	b.n	800fa66 <__sccl+0x2e>
 800fa82:	786e      	ldrb	r6, [r5, #1]
 800fa84:	2e5d      	cmp	r6, #93	; 0x5d
 800fa86:	d0fa      	beq.n	800fa7e <__sccl+0x46>
 800fa88:	42b3      	cmp	r3, r6
 800fa8a:	dcf8      	bgt.n	800fa7e <__sccl+0x46>
 800fa8c:	3502      	adds	r5, #2
 800fa8e:	4619      	mov	r1, r3
 800fa90:	3101      	adds	r1, #1
 800fa92:	428e      	cmp	r6, r1
 800fa94:	5462      	strb	r2, [r4, r1]
 800fa96:	dcfb      	bgt.n	800fa90 <__sccl+0x58>
 800fa98:	1af1      	subs	r1, r6, r3
 800fa9a:	3901      	subs	r1, #1
 800fa9c:	1c58      	adds	r0, r3, #1
 800fa9e:	42b3      	cmp	r3, r6
 800faa0:	bfa8      	it	ge
 800faa2:	2100      	movge	r1, #0
 800faa4:	1843      	adds	r3, r0, r1
 800faa6:	e7e0      	b.n	800fa6a <__sccl+0x32>

0800faa8 <strncmp>:
 800faa8:	b510      	push	{r4, lr}
 800faaa:	b17a      	cbz	r2, 800facc <strncmp+0x24>
 800faac:	4603      	mov	r3, r0
 800faae:	3901      	subs	r1, #1
 800fab0:	1884      	adds	r4, r0, r2
 800fab2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fab6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800faba:	4290      	cmp	r0, r2
 800fabc:	d101      	bne.n	800fac2 <strncmp+0x1a>
 800fabe:	42a3      	cmp	r3, r4
 800fac0:	d101      	bne.n	800fac6 <strncmp+0x1e>
 800fac2:	1a80      	subs	r0, r0, r2
 800fac4:	bd10      	pop	{r4, pc}
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d1f3      	bne.n	800fab2 <strncmp+0xa>
 800faca:	e7fa      	b.n	800fac2 <strncmp+0x1a>
 800facc:	4610      	mov	r0, r2
 800face:	e7f9      	b.n	800fac4 <strncmp+0x1c>

0800fad0 <_strtoul_l.constprop.0>:
 800fad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fad4:	4f36      	ldr	r7, [pc, #216]	; (800fbb0 <_strtoul_l.constprop.0+0xe0>)
 800fad6:	4686      	mov	lr, r0
 800fad8:	460d      	mov	r5, r1
 800fada:	4628      	mov	r0, r5
 800fadc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fae0:	5de6      	ldrb	r6, [r4, r7]
 800fae2:	f016 0608 	ands.w	r6, r6, #8
 800fae6:	d1f8      	bne.n	800fada <_strtoul_l.constprop.0+0xa>
 800fae8:	2c2d      	cmp	r4, #45	; 0x2d
 800faea:	d12f      	bne.n	800fb4c <_strtoul_l.constprop.0+0x7c>
 800faec:	782c      	ldrb	r4, [r5, #0]
 800faee:	2601      	movs	r6, #1
 800faf0:	1c85      	adds	r5, r0, #2
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d057      	beq.n	800fba6 <_strtoul_l.constprop.0+0xd6>
 800faf6:	2b10      	cmp	r3, #16
 800faf8:	d109      	bne.n	800fb0e <_strtoul_l.constprop.0+0x3e>
 800fafa:	2c30      	cmp	r4, #48	; 0x30
 800fafc:	d107      	bne.n	800fb0e <_strtoul_l.constprop.0+0x3e>
 800fafe:	7828      	ldrb	r0, [r5, #0]
 800fb00:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fb04:	2858      	cmp	r0, #88	; 0x58
 800fb06:	d149      	bne.n	800fb9c <_strtoul_l.constprop.0+0xcc>
 800fb08:	786c      	ldrb	r4, [r5, #1]
 800fb0a:	2310      	movs	r3, #16
 800fb0c:	3502      	adds	r5, #2
 800fb0e:	f04f 38ff 	mov.w	r8, #4294967295
 800fb12:	2700      	movs	r7, #0
 800fb14:	fbb8 f8f3 	udiv	r8, r8, r3
 800fb18:	fb03 f908 	mul.w	r9, r3, r8
 800fb1c:	ea6f 0909 	mvn.w	r9, r9
 800fb20:	4638      	mov	r0, r7
 800fb22:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fb26:	f1bc 0f09 	cmp.w	ip, #9
 800fb2a:	d814      	bhi.n	800fb56 <_strtoul_l.constprop.0+0x86>
 800fb2c:	4664      	mov	r4, ip
 800fb2e:	42a3      	cmp	r3, r4
 800fb30:	dd22      	ble.n	800fb78 <_strtoul_l.constprop.0+0xa8>
 800fb32:	2f00      	cmp	r7, #0
 800fb34:	db1d      	blt.n	800fb72 <_strtoul_l.constprop.0+0xa2>
 800fb36:	4580      	cmp	r8, r0
 800fb38:	d31b      	bcc.n	800fb72 <_strtoul_l.constprop.0+0xa2>
 800fb3a:	d101      	bne.n	800fb40 <_strtoul_l.constprop.0+0x70>
 800fb3c:	45a1      	cmp	r9, r4
 800fb3e:	db18      	blt.n	800fb72 <_strtoul_l.constprop.0+0xa2>
 800fb40:	fb00 4003 	mla	r0, r0, r3, r4
 800fb44:	2701      	movs	r7, #1
 800fb46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb4a:	e7ea      	b.n	800fb22 <_strtoul_l.constprop.0+0x52>
 800fb4c:	2c2b      	cmp	r4, #43	; 0x2b
 800fb4e:	bf04      	itt	eq
 800fb50:	782c      	ldrbeq	r4, [r5, #0]
 800fb52:	1c85      	addeq	r5, r0, #2
 800fb54:	e7cd      	b.n	800faf2 <_strtoul_l.constprop.0+0x22>
 800fb56:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fb5a:	f1bc 0f19 	cmp.w	ip, #25
 800fb5e:	d801      	bhi.n	800fb64 <_strtoul_l.constprop.0+0x94>
 800fb60:	3c37      	subs	r4, #55	; 0x37
 800fb62:	e7e4      	b.n	800fb2e <_strtoul_l.constprop.0+0x5e>
 800fb64:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fb68:	f1bc 0f19 	cmp.w	ip, #25
 800fb6c:	d804      	bhi.n	800fb78 <_strtoul_l.constprop.0+0xa8>
 800fb6e:	3c57      	subs	r4, #87	; 0x57
 800fb70:	e7dd      	b.n	800fb2e <_strtoul_l.constprop.0+0x5e>
 800fb72:	f04f 37ff 	mov.w	r7, #4294967295
 800fb76:	e7e6      	b.n	800fb46 <_strtoul_l.constprop.0+0x76>
 800fb78:	2f00      	cmp	r7, #0
 800fb7a:	da07      	bge.n	800fb8c <_strtoul_l.constprop.0+0xbc>
 800fb7c:	2322      	movs	r3, #34	; 0x22
 800fb7e:	f8ce 3000 	str.w	r3, [lr]
 800fb82:	f04f 30ff 	mov.w	r0, #4294967295
 800fb86:	b932      	cbnz	r2, 800fb96 <_strtoul_l.constprop.0+0xc6>
 800fb88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb8c:	b106      	cbz	r6, 800fb90 <_strtoul_l.constprop.0+0xc0>
 800fb8e:	4240      	negs	r0, r0
 800fb90:	2a00      	cmp	r2, #0
 800fb92:	d0f9      	beq.n	800fb88 <_strtoul_l.constprop.0+0xb8>
 800fb94:	b107      	cbz	r7, 800fb98 <_strtoul_l.constprop.0+0xc8>
 800fb96:	1e69      	subs	r1, r5, #1
 800fb98:	6011      	str	r1, [r2, #0]
 800fb9a:	e7f5      	b.n	800fb88 <_strtoul_l.constprop.0+0xb8>
 800fb9c:	2430      	movs	r4, #48	; 0x30
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d1b5      	bne.n	800fb0e <_strtoul_l.constprop.0+0x3e>
 800fba2:	2308      	movs	r3, #8
 800fba4:	e7b3      	b.n	800fb0e <_strtoul_l.constprop.0+0x3e>
 800fba6:	2c30      	cmp	r4, #48	; 0x30
 800fba8:	d0a9      	beq.n	800fafe <_strtoul_l.constprop.0+0x2e>
 800fbaa:	230a      	movs	r3, #10
 800fbac:	e7af      	b.n	800fb0e <_strtoul_l.constprop.0+0x3e>
 800fbae:	bf00      	nop
 800fbb0:	080106c9 	.word	0x080106c9

0800fbb4 <_strtoul_r>:
 800fbb4:	f7ff bf8c 	b.w	800fad0 <_strtoul_l.constprop.0>

0800fbb8 <__submore>:
 800fbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbbc:	460c      	mov	r4, r1
 800fbbe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fbc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbc4:	4299      	cmp	r1, r3
 800fbc6:	d11d      	bne.n	800fc04 <__submore+0x4c>
 800fbc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fbcc:	f7fe fe58 	bl	800e880 <_malloc_r>
 800fbd0:	b918      	cbnz	r0, 800fbda <__submore+0x22>
 800fbd2:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbde:	63a3      	str	r3, [r4, #56]	; 0x38
 800fbe0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fbe4:	6360      	str	r0, [r4, #52]	; 0x34
 800fbe6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fbea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fbee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fbf2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fbf6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fbfa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fbfe:	6020      	str	r0, [r4, #0]
 800fc00:	2000      	movs	r0, #0
 800fc02:	e7e8      	b.n	800fbd6 <__submore+0x1e>
 800fc04:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fc06:	0077      	lsls	r7, r6, #1
 800fc08:	463a      	mov	r2, r7
 800fc0a:	f000 f92d 	bl	800fe68 <_realloc_r>
 800fc0e:	4605      	mov	r5, r0
 800fc10:	2800      	cmp	r0, #0
 800fc12:	d0de      	beq.n	800fbd2 <__submore+0x1a>
 800fc14:	eb00 0806 	add.w	r8, r0, r6
 800fc18:	4601      	mov	r1, r0
 800fc1a:	4632      	mov	r2, r6
 800fc1c:	4640      	mov	r0, r8
 800fc1e:	f7fe f8dd 	bl	800dddc <memcpy>
 800fc22:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fc26:	f8c4 8000 	str.w	r8, [r4]
 800fc2a:	e7e9      	b.n	800fc00 <__submore+0x48>

0800fc2c <_ungetc_r>:
 800fc2c:	b570      	push	{r4, r5, r6, lr}
 800fc2e:	4614      	mov	r4, r2
 800fc30:	1c4a      	adds	r2, r1, #1
 800fc32:	4606      	mov	r6, r0
 800fc34:	460d      	mov	r5, r1
 800fc36:	d103      	bne.n	800fc40 <_ungetc_r+0x14>
 800fc38:	f04f 35ff 	mov.w	r5, #4294967295
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	bd70      	pop	{r4, r5, r6, pc}
 800fc40:	b118      	cbz	r0, 800fc4a <_ungetc_r+0x1e>
 800fc42:	6983      	ldr	r3, [r0, #24]
 800fc44:	b90b      	cbnz	r3, 800fc4a <_ungetc_r+0x1e>
 800fc46:	f7fd fc05 	bl	800d454 <__sinit>
 800fc4a:	4b41      	ldr	r3, [pc, #260]	; (800fd50 <_ungetc_r+0x124>)
 800fc4c:	429c      	cmp	r4, r3
 800fc4e:	d11d      	bne.n	800fc8c <_ungetc_r+0x60>
 800fc50:	6874      	ldr	r4, [r6, #4]
 800fc52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc54:	07db      	lsls	r3, r3, #31
 800fc56:	d405      	bmi.n	800fc64 <_ungetc_r+0x38>
 800fc58:	89a3      	ldrh	r3, [r4, #12]
 800fc5a:	0598      	lsls	r0, r3, #22
 800fc5c:	d402      	bmi.n	800fc64 <_ungetc_r+0x38>
 800fc5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc60:	f7fe f827 	bl	800dcb2 <__retarget_lock_acquire_recursive>
 800fc64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc68:	f023 0320 	bic.w	r3, r3, #32
 800fc6c:	0759      	lsls	r1, r3, #29
 800fc6e:	81a3      	strh	r3, [r4, #12]
 800fc70:	b29a      	uxth	r2, r3
 800fc72:	d42d      	bmi.n	800fcd0 <_ungetc_r+0xa4>
 800fc74:	06d3      	lsls	r3, r2, #27
 800fc76:	d413      	bmi.n	800fca0 <_ungetc_r+0x74>
 800fc78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc7a:	07dd      	lsls	r5, r3, #31
 800fc7c:	d4dc      	bmi.n	800fc38 <_ungetc_r+0xc>
 800fc7e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800fc82:	d1d9      	bne.n	800fc38 <_ungetc_r+0xc>
 800fc84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc86:	f7fe f815 	bl	800dcb4 <__retarget_lock_release_recursive>
 800fc8a:	e7d5      	b.n	800fc38 <_ungetc_r+0xc>
 800fc8c:	4b31      	ldr	r3, [pc, #196]	; (800fd54 <_ungetc_r+0x128>)
 800fc8e:	429c      	cmp	r4, r3
 800fc90:	d101      	bne.n	800fc96 <_ungetc_r+0x6a>
 800fc92:	68b4      	ldr	r4, [r6, #8]
 800fc94:	e7dd      	b.n	800fc52 <_ungetc_r+0x26>
 800fc96:	4b30      	ldr	r3, [pc, #192]	; (800fd58 <_ungetc_r+0x12c>)
 800fc98:	429c      	cmp	r4, r3
 800fc9a:	bf08      	it	eq
 800fc9c:	68f4      	ldreq	r4, [r6, #12]
 800fc9e:	e7d8      	b.n	800fc52 <_ungetc_r+0x26>
 800fca0:	0710      	lsls	r0, r2, #28
 800fca2:	d511      	bpl.n	800fcc8 <_ungetc_r+0x9c>
 800fca4:	4621      	mov	r1, r4
 800fca6:	4630      	mov	r0, r6
 800fca8:	f7fd fb2e 	bl	800d308 <_fflush_r>
 800fcac:	b130      	cbz	r0, 800fcbc <_ungetc_r+0x90>
 800fcae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcb0:	07d9      	lsls	r1, r3, #31
 800fcb2:	d4c1      	bmi.n	800fc38 <_ungetc_r+0xc>
 800fcb4:	89a3      	ldrh	r3, [r4, #12]
 800fcb6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800fcba:	e7e2      	b.n	800fc82 <_ungetc_r+0x56>
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	60a0      	str	r0, [r4, #8]
 800fcc0:	f023 0308 	bic.w	r3, r3, #8
 800fcc4:	81a3      	strh	r3, [r4, #12]
 800fcc6:	61a0      	str	r0, [r4, #24]
 800fcc8:	89a3      	ldrh	r3, [r4, #12]
 800fcca:	f043 0304 	orr.w	r3, r3, #4
 800fcce:	81a3      	strh	r3, [r4, #12]
 800fcd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fcd2:	6862      	ldr	r2, [r4, #4]
 800fcd4:	b2ed      	uxtb	r5, r5
 800fcd6:	b1d3      	cbz	r3, 800fd0e <_ungetc_r+0xe2>
 800fcd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	dc05      	bgt.n	800fcea <_ungetc_r+0xbe>
 800fcde:	4621      	mov	r1, r4
 800fce0:	4630      	mov	r0, r6
 800fce2:	f7ff ff69 	bl	800fbb8 <__submore>
 800fce6:	2800      	cmp	r0, #0
 800fce8:	d1e1      	bne.n	800fcae <_ungetc_r+0x82>
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	1e5a      	subs	r2, r3, #1
 800fcee:	6022      	str	r2, [r4, #0]
 800fcf0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fcf4:	6863      	ldr	r3, [r4, #4]
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	6063      	str	r3, [r4, #4]
 800fcfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcfc:	07da      	lsls	r2, r3, #31
 800fcfe:	d49d      	bmi.n	800fc3c <_ungetc_r+0x10>
 800fd00:	89a3      	ldrh	r3, [r4, #12]
 800fd02:	059b      	lsls	r3, r3, #22
 800fd04:	d49a      	bmi.n	800fc3c <_ungetc_r+0x10>
 800fd06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd08:	f7fd ffd4 	bl	800dcb4 <__retarget_lock_release_recursive>
 800fd0c:	e796      	b.n	800fc3c <_ungetc_r+0x10>
 800fd0e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800fd10:	6920      	ldr	r0, [r4, #16]
 800fd12:	6823      	ldr	r3, [r4, #0]
 800fd14:	f001 0101 	and.w	r1, r1, #1
 800fd18:	b160      	cbz	r0, 800fd34 <_ungetc_r+0x108>
 800fd1a:	4298      	cmp	r0, r3
 800fd1c:	d20a      	bcs.n	800fd34 <_ungetc_r+0x108>
 800fd1e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800fd22:	42a8      	cmp	r0, r5
 800fd24:	d106      	bne.n	800fd34 <_ungetc_r+0x108>
 800fd26:	3b01      	subs	r3, #1
 800fd28:	3201      	adds	r2, #1
 800fd2a:	6023      	str	r3, [r4, #0]
 800fd2c:	6062      	str	r2, [r4, #4]
 800fd2e:	2900      	cmp	r1, #0
 800fd30:	d184      	bne.n	800fc3c <_ungetc_r+0x10>
 800fd32:	e7e5      	b.n	800fd00 <_ungetc_r+0xd4>
 800fd34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800fd38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd3c:	6363      	str	r3, [r4, #52]	; 0x34
 800fd3e:	2303      	movs	r3, #3
 800fd40:	63a3      	str	r3, [r4, #56]	; 0x38
 800fd42:	4623      	mov	r3, r4
 800fd44:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fd48:	6023      	str	r3, [r4, #0]
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	6063      	str	r3, [r4, #4]
 800fd4e:	e7ee      	b.n	800fd2e <_ungetc_r+0x102>
 800fd50:	0801087c 	.word	0x0801087c
 800fd54:	0801089c 	.word	0x0801089c
 800fd58:	0801085c 	.word	0x0801085c

0800fd5c <__ascii_wctomb>:
 800fd5c:	b149      	cbz	r1, 800fd72 <__ascii_wctomb+0x16>
 800fd5e:	2aff      	cmp	r2, #255	; 0xff
 800fd60:	bf85      	ittet	hi
 800fd62:	238a      	movhi	r3, #138	; 0x8a
 800fd64:	6003      	strhi	r3, [r0, #0]
 800fd66:	700a      	strbls	r2, [r1, #0]
 800fd68:	f04f 30ff 	movhi.w	r0, #4294967295
 800fd6c:	bf98      	it	ls
 800fd6e:	2001      	movls	r0, #1
 800fd70:	4770      	bx	lr
 800fd72:	4608      	mov	r0, r1
 800fd74:	4770      	bx	lr
	...

0800fd78 <__assert_func>:
 800fd78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd7a:	4614      	mov	r4, r2
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	4b09      	ldr	r3, [pc, #36]	; (800fda4 <__assert_func+0x2c>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4605      	mov	r5, r0
 800fd84:	68d8      	ldr	r0, [r3, #12]
 800fd86:	b14c      	cbz	r4, 800fd9c <__assert_func+0x24>
 800fd88:	4b07      	ldr	r3, [pc, #28]	; (800fda8 <__assert_func+0x30>)
 800fd8a:	9100      	str	r1, [sp, #0]
 800fd8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd90:	4906      	ldr	r1, [pc, #24]	; (800fdac <__assert_func+0x34>)
 800fd92:	462b      	mov	r3, r5
 800fd94:	f000 f80e 	bl	800fdb4 <fiprintf>
 800fd98:	f000 f895 	bl	800fec6 <abort>
 800fd9c:	4b04      	ldr	r3, [pc, #16]	; (800fdb0 <__assert_func+0x38>)
 800fd9e:	461c      	mov	r4, r3
 800fda0:	e7f3      	b.n	800fd8a <__assert_func+0x12>
 800fda2:	bf00      	nop
 800fda4:	2000000c 	.word	0x2000000c
 800fda8:	08010ac0 	.word	0x08010ac0
 800fdac:	08010acd 	.word	0x08010acd
 800fdb0:	08010afb 	.word	0x08010afb

0800fdb4 <fiprintf>:
 800fdb4:	b40e      	push	{r1, r2, r3}
 800fdb6:	b503      	push	{r0, r1, lr}
 800fdb8:	4601      	mov	r1, r0
 800fdba:	ab03      	add	r3, sp, #12
 800fdbc:	4805      	ldr	r0, [pc, #20]	; (800fdd4 <fiprintf+0x20>)
 800fdbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdc2:	6800      	ldr	r0, [r0, #0]
 800fdc4:	9301      	str	r3, [sp, #4]
 800fdc6:	f7ff f927 	bl	800f018 <_vfiprintf_r>
 800fdca:	b002      	add	sp, #8
 800fdcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdd0:	b003      	add	sp, #12
 800fdd2:	4770      	bx	lr
 800fdd4:	2000000c 	.word	0x2000000c

0800fdd8 <_fstat_r>:
 800fdd8:	b538      	push	{r3, r4, r5, lr}
 800fdda:	4d07      	ldr	r5, [pc, #28]	; (800fdf8 <_fstat_r+0x20>)
 800fddc:	2300      	movs	r3, #0
 800fdde:	4604      	mov	r4, r0
 800fde0:	4608      	mov	r0, r1
 800fde2:	4611      	mov	r1, r2
 800fde4:	602b      	str	r3, [r5, #0]
 800fde6:	f7f2 fb2a 	bl	800243e <_fstat>
 800fdea:	1c43      	adds	r3, r0, #1
 800fdec:	d102      	bne.n	800fdf4 <_fstat_r+0x1c>
 800fdee:	682b      	ldr	r3, [r5, #0]
 800fdf0:	b103      	cbz	r3, 800fdf4 <_fstat_r+0x1c>
 800fdf2:	6023      	str	r3, [r4, #0]
 800fdf4:	bd38      	pop	{r3, r4, r5, pc}
 800fdf6:	bf00      	nop
 800fdf8:	200004dc 	.word	0x200004dc

0800fdfc <_isatty_r>:
 800fdfc:	b538      	push	{r3, r4, r5, lr}
 800fdfe:	4d06      	ldr	r5, [pc, #24]	; (800fe18 <_isatty_r+0x1c>)
 800fe00:	2300      	movs	r3, #0
 800fe02:	4604      	mov	r4, r0
 800fe04:	4608      	mov	r0, r1
 800fe06:	602b      	str	r3, [r5, #0]
 800fe08:	f7f2 fb29 	bl	800245e <_isatty>
 800fe0c:	1c43      	adds	r3, r0, #1
 800fe0e:	d102      	bne.n	800fe16 <_isatty_r+0x1a>
 800fe10:	682b      	ldr	r3, [r5, #0]
 800fe12:	b103      	cbz	r3, 800fe16 <_isatty_r+0x1a>
 800fe14:	6023      	str	r3, [r4, #0]
 800fe16:	bd38      	pop	{r3, r4, r5, pc}
 800fe18:	200004dc 	.word	0x200004dc

0800fe1c <memmove>:
 800fe1c:	4288      	cmp	r0, r1
 800fe1e:	b510      	push	{r4, lr}
 800fe20:	eb01 0402 	add.w	r4, r1, r2
 800fe24:	d902      	bls.n	800fe2c <memmove+0x10>
 800fe26:	4284      	cmp	r4, r0
 800fe28:	4623      	mov	r3, r4
 800fe2a:	d807      	bhi.n	800fe3c <memmove+0x20>
 800fe2c:	1e43      	subs	r3, r0, #1
 800fe2e:	42a1      	cmp	r1, r4
 800fe30:	d008      	beq.n	800fe44 <memmove+0x28>
 800fe32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe3a:	e7f8      	b.n	800fe2e <memmove+0x12>
 800fe3c:	4402      	add	r2, r0
 800fe3e:	4601      	mov	r1, r0
 800fe40:	428a      	cmp	r2, r1
 800fe42:	d100      	bne.n	800fe46 <memmove+0x2a>
 800fe44:	bd10      	pop	{r4, pc}
 800fe46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe4e:	e7f7      	b.n	800fe40 <memmove+0x24>

0800fe50 <__malloc_lock>:
 800fe50:	4801      	ldr	r0, [pc, #4]	; (800fe58 <__malloc_lock+0x8>)
 800fe52:	f7fd bf2e 	b.w	800dcb2 <__retarget_lock_acquire_recursive>
 800fe56:	bf00      	nop
 800fe58:	200004d0 	.word	0x200004d0

0800fe5c <__malloc_unlock>:
 800fe5c:	4801      	ldr	r0, [pc, #4]	; (800fe64 <__malloc_unlock+0x8>)
 800fe5e:	f7fd bf29 	b.w	800dcb4 <__retarget_lock_release_recursive>
 800fe62:	bf00      	nop
 800fe64:	200004d0 	.word	0x200004d0

0800fe68 <_realloc_r>:
 800fe68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe6c:	4680      	mov	r8, r0
 800fe6e:	4614      	mov	r4, r2
 800fe70:	460e      	mov	r6, r1
 800fe72:	b921      	cbnz	r1, 800fe7e <_realloc_r+0x16>
 800fe74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe78:	4611      	mov	r1, r2
 800fe7a:	f7fe bd01 	b.w	800e880 <_malloc_r>
 800fe7e:	b92a      	cbnz	r2, 800fe8c <_realloc_r+0x24>
 800fe80:	f7fe fc92 	bl	800e7a8 <_free_r>
 800fe84:	4625      	mov	r5, r4
 800fe86:	4628      	mov	r0, r5
 800fe88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe8c:	f000 f822 	bl	800fed4 <_malloc_usable_size_r>
 800fe90:	4284      	cmp	r4, r0
 800fe92:	4607      	mov	r7, r0
 800fe94:	d802      	bhi.n	800fe9c <_realloc_r+0x34>
 800fe96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe9a:	d812      	bhi.n	800fec2 <_realloc_r+0x5a>
 800fe9c:	4621      	mov	r1, r4
 800fe9e:	4640      	mov	r0, r8
 800fea0:	f7fe fcee 	bl	800e880 <_malloc_r>
 800fea4:	4605      	mov	r5, r0
 800fea6:	2800      	cmp	r0, #0
 800fea8:	d0ed      	beq.n	800fe86 <_realloc_r+0x1e>
 800feaa:	42bc      	cmp	r4, r7
 800feac:	4622      	mov	r2, r4
 800feae:	4631      	mov	r1, r6
 800feb0:	bf28      	it	cs
 800feb2:	463a      	movcs	r2, r7
 800feb4:	f7fd ff92 	bl	800dddc <memcpy>
 800feb8:	4631      	mov	r1, r6
 800feba:	4640      	mov	r0, r8
 800febc:	f7fe fc74 	bl	800e7a8 <_free_r>
 800fec0:	e7e1      	b.n	800fe86 <_realloc_r+0x1e>
 800fec2:	4635      	mov	r5, r6
 800fec4:	e7df      	b.n	800fe86 <_realloc_r+0x1e>

0800fec6 <abort>:
 800fec6:	b508      	push	{r3, lr}
 800fec8:	2006      	movs	r0, #6
 800feca:	f000 f833 	bl	800ff34 <raise>
 800fece:	2001      	movs	r0, #1
 800fed0:	f7f2 fa66 	bl	80023a0 <_exit>

0800fed4 <_malloc_usable_size_r>:
 800fed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fed8:	1f18      	subs	r0, r3, #4
 800feda:	2b00      	cmp	r3, #0
 800fedc:	bfbc      	itt	lt
 800fede:	580b      	ldrlt	r3, [r1, r0]
 800fee0:	18c0      	addlt	r0, r0, r3
 800fee2:	4770      	bx	lr

0800fee4 <_raise_r>:
 800fee4:	291f      	cmp	r1, #31
 800fee6:	b538      	push	{r3, r4, r5, lr}
 800fee8:	4604      	mov	r4, r0
 800feea:	460d      	mov	r5, r1
 800feec:	d904      	bls.n	800fef8 <_raise_r+0x14>
 800feee:	2316      	movs	r3, #22
 800fef0:	6003      	str	r3, [r0, #0]
 800fef2:	f04f 30ff 	mov.w	r0, #4294967295
 800fef6:	bd38      	pop	{r3, r4, r5, pc}
 800fef8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fefa:	b112      	cbz	r2, 800ff02 <_raise_r+0x1e>
 800fefc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff00:	b94b      	cbnz	r3, 800ff16 <_raise_r+0x32>
 800ff02:	4620      	mov	r0, r4
 800ff04:	f000 f830 	bl	800ff68 <_getpid_r>
 800ff08:	462a      	mov	r2, r5
 800ff0a:	4601      	mov	r1, r0
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff12:	f000 b817 	b.w	800ff44 <_kill_r>
 800ff16:	2b01      	cmp	r3, #1
 800ff18:	d00a      	beq.n	800ff30 <_raise_r+0x4c>
 800ff1a:	1c59      	adds	r1, r3, #1
 800ff1c:	d103      	bne.n	800ff26 <_raise_r+0x42>
 800ff1e:	2316      	movs	r3, #22
 800ff20:	6003      	str	r3, [r0, #0]
 800ff22:	2001      	movs	r0, #1
 800ff24:	e7e7      	b.n	800fef6 <_raise_r+0x12>
 800ff26:	2400      	movs	r4, #0
 800ff28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	4798      	blx	r3
 800ff30:	2000      	movs	r0, #0
 800ff32:	e7e0      	b.n	800fef6 <_raise_r+0x12>

0800ff34 <raise>:
 800ff34:	4b02      	ldr	r3, [pc, #8]	; (800ff40 <raise+0xc>)
 800ff36:	4601      	mov	r1, r0
 800ff38:	6818      	ldr	r0, [r3, #0]
 800ff3a:	f7ff bfd3 	b.w	800fee4 <_raise_r>
 800ff3e:	bf00      	nop
 800ff40:	2000000c 	.word	0x2000000c

0800ff44 <_kill_r>:
 800ff44:	b538      	push	{r3, r4, r5, lr}
 800ff46:	4d07      	ldr	r5, [pc, #28]	; (800ff64 <_kill_r+0x20>)
 800ff48:	2300      	movs	r3, #0
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	4608      	mov	r0, r1
 800ff4e:	4611      	mov	r1, r2
 800ff50:	602b      	str	r3, [r5, #0]
 800ff52:	f7f2 fa15 	bl	8002380 <_kill>
 800ff56:	1c43      	adds	r3, r0, #1
 800ff58:	d102      	bne.n	800ff60 <_kill_r+0x1c>
 800ff5a:	682b      	ldr	r3, [r5, #0]
 800ff5c:	b103      	cbz	r3, 800ff60 <_kill_r+0x1c>
 800ff5e:	6023      	str	r3, [r4, #0]
 800ff60:	bd38      	pop	{r3, r4, r5, pc}
 800ff62:	bf00      	nop
 800ff64:	200004dc 	.word	0x200004dc

0800ff68 <_getpid_r>:
 800ff68:	f7f2 ba02 	b.w	8002370 <_getpid>

0800ff6c <_init>:
 800ff6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff6e:	bf00      	nop
 800ff70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff72:	bc08      	pop	{r3}
 800ff74:	469e      	mov	lr, r3
 800ff76:	4770      	bx	lr

0800ff78 <_fini>:
 800ff78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff7a:	bf00      	nop
 800ff7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff7e:	bc08      	pop	{r3}
 800ff80:	469e      	mov	lr, r3
 800ff82:	4770      	bx	lr
