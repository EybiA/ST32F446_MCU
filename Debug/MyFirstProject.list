
MyFirstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800cde0  0800cde0  0001cde0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5cc  0800d5cc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5cc  0800d5cc  0001d5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5d4  0800d5d4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5d4  0800d5d4  0001d5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5d8  0800d5d8  0001d5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001e0  0800d7bc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  0800d7bc  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b9d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002418  00000000  00000000  00030dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  000331c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00033fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e70  00000000  00000000  00034d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d2a  00000000  00000000  00057b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf725  00000000  00000000  000698a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138fc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054ec  00000000  00000000  00139018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cdc4 	.word	0x0800cdc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800cdc4 	.word	0x0800cdc4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;

/* ----------------------------------FUNCTIONS--------------------------------*/

extern void MX_I2C1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2C1_Init+0x50>)
 800103e:	4a13      	ldr	r2, [pc, #76]	; (800108c <MX_I2C1_Init+0x54>)
 8001040:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_I2C1_Init+0x50>)
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <MX_I2C1_Init+0x58>)
 8001046:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_I2C1_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_I2C1_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_I2C1_Init+0x50>)
 8001056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800105a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <MX_I2C1_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_I2C1_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <MX_I2C1_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_I2C1_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_I2C1_Init+0x50>)
 8001076:	f001 fceb 	bl	8002a50 <HAL_I2C_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001080:	f000 fa5e 	bl	8001540 <Error_Handler>
  }
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200001fc 	.word	0x200001fc
 800108c:	40005400 	.word	0x40005400
 8001090:	000186a0 	.word	0x000186a0

08001094 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1,0xFFFF);
 800109c:	1d39      	adds	r1, r7, #4
 800109e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a2:	2201      	movs	r2, #1
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <__io_putchar+0x20>)
 80010a6:	f005 f89b 	bl	80061e0 <HAL_UART_Transmit>

  return ch;
 80010aa:	687b      	ldr	r3, [r7, #4]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200003b0 	.word	0x200003b0

080010b8 <__io_getchar>:


GETCHAR_PROTOTYPE
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	71fb      	strb	r3, [r7, #7]

  __HAL_UART_CLEAR_OREFLAG(&huart2);
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <__io_getchar+0x38>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <__io_getchar+0x38>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]

  HAL_UART_Receive (&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010d8:	1df9      	adds	r1, r7, #7
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	2201      	movs	r2, #1
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <__io_getchar+0x38>)
 80010e2:	f005 f90f 	bl	8006304 <HAL_UART_Receive>
//  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);

  return ch;
 80010e6:	79fb      	ldrb	r3, [r7, #7]

}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200003b0 	.word	0x200003b0

080010f4 <main>:

/* ----------------------------------MAIN ROUTINE------------------------*/

int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af02      	add	r7, sp, #8

  char input[20]="\0"; // cleaning the CLI input string
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  char cmd[5]="\0";    // and commands
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	2300      	movs	r3, #0
 8001112:	733b      	strb	r3, [r7, #12]
  unsigned int addr;
  unsigned int val;
  int i=0;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24

  setvbuf(stdin, NULL, _IONBF, 0);
 8001118:	4b4d      	ldr	r3, [pc, #308]	; (8001250 <main+0x15c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6858      	ldr	r0, [r3, #4]
 800111e:	2300      	movs	r3, #0
 8001120:	2202      	movs	r2, #2
 8001122:	2100      	movs	r1, #0
 8001124:	f007 f816 	bl	8008154 <setvbuf>

  /* Initialize all configured peripherals */

  HAL_Init();
 8001128:	f000 fdf0 	bl	8001d0c <HAL_Init>
  SystemClock_Config();
 800112c:	f000 f8aa 	bl	8001284 <SystemClock_Config>
  MX_GPIO_Init();
 8001130:	f000 f9d0 	bl	80014d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001134:	f000 f9a6 	bl	8001484 <MX_DMA_Init>
  MX_I2C1_Init();
 8001138:	f7ff ff7e 	bl	8001038 <MX_I2C1_Init>
  MX_I2S1_Init();
 800113c:	f000 f912 	bl	8001364 <MX_I2S1_Init>
  MX_SPI2_Init();
 8001140:	f000 f93e 	bl	80013c0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001144:	f000 f974 	bl	8001430 <MX_USART2_UART_Init>

  write_register (0x4002040c,0x5100);
 8001148:	f44f 41a2 	mov.w	r1, #20736	; 0x5100
 800114c:	4841      	ldr	r0, [pc, #260]	; (8001254 <main+0x160>)
 800114e:	f000 fa15 	bl	800157c <write_register>

  /* Print greeting notification  */

  help_menu();
 8001152:	f000 fa21 	bl	8001598 <help_menu>

 // main CLI loop
  while (1)
  {

	  	 printf("\rST32F446>>");
 8001156:	4840      	ldr	r0, [pc, #256]	; (8001258 <main+0x164>)
 8001158:	f006 ff56 	bl	8008008 <iprintf>

	  	 scanf("%[^\r]", input);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	483e      	ldr	r0, [pc, #248]	; (800125c <main+0x168>)
 8001164:	f006 ffde 	bl	8008124 <iscanf>

		 sscanf(input,"%s %x %x",cmd,&addr,&val);
 8001168:	1d39      	adds	r1, r7, #4
 800116a:	f107 0208 	add.w	r2, r7, #8
 800116e:	f107 0010 	add.w	r0, r7, #16
 8001172:	463b      	mov	r3, r7
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	460b      	mov	r3, r1
 8001178:	4939      	ldr	r1, [pc, #228]	; (8001260 <main+0x16c>)
 800117a:	f007 f8d7 	bl	800832c <siscanf>


	  	 if (strstr(cmd,"rd")) {         // reading from a register
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	4938      	ldr	r1, [pc, #224]	; (8001264 <main+0x170>)
 8001184:	4618      	mov	r0, r3
 8001186:	f007 f942 	bl	800840e <strstr>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d004      	beq.n	800119a <main+0xa6>
	  		read_register(addr);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f9e0 	bl	8001558 <read_register>
 8001198:	e04c      	b.n	8001234 <main+0x140>

	  	 }

	  	 else if (strstr(cmd,"dump")) {    // writing to a register
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4932      	ldr	r1, [pc, #200]	; (8001268 <main+0x174>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f007 f934 	bl	800840e <strstr>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d011      	beq.n	80011d0 <main+0xdc>

	  		 for (i=0; i<val; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
 80011b0:	e009      	b.n	80011c6 <main+0xd2>
	  			read_register(addr);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f9cf 	bl	8001558 <read_register>
	  			addr=addr+4;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3304      	adds	r3, #4
 80011be:	607b      	str	r3, [r7, #4]
	  		 for (i=0; i<val; i++) {
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	3301      	adds	r3, #1
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
 80011c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d3f1      	bcc.n	80011b2 <main+0xbe>
 80011ce:	e031      	b.n	8001234 <main+0x140>
	  		 }

	  	 }

	  	 else if (strstr(cmd,"wr")) {    // registers' dump
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	4925      	ldr	r1, [pc, #148]	; (800126c <main+0x178>)
 80011d6:	4618      	mov	r0, r3
 80011d8:	f007 f919 	bl	800840e <strstr>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d009      	beq.n	80011f6 <main+0x102>
	  		write_register(addr,val);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f9c7 	bl	800157c <write_register>
	  		printf("\r\n");
 80011ee:	4820      	ldr	r0, [pc, #128]	; (8001270 <main+0x17c>)
 80011f0:	f006 ff90 	bl	8008114 <puts>
 80011f4:	e01e      	b.n	8001234 <main+0x140>

	  	 }

	  	 else if (strstr(cmd,"quit")) {    // writing to a register
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	491e      	ldr	r1, [pc, #120]	; (8001274 <main+0x180>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f007 f906 	bl	800840e <strstr>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <main+0x122>
	  		printf("\r\n<<<<<<<Goodbye from ST32F4466RTE MCU UART terminal>>>>>\r\n");
 8001208:	481b      	ldr	r0, [pc, #108]	; (8001278 <main+0x184>)
 800120a:	f006 ff83 	bl	8008114 <puts>
	  		printf("\r\n");
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <main+0x17c>)
 8001210:	f006 ff80 	bl	8008114 <puts>
	  		break;
 8001214:	e017      	b.n	8001246 <main+0x152>
	  	 }

	  	 else if (strstr(cmd,"help")) {     // help menu of commands
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4918      	ldr	r1, [pc, #96]	; (800127c <main+0x188>)
 800121c:	4618      	mov	r0, r3
 800121e:	f007 f8f6 	bl	800840e <strstr>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <main+0x13a>

	  		help_menu();
 8001228:	f000 f9b6 	bl	8001598 <help_menu>
 800122c:	e002      	b.n	8001234 <main+0x140>

	  	 }

	  	 else {

	  		 printf("\runknown command, please type again...\r\n");
 800122e:	4814      	ldr	r0, [pc, #80]	; (8001280 <main+0x18c>)
 8001230:	f006 ff70 	bl	8008114 <puts>


	  	 	  }

	  	 setvbuf(stdin, NULL, _IONBF, 0);
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <main+0x15c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6858      	ldr	r0, [r3, #4]
 800123a:	2300      	movs	r3, #0
 800123c:	2202      	movs	r2, #2
 800123e:	2100      	movs	r1, #0
 8001240:	f006 ff88 	bl	8008154 <setvbuf>
	  	 printf("\rST32F446>>");
 8001244:	e787      	b.n	8001156 <main+0x62>
 8001246:	2300      	movs	r3, #0


  	  }  // end of while loop

} // end of main code
 8001248:	4618      	mov	r0, r3
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2000000c 	.word	0x2000000c
 8001254:	4002040c 	.word	0x4002040c
 8001258:	0800cde0 	.word	0x0800cde0
 800125c:	0800cdec 	.word	0x0800cdec
 8001260:	0800cdf4 	.word	0x0800cdf4
 8001264:	0800ce00 	.word	0x0800ce00
 8001268:	0800ce04 	.word	0x0800ce04
 800126c:	0800ce0c 	.word	0x0800ce0c
 8001270:	0800ce10 	.word	0x0800ce10
 8001274:	0800ce14 	.word	0x0800ce14
 8001278:	0800ce1c 	.word	0x0800ce1c
 800127c:	0800ce58 	.word	0x0800ce58
 8001280:	0800ce60 	.word	0x0800ce60

08001284 <SystemClock_Config>:
/* =========================================================================================
 * */
/* ----------------------------------AUX functions------------------------*/

void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	; 0x50
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2234      	movs	r2, #52	; 0x34
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f006 f836 	bl	8007304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <SystemClock_Config+0xd8>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012b0:	4a2a      	ldr	r2, [pc, #168]	; (800135c <SystemClock_Config+0xd8>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <SystemClock_Config+0xd8>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a27      	ldr	r2, [pc, #156]	; (800135c <SystemClock_Config+0xd8>)
 80012be:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012c2:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <SystemClock_Config+0xd8>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a23      	ldr	r2, [pc, #140]	; (800135c <SystemClock_Config+0xd8>)
 80012ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <SystemClock_Config+0xd8>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012e0:	2300      	movs	r3, #0
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <SystemClock_Config+0xdc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <SystemClock_Config+0xdc>)
 80012ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <SystemClock_Config+0xdc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001300:	2302      	movs	r3, #2
 8001302:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001304:	2301      	movs	r3, #1
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001308:	2310      	movs	r3, #16
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001310:	2300      	movs	r3, #0
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4618      	mov	r0, r3
 800131a:	f004 fbed 	bl	8005af8 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001324:	f000 f90c 	bl	8001540 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	230f      	movs	r3, #15
 800132a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f003 fba2 	bl	8004a8c <HAL_RCC_ClockConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800134e:	f000 f8f7 	bl	8001540 <Error_Handler>
  }
}
 8001352:	bf00      	nop
 8001354:	3750      	adds	r7, #80	; 0x50
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40007000 	.word	0x40007000

08001364 <MX_I2S1_Init>:

static void MX_I2S1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0

  hi2s1.Instance = SPI1;
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <MX_I2S1_Init+0x54>)
 800136a:	4a14      	ldr	r2, [pc, #80]	; (80013bc <MX_I2S1_Init+0x58>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2S1_Init+0x54>)
 8001370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001374:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <MX_I2S1_Init+0x54>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_I2S1_Init+0x54>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <MX_I2S1_Init+0x54>)
 8001384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001388:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_I2S1_Init+0x54>)
 800138c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001390:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_I2S1_Init+0x54>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_I2S1_Init+0x54>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_I2S1_Init+0x54>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_I2S1_Init+0x54>)
 80013a6:	f003 f973 	bl	8004690 <HAL_I2S_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 80013b0:	f000 f8c6 	bl	8001540 <Error_Handler>
  }

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200002b0 	.word	0x200002b0
 80013bc:	40013000 	.word	0x40013000

080013c0 <MX_SPI2_Init>:


static void MX_SPI2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_SPI2_Init+0x68>)
 80013c6:	4a19      	ldr	r2, [pc, #100]	; (800142c <MX_SPI2_Init+0x6c>)
 80013c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_SPI2_Init+0x68>)
 80013cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_SPI2_Init+0x68>)
 80013d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013d8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_SPI2_Init+0x68>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_SPI2_Init+0x68>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_SPI2_Init+0x68>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_SPI2_Init+0x68>)
 80013ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_SPI2_Init+0x68>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_SPI2_Init+0x68>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_SPI2_Init+0x68>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_SPI2_Init+0x68>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_SPI2_Init+0x68>)
 800140e:	220a      	movs	r2, #10
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_SPI2_Init+0x68>)
 8001414:	f004 fe0e 	bl	8006034 <HAL_SPI_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800141e:	f000 f88f 	bl	8001540 <Error_Handler>
  }

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002f8 	.word	0x200002f8
 800142c:	40003800 	.word	0x40003800

08001430 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MX_USART2_UART_Init+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_USART2_UART_Init+0x4c>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART2_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001468:	f004 fe6d 	bl	8006146 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001472:	f000 f865 	bl	8001540 <Error_Handler>
  }

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200003b0 	.word	0x200003b0
 8001480:	40004400 	.word	0x40004400

08001484 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_DMA_Init+0x4c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <MX_DMA_Init+0x4c>)
 8001494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <MX_DMA_Init+0x4c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	200b      	movs	r0, #11
 80014ac:	f000 fd7b 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014b0:	200b      	movs	r0, #11
 80014b2:	f000 fd94 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	200e      	movs	r0, #14
 80014bc:	f000 fd73 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80014c0:	200e      	movs	r0, #14
 80014c2:	f000 fd8c 	bl	8001fde <HAL_NVIC_EnableIRQ>

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_GPIO_Init+0x68>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a16      	ldr	r2, [pc, #88]	; (800153c <MX_GPIO_Init+0x68>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_GPIO_Init+0x68>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_GPIO_Init+0x68>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <MX_GPIO_Init+0x68>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <MX_GPIO_Init+0x68>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_GPIO_Init+0x68>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <MX_GPIO_Init+0x68>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_GPIO_Init+0x68>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800

08001540 <Error_Handler>:


void Error_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop

  __disable_irq();
  	 printf ("An error occured! Will break now...");
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <Error_Handler+0x14>)
 800154a:	f006 fd5d 	bl	8008008 <iprintf>

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	0800ce88 	.word	0x0800ce88

08001558 <read_register>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void read_register(unsigned int addr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	 unsigned int  data;
	 // reading a register command

	 data = READ_REG(*((unsigned int *)addr));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
	 printf("\r\nRegister 0x%x, value : 0x%x \r\n",addr,data);
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <read_register+0x20>)
 800156c:	f006 fd4c 	bl	8008008 <iprintf>

}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	0800ceac 	.word	0x0800ceac

0800157c <write_register>:

void write_register(unsigned int addr, unsigned int val)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]

	*((unsigned int *)addr)=((unsigned int *)val);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]


}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <help_menu>:

void help_menu(void)

{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	  printf("\r<<<<<<<Hello from ST32F4466RTE MCU UART terminal>>>>>\r\n");
 800159c:	480f      	ldr	r0, [pc, #60]	; (80015dc <help_menu+0x44>)
 800159e:	f006 fdb9 	bl	8008114 <puts>
	  printf("\r\n");
 80015a2:	480f      	ldr	r0, [pc, #60]	; (80015e0 <help_menu+0x48>)
 80015a4:	f006 fdb6 	bl	8008114 <puts>
	  printf("\r<<<<<<CLI supported commands >>>>>\r\n");
 80015a8:	480e      	ldr	r0, [pc, #56]	; (80015e4 <help_menu+0x4c>)
 80015aa:	f006 fdb3 	bl	8008114 <puts>
	  printf("\r===============================================================================================\r\n");
 80015ae:	480e      	ldr	r0, [pc, #56]	; (80015e8 <help_menu+0x50>)
 80015b0:	f006 fdb0 	bl	8008114 <puts>
	  printf("\help                  : list of supported commands\r\n");
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <help_menu+0x54>)
 80015b6:	f006 fdad 	bl	8008114 <puts>
	  printf("rd <xxxx>             : read a register address <xxxx>\r\n");
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <help_menu+0x58>)
 80015bc:	f006 fdaa 	bl	8008114 <puts>
	  printf("dump <xxxx> <yyyy>    : register dump from address <xxxx> # of addresses <yyyy> (32 bit each)\r\n");
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <help_menu+0x5c>)
 80015c2:	f006 fda7 	bl	8008114 <puts>
	  printf("wr <xxxx> <yyyy>      : write to a register <xxxx> value <yyyy>\r\n");
 80015c6:	480c      	ldr	r0, [pc, #48]	; (80015f8 <help_menu+0x60>)
 80015c8:	f006 fda4 	bl	8008114 <puts>
	  printf("quit                  : Exit Command Line terminal \r\n");
 80015cc:	480b      	ldr	r0, [pc, #44]	; (80015fc <help_menu+0x64>)
 80015ce:	f006 fda1 	bl	8008114 <puts>
	  printf("\r===============================================================================================\r\n");
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <help_menu+0x50>)
 80015d4:	f006 fd9e 	bl	8008114 <puts>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	0800ced0 	.word	0x0800ced0
 80015e0:	0800ce10 	.word	0x0800ce10
 80015e4:	0800cf08 	.word	0x0800cf08
 80015e8:	0800cf30 	.word	0x0800cf30
 80015ec:	0800cf94 	.word	0x0800cf94
 80015f0:	0800cfc8 	.word	0x0800cfc8
 80015f4:	0800d000 	.word	0x0800d000
 80015f8:	0800d060 	.word	0x0800d060
 80015fc:	0800d0a4 	.word	0x0800d0a4

08001600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_MspInit+0x4c>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	4a0f      	ldr	r2, [pc, #60]	; (800164c <HAL_MspInit+0x4c>)
 8001610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001614:	6453      	str	r3, [r2, #68]	; 0x44
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_MspInit+0x4c>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_MspInit+0x4c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_MspInit+0x4c>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_MspInit+0x4c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a38      	ldr	r2, [pc, #224]	; (8001750 <HAL_I2C_MspInit+0x100>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d169      	bne.n	8001746 <HAL_I2C_MspInit+0xf6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <HAL_I2C_MspInit+0x104>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a36      	ldr	r2, [pc, #216]	; (8001754 <HAL_I2C_MspInit+0x104>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b34      	ldr	r3, [pc, #208]	; (8001754 <HAL_I2C_MspInit+0x104>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800168e:	23c0      	movs	r3, #192	; 0xc0
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001692:	2312      	movs	r3, #18
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800169e:	2304      	movs	r3, #4
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	482b      	ldr	r0, [pc, #172]	; (8001758 <HAL_I2C_MspInit+0x108>)
 80016aa:	f001 f83d 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b28      	ldr	r3, [pc, #160]	; (8001754 <HAL_I2C_MspInit+0x104>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a27      	ldr	r2, [pc, #156]	; (8001754 <HAL_I2C_MspInit+0x104>)
 80016b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b25      	ldr	r3, [pc, #148]	; (8001754 <HAL_I2C_MspInit+0x104>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_I2C_MspInit+0x10c>)
 80016cc:	4a24      	ldr	r2, [pc, #144]	; (8001760 <HAL_I2C_MspInit+0x110>)
 80016ce:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_I2C_MspInit+0x10c>)
 80016d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_I2C_MspInit+0x10c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <HAL_I2C_MspInit+0x10c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_I2C_MspInit+0x10c>)
 80016e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_I2C_MspInit+0x10c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_I2C_MspInit+0x10c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_I2C_MspInit+0x10c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_I2C_MspInit+0x10c>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_I2C_MspInit+0x10c>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800170a:	4814      	ldr	r0, [pc, #80]	; (800175c <HAL_I2C_MspInit+0x10c>)
 800170c:	f000 fc82 	bl	8002014 <HAL_DMA_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001716:	f7ff ff13 	bl	8001540 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_I2C_MspInit+0x10c>)
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
 8001720:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_I2C_MspInit+0x10c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	201f      	movs	r0, #31
 800172c:	f000 fc3b 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001730:	201f      	movs	r0, #31
 8001732:	f000 fc54 	bl	8001fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2020      	movs	r0, #32
 800173c:	f000 fc33 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001740:	2020      	movs	r0, #32
 8001742:	f000 fc4c 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	; 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40005400 	.word	0x40005400
 8001754:	40023800 	.word	0x40023800
 8001758:	40020400 	.word	0x40020400
 800175c:	20000250 	.word	0x20000250
 8001760:	40026010 	.word	0x40026010

08001764 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0a2      	sub	sp, #136	; 0x88
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800177c:	f107 0318 	add.w	r3, r7, #24
 8001780:	225c      	movs	r2, #92	; 0x5c
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f005 fdbd 	bl	8007304 <memset>
  if(hi2s->Instance==SPI1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a37      	ldr	r2, [pc, #220]	; (800186c <HAL_I2S_MspInit+0x108>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d167      	bne.n	8001864 <HAL_I2S_MspInit+0x100>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8001794:	2302      	movs	r3, #2
 8001796:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001798:	23c0      	movs	r3, #192	; 0xc0
 800179a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 800179c:	2302      	movs	r3, #2
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 80017a0:	2310      	movs	r3, #16
 80017a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80017ac:	2301      	movs	r3, #1
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 80017b0:	2300      	movs	r3, #0
 80017b2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b4:	f107 0318 	add.w	r3, r7, #24
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 fa81 	bl	8004cc0 <HAL_RCCEx_PeriphCLKConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 80017c4:	f7ff febc 	bl	8001540 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	4b28      	ldr	r3, [pc, #160]	; (8001870 <HAL_I2S_MspInit+0x10c>)
 80017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d0:	4a27      	ldr	r2, [pc, #156]	; (8001870 <HAL_I2S_MspInit+0x10c>)
 80017d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017d6:	6453      	str	r3, [r2, #68]	; 0x44
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <HAL_I2S_MspInit+0x10c>)
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_I2S_MspInit+0x10c>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a20      	ldr	r2, [pc, #128]	; (8001870 <HAL_I2S_MspInit+0x10c>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_I2S_MspInit+0x10c>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_I2S_MspInit+0x10c>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	4a19      	ldr	r2, [pc, #100]	; (8001870 <HAL_I2S_MspInit+0x10c>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6313      	str	r3, [r2, #48]	; 0x30
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_I2S_MspInit+0x10c>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800181c:	23b0      	movs	r3, #176	; 0xb0
 800181e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800182e:	2305      	movs	r3, #5
 8001830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001838:	4619      	mov	r1, r3
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <HAL_I2S_MspInit+0x110>)
 800183c:	f000 ff74 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001840:	2310      	movs	r3, #16
 8001842:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001852:	2305      	movs	r3, #5
 8001854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800185c:	4619      	mov	r1, r3
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <HAL_I2S_MspInit+0x114>)
 8001860:	f000 ff62 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3788      	adds	r7, #136	; 0x88
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40013000 	.word	0x40013000
 8001870:	40023800 	.word	0x40023800
 8001874:	40020000 	.word	0x40020000
 8001878:	40020800 	.word	0x40020800

0800187c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a3f      	ldr	r2, [pc, #252]	; (8001998 <HAL_SPI_MspInit+0x11c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d177      	bne.n	800198e <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b3e      	ldr	r3, [pc, #248]	; (800199c <HAL_SPI_MspInit+0x120>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a3d      	ldr	r2, [pc, #244]	; (800199c <HAL_SPI_MspInit+0x120>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <HAL_SPI_MspInit+0x120>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b37      	ldr	r3, [pc, #220]	; (800199c <HAL_SPI_MspInit+0x120>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a36      	ldr	r2, [pc, #216]	; (800199c <HAL_SPI_MspInit+0x120>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <HAL_SPI_MspInit+0x120>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_SPI_MspInit+0x120>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a2f      	ldr	r2, [pc, #188]	; (800199c <HAL_SPI_MspInit+0x120>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_SPI_MspInit+0x120>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018f2:	2302      	movs	r3, #2
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001902:	2307      	movs	r3, #7
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4824      	ldr	r0, [pc, #144]	; (80019a0 <HAL_SPI_MspInit+0x124>)
 800190e:	f000 ff0b 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001924:	2305      	movs	r3, #5
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	481d      	ldr	r0, [pc, #116]	; (80019a4 <HAL_SPI_MspInit+0x128>)
 8001930:	f000 fefa 	bl	8002728 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 8001936:	4a1d      	ldr	r2, [pc, #116]	; (80019ac <HAL_SPI_MspInit+0x130>)
 8001938:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 800194e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001952:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 8001974:	f000 fb4e 	bl	8002014 <HAL_DMA_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 800197e:	f7ff fddf 	bl	8001540 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 8001986:	64da      	str	r2, [r3, #76]	; 0x4c
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_SPI_MspInit+0x12c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40003800 	.word	0x40003800
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020800 	.word	0x40020800
 80019a4:	40020400 	.word	0x40020400
 80019a8:	20000350 	.word	0x20000350
 80019ac:	40026058 	.word	0x40026058

080019b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <HAL_UART_MspInit+0x94>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d133      	bne.n	8001a3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_UART_MspInit+0x98>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_UART_MspInit+0x98>)
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_UART_MspInit+0x98>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_UART_MspInit+0x98>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_UART_MspInit+0x98>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_UART_MspInit+0x98>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4809      	ldr	r0, [pc, #36]	; (8001a4c <HAL_UART_MspInit+0x9c>)
 8001a26:	f000 fe7f 	bl	8002728 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	2026      	movs	r0, #38	; 0x26
 8001a30:	f000 fab9 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a34:	2026      	movs	r0, #38	; 0x26
 8001a36:	f000 fad2 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	; 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40004400 	.word	0x40004400
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020000 	.word	0x40020000

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <NMI_Handler+0x4>

08001a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9c:	f000 f988 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <DMA1_Stream0_IRQHandler+0x10>)
 8001aaa:	f000 fbf3 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000250 	.word	0x20000250

08001ab8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <DMA1_Stream3_IRQHandler+0x10>)
 8001abe:	f000 fbe9 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000350 	.word	0x20000350

08001acc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <I2C1_EV_IRQHandler+0x10>)
 8001ad2:	f001 f901 	bl	8002cd8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200001fc 	.word	0x200001fc

08001ae0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <I2C1_ER_IRQHandler+0x10>)
 8001ae6:	f001 fa68 	bl	8002fba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200001fc 	.word	0x200001fc

08001af4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0

  HAL_UART_IRQHandler(&huart2);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <USART2_IRQHandler+0x10>)
 8001afa:	f004 fca5 	bl	8006448 <HAL_UART_IRQHandler>

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200003b0 	.word	0x200003b0

08001b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_kill>:

int _kill(int pid, int sig)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b22:	f005 fbc5 	bl	80072b0 <__errno>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2216      	movs	r2, #22
 8001b2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_exit>:

void _exit (int status)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ffe7 	bl	8001b18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b4a:	e7fe      	b.n	8001b4a <_exit+0x12>

08001b4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e00a      	b.n	8001b74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b5e:	f7ff faab 	bl	80010b8 <__io_getchar>
 8001b62:	4601      	mov	r1, r0
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	60ba      	str	r2, [r7, #8]
 8001b6a:	b2ca      	uxtb	r2, r1
 8001b6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf0      	blt.n	8001b5e <_read+0x12>
  }

  return len;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e009      	b.n	8001bac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	60ba      	str	r2, [r7, #8]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fa77 	bl	8001094 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf1      	blt.n	8001b98 <_write+0x12>
  }
  return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_close>:

int _close(int file)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be6:	605a      	str	r2, [r3, #4]
  return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_isatty>:

int _isatty(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f005 fb2a 	bl	80072b0 <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20020000 	.word	0x20020000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	200003f4 	.word	0x200003f4
 8001c90:	20000410 	.word	0x20000410

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cbe:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc0:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd4:	4c0b      	ldr	r4, [pc, #44]	; (8001d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ce2:	f7ff ffd7 	bl	8001c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f005 fae9 	bl	80072bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff fa03 	bl	80010f4 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001cfc:	0800d5dc 	.word	0x0800d5dc
  ldr r2, =_sbss
 8001d00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d04:	2000040c 	.word	0x2000040c

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 f92b 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fc5e 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f943 	bl	8001ffa <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 f90b 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	; (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000008 	.word	0x20000008
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	200003f8 	.word	0x200003f8

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	200003f8 	.word	0x200003f8

08001df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	60d3      	str	r3, [r2, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <__NVIC_GetPriorityGrouping+0x18>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	f003 0307 	and.w	r3, r3, #7
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	db0b      	blt.n	8001e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4907      	ldr	r1, [pc, #28]	; (8001e8c <__NVIC_EnableIRQ+0x38>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	2001      	movs	r0, #1
 8001e76:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100

08001e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	; (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	; (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
         );
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff29 	bl	8001df0 <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff3e 	bl	8001e38 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff8e 	bl	8001ee4 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5d 	bl	8001e90 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff31 	bl	8001e54 <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa2 	bl	8001f4c <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff feda 	bl	8001dd8 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e099      	b.n	8002164 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002050:	e00f      	b.n	8002072 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002052:	f7ff fec1 	bl	8001dd8 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b05      	cmp	r3, #5
 800205e:	d908      	bls.n	8002072 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2203      	movs	r2, #3
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e078      	b.n	8002164 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e8      	bne.n	8002052 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4b38      	ldr	r3, [pc, #224]	; (800216c <HAL_DMA_Init+0x158>)
 800208c:	4013      	ands	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800209e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d107      	bne.n	80020dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4313      	orrs	r3, r2
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f023 0307 	bic.w	r3, r3, #7
 80020f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	2b04      	cmp	r3, #4
 8002104:	d117      	bne.n	8002136 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fa89 	bl	8002630 <DMA_CheckFifoParam>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2240      	movs	r2, #64	; 0x40
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002132:	2301      	movs	r3, #1
 8002134:	e016      	b.n	8002164 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fa40 	bl	80025c4 <DMA_CalcBaseAndBitshift>
 8002144:	4603      	mov	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	223f      	movs	r2, #63	; 0x3f
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	f010803f 	.word	0xf010803f

08002170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800217e:	f7ff fe2b 	bl	8001dd8 <HAL_GetTick>
 8002182:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d008      	beq.n	80021a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e052      	b.n	8002248 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0216 	bic.w	r2, r2, #22
 80021b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <HAL_DMA_Abort+0x62>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0208 	bic.w	r2, r2, #8
 80021e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f2:	e013      	b.n	800221c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f4:	f7ff fdf0 	bl	8001dd8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d90c      	bls.n	800221c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2220      	movs	r2, #32
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2203      	movs	r2, #3
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e015      	b.n	8002248 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e4      	bne.n	80021f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	223f      	movs	r2, #63	; 0x3f
 8002230:	409a      	lsls	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d004      	beq.n	800226e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00c      	b.n	8002288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2205      	movs	r2, #5
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022a0:	4b8e      	ldr	r3, [pc, #568]	; (80024dc <HAL_DMA_IRQHandler+0x248>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a8e      	ldr	r2, [pc, #568]	; (80024e0 <HAL_DMA_IRQHandler+0x24c>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0a9b      	lsrs	r3, r3, #10
 80022ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	2208      	movs	r2, #8
 80022c0:	409a      	lsls	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01a      	beq.n	8002300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0204 	bic.w	r2, r2, #4
 80022e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	2208      	movs	r2, #8
 80022ee:	409a      	lsls	r2, r3
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	2201      	movs	r2, #1
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d012      	beq.n	8002336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	2201      	movs	r2, #1
 8002324:	409a      	lsls	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232e:	f043 0202 	orr.w	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	2204      	movs	r2, #4
 800233c:	409a      	lsls	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d012      	beq.n	800236c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00b      	beq.n	800236c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002358:	2204      	movs	r2, #4
 800235a:	409a      	lsls	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002364:	f043 0204 	orr.w	r2, r3, #4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	2210      	movs	r2, #16
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d043      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d03c      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	2210      	movs	r2, #16
 8002390:	409a      	lsls	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d018      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d108      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d024      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
 80023c2:	e01f      	b.n	8002404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01b      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
 80023d4:	e016      	b.n	8002404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d107      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0208 	bic.w	r2, r2, #8
 80023f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	2220      	movs	r2, #32
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 808f 	beq.w	8002534 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8087 	beq.w	8002534 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	2220      	movs	r2, #32
 800242c:	409a      	lsls	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b05      	cmp	r3, #5
 800243c:	d136      	bne.n	80024ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0216 	bic.w	r2, r2, #22
 800244c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800245c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <HAL_DMA_IRQHandler+0x1da>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0208 	bic.w	r2, r2, #8
 800247c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002482:	223f      	movs	r2, #63	; 0x3f
 8002484:	409a      	lsls	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d07e      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
        }
        return;
 80024aa:	e079      	b.n	80025a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01d      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d031      	beq.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
 80024d8:	e02c      	b.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
 80024da:	bf00      	nop
 80024dc:	20000000 	.word	0x20000000
 80024e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d023      	beq.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
 80024f4:	e01e      	b.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10f      	bne.n	8002524 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0210 	bic.w	r2, r2, #16
 8002512:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	2b00      	cmp	r3, #0
 800253a:	d032      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d022      	beq.n	800258e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2205      	movs	r2, #5
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	3301      	adds	r3, #1
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	d307      	bcc.n	800257c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f2      	bne.n	8002560 <HAL_DMA_IRQHandler+0x2cc>
 800257a:	e000      	b.n	800257e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800257c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
 800259e:	e000      	b.n	80025a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025a0:	bf00      	nop
    }
  }
}
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b6:	b2db      	uxtb	r3, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	3b10      	subs	r3, #16
 80025d4:	4a14      	ldr	r2, [pc, #80]	; (8002628 <DMA_CalcBaseAndBitshift+0x64>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025de:	4a13      	ldr	r2, [pc, #76]	; (800262c <DMA_CalcBaseAndBitshift+0x68>)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d909      	bls.n	8002606 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	1d1a      	adds	r2, r3, #4
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	659a      	str	r2, [r3, #88]	; 0x58
 8002604:	e007      	b.n	8002616 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800260e:	f023 0303 	bic.w	r3, r3, #3
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	aaaaaaab 	.word	0xaaaaaaab
 800262c:	0800d100 	.word	0x0800d100

08002630 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d11f      	bne.n	800268a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d856      	bhi.n	80026fe <DMA_CheckFifoParam+0xce>
 8002650:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <DMA_CheckFifoParam+0x28>)
 8002652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002656:	bf00      	nop
 8002658:	08002669 	.word	0x08002669
 800265c:	0800267b 	.word	0x0800267b
 8002660:	08002669 	.word	0x08002669
 8002664:	080026ff 	.word	0x080026ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d046      	beq.n	8002702 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002678:	e043      	b.n	8002702 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002682:	d140      	bne.n	8002706 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002688:	e03d      	b.n	8002706 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002692:	d121      	bne.n	80026d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d837      	bhi.n	800270a <DMA_CheckFifoParam+0xda>
 800269a:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <DMA_CheckFifoParam+0x70>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	080026b1 	.word	0x080026b1
 80026a4:	080026b7 	.word	0x080026b7
 80026a8:	080026b1 	.word	0x080026b1
 80026ac:	080026c9 	.word	0x080026c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      break;
 80026b4:	e030      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d025      	beq.n	800270e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c6:	e022      	b.n	800270e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026d0:	d11f      	bne.n	8002712 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026d6:	e01c      	b.n	8002712 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d903      	bls.n	80026e6 <DMA_CheckFifoParam+0xb6>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d003      	beq.n	80026ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026e4:	e018      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
      break;
 80026ea:	e015      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00e      	beq.n	8002716 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      break;
 80026fc:	e00b      	b.n	8002716 <DMA_CheckFifoParam+0xe6>
      break;
 80026fe:	bf00      	nop
 8002700:	e00a      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      break;
 8002702:	bf00      	nop
 8002704:	e008      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      break;
 8002706:	bf00      	nop
 8002708:	e006      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      break;
 800270a:	bf00      	nop
 800270c:	e004      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      break;
 800270e:	bf00      	nop
 8002710:	e002      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      break;   
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <DMA_CheckFifoParam+0xe8>
      break;
 8002716:	bf00      	nop
    }
  } 
  
  return status; 
 8002718:	7bfb      	ldrb	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	e165      	b.n	8002a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002744:	2201      	movs	r2, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	429a      	cmp	r2, r3
 800275e:	f040 8154 	bne.w	8002a0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d005      	beq.n	800277a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002776:	2b02      	cmp	r3, #2
 8002778:	d130      	bne.n	80027dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 0201 	and.w	r2, r3, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d017      	beq.n	8002818 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d123      	bne.n	800286c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	08da      	lsrs	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3208      	adds	r2, #8
 800282c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	220f      	movs	r2, #15
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	08da      	lsrs	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3208      	adds	r2, #8
 8002866:	69b9      	ldr	r1, [r7, #24]
 8002868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0203 	and.w	r2, r3, #3
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80ae 	beq.w	8002a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b5d      	ldr	r3, [pc, #372]	; (8002a28 <HAL_GPIO_Init+0x300>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a5c      	ldr	r2, [pc, #368]	; (8002a28 <HAL_GPIO_Init+0x300>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b5a      	ldr	r3, [pc, #360]	; (8002a28 <HAL_GPIO_Init+0x300>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ca:	4a58      	ldr	r2, [pc, #352]	; (8002a2c <HAL_GPIO_Init+0x304>)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3302      	adds	r3, #2
 80028d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4f      	ldr	r2, [pc, #316]	; (8002a30 <HAL_GPIO_Init+0x308>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d025      	beq.n	8002942 <HAL_GPIO_Init+0x21a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4e      	ldr	r2, [pc, #312]	; (8002a34 <HAL_GPIO_Init+0x30c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01f      	beq.n	800293e <HAL_GPIO_Init+0x216>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4d      	ldr	r2, [pc, #308]	; (8002a38 <HAL_GPIO_Init+0x310>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d019      	beq.n	800293a <HAL_GPIO_Init+0x212>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4c      	ldr	r2, [pc, #304]	; (8002a3c <HAL_GPIO_Init+0x314>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_GPIO_Init+0x20e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4b      	ldr	r2, [pc, #300]	; (8002a40 <HAL_GPIO_Init+0x318>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00d      	beq.n	8002932 <HAL_GPIO_Init+0x20a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4a      	ldr	r2, [pc, #296]	; (8002a44 <HAL_GPIO_Init+0x31c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <HAL_GPIO_Init+0x206>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a49      	ldr	r2, [pc, #292]	; (8002a48 <HAL_GPIO_Init+0x320>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_GPIO_Init+0x202>
 8002926:	2306      	movs	r3, #6
 8002928:	e00c      	b.n	8002944 <HAL_GPIO_Init+0x21c>
 800292a:	2307      	movs	r3, #7
 800292c:	e00a      	b.n	8002944 <HAL_GPIO_Init+0x21c>
 800292e:	2305      	movs	r3, #5
 8002930:	e008      	b.n	8002944 <HAL_GPIO_Init+0x21c>
 8002932:	2304      	movs	r3, #4
 8002934:	e006      	b.n	8002944 <HAL_GPIO_Init+0x21c>
 8002936:	2303      	movs	r3, #3
 8002938:	e004      	b.n	8002944 <HAL_GPIO_Init+0x21c>
 800293a:	2302      	movs	r3, #2
 800293c:	e002      	b.n	8002944 <HAL_GPIO_Init+0x21c>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_GPIO_Init+0x21c>
 8002942:	2300      	movs	r3, #0
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	f002 0203 	and.w	r2, r2, #3
 800294a:	0092      	lsls	r2, r2, #2
 800294c:	4093      	lsls	r3, r2
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002954:	4935      	ldr	r1, [pc, #212]	; (8002a2c <HAL_GPIO_Init+0x304>)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	3302      	adds	r3, #2
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002962:	4b3a      	ldr	r3, [pc, #232]	; (8002a4c <HAL_GPIO_Init+0x324>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002986:	4a31      	ldr	r2, [pc, #196]	; (8002a4c <HAL_GPIO_Init+0x324>)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800298c:	4b2f      	ldr	r3, [pc, #188]	; (8002a4c <HAL_GPIO_Init+0x324>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029b0:	4a26      	ldr	r2, [pc, #152]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029b6:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029da:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a04:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <HAL_GPIO_Init+0x324>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b0f      	cmp	r3, #15
 8002a14:	f67f ae96 	bls.w	8002744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40013800 	.word	0x40013800
 8002a30:	40020000 	.word	0x40020000
 8002a34:	40020400 	.word	0x40020400
 8002a38:	40020800 	.word	0x40020800
 8002a3c:	40020c00 	.word	0x40020c00
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40021400 	.word	0x40021400
 8002a48:	40021800 	.word	0x40021800
 8002a4c:	40013c00 	.word	0x40013c00

08002a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e12b      	b.n	8002cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe fdea 	bl	8001650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2224      	movs	r2, #36	; 0x24
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ab4:	f002 f8dc 	bl	8004c70 <HAL_RCC_GetPCLK1Freq>
 8002ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4a81      	ldr	r2, [pc, #516]	; (8002cc4 <HAL_I2C_Init+0x274>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d807      	bhi.n	8002ad4 <HAL_I2C_Init+0x84>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a80      	ldr	r2, [pc, #512]	; (8002cc8 <HAL_I2C_Init+0x278>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	bf94      	ite	ls
 8002acc:	2301      	movls	r3, #1
 8002ace:	2300      	movhi	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e006      	b.n	8002ae2 <HAL_I2C_Init+0x92>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a7d      	ldr	r2, [pc, #500]	; (8002ccc <HAL_I2C_Init+0x27c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	bf94      	ite	ls
 8002adc:	2301      	movls	r3, #1
 8002ade:	2300      	movhi	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0e7      	b.n	8002cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a78      	ldr	r2, [pc, #480]	; (8002cd0 <HAL_I2C_Init+0x280>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0c9b      	lsrs	r3, r3, #18
 8002af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a6a      	ldr	r2, [pc, #424]	; (8002cc4 <HAL_I2C_Init+0x274>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d802      	bhi.n	8002b24 <HAL_I2C_Init+0xd4>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3301      	adds	r3, #1
 8002b22:	e009      	b.n	8002b38 <HAL_I2C_Init+0xe8>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	4a69      	ldr	r2, [pc, #420]	; (8002cd4 <HAL_I2C_Init+0x284>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	099b      	lsrs	r3, r3, #6
 8002b36:	3301      	adds	r3, #1
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	495c      	ldr	r1, [pc, #368]	; (8002cc4 <HAL_I2C_Init+0x274>)
 8002b54:	428b      	cmp	r3, r1
 8002b56:	d819      	bhi.n	8002b8c <HAL_I2C_Init+0x13c>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1e59      	subs	r1, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b66:	1c59      	adds	r1, r3, #1
 8002b68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_I2C_Init+0x138>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1e59      	subs	r1, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b86:	e051      	b.n	8002c2c <HAL_I2C_Init+0x1dc>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	e04f      	b.n	8002c2c <HAL_I2C_Init+0x1dc>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d111      	bne.n	8002bb8 <HAL_I2C_Init+0x168>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1e58      	subs	r0, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	440b      	add	r3, r1
 8002ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e012      	b.n	8002bde <HAL_I2C_Init+0x18e>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1e58      	subs	r0, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	0099      	lsls	r1, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_Init+0x196>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e022      	b.n	8002c2c <HAL_I2C_Init+0x1dc>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10e      	bne.n	8002c0c <HAL_I2C_Init+0x1bc>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1e58      	subs	r0, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6859      	ldr	r1, [r3, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	440b      	add	r3, r1
 8002bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c00:	3301      	adds	r3, #1
 8002c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0a:	e00f      	b.n	8002c2c <HAL_I2C_Init+0x1dc>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e58      	subs	r0, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	0099      	lsls	r1, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	6809      	ldr	r1, [r1, #0]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69da      	ldr	r2, [r3, #28]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6911      	ldr	r1, [r2, #16]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68d2      	ldr	r2, [r2, #12]
 8002c66:	4311      	orrs	r1, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	000186a0 	.word	0x000186a0
 8002cc8:	001e847f 	.word	0x001e847f
 8002ccc:	003d08ff 	.word	0x003d08ff
 8002cd0:	431bde83 	.word	0x431bde83
 8002cd4:	10624dd3 	.word	0x10624dd3

08002cd8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cf8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d00:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	d003      	beq.n	8002d10 <HAL_I2C_EV_IRQHandler+0x38>
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	f040 80c1 	bne.w	8002e92 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10d      	bne.n	8002d46 <HAL_I2C_EV_IRQHandler+0x6e>
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d30:	d003      	beq.n	8002d3a <HAL_I2C_EV_IRQHandler+0x62>
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d38:	d101      	bne.n	8002d3e <HAL_I2C_EV_IRQHandler+0x66>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <HAL_I2C_EV_IRQHandler+0x68>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	f000 8132 	beq.w	8002faa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00c      	beq.n	8002d6a <HAL_I2C_EV_IRQHandler+0x92>
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	0a5b      	lsrs	r3, r3, #9
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d006      	beq.n	8002d6a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f001 fc7b 	bl	8004658 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fd83 	bl	800386e <I2C_Master_SB>
 8002d68:	e092      	b.n	8002e90 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	08db      	lsrs	r3, r3, #3
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_I2C_EV_IRQHandler+0xb2>
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	0a5b      	lsrs	r3, r3, #9
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fdf9 	bl	800397a <I2C_Master_ADD10>
 8002d88:	e082      	b.n	8002e90 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_I2C_EV_IRQHandler+0xd2>
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	0a5b      	lsrs	r3, r3, #9
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fe13 	bl	80039ce <I2C_Master_ADDR>
 8002da8:	e072      	b.n	8002e90 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d03b      	beq.n	8002e2e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc4:	f000 80f3 	beq.w	8002fae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	09db      	lsrs	r3, r3, #7
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00f      	beq.n	8002df4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	0a9b      	lsrs	r3, r3, #10
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d103      	bne.n	8002df4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f9f3 	bl	80031d8 <I2C_MasterTransmit_TXE>
 8002df2:	e04d      	b.n	8002e90 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	089b      	lsrs	r3, r3, #2
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80d6 	beq.w	8002fae <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	0a5b      	lsrs	r3, r3, #9
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80cf 	beq.w	8002fae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e10:	7bbb      	ldrb	r3, [r7, #14]
 8002e12:	2b21      	cmp	r3, #33	; 0x21
 8002e14:	d103      	bne.n	8002e1e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fa7a 	bl	8003310 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e1c:	e0c7      	b.n	8002fae <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	f040 80c4 	bne.w	8002fae <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fae8 	bl	80033fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e2c:	e0bf      	b.n	8002fae <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e3c:	f000 80b7 	beq.w	8002fae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	099b      	lsrs	r3, r3, #6
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00f      	beq.n	8002e6c <HAL_I2C_EV_IRQHandler+0x194>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	0a9b      	lsrs	r3, r3, #10
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <HAL_I2C_EV_IRQHandler+0x194>
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fb5d 	bl	8003524 <I2C_MasterReceive_RXNE>
 8002e6a:	e011      	b.n	8002e90 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 809a 	beq.w	8002fae <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	0a5b      	lsrs	r3, r3, #9
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8093 	beq.w	8002fae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fc06 	bl	800369a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e8e:	e08e      	b.n	8002fae <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e90:	e08d      	b.n	8002fae <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	e007      	b.n	8002eb4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d012      	beq.n	8002ee6 <HAL_I2C_EV_IRQHandler+0x20e>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	0a5b      	lsrs	r3, r3, #9
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00c      	beq.n	8002ee6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002edc:	69b9      	ldr	r1, [r7, #24]
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 ffc4 	bl	8003e6c <I2C_Slave_ADDR>
 8002ee4:	e066      	b.n	8002fb4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_I2C_EV_IRQHandler+0x22e>
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	0a5b      	lsrs	r3, r3, #9
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fffe 	bl	8003f00 <I2C_Slave_STOPF>
 8002f04:	e056      	b.n	8002fb4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f06:	7bbb      	ldrb	r3, [r7, #14]
 8002f08:	2b21      	cmp	r3, #33	; 0x21
 8002f0a:	d002      	beq.n	8002f12 <HAL_I2C_EV_IRQHandler+0x23a>
 8002f0c:	7bbb      	ldrb	r3, [r7, #14]
 8002f0e:	2b29      	cmp	r3, #41	; 0x29
 8002f10:	d125      	bne.n	8002f5e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	09db      	lsrs	r3, r3, #7
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00f      	beq.n	8002f3e <HAL_I2C_EV_IRQHandler+0x266>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	0a9b      	lsrs	r3, r3, #10
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_I2C_EV_IRQHandler+0x266>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 feda 	bl	8003cf0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f3c:	e039      	b.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d033      	beq.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2da>
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	0a5b      	lsrs	r3, r3, #9
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d02d      	beq.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 ff07 	bl	8003d6a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f5c:	e029      	b.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00f      	beq.n	8002f8a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	0a9b      	lsrs	r3, r3, #10
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d103      	bne.n	8002f8a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 ff12 	bl	8003dac <I2C_SlaveReceive_RXNE>
 8002f88:	e014      	b.n	8002fb4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	089b      	lsrs	r3, r3, #2
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00e      	beq.n	8002fb4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	0a5b      	lsrs	r3, r3, #9
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 ff40 	bl	8003e28 <I2C_SlaveReceive_BTF>
 8002fa8:	e004      	b.n	8002fb4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fb2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b08a      	sub	sp, #40	; 0x28
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fdc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00e      	beq.n	8003008 <HAL_I2C_ER_IRQHandler+0x4e>
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003006:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	0a5b      	lsrs	r3, r3, #9
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <HAL_I2C_ER_IRQHandler+0x78>
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	f043 0302 	orr.w	r3, r3, #2
 8003026:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003030:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	0a9b      	lsrs	r3, r3, #10
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d03f      	beq.n	80030be <HAL_I2C_ER_IRQHandler+0x104>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d039      	beq.n	80030be <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800304a:	7efb      	ldrb	r3, [r7, #27]
 800304c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003064:	7ebb      	ldrb	r3, [r7, #26]
 8003066:	2b20      	cmp	r3, #32
 8003068:	d112      	bne.n	8003090 <HAL_I2C_ER_IRQHandler+0xd6>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10f      	bne.n	8003090 <HAL_I2C_ER_IRQHandler+0xd6>
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	2b21      	cmp	r3, #33	; 0x21
 8003074:	d008      	beq.n	8003088 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	2b29      	cmp	r3, #41	; 0x29
 800307a:	d005      	beq.n	8003088 <HAL_I2C_ER_IRQHandler+0xce>
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	2b28      	cmp	r3, #40	; 0x28
 8003080:	d106      	bne.n	8003090 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b21      	cmp	r3, #33	; 0x21
 8003086:	d103      	bne.n	8003090 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f001 f869 	bl	8004160 <I2C_Slave_AF>
 800308e:	e016      	b.n	80030be <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003098:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030a2:	7efb      	ldrb	r3, [r7, #27]
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d002      	beq.n	80030ae <HAL_I2C_ER_IRQHandler+0xf4>
 80030a8:	7efb      	ldrb	r3, [r7, #27]
 80030aa:	2b40      	cmp	r3, #64	; 0x40
 80030ac:	d107      	bne.n	80030be <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030bc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	0adb      	lsrs	r3, r3, #11
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00e      	beq.n	80030e8 <HAL_I2C_ER_IRQHandler+0x12e>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80030e6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f001 f8a0 	bl	8004240 <I2C_ITError>
  }
}
 8003100:	bf00      	nop
 8003102:	3728      	adds	r7, #40	; 0x28
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
 8003164:	4613      	mov	r3, r2
 8003166:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d150      	bne.n	80032a0 <I2C_MasterTransmit_TXE+0xc8>
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	2b21      	cmp	r3, #33	; 0x21
 8003202:	d14d      	bne.n	80032a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b08      	cmp	r3, #8
 8003208:	d01d      	beq.n	8003246 <I2C_MasterTransmit_TXE+0x6e>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b20      	cmp	r3, #32
 800320e:	d01a      	beq.n	8003246 <I2C_MasterTransmit_TXE+0x6e>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003216:	d016      	beq.n	8003246 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003226:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2211      	movs	r2, #17
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ff62 	bl	8003108 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003244:	e060      	b.n	8003308 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003254:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003264:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d107      	bne.n	8003290 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff7d 	bl	8003188 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800328e:	e03b      	b.n	8003308 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff ff35 	bl	8003108 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800329e:	e033      	b.n	8003308 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b21      	cmp	r3, #33	; 0x21
 80032a4:	d005      	beq.n	80032b2 <I2C_MasterTransmit_TXE+0xda>
 80032a6:	7bbb      	ldrb	r3, [r7, #14]
 80032a8:	2b40      	cmp	r3, #64	; 0x40
 80032aa:	d12d      	bne.n	8003308 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b22      	cmp	r3, #34	; 0x22
 80032b0:	d12a      	bne.n	8003308 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d108      	bne.n	80032ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80032cc:	e01c      	b.n	8003308 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d103      	bne.n	80032e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f88e 	bl	80033fc <I2C_MemoryTransmit_TXE_BTF>
}
 80032e0:	e012      	b.n	8003308 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	781a      	ldrb	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003306:	e7ff      	b.n	8003308 <I2C_MasterTransmit_TXE+0x130>
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b21      	cmp	r3, #33	; 0x21
 8003328:	d164      	bne.n	80033f4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003358:	e04c      	b.n	80033f4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d01d      	beq.n	800339c <I2C_MasterTransmit_BTF+0x8c>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b20      	cmp	r3, #32
 8003364:	d01a      	beq.n	800339c <I2C_MasterTransmit_BTF+0x8c>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800336c:	d016      	beq.n	800339c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800337c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2211      	movs	r2, #17
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff feb7 	bl	8003108 <HAL_I2C_MasterTxCpltCallback>
}
 800339a:	e02b      	b.n	80033f4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033aa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b40      	cmp	r3, #64	; 0x40
 80033d4:	d107      	bne.n	80033e6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff fed2 	bl	8003188 <HAL_I2C_MemTxCpltCallback>
}
 80033e4:	e006      	b.n	80033f4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff fe8a 	bl	8003108 <HAL_I2C_MasterTxCpltCallback>
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11d      	bne.n	8003450 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d10b      	bne.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003420:	b2da      	uxtb	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342c:	1c9a      	adds	r2, r3, #2
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003432:	e073      	b.n	800351c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003438:	b29b      	uxth	r3, r3
 800343a:	121b      	asrs	r3, r3, #8
 800343c:	b2da      	uxtb	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800344e:	e065      	b.n	800351c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003454:	2b01      	cmp	r3, #1
 8003456:	d10b      	bne.n	8003470 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345c:	b2da      	uxtb	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800346e:	e055      	b.n	800351c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003474:	2b02      	cmp	r3, #2
 8003476:	d151      	bne.n	800351c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b22      	cmp	r3, #34	; 0x22
 800347c:	d10d      	bne.n	800349a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800348c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003498:	e040      	b.n	800351c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d015      	beq.n	80034d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b21      	cmp	r3, #33	; 0x21
 80034a8:	d112      	bne.n	80034d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	781a      	ldrb	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034ce:	e025      	b.n	800351c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d120      	bne.n	800351c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b21      	cmp	r3, #33	; 0x21
 80034de:	d11d      	bne.n	800351c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034ee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff fe36 	bl	8003188 <HAL_I2C_MemTxCpltCallback>
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b22      	cmp	r3, #34	; 0x22
 8003536:	f040 80ac 	bne.w	8003692 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d921      	bls.n	800358c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b03      	cmp	r3, #3
 8003576:	f040 808c 	bne.w	8003692 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003588:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800358a:	e082      	b.n	8003692 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	2b02      	cmp	r3, #2
 8003592:	d075      	beq.n	8003680 <I2C_MasterReceive_RXNE+0x15c>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d002      	beq.n	80035a0 <I2C_MasterReceive_RXNE+0x7c>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d16f      	bne.n	8003680 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f001 f827 	bl	80045f4 <I2C_WaitOnSTOPRequestThroughIT>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d142      	bne.n	8003632 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035ca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d10a      	bne.n	800361c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fdc1 	bl	800319c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800361a:	e03a      	b.n	8003692 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2212      	movs	r2, #18
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fd76 	bl	800311c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003630:	e02f      	b.n	8003692 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003640:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff fd99 	bl	80031b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800367e:	e008      	b.n	8003692 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368e:	605a      	str	r2, [r3, #4]
}
 8003690:	e7ff      	b.n	8003692 <I2C_MasterReceive_RXNE+0x16e>
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d11b      	bne.n	80036ea <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80036e8:	e0bd      	b.n	8003866 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d129      	bne.n	8003748 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003702:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b04      	cmp	r3, #4
 8003708:	d00a      	beq.n	8003720 <I2C_MasterReceive_BTF+0x86>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d007      	beq.n	8003720 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003746:	e08e      	b.n	8003866 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d176      	bne.n	8003840 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d002      	beq.n	800375e <I2C_MasterReceive_BTF+0xc4>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b10      	cmp	r3, #16
 800375c:	d108      	bne.n	8003770 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e019      	b.n	80037a4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b04      	cmp	r3, #4
 8003774:	d002      	beq.n	800377c <I2C_MasterReceive_BTF+0xe2>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d108      	bne.n	800378e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e00a      	b.n	80037a4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b10      	cmp	r3, #16
 8003792:	d007      	beq.n	80037a4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80037fe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d10a      	bne.n	800382a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff fcba 	bl	800319c <HAL_I2C_MemRxCpltCallback>
}
 8003828:	e01d      	b.n	8003866 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2212      	movs	r2, #18
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff fc6f 	bl	800311c <HAL_I2C_MasterRxCpltCallback>
}
 800383e:	e012      	b.n	8003866 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	d117      	bne.n	80038b2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800389a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800389c:	e067      	b.n	800396e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	611a      	str	r2, [r3, #16]
}
 80038b0:	e05d      	b.n	800396e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ba:	d133      	bne.n	8003924 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b21      	cmp	r3, #33	; 0x21
 80038c6:	d109      	bne.n	80038dc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038d8:	611a      	str	r2, [r3, #16]
 80038da:	e008      	b.n	80038ee <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <I2C_Master_SB+0x92>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d108      	bne.n	8003912 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d032      	beq.n	800396e <I2C_Master_SB+0x100>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d02d      	beq.n	800396e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003920:	605a      	str	r2, [r3, #4]
}
 8003922:	e024      	b.n	800396e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10e      	bne.n	800394a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	b29b      	uxth	r3, r3
 8003932:	11db      	asrs	r3, r3, #7
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f003 0306 	and.w	r3, r3, #6
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f063 030f 	orn	r3, r3, #15
 8003940:	b2da      	uxtb	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	611a      	str	r2, [r3, #16]
}
 8003948:	e011      	b.n	800396e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10d      	bne.n	800396e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	b29b      	uxth	r3, r3
 8003958:	11db      	asrs	r3, r3, #7
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f003 0306 	and.w	r3, r3, #6
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f063 030e 	orn	r3, r3, #14
 8003966:	b2da      	uxtb	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	611a      	str	r2, [r3, #16]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	b2da      	uxtb	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <I2C_Master_ADD10+0x26>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d108      	bne.n	80039b2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00c      	beq.n	80039c2 <I2C_Master_ADD10+0x48>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c0:	605a      	str	r2, [r3, #4]
  }
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b091      	sub	sp, #68	; 0x44
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b22      	cmp	r3, #34	; 0x22
 80039f6:	f040 8169 	bne.w	8003ccc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <I2C_Master_ADDR+0x54>
 8003a02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d10b      	bne.n	8003a22 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	633b      	str	r3, [r7, #48]	; 0x30
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	e160      	b.n	8003ce4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d11d      	bne.n	8003a66 <I2C_Master_ADDR+0x98>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a32:	d118      	bne.n	8003a66 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a34:	2300      	movs	r3, #0
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a58:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	651a      	str	r2, [r3, #80]	; 0x50
 8003a64:	e13e      	b.n	8003ce4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d113      	bne.n	8003a98 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a70:	2300      	movs	r3, #0
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e115      	b.n	8003cc4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	f040 808a 	bne.w	8003bb8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aaa:	d137      	bne.n	8003b1c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aba:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aca:	d113      	bne.n	8003af4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ada:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003adc:	2300      	movs	r3, #0
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	e0e7      	b.n	8003cc4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af4:	2300      	movs	r3, #0
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	623b      	str	r3, [r7, #32]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	623b      	str	r3, [r7, #32]
 8003b08:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e0d3      	b.n	8003cc4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d02e      	beq.n	8003b80 <I2C_Master_ADDR+0x1b2>
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d02b      	beq.n	8003b80 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2a:	2b12      	cmp	r3, #18
 8003b2c:	d102      	bne.n	8003b34 <I2C_Master_ADDR+0x166>
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d125      	bne.n	8003b80 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d00e      	beq.n	8003b58 <I2C_Master_ADDR+0x18a>
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d00b      	beq.n	8003b58 <I2C_Master_ADDR+0x18a>
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d008      	beq.n	8003b58 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e007      	b.n	8003b68 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b66:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	61fb      	str	r3, [r7, #28]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	e0a1      	b.n	8003cc4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e085      	b.n	8003cc4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d14d      	bne.n	8003c5e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d016      	beq.n	8003bf6 <I2C_Master_ADDR+0x228>
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d013      	beq.n	8003bf6 <I2C_Master_ADDR+0x228>
 8003bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d010      	beq.n	8003bf6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e007      	b.n	8003c06 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c04:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c14:	d117      	bne.n	8003c46 <I2C_Master_ADDR+0x278>
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c1c:	d00b      	beq.n	8003c36 <I2C_Master_ADDR+0x268>
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d008      	beq.n	8003c36 <I2C_Master_ADDR+0x268>
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d005      	beq.n	8003c36 <I2C_Master_ADDR+0x268>
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d002      	beq.n	8003c36 <I2C_Master_ADDR+0x268>
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d107      	bne.n	8003c46 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	e032      	b.n	8003cc4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c6c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7c:	d117      	bne.n	8003cae <I2C_Master_ADDR+0x2e0>
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c84:	d00b      	beq.n	8003c9e <I2C_Master_ADDR+0x2d0>
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d008      	beq.n	8003c9e <I2C_Master_ADDR+0x2d0>
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d005      	beq.n	8003c9e <I2C_Master_ADDR+0x2d0>
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d002      	beq.n	8003c9e <I2C_Master_ADDR+0x2d0>
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d107      	bne.n	8003cae <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003cca:	e00b      	b.n	8003ce4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
}
 8003ce2:	e7ff      	b.n	8003ce4 <I2C_Master_ADDR+0x316>
 8003ce4:	bf00      	nop
 8003ce6:	3744      	adds	r7, #68	; 0x44
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02b      	beq.n	8003d62 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d114      	bne.n	8003d62 <I2C_SlaveTransmit_TXE+0x72>
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b29      	cmp	r3, #41	; 0x29
 8003d3c:	d111      	bne.n	8003d62 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2221      	movs	r2, #33	; 0x21
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2228      	movs	r2, #40	; 0x28
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff f9e7 	bl	8003130 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d011      	beq.n	8003da0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d02c      	beq.n	8003e20 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d114      	bne.n	8003e20 <I2C_SlaveReceive_RXNE+0x74>
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b2a      	cmp	r3, #42	; 0x2a
 8003dfa:	d111      	bne.n	8003e20 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2222      	movs	r2, #34	; 0x22
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2228      	movs	r2, #40	; 0x28
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff f992 	bl	8003144 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d012      	beq.n	8003e60 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e86:	2b28      	cmp	r3, #40	; 0x28
 8003e88:	d127      	bne.n	8003eda <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e98:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	09db      	lsrs	r3, r3, #7
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	81bb      	strh	r3, [r7, #12]
 8003ebc:	e002      	b.n	8003ec4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ecc:	89ba      	ldrh	r2, [r7, #12]
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff f940 	bl	8003158 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ed8:	e00e      	b.n	8003ef8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f1e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f20:	2300      	movs	r3, #0
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f4c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5c:	d172      	bne.n	8004044 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b22      	cmp	r3, #34	; 0x22
 8003f62:	d002      	beq.n	8003f6a <I2C_Slave_STOPF+0x6a>
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b2a      	cmp	r3, #42	; 0x2a
 8003f68:	d135      	bne.n	8003fd6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fb00 	bl	80025a8 <HAL_DMA_GetState>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d049      	beq.n	8004042 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	4a69      	ldr	r2, [pc, #420]	; (8004158 <I2C_Slave_STOPF+0x258>)
 8003fb4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe f948 	bl	8002250 <HAL_DMA_Abort_IT>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d03d      	beq.n	8004042 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fd4:	e035      	b.n	8004042 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f043 0204 	orr.w	r2, r3, #4
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004008:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe faca 	bl	80025a8 <HAL_DMA_GetState>
 8004014:	4603      	mov	r3, r0
 8004016:	2b01      	cmp	r3, #1
 8004018:	d014      	beq.n	8004044 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	4a4e      	ldr	r2, [pc, #312]	; (8004158 <I2C_Slave_STOPF+0x258>)
 8004020:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe f912 	bl	8002250 <HAL_DMA_Abort_IT>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800403c:	4610      	mov	r0, r2
 800403e:	4798      	blx	r3
 8004040:	e000      	b.n	8004044 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004042:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d03e      	beq.n	80040cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b04      	cmp	r3, #4
 800405a:	d112      	bne.n	8004082 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b40      	cmp	r3, #64	; 0x40
 800408e:	d112      	bne.n	80040b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f043 0204 	orr.w	r2, r3, #4
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f8b3 	bl	8004240 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80040da:	e039      	b.n	8004150 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b2a      	cmp	r3, #42	; 0x2a
 80040e0:	d109      	bne.n	80040f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2228      	movs	r2, #40	; 0x28
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff f827 	bl	8003144 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b28      	cmp	r3, #40	; 0x28
 8004100:	d111      	bne.n	8004126 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a15      	ldr	r2, [pc, #84]	; (800415c <I2C_Slave_STOPF+0x25c>)
 8004106:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff f828 	bl	8003174 <HAL_I2C_ListenCpltCallback>
}
 8004124:	e014      	b.n	8004150 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	2b22      	cmp	r3, #34	; 0x22
 800412c:	d002      	beq.n	8004134 <I2C_Slave_STOPF+0x234>
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	2b22      	cmp	r3, #34	; 0x22
 8004132:	d10d      	bne.n	8004150 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fe fffa 	bl	8003144 <HAL_I2C_SlaveRxCpltCallback>
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	080044a5 	.word	0x080044a5
 800415c:	ffff0000 	.word	0xffff0000

08004160 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d002      	beq.n	8004182 <I2C_Slave_AF+0x22>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b20      	cmp	r3, #32
 8004180:	d129      	bne.n	80041d6 <I2C_Slave_AF+0x76>
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	2b28      	cmp	r3, #40	; 0x28
 8004186:	d126      	bne.n	80041d6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a2c      	ldr	r2, [pc, #176]	; (800423c <I2C_Slave_AF+0xdc>)
 800418c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800419c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041a6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fe ffd0 	bl	8003174 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80041d4:	e02e      	b.n	8004234 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	2b21      	cmp	r3, #33	; 0x21
 80041da:	d126      	bne.n	800422a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a17      	ldr	r2, [pc, #92]	; (800423c <I2C_Slave_AF+0xdc>)
 80041e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2221      	movs	r2, #33	; 0x21
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004206:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004210:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004220:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fe ff84 	bl	8003130 <HAL_I2C_SlaveTxCpltCallback>
}
 8004228:	e004      	b.n	8004234 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004232:	615a      	str	r2, [r3, #20]
}
 8004234:	bf00      	nop
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	ffff0000 	.word	0xffff0000

08004240 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004256:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004258:	7bbb      	ldrb	r3, [r7, #14]
 800425a:	2b10      	cmp	r3, #16
 800425c:	d002      	beq.n	8004264 <I2C_ITError+0x24>
 800425e:	7bbb      	ldrb	r3, [r7, #14]
 8004260:	2b40      	cmp	r3, #64	; 0x40
 8004262:	d10a      	bne.n	800427a <I2C_ITError+0x3a>
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b22      	cmp	r3, #34	; 0x22
 8004268:	d107      	bne.n	800427a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004278:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004280:	2b28      	cmp	r3, #40	; 0x28
 8004282:	d107      	bne.n	8004294 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2228      	movs	r2, #40	; 0x28
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004292:	e015      	b.n	80042c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a2:	d00a      	beq.n	80042ba <I2C_ITError+0x7a>
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b60      	cmp	r3, #96	; 0x60
 80042a8:	d007      	beq.n	80042ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ce:	d162      	bne.n	8004396 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d020      	beq.n	8004330 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f2:	4a6a      	ldr	r2, [pc, #424]	; (800449c <I2C_ITError+0x25c>)
 80042f4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fd ffa8 	bl	8002250 <HAL_DMA_Abort_IT>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 8089 	beq.w	800441a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800432a:	4610      	mov	r0, r2
 800432c:	4798      	blx	r3
 800432e:	e074      	b.n	800441a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	4a59      	ldr	r2, [pc, #356]	; (800449c <I2C_ITError+0x25c>)
 8004336:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	4618      	mov	r0, r3
 800433e:	f7fd ff87 	bl	8002250 <HAL_DMA_Abort_IT>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d068      	beq.n	800441a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d10b      	bne.n	800436e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004390:	4610      	mov	r0, r2
 8004392:	4798      	blx	r3
 8004394:	e041      	b.n	800441a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b60      	cmp	r3, #96	; 0x60
 80043a0:	d125      	bne.n	80043ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	d10b      	bne.n	80043d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fe feec 	bl	80031c4 <HAL_I2C_AbortCpltCallback>
 80043ec:	e015      	b.n	800441a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	d10b      	bne.n	8004414 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7fe fecb 	bl	80031b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10e      	bne.n	8004448 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800443a:	2b00      	cmp	r3, #0
 800443c:	d104      	bne.n	8004448 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004456:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b04      	cmp	r3, #4
 800446a:	d113      	bne.n	8004494 <I2C_ITError+0x254>
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b28      	cmp	r3, #40	; 0x28
 8004470:	d110      	bne.n	8004494 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <I2C_ITError+0x260>)
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fe fe70 	bl	8003174 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	080044a5 	.word	0x080044a5
 80044a0:	ffff0000 	.word	0xffff0000

080044a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044be:	4b4b      	ldr	r3, [pc, #300]	; (80045ec <I2C_DMAAbort+0x148>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	08db      	lsrs	r3, r3, #3
 80044c4:	4a4a      	ldr	r2, [pc, #296]	; (80045f0 <I2C_DMAAbort+0x14c>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	0a1a      	lsrs	r2, r3, #8
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	00da      	lsls	r2, r3, #3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80044ea:	e00a      	b.n	8004502 <I2C_DMAAbort+0x5e>
    }
    count--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004500:	d0ea      	beq.n	80044d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	2200      	movs	r2, #0
 8004510:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	2200      	movs	r2, #0
 8004520:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004530:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2200      	movs	r2, #0
 8004536:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	2200      	movs	r2, #0
 8004546:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	2200      	movs	r2, #0
 8004556:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b60      	cmp	r3, #96	; 0x60
 8004572:	d10e      	bne.n	8004592 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800458a:	6978      	ldr	r0, [r7, #20]
 800458c:	f7fe fe1a 	bl	80031c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004590:	e027      	b.n	80045e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004598:	2b28      	cmp	r3, #40	; 0x28
 800459a:	d117      	bne.n	80045cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2228      	movs	r2, #40	; 0x28
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045ca:	e007      	b.n	80045dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80045dc:	6978      	ldr	r0, [r7, #20]
 80045de:	f7fe fde7 	bl	80031b0 <HAL_I2C_ErrorCallback>
}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000000 	.word	0x20000000
 80045f0:	14f8b589 	.word	0x14f8b589

080045f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004600:	4b13      	ldr	r3, [pc, #76]	; (8004650 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	08db      	lsrs	r3, r3, #3
 8004606:	4a13      	ldr	r2, [pc, #76]	; (8004654 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	0a1a      	lsrs	r2, r3, #8
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3b01      	subs	r3, #1
 800461a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d107      	bne.n	8004632 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f043 0220 	orr.w	r2, r3, #32
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e008      	b.n	8004644 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800463c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004640:	d0e9      	beq.n	8004616 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	20000000 	.word	0x20000000
 8004654:	14f8b589 	.word	0x14f8b589

08004658 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004668:	d103      	bne.n	8004672 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004670:	e007      	b.n	8004682 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800467a:	d102      	bne.n	8004682 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2208      	movs	r2, #8
 8004680:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e0e1      	b.n	8004866 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a6d      	ldr	r2, [pc, #436]	; (8004870 <HAL_I2S_Init+0x1e0>)
 80046ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fd f851 	bl	8001764 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80046d8:	f023 030f 	bic.w	r3, r3, #15
 80046dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2202      	movs	r2, #2
 80046e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d06f      	beq.n	80047ce <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80046f6:	2310      	movs	r3, #16
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	e001      	b.n	8004700 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80046fc:	2320      	movs	r3, #32
 80046fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b20      	cmp	r3, #32
 8004706:	d802      	bhi.n	800470e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a58      	ldr	r2, [pc, #352]	; (8004874 <HAL_I2S_Init+0x1e4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <HAL_I2S_Init+0x92>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a56      	ldr	r2, [pc, #344]	; (8004878 <HAL_I2S_Init+0x1e8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d104      	bne.n	800472c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8004722:	2001      	movs	r0, #1
 8004724:	f000 fdf6 	bl	8005314 <HAL_RCCEx_GetPeriphCLKFreq>
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	e003      	b.n	8004734 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 800472c:	2002      	movs	r0, #2
 800472e:	f000 fdf1 	bl	8005314 <HAL_RCCEx_GetPeriphCLKFreq>
 8004732:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800473c:	d125      	bne.n	800478a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d010      	beq.n	8004768 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	461a      	mov	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004762:	3305      	adds	r3, #5
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	e01f      	b.n	80047a8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	461a      	mov	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	3305      	adds	r3, #5
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	e00e      	b.n	80047a8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	461a      	mov	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	3305      	adds	r3, #5
 80047a6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4a34      	ldr	r2, [pc, #208]	; (800487c <HAL_I2S_Init+0x1ec>)
 80047ac:	fba2 2303 	umull	r2, r3, r2, r3
 80047b0:	08db      	lsrs	r3, r3, #3
 80047b2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e003      	b.n	80047d6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80047ce:	2302      	movs	r3, #2
 80047d0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d902      	bls.n	80047e2 <HAL_I2S_Init+0x152>
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2bff      	cmp	r3, #255	; 0xff
 80047e0:	d907      	bls.n	80047f2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	f043 0210 	orr.w	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e039      	b.n	8004866 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	ea42 0103 	orr.w	r1, r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	430a      	orrs	r2, r1
 8004804:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004810:	f023 030f 	bic.w	r3, r3, #15
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6851      	ldr	r1, [r2, #4]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6892      	ldr	r2, [r2, #8]
 800481c:	4311      	orrs	r1, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68d2      	ldr	r2, [r2, #12]
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6992      	ldr	r2, [r2, #24]
 8004828:	430a      	orrs	r2, r1
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004834:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b30      	cmp	r3, #48	; 0x30
 800483c:	d003      	beq.n	8004846 <HAL_I2S_Init+0x1b6>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2bb0      	cmp	r3, #176	; 0xb0
 8004844:	d107      	bne.n	8004856 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004854:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	08004977 	.word	0x08004977
 8004874:	40003800 	.word	0x40003800
 8004878:	40003c00 	.word	0x40003c00
 800487c:	cccccccd 	.word	0xcccccccd

08004880 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	881a      	ldrh	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	1c9a      	adds	r2, r3, #2
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10e      	bne.n	8004910 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004900:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff ffb8 	bl	8004880 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	b292      	uxth	r2, r2
 800492c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	1c9a      	adds	r2, r3, #2
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10e      	bne.n	800496e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800495e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ff93 	bl	8004894 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b086      	sub	sp, #24
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b04      	cmp	r3, #4
 8004990:	d13a      	bne.n	8004a08 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b01      	cmp	r3, #1
 800499a:	d109      	bne.n	80049b0 <I2S_IRQHandler+0x3a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d102      	bne.n	80049b0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ffb4 	bl	8004918 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b40      	cmp	r3, #64	; 0x40
 80049b8:	d126      	bne.n	8004a08 <I2S_IRQHandler+0x92>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d11f      	bne.n	8004a08 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	f043 0202 	orr.w	r2, r3, #2
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ff50 	bl	80048a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d136      	bne.n	8004a82 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d109      	bne.n	8004a32 <I2S_IRQHandler+0xbc>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b80      	cmp	r3, #128	; 0x80
 8004a2a:	d102      	bne.n	8004a32 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff ff45 	bl	80048bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d122      	bne.n	8004a82 <I2S_IRQHandler+0x10c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d11b      	bne.n	8004a82 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a58:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a74:	f043 0204 	orr.w	r2, r3, #4
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ff13 	bl	80048a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a82:	bf00      	nop
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e0cc      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa0:	4b68      	ldr	r3, [pc, #416]	; (8004c44 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d90c      	bls.n	8004ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aae:	4b65      	ldr	r3, [pc, #404]	; (8004c44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b63      	ldr	r3, [pc, #396]	; (8004c44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0b8      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d020      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ae0:	4b59      	ldr	r3, [pc, #356]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	4a58      	ldr	r2, [pc, #352]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004af8:	4b53      	ldr	r3, [pc, #332]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4a52      	ldr	r2, [pc, #328]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b04:	4b50      	ldr	r3, [pc, #320]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	494d      	ldr	r1, [pc, #308]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d044      	beq.n	8004bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d107      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2a:	4b47      	ldr	r3, [pc, #284]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d119      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e07f      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d003      	beq.n	8004b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d107      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4a:	4b3f      	ldr	r3, [pc, #252]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e06f      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5a:	4b3b      	ldr	r3, [pc, #236]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e067      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b6a:	4b37      	ldr	r3, [pc, #220]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f023 0203 	bic.w	r2, r3, #3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	4934      	ldr	r1, [pc, #208]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b7c:	f7fd f92c 	bl	8001dd8 <HAL_GetTick>
 8004b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b84:	f7fd f928 	bl	8001dd8 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e04f      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9a:	4b2b      	ldr	r3, [pc, #172]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 020c 	and.w	r2, r3, #12
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d1eb      	bne.n	8004b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bac:	4b25      	ldr	r3, [pc, #148]	; (8004c44 <HAL_RCC_ClockConfig+0x1b8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d20c      	bcs.n	8004bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bba:	4b22      	ldr	r3, [pc, #136]	; (8004c44 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc2:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e032      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be0:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4916      	ldr	r1, [pc, #88]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bfe:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	490e      	ldr	r1, [pc, #56]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c12:	f000 fdc7 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8004c16:	4602      	mov	r2, r0
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	490a      	ldr	r1, [pc, #40]	; (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004c24:	5ccb      	ldrb	r3, [r1, r3]
 8004c26:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2a:	4a09      	ldr	r2, [pc, #36]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fd f88c 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40023c00 	.word	0x40023c00
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	0800d0e8 	.word	0x0800d0e8
 8004c50:	20000000 	.word	0x20000000
 8004c54:	20000004 	.word	0x20000004

08004c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c5c:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	20000000 	.word	0x20000000

08004c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c74:	f7ff fff0 	bl	8004c58 <HAL_RCC_GetHCLKFreq>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	0a9b      	lsrs	r3, r3, #10
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	4903      	ldr	r1, [pc, #12]	; (8004c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c86:	5ccb      	ldrb	r3, [r1, r3]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40023800 	.word	0x40023800
 8004c94:	0800d0f8 	.word	0x0800d0f8

08004c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c9c:	f7ff ffdc 	bl	8004c58 <HAL_RCC_GetHCLKFreq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	0b5b      	lsrs	r3, r3, #13
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	4903      	ldr	r1, [pc, #12]	; (8004cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cae:	5ccb      	ldrb	r3, [r1, r3]
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	0800d0f8 	.word	0x0800d0f8

08004cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08c      	sub	sp, #48	; 0x30
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d010      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004cf8:	4b6f      	ldr	r3, [pc, #444]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cfe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	496c      	ldr	r1, [pc, #432]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004d16:	2301      	movs	r3, #1
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d010      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004d26:	4b64      	ldr	r3, [pc, #400]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d34:	4960      	ldr	r1, [pc, #384]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004d44:	2301      	movs	r3, #1
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d017      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d54:	4b58      	ldr	r3, [pc, #352]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	4955      	ldr	r1, [pc, #340]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d72:	d101      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004d74:	2301      	movs	r3, #1
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004d80:	2301      	movs	r3, #1
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d017      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d90:	4b49      	ldr	r3, [pc, #292]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9e:	4946      	ldr	r1, [pc, #280]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dae:	d101      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004db0:	2301      	movs	r3, #1
 8004db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 808a 	beq.w	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	4b39      	ldr	r3, [pc, #228]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	4a38      	ldr	r2, [pc, #224]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dde:	4b36      	ldr	r3, [pc, #216]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dea:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a33      	ldr	r2, [pc, #204]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004df6:	f7fc ffef 	bl	8001dd8 <HAL_GetTick>
 8004dfa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dfe:	f7fc ffeb 	bl	8001dd8 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e278      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e10:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f0      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e1c:	4b26      	ldr	r3, [pc, #152]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e24:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d02f      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e34:	6a3a      	ldr	r2, [r7, #32]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d028      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e42:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e44:	4b1e      	ldr	r3, [pc, #120]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e50:	4a19      	ldr	r2, [pc, #100]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e56:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d114      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e62:	f7fc ffb9 	bl	8001dd8 <HAL_GetTick>
 8004e66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fc ffb5 	bl	8001dd8 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e240      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e80:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0ee      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e98:	d114      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004e9a:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eae:	4902      	ldr	r1, [pc, #8]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	608b      	str	r3, [r1, #8]
 8004eb4:	e00c      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40007000 	.word	0x40007000
 8004ec0:	42470e40 	.word	0x42470e40
 8004ec4:	4b4a      	ldr	r3, [pc, #296]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4a49      	ldr	r2, [pc, #292]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ece:	6093      	str	r3, [r2, #8]
 8004ed0:	4b47      	ldr	r3, [pc, #284]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ed2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004edc:	4944      	ldr	r1, [pc, #272]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d004      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004ef4:	4b3f      	ldr	r3, [pc, #252]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004ef6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004f04:	4b3a      	ldr	r3, [pc, #232]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	4937      	ldr	r1, [pc, #220]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f26:	4b32      	ldr	r3, [pc, #200]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f34:	492e      	ldr	r1, [pc, #184]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d011      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f48:	4b29      	ldr	r3, [pc, #164]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	4926      	ldr	r1, [pc, #152]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f66:	d101      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	491a      	ldr	r1, [pc, #104]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d011      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004f9a:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fa0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa8:	4911      	ldr	r1, [pc, #68]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fcc:	f040 80ff 	bne.w	80051ce <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fd0:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fd6:	f7fc feff 	bl	8001dd8 <HAL_GetTick>
 8004fda:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fdc:	e00e      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fde:	f7fc fefb 	bl	8001dd8 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d907      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e188      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	424711e0 	.word	0x424711e0
 8004ff8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ffc:	4b7e      	ldr	r3, [pc, #504]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1ea      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d009      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005024:	2b00      	cmp	r3, #0
 8005026:	d028      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d124      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005030:	4b71      	ldr	r3, [pc, #452]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005036:	0c1b      	lsrs	r3, r3, #16
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	3301      	adds	r3, #1
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005042:	4b6d      	ldr	r3, [pc, #436]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005048:	0e1b      	lsrs	r3, r3, #24
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	019b      	lsls	r3, r3, #6
 800505a:	431a      	orrs	r2, r3
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	3b01      	subs	r3, #1
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	431a      	orrs	r2, r3
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	071b      	lsls	r3, r3, #28
 8005072:	4961      	ldr	r1, [pc, #388]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d004      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005098:	2b00      	cmp	r3, #0
 800509a:	d035      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a4:	d130      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80050a6:	4b54      	ldr	r3, [pc, #336]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ac:	0c1b      	lsrs	r3, r3, #16
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	3301      	adds	r3, #1
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050b8:	4b4f      	ldr	r3, [pc, #316]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050be:	0f1b      	lsrs	r3, r3, #28
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	019b      	lsls	r3, r3, #6
 80050d0:	431a      	orrs	r2, r3
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	3b01      	subs	r3, #1
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	061b      	lsls	r3, r3, #24
 80050e2:	431a      	orrs	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	071b      	lsls	r3, r3, #28
 80050e8:	4943      	ldr	r1, [pc, #268]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050f0:	4b41      	ldr	r3, [pc, #260]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f6:	f023 021f 	bic.w	r2, r3, #31
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	3b01      	subs	r3, #1
 8005100:	493d      	ldr	r1, [pc, #244]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005110:	2b00      	cmp	r3, #0
 8005112:	d029      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511c:	d124      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800511e:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005124:	0c1b      	lsrs	r3, r3, #16
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	3301      	adds	r3, #1
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005130:	4b31      	ldr	r3, [pc, #196]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005136:	0f1b      	lsrs	r3, r3, #28
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	019b      	lsls	r3, r3, #6
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
 8005154:	431a      	orrs	r2, r3
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	061b      	lsls	r3, r3, #24
 800515a:	431a      	orrs	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	071b      	lsls	r3, r3, #28
 8005160:	4925      	ldr	r1, [pc, #148]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005170:	2b00      	cmp	r3, #0
 8005172:	d016      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	019b      	lsls	r3, r3, #6
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	3b01      	subs	r3, #1
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	071b      	lsls	r3, r3, #28
 800519a:	4917      	ldr	r1, [pc, #92]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051a2:	4b16      	ldr	r3, [pc, #88]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051a8:	f7fc fe16 	bl	8001dd8 <HAL_GetTick>
 80051ac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051b0:	f7fc fe12 	bl	8001dd8 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e09f      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	f040 8095 	bne.w	8005300 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051dc:	f7fc fdfc 	bl	8001dd8 <HAL_GetTick>
 80051e0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051e2:	e00f      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051e4:	f7fc fdf8 	bl	8001dd8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d908      	bls.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e085      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80051f6:	bf00      	nop
 80051f8:	40023800 	.word	0x40023800
 80051fc:	42470068 	.word	0x42470068
 8005200:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005204:	4b41      	ldr	r3, [pc, #260]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800520c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005210:	d0e8      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800522e:	2b00      	cmp	r3, #0
 8005230:	d02b      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005236:	2b00      	cmp	r3, #0
 8005238:	d127      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800523a:	4b34      	ldr	r3, [pc, #208]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005240:	0c1b      	lsrs	r3, r3, #16
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	3301      	adds	r3, #1
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	019b      	lsls	r3, r3, #6
 8005256:	431a      	orrs	r2, r3
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	3b01      	subs	r3, #1
 800525e:	041b      	lsls	r3, r3, #16
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	061b      	lsls	r3, r3, #24
 8005268:	4928      	ldr	r1, [pc, #160]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005270:	4b26      	ldr	r3, [pc, #152]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005276:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	3b01      	subs	r3, #1
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	4922      	ldr	r1, [pc, #136]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01d      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800529e:	d118      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052a0:	4b1a      	ldr	r3, [pc, #104]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a6:	0e1b      	lsrs	r3, r3, #24
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	019b      	lsls	r3, r3, #6
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	085b      	lsrs	r3, r3, #1
 80052c0:	3b01      	subs	r3, #1
 80052c2:	041b      	lsls	r3, r3, #16
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	061b      	lsls	r3, r3, #24
 80052ca:	4910      	ldr	r1, [pc, #64]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052d2:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052d8:	f7fc fd7e 	bl	8001dd8 <HAL_GetTick>
 80052dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052e0:	f7fc fd7a 	bl	8001dd8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e007      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052fe:	d1ef      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3730      	adds	r7, #48	; 0x30
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
 8005310:	42470070 	.word	0x42470070

08005314 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005314:	b480      	push	{r7}
 8005316:	b089      	sub	sp, #36	; 0x24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3b01      	subs	r3, #1
 8005338:	2b07      	cmp	r3, #7
 800533a:	f200 8224 	bhi.w	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005547 	.word	0x08005547
 8005348:	08005671 	.word	0x08005671
 800534c:	08005787 	.word	0x08005787
 8005350:	08005365 	.word	0x08005365
 8005354:	08005787 	.word	0x08005787
 8005358:	08005787 	.word	0x08005787
 800535c:	08005787 	.word	0x08005787
 8005360:	08005365 	.word	0x08005365
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8005364:	4ba8      	ldr	r3, [pc, #672]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800536a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800537a:	f000 80d6 	beq.w	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005384:	f200 80dd 	bhi.w	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800538e:	f000 809f 	beq.w	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005398:	f200 80d3 	bhi.w	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a2:	d05b      	beq.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053aa:	f200 80ca 	bhi.w	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053b4:	f000 80b6 	beq.w	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053be:	f200 80c0 	bhi.w	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053c8:	f000 8082 	beq.w	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053d2:	f200 80b6 	bhi.w	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e2:	d03b      	beq.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 80053e4:	e0ad      	b.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80053e6:	4b88      	ldr	r3, [pc, #544]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80053f2:	4b85      	ldr	r3, [pc, #532]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053fc:	4a83      	ldr	r2, [pc, #524]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	e008      	b.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8005406:	4b80      	ldr	r3, [pc, #512]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005410:	4a7f      	ldr	r2, [pc, #508]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005412:	fbb2 f3f3 	udiv	r3, r2, r3
 8005416:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8005418:	4b7b      	ldr	r3, [pc, #492]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	0e1b      	lsrs	r3, r3, #24
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8005426:	4b78      	ldr	r3, [pc, #480]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	099b      	lsrs	r3, r3, #6
 800542e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	fb03 f202 	mul.w	r2, r3, r2
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	fbb2 f3f3 	udiv	r3, r2, r3
 800543e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8005440:	4b71      	ldr	r3, [pc, #452]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005446:	0a1b      	lsrs	r3, r3, #8
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	3301      	adds	r3, #1
 800544e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	fbb2 f3f3 	udiv	r3, r2, r3
 8005458:	61fb      	str	r3, [r7, #28]
          break;
 800545a:	e073      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800545c:	4b6a      	ldr	r3, [pc, #424]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d109      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005468:	4b67      	ldr	r3, [pc, #412]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800546a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800546e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005472:	4a66      	ldr	r2, [pc, #408]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005474:	fbb2 f3f3 	udiv	r3, r2, r3
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	e008      	b.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 800547c:	4b62      	ldr	r3, [pc, #392]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800547e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005486:	4a62      	ldr	r2, [pc, #392]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800548e:	4b5e      	ldr	r3, [pc, #376]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005494:	0e1b      	lsrs	r3, r3, #24
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 800549c:	4b5a      	ldr	r3, [pc, #360]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800549e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a2:	099b      	lsrs	r3, r3, #6
 80054a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	fb03 f202 	mul.w	r2, r3, r2
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80054b6:	4b54      	ldr	r3, [pc, #336]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80054b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	3301      	adds	r3, #1
 80054c2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	61fb      	str	r3, [r7, #28]
          break;
 80054ce:	e039      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80054d0:	4b4d      	ldr	r3, [pc, #308]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d108      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054dc:	4b4a      	ldr	r3, [pc, #296]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e4:	4a49      	ldr	r2, [pc, #292]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80054e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	e007      	b.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80054ee:	4b46      	ldr	r3, [pc, #280]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054f6:	4a46      	ldr	r2, [pc, #280]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80054f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fc:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80054fe:	4b42      	ldr	r3, [pc, #264]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	0f1b      	lsrs	r3, r3, #28
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800550a:	4b3f      	ldr	r3, [pc, #252]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	099b      	lsrs	r3, r3, #6
 8005510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	fb03 f202 	mul.w	r2, r3, r2
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	61fb      	str	r3, [r7, #28]
          break;
 8005522:	e00f      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005524:	4b3b      	ldr	r3, [pc, #236]	; (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005526:	61fb      	str	r3, [r7, #28]
          break;
 8005528:	e00c      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800552a:	4b37      	ldr	r3, [pc, #220]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d102      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8005536:	4b35      	ldr	r3, [pc, #212]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005538:	61fb      	str	r3, [r7, #28]
          break;
 800553a:	e003      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800553c:	4b34      	ldr	r3, [pc, #208]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800553e:	61fb      	str	r3, [r7, #28]
          break;
 8005540:	e000      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8005542:	bf00      	nop
        }
      }
      break;
 8005544:	e11f      	b.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005546:	4b30      	ldr	r3, [pc, #192]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800554c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005558:	d079      	beq.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005560:	f200 8082 	bhi.w	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800556a:	d03c      	beq.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005572:	d879      	bhi.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d006      	beq.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005580:	d172      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005582:	4b24      	ldr	r3, [pc, #144]	; (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005584:	61fb      	str	r3, [r7, #28]
          break;
 8005586:	e072      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005588:	4b1f      	ldr	r3, [pc, #124]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005594:	d109      	bne.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005596:	4b1c      	ldr	r3, [pc, #112]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800559c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a0:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80055a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a6:	61bb      	str	r3, [r7, #24]
 80055a8:	e008      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80055aa:	4b17      	ldr	r3, [pc, #92]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b4:	4a15      	ldr	r2, [pc, #84]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80055b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ba:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80055bc:	4b12      	ldr	r3, [pc, #72]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c2:	099b      	lsrs	r3, r3, #6
 80055c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80055d0:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d6:	0f1b      	lsrs	r3, r3, #28
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e2:	61fb      	str	r3, [r7, #28]
          break;
 80055e4:	e043      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f2:	d111      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055f4:	4b04      	ldr	r3, [pc, #16]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055fc:	4a04      	ldr	r2, [pc, #16]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80055fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	e010      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800
 800560c:	00f42400 	.word	0x00f42400
 8005610:	017d7840 	.word	0x017d7840
 8005614:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005618:	4b5e      	ldr	r3, [pc, #376]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005620:	4a5d      	ldr	r2, [pc, #372]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005628:	4b5a      	ldr	r3, [pc, #360]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	099b      	lsrs	r3, r3, #6
 800562e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	fb02 f303 	mul.w	r3, r2, r3
 8005638:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800563a:	4b56      	ldr	r3, [pc, #344]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	0f1b      	lsrs	r3, r3, #28
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	fbb2 f3f3 	udiv	r3, r2, r3
 800564a:	61fb      	str	r3, [r7, #28]
          break;
 800564c:	e00f      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800564e:	4b51      	ldr	r3, [pc, #324]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800565a:	d102      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 800565c:	4b4f      	ldr	r3, [pc, #316]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800565e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005660:	e005      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8005662:	4b4d      	ldr	r3, [pc, #308]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005664:	61fb      	str	r3, [r7, #28]
          break;
 8005666:	e002      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
          break;
 800566c:	bf00      	nop
        }
      }
      break;
 800566e:	e08a      	b.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005670:	4b48      	ldr	r3, [pc, #288]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005676:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005682:	d06f      	beq.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800568a:	d878      	bhi.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005692:	d03c      	beq.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800569a:	d870      	bhi.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d006      	beq.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056a8:	d169      	bne.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80056aa:	4b3d      	ldr	r3, [pc, #244]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80056ac:	61fb      	str	r3, [r7, #28]
          break;
 80056ae:	e069      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056b0:	4b38      	ldr	r3, [pc, #224]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056bc:	d109      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80056be:	4b35      	ldr	r3, [pc, #212]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80056c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c8:	4a34      	ldr	r2, [pc, #208]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	e008      	b.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80056d2:	4b30      	ldr	r3, [pc, #192]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80056d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056dc:	4a2e      	ldr	r2, [pc, #184]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80056de:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80056e4:	4b2b      	ldr	r3, [pc, #172]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80056e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ea:	099b      	lsrs	r3, r3, #6
 80056ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	fb02 f303 	mul.w	r3, r2, r3
 80056f6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80056f8:	4b26      	ldr	r3, [pc, #152]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80056fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fe:	0f1b      	lsrs	r3, r3, #28
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	61fb      	str	r3, [r7, #28]
          break;
 800570c:	e03a      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800570e:	4b21      	ldr	r3, [pc, #132]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800571a:	d108      	bne.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800571c:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005724:	4a1d      	ldr	r2, [pc, #116]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005726:	fbb2 f3f3 	udiv	r3, r2, r3
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	e007      	b.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800572e:	4b19      	ldr	r3, [pc, #100]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005736:	4a18      	ldr	r2, [pc, #96]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005738:	fbb2 f3f3 	udiv	r3, r2, r3
 800573c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800573e:	4b15      	ldr	r3, [pc, #84]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	099b      	lsrs	r3, r3, #6
 8005744:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	fb02 f303 	mul.w	r3, r2, r3
 800574e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	0f1b      	lsrs	r3, r3, #28
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005760:	61fb      	str	r3, [r7, #28]
          break;
 8005762:	e00f      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800576c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005770:	d102      	bne.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8005772:	4b0a      	ldr	r3, [pc, #40]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005774:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005776:	e005      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8005778:	4b07      	ldr	r3, [pc, #28]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800577a:	61fb      	str	r3, [r7, #28]
          break;
 800577c:	e002      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	61fb      	str	r3, [r7, #28]
          break;
 8005782:	bf00      	nop
        }
      }
      break;
 8005784:	bf00      	nop
    }
  }
  return frequency;
 8005786:	69fb      	ldr	r3, [r7, #28]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3724      	adds	r7, #36	; 0x24
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	40023800 	.word	0x40023800
 8005798:	00f42400 	.word	0x00f42400
 800579c:	017d7840 	.word	0x017d7840
 80057a0:	00bb8000 	.word	0x00bb8000

080057a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a8:	b0a6      	sub	sp, #152	; 0x98
 80057aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057ca:	4bc8      	ldr	r3, [pc, #800]	; (8005aec <HAL_RCC_GetSysClockFreq+0x348>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 030c 	and.w	r3, r3, #12
 80057d2:	2b0c      	cmp	r3, #12
 80057d4:	f200 817e 	bhi.w	8005ad4 <HAL_RCC_GetSysClockFreq+0x330>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	08005815 	.word	0x08005815
 80057e4:	08005ad5 	.word	0x08005ad5
 80057e8:	08005ad5 	.word	0x08005ad5
 80057ec:	08005ad5 	.word	0x08005ad5
 80057f0:	0800581d 	.word	0x0800581d
 80057f4:	08005ad5 	.word	0x08005ad5
 80057f8:	08005ad5 	.word	0x08005ad5
 80057fc:	08005ad5 	.word	0x08005ad5
 8005800:	08005825 	.word	0x08005825
 8005804:	08005ad5 	.word	0x08005ad5
 8005808:	08005ad5 	.word	0x08005ad5
 800580c:	08005ad5 	.word	0x08005ad5
 8005810:	0800598f 	.word	0x0800598f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005814:	4bb6      	ldr	r3, [pc, #728]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800581a:	e15f      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800581c:	4bb5      	ldr	r3, [pc, #724]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x350>)
 800581e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005822:	e15b      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005824:	4bb1      	ldr	r3, [pc, #708]	; (8005aec <HAL_RCC_GetSysClockFreq+0x348>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800582c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005830:	4bae      	ldr	r3, [pc, #696]	; (8005aec <HAL_RCC_GetSysClockFreq+0x348>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d031      	beq.n	80058a0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800583c:	4bab      	ldr	r3, [pc, #684]	; (8005aec <HAL_RCC_GetSysClockFreq+0x348>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	099b      	lsrs	r3, r3, #6
 8005842:	2200      	movs	r2, #0
 8005844:	66bb      	str	r3, [r7, #104]	; 0x68
 8005846:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800584a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584e:	663b      	str	r3, [r7, #96]	; 0x60
 8005850:	2300      	movs	r3, #0
 8005852:	667b      	str	r3, [r7, #100]	; 0x64
 8005854:	4ba7      	ldr	r3, [pc, #668]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005856:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800585a:	462a      	mov	r2, r5
 800585c:	fb03 f202 	mul.w	r2, r3, r2
 8005860:	2300      	movs	r3, #0
 8005862:	4621      	mov	r1, r4
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	4413      	add	r3, r2
 800586a:	4aa2      	ldr	r2, [pc, #648]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x350>)
 800586c:	4621      	mov	r1, r4
 800586e:	fba1 1202 	umull	r1, r2, r1, r2
 8005872:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005874:	460a      	mov	r2, r1
 8005876:	67ba      	str	r2, [r7, #120]	; 0x78
 8005878:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800587a:	4413      	add	r3, r2
 800587c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800587e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005882:	2200      	movs	r2, #0
 8005884:	65bb      	str	r3, [r7, #88]	; 0x58
 8005886:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005888:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800588c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005890:	f7fb fa1a 	bl	8000cc8 <__aeabi_uldivmod>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4613      	mov	r3, r2
 800589a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800589e:	e064      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058a0:	4b92      	ldr	r3, [pc, #584]	; (8005aec <HAL_RCC_GetSysClockFreq+0x348>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	099b      	lsrs	r3, r3, #6
 80058a6:	2200      	movs	r2, #0
 80058a8:	653b      	str	r3, [r7, #80]	; 0x50
 80058aa:	657a      	str	r2, [r7, #84]	; 0x54
 80058ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058b4:	2300      	movs	r3, #0
 80058b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80058bc:	4622      	mov	r2, r4
 80058be:	462b      	mov	r3, r5
 80058c0:	f04f 0000 	mov.w	r0, #0
 80058c4:	f04f 0100 	mov.w	r1, #0
 80058c8:	0159      	lsls	r1, r3, #5
 80058ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058ce:	0150      	lsls	r0, r2, #5
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4621      	mov	r1, r4
 80058d6:	1a51      	subs	r1, r2, r1
 80058d8:	6139      	str	r1, [r7, #16]
 80058da:	4629      	mov	r1, r5
 80058dc:	eb63 0301 	sbc.w	r3, r3, r1
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058ee:	4659      	mov	r1, fp
 80058f0:	018b      	lsls	r3, r1, #6
 80058f2:	4651      	mov	r1, sl
 80058f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058f8:	4651      	mov	r1, sl
 80058fa:	018a      	lsls	r2, r1, #6
 80058fc:	4651      	mov	r1, sl
 80058fe:	ebb2 0801 	subs.w	r8, r2, r1
 8005902:	4659      	mov	r1, fp
 8005904:	eb63 0901 	sbc.w	r9, r3, r1
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005914:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005918:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800591c:	4690      	mov	r8, r2
 800591e:	4699      	mov	r9, r3
 8005920:	4623      	mov	r3, r4
 8005922:	eb18 0303 	adds.w	r3, r8, r3
 8005926:	60bb      	str	r3, [r7, #8]
 8005928:	462b      	mov	r3, r5
 800592a:	eb49 0303 	adc.w	r3, r9, r3
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800593c:	4629      	mov	r1, r5
 800593e:	028b      	lsls	r3, r1, #10
 8005940:	4621      	mov	r1, r4
 8005942:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005946:	4621      	mov	r1, r4
 8005948:	028a      	lsls	r2, r1, #10
 800594a:	4610      	mov	r0, r2
 800594c:	4619      	mov	r1, r3
 800594e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005952:	2200      	movs	r2, #0
 8005954:	643b      	str	r3, [r7, #64]	; 0x40
 8005956:	647a      	str	r2, [r7, #68]	; 0x44
 8005958:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800595c:	f7fb f9b4 	bl	8000cc8 <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4613      	mov	r3, r2
 8005966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800596a:	4b60      	ldr	r3, [pc, #384]	; (8005aec <HAL_RCC_GetSysClockFreq+0x348>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	0c1b      	lsrs	r3, r3, #16
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	3301      	adds	r3, #1
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800597c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005980:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800598c:	e0a6      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800598e:	4b57      	ldr	r3, [pc, #348]	; (8005aec <HAL_RCC_GetSysClockFreq+0x348>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800599a:	4b54      	ldr	r3, [pc, #336]	; (8005aec <HAL_RCC_GetSysClockFreq+0x348>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d02a      	beq.n	80059fc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059a6:	4b51      	ldr	r3, [pc, #324]	; (8005aec <HAL_RCC_GetSysClockFreq+0x348>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	099b      	lsrs	r3, r3, #6
 80059ac:	2200      	movs	r2, #0
 80059ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80059b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059b8:	2100      	movs	r1, #0
 80059ba:	4b4e      	ldr	r3, [pc, #312]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x350>)
 80059bc:	fb03 f201 	mul.w	r2, r3, r1
 80059c0:	2300      	movs	r3, #0
 80059c2:	fb00 f303 	mul.w	r3, r0, r3
 80059c6:	4413      	add	r3, r2
 80059c8:	4a4a      	ldr	r2, [pc, #296]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x350>)
 80059ca:	fba0 1202 	umull	r1, r2, r0, r2
 80059ce:	677a      	str	r2, [r7, #116]	; 0x74
 80059d0:	460a      	mov	r2, r1
 80059d2:	673a      	str	r2, [r7, #112]	; 0x70
 80059d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80059d6:	4413      	add	r3, r2
 80059d8:	677b      	str	r3, [r7, #116]	; 0x74
 80059da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059de:	2200      	movs	r2, #0
 80059e0:	633b      	str	r3, [r7, #48]	; 0x30
 80059e2:	637a      	str	r2, [r7, #52]	; 0x34
 80059e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80059ec:	f7fb f96c 	bl	8000cc8 <__aeabi_uldivmod>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4613      	mov	r3, r2
 80059f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059fa:	e05b      	b.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059fc:	4b3b      	ldr	r3, [pc, #236]	; (8005aec <HAL_RCC_GetSysClockFreq+0x348>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	099b      	lsrs	r3, r3, #6
 8005a02:	2200      	movs	r2, #0
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0e:	623b      	str	r3, [r7, #32]
 8005a10:	2300      	movs	r3, #0
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
 8005a14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a18:	4642      	mov	r2, r8
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	f04f 0000 	mov.w	r0, #0
 8005a20:	f04f 0100 	mov.w	r1, #0
 8005a24:	0159      	lsls	r1, r3, #5
 8005a26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a2a:	0150      	lsls	r0, r2, #5
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4641      	mov	r1, r8
 8005a32:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a36:	4649      	mov	r1, r9
 8005a38:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a50:	ebb2 040a 	subs.w	r4, r2, sl
 8005a54:	eb63 050b 	sbc.w	r5, r3, fp
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	00eb      	lsls	r3, r5, #3
 8005a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a66:	00e2      	lsls	r2, r4, #3
 8005a68:	4614      	mov	r4, r2
 8005a6a:	461d      	mov	r5, r3
 8005a6c:	4643      	mov	r3, r8
 8005a6e:	18e3      	adds	r3, r4, r3
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	464b      	mov	r3, r9
 8005a74:	eb45 0303 	adc.w	r3, r5, r3
 8005a78:	607b      	str	r3, [r7, #4]
 8005a7a:	f04f 0200 	mov.w	r2, #0
 8005a7e:	f04f 0300 	mov.w	r3, #0
 8005a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a86:	4629      	mov	r1, r5
 8005a88:	028b      	lsls	r3, r1, #10
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a90:	4621      	mov	r1, r4
 8005a92:	028a      	lsls	r2, r1, #10
 8005a94:	4610      	mov	r0, r2
 8005a96:	4619      	mov	r1, r3
 8005a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	61bb      	str	r3, [r7, #24]
 8005aa0:	61fa      	str	r2, [r7, #28]
 8005aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aa6:	f7fb f90f 	bl	8000cc8 <__aeabi_uldivmod>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4613      	mov	r3, r2
 8005ab0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <HAL_RCC_GetSysClockFreq+0x348>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	0f1b      	lsrs	r3, r3, #28
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005ad2:	e003      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ad4:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005ada:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005adc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3798      	adds	r7, #152	; 0x98
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800
 8005af0:	00f42400 	.word	0x00f42400
 8005af4:	017d7840 	.word	0x017d7840

08005af8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e28d      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 8083 	beq.w	8005c1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b18:	4b94      	ldr	r3, [pc, #592]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 030c 	and.w	r3, r3, #12
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d019      	beq.n	8005b58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005b24:	4b91      	ldr	r3, [pc, #580]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d106      	bne.n	8005b3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005b30:	4b8e      	ldr	r3, [pc, #568]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b3c:	d00c      	beq.n	8005b58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b3e:	4b8b      	ldr	r3, [pc, #556]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005b46:	2b0c      	cmp	r3, #12
 8005b48:	d112      	bne.n	8005b70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b4a:	4b88      	ldr	r3, [pc, #544]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b56:	d10b      	bne.n	8005b70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b58:	4b84      	ldr	r3, [pc, #528]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d05b      	beq.n	8005c1c <HAL_RCC_OscConfig+0x124>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d157      	bne.n	8005c1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e25a      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b78:	d106      	bne.n	8005b88 <HAL_RCC_OscConfig+0x90>
 8005b7a:	4b7c      	ldr	r3, [pc, #496]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a7b      	ldr	r2, [pc, #492]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	e01d      	b.n	8005bc4 <HAL_RCC_OscConfig+0xcc>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b90:	d10c      	bne.n	8005bac <HAL_RCC_OscConfig+0xb4>
 8005b92:	4b76      	ldr	r3, [pc, #472]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a75      	ldr	r2, [pc, #468]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	4b73      	ldr	r3, [pc, #460]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a72      	ldr	r2, [pc, #456]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	e00b      	b.n	8005bc4 <HAL_RCC_OscConfig+0xcc>
 8005bac:	4b6f      	ldr	r3, [pc, #444]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a6e      	ldr	r2, [pc, #440]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	4b6c      	ldr	r3, [pc, #432]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a6b      	ldr	r2, [pc, #428]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d013      	beq.n	8005bf4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fc f904 	bl	8001dd8 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bd4:	f7fc f900 	bl	8001dd8 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b64      	cmp	r3, #100	; 0x64
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e21f      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be6:	4b61      	ldr	r3, [pc, #388]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f0      	beq.n	8005bd4 <HAL_RCC_OscConfig+0xdc>
 8005bf2:	e014      	b.n	8005c1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf4:	f7fc f8f0 	bl	8001dd8 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bfc:	f7fc f8ec 	bl	8001dd8 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b64      	cmp	r3, #100	; 0x64
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e20b      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c0e:	4b57      	ldr	r3, [pc, #348]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1f0      	bne.n	8005bfc <HAL_RCC_OscConfig+0x104>
 8005c1a:	e000      	b.n	8005c1e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d06f      	beq.n	8005d0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c2a:	4b50      	ldr	r3, [pc, #320]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d017      	beq.n	8005c66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005c36:	4b4d      	ldr	r3, [pc, #308]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d105      	bne.n	8005c4e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005c42:	4b4a      	ldr	r3, [pc, #296]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00b      	beq.n	8005c66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c4e:	4b47      	ldr	r3, [pc, #284]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005c56:	2b0c      	cmp	r3, #12
 8005c58:	d11c      	bne.n	8005c94 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c5a:	4b44      	ldr	r3, [pc, #272]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d116      	bne.n	8005c94 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c66:	4b41      	ldr	r3, [pc, #260]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <HAL_RCC_OscConfig+0x186>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d001      	beq.n	8005c7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e1d3      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7e:	4b3b      	ldr	r3, [pc, #236]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	4937      	ldr	r1, [pc, #220]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c92:	e03a      	b.n	8005d0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d020      	beq.n	8005cde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c9c:	4b34      	ldr	r3, [pc, #208]	; (8005d70 <HAL_RCC_OscConfig+0x278>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca2:	f7fc f899 	bl	8001dd8 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005caa:	f7fc f895 	bl	8001dd8 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e1b4      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cbc:	4b2b      	ldr	r3, [pc, #172]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f0      	beq.n	8005caa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc8:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4925      	ldr	r1, [pc, #148]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	600b      	str	r3, [r1, #0]
 8005cdc:	e015      	b.n	8005d0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cde:	4b24      	ldr	r3, [pc, #144]	; (8005d70 <HAL_RCC_OscConfig+0x278>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fc f878 	bl	8001dd8 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cec:	f7fc f874 	bl	8001dd8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e193      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cfe:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f0      	bne.n	8005cec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d036      	beq.n	8005d84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d016      	beq.n	8005d4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d1e:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <HAL_RCC_OscConfig+0x27c>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d24:	f7fc f858 	bl	8001dd8 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d2c:	f7fc f854 	bl	8001dd8 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e173      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d3e:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <HAL_RCC_OscConfig+0x274>)
 8005d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0x234>
 8005d4a:	e01b      	b.n	8005d84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <HAL_RCC_OscConfig+0x27c>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d52:	f7fc f841 	bl	8001dd8 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d58:	e00e      	b.n	8005d78 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d5a:	f7fc f83d 	bl	8001dd8 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d907      	bls.n	8005d78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e15c      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	42470000 	.word	0x42470000
 8005d74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d78:	4b8a      	ldr	r3, [pc, #552]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1ea      	bne.n	8005d5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 8097 	beq.w	8005ec0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d92:	2300      	movs	r3, #0
 8005d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d96:	4b83      	ldr	r3, [pc, #524]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10f      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da2:	2300      	movs	r3, #0
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	4b7f      	ldr	r3, [pc, #508]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	4a7e      	ldr	r2, [pc, #504]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db0:	6413      	str	r3, [r2, #64]	; 0x40
 8005db2:	4b7c      	ldr	r3, [pc, #496]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc2:	4b79      	ldr	r3, [pc, #484]	; (8005fa8 <HAL_RCC_OscConfig+0x4b0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d118      	bne.n	8005e00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dce:	4b76      	ldr	r3, [pc, #472]	; (8005fa8 <HAL_RCC_OscConfig+0x4b0>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a75      	ldr	r2, [pc, #468]	; (8005fa8 <HAL_RCC_OscConfig+0x4b0>)
 8005dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dda:	f7fb fffd 	bl	8001dd8 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de2:	f7fb fff9 	bl	8001dd8 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e118      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df4:	4b6c      	ldr	r3, [pc, #432]	; (8005fa8 <HAL_RCC_OscConfig+0x4b0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d106      	bne.n	8005e16 <HAL_RCC_OscConfig+0x31e>
 8005e08:	4b66      	ldr	r3, [pc, #408]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0c:	4a65      	ldr	r2, [pc, #404]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	6713      	str	r3, [r2, #112]	; 0x70
 8005e14:	e01c      	b.n	8005e50 <HAL_RCC_OscConfig+0x358>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	2b05      	cmp	r3, #5
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0x340>
 8005e1e:	4b61      	ldr	r3, [pc, #388]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	4a60      	ldr	r2, [pc, #384]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005e24:	f043 0304 	orr.w	r3, r3, #4
 8005e28:	6713      	str	r3, [r2, #112]	; 0x70
 8005e2a:	4b5e      	ldr	r3, [pc, #376]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2e:	4a5d      	ldr	r2, [pc, #372]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6713      	str	r3, [r2, #112]	; 0x70
 8005e36:	e00b      	b.n	8005e50 <HAL_RCC_OscConfig+0x358>
 8005e38:	4b5a      	ldr	r3, [pc, #360]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3c:	4a59      	ldr	r2, [pc, #356]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005e3e:	f023 0301 	bic.w	r3, r3, #1
 8005e42:	6713      	str	r3, [r2, #112]	; 0x70
 8005e44:	4b57      	ldr	r3, [pc, #348]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e48:	4a56      	ldr	r2, [pc, #344]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005e4a:	f023 0304 	bic.w	r3, r3, #4
 8005e4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d015      	beq.n	8005e84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e58:	f7fb ffbe 	bl	8001dd8 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e60:	f7fb ffba 	bl	8001dd8 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e0d7      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e76:	4b4b      	ldr	r3, [pc, #300]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0ee      	beq.n	8005e60 <HAL_RCC_OscConfig+0x368>
 8005e82:	e014      	b.n	8005eae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e84:	f7fb ffa8 	bl	8001dd8 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e8a:	e00a      	b.n	8005ea2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e8c:	f7fb ffa4 	bl	8001dd8 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e0c1      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea2:	4b40      	ldr	r3, [pc, #256]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1ee      	bne.n	8005e8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d105      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb4:	4b3b      	ldr	r3, [pc, #236]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	4a3a      	ldr	r2, [pc, #232]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ebe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80ad 	beq.w	8006024 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eca:	4b36      	ldr	r3, [pc, #216]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d060      	beq.n	8005f98 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d145      	bne.n	8005f6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ede:	4b33      	ldr	r3, [pc, #204]	; (8005fac <HAL_RCC_OscConfig+0x4b4>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7fb ff78 	bl	8001dd8 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eec:	f7fb ff74 	bl	8001dd8 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e093      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efe:	4b29      	ldr	r3, [pc, #164]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	019b      	lsls	r3, r3, #6
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	085b      	lsrs	r3, r3, #1
 8005f22:	3b01      	subs	r3, #1
 8005f24:	041b      	lsls	r3, r3, #16
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2c:	061b      	lsls	r3, r3, #24
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	071b      	lsls	r3, r3, #28
 8005f36:	491b      	ldr	r1, [pc, #108]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f3c:	4b1b      	ldr	r3, [pc, #108]	; (8005fac <HAL_RCC_OscConfig+0x4b4>)
 8005f3e:	2201      	movs	r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f42:	f7fb ff49 	bl	8001dd8 <HAL_GetTick>
 8005f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f4a:	f7fb ff45 	bl	8001dd8 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e064      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f5c:	4b11      	ldr	r3, [pc, #68]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0f0      	beq.n	8005f4a <HAL_RCC_OscConfig+0x452>
 8005f68:	e05c      	b.n	8006024 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f6a:	4b10      	ldr	r3, [pc, #64]	; (8005fac <HAL_RCC_OscConfig+0x4b4>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f70:	f7fb ff32 	bl	8001dd8 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f78:	f7fb ff2e 	bl	8001dd8 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e04d      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8a:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <HAL_RCC_OscConfig+0x4ac>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x480>
 8005f96:	e045      	b.n	8006024 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e040      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	40007000 	.word	0x40007000
 8005fac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fb0:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <HAL_RCC_OscConfig+0x538>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d030      	beq.n	8006020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d129      	bne.n	8006020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d122      	bne.n	8006020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fe6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d119      	bne.n	8006020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d10f      	bne.n	8006020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800600c:	429a      	cmp	r2, r3
 800600e:	d107      	bne.n	8006020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800601c:	429a      	cmp	r2, r3
 800601e:	d001      	beq.n	8006024 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40023800 	.word	0x40023800

08006034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e07b      	b.n	800613e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	2b00      	cmp	r3, #0
 800604c:	d108      	bne.n	8006060 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006056:	d009      	beq.n	800606c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	61da      	str	r2, [r3, #28]
 800605e:	e005      	b.n	800606c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fb fbf8 	bl	800187c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	431a      	orrs	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f0:	ea42 0103 	orr.w	r1, r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	0c1b      	lsrs	r3, r3, #16
 800610a:	f003 0104 	and.w	r1, r3, #4
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	f003 0210 	and.w	r2, r3, #16
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800612c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b082      	sub	sp, #8
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e03f      	b.n	80061d8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fb fc1f 	bl	80019b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2224      	movs	r2, #36	; 0x24
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006188:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fe1c 	bl	8006dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800619e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	4613      	mov	r3, r2
 80061ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d17c      	bne.n	80062fa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <HAL_UART_Transmit+0x2c>
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e075      	b.n	80062fc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_UART_Transmit+0x3e>
 800621a:	2302      	movs	r3, #2
 800621c:	e06e      	b.n	80062fc <HAL_UART_Transmit+0x11c>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2221      	movs	r2, #33	; 0x21
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006234:	f7fb fdd0 	bl	8001dd8 <HAL_GetTick>
 8006238:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	88fa      	ldrh	r2, [r7, #6]
 800623e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624e:	d108      	bne.n	8006262 <HAL_UART_Transmit+0x82>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006258:	2300      	movs	r3, #0
 800625a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e003      	b.n	800626a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006266:	2300      	movs	r3, #0
 8006268:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006272:	e02a      	b.n	80062ca <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2200      	movs	r2, #0
 800627c:	2180      	movs	r1, #128	; 0x80
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 fb9a 	bl	80069b8 <UART_WaitOnFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e036      	b.n	80062fc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10b      	bne.n	80062ac <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062a2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	3302      	adds	r3, #2
 80062a8:	61bb      	str	r3, [r7, #24]
 80062aa:	e007      	b.n	80062bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	781a      	ldrb	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	3301      	adds	r3, #1
 80062ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1cf      	bne.n	8006274 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2200      	movs	r2, #0
 80062dc:	2140      	movs	r1, #64	; 0x40
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 fb6a 	bl	80069b8 <UART_WaitOnFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e006      	b.n	80062fc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e000      	b.n	80062fc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80062fa:	2302      	movs	r3, #2
  }
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3720      	adds	r7, #32
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08a      	sub	sp, #40	; 0x28
 8006308:	af02      	add	r7, sp, #8
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	4613      	mov	r3, r2
 8006312:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b20      	cmp	r3, #32
 8006322:	f040 808c 	bne.w	800643e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <HAL_UART_Receive+0x2e>
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e084      	b.n	8006440 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_UART_Receive+0x40>
 8006340:	2302      	movs	r3, #2
 8006342:	e07d      	b.n	8006440 <HAL_UART_Receive+0x13c>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2222      	movs	r2, #34	; 0x22
 8006356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006360:	f7fb fd3a 	bl	8001dd8 <HAL_GetTick>
 8006364:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	88fa      	ldrh	r2, [r7, #6]
 800636a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	88fa      	ldrh	r2, [r7, #6]
 8006370:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637a:	d108      	bne.n	800638e <HAL_UART_Receive+0x8a>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006384:	2300      	movs	r3, #0
 8006386:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	e003      	b.n	8006396 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800639e:	e043      	b.n	8006428 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2200      	movs	r2, #0
 80063a8:	2120      	movs	r1, #32
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fb04 	bl	80069b8 <UART_WaitOnFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e042      	b.n	8006440 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10c      	bne.n	80063da <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	3302      	adds	r3, #2
 80063d6:	61bb      	str	r3, [r7, #24]
 80063d8:	e01f      	b.n	800641a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e2:	d007      	beq.n	80063f4 <HAL_UART_Receive+0xf0>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <HAL_UART_Receive+0xfe>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d106      	bne.n	8006402 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	e008      	b.n	8006414 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	b2db      	uxtb	r3, r3
 800640a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640e:	b2da      	uxtb	r2, r3
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	3301      	adds	r3, #1
 8006418:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1b6      	bne.n	80063a0 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	e000      	b.n	8006440 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800643e:	2302      	movs	r3, #2
  }
}
 8006440:	4618      	mov	r0, r3
 8006442:	3720      	adds	r7, #32
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b0ba      	sub	sp, #232	; 0xe8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800646e:	2300      	movs	r3, #0
 8006470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006474:	2300      	movs	r3, #0
 8006476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10f      	bne.n	80064ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800648e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <HAL_UART_IRQHandler+0x66>
 800649a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fbd3 	bl	8006c52 <UART_Receive_IT>
      return;
 80064ac:	e256      	b.n	800695c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 80de 	beq.w	8006674 <HAL_UART_IRQHandler+0x22c>
 80064b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d106      	bne.n	80064d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80d1 	beq.w	8006674 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00b      	beq.n	80064f6 <HAL_UART_IRQHandler+0xae>
 80064de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f043 0201 	orr.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00b      	beq.n	800651a <HAL_UART_IRQHandler+0xd2>
 8006502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	f043 0202 	orr.w	r2, r3, #2
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800651a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00b      	beq.n	800653e <HAL_UART_IRQHandler+0xf6>
 8006526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d005      	beq.n	800653e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	f043 0204 	orr.w	r2, r3, #4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800653e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d011      	beq.n	800656e <HAL_UART_IRQHandler+0x126>
 800654a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d105      	bne.n	8006562 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f043 0208 	orr.w	r2, r3, #8
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 81ed 	beq.w	8006952 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HAL_UART_IRQHandler+0x14e>
 8006584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fb5e 	bl	8006c52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <HAL_UART_IRQHandler+0x17a>
 80065ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d04f      	beq.n	8006662 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa66 	bl	8006a94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d141      	bne.n	800665a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3314      	adds	r3, #20
 80065dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3314      	adds	r3, #20
 80065fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006602:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800660e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800661a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1d9      	bne.n	80065d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	2b00      	cmp	r3, #0
 8006628:	d013      	beq.n	8006652 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	4a7d      	ldr	r2, [pc, #500]	; (8006824 <HAL_UART_IRQHandler+0x3dc>)
 8006630:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	4618      	mov	r0, r3
 8006638:	f7fb fe0a 	bl	8002250 <HAL_DMA_Abort_IT>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d016      	beq.n	8006670 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800664c:	4610      	mov	r0, r2
 800664e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006650:	e00e      	b.n	8006670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f99a 	bl	800698c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006658:	e00a      	b.n	8006670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f996 	bl	800698c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006660:	e006      	b.n	8006670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f992 	bl	800698c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800666e:	e170      	b.n	8006952 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006670:	bf00      	nop
    return;
 8006672:	e16e      	b.n	8006952 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	2b01      	cmp	r3, #1
 800667a:	f040 814a 	bne.w	8006912 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006682:	f003 0310 	and.w	r3, r3, #16
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 8143 	beq.w	8006912 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800668c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 813c 	beq.w	8006912 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800669a:	2300      	movs	r3, #0
 800669c:	60bb      	str	r3, [r7, #8]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	60bb      	str	r3, [r7, #8]
 80066ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b40      	cmp	r3, #64	; 0x40
 80066bc:	f040 80b4 	bne.w	8006828 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8140 	beq.w	8006956 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066de:	429a      	cmp	r2, r3
 80066e0:	f080 8139 	bcs.w	8006956 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f6:	f000 8088 	beq.w	800680a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	330c      	adds	r3, #12
 8006700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006710:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	330c      	adds	r3, #12
 8006722:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006726:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800672a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006732:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800673e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1d9      	bne.n	80066fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3314      	adds	r3, #20
 800674c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3314      	adds	r3, #20
 8006766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800676a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800676e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006772:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800677c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e1      	bne.n	8006746 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3314      	adds	r3, #20
 8006788:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3314      	adds	r3, #20
 80067a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e3      	bne.n	8006782 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067da:	f023 0310 	bic.w	r3, r3, #16
 80067de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	330c      	adds	r3, #12
 80067e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80067ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e3      	bne.n	80067c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	4618      	mov	r0, r3
 8006806:	f7fb fcb3 	bl	8002170 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006812:	b29b      	uxth	r3, r3
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	b29b      	uxth	r3, r3
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f8c0 	bl	80069a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006820:	e099      	b.n	8006956 <HAL_UART_IRQHandler+0x50e>
 8006822:	bf00      	nop
 8006824:	08006b5b 	.word	0x08006b5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006830:	b29b      	uxth	r3, r3
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 808b 	beq.w	800695a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006844:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 8086 	beq.w	800695a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	330c      	adds	r3, #12
 8006854:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006860:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	330c      	adds	r3, #12
 800686e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006872:	647a      	str	r2, [r7, #68]	; 0x44
 8006874:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e3      	bne.n	800684e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3314      	adds	r3, #20
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	623b      	str	r3, [r7, #32]
   return(result);
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	f023 0301 	bic.w	r3, r3, #1
 800689c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3314      	adds	r3, #20
 80068a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068aa:	633a      	str	r2, [r7, #48]	; 0x30
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e3      	bne.n	8006886 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	330c      	adds	r3, #12
 80068d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	60fb      	str	r3, [r7, #12]
   return(result);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0310 	bic.w	r3, r3, #16
 80068e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	330c      	adds	r3, #12
 80068ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068f0:	61fa      	str	r2, [r7, #28]
 80068f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	69b9      	ldr	r1, [r7, #24]
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	617b      	str	r3, [r7, #20]
   return(result);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e3      	bne.n	80068cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006904:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f848 	bl	80069a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006910:	e023      	b.n	800695a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691a:	2b00      	cmp	r3, #0
 800691c:	d009      	beq.n	8006932 <HAL_UART_IRQHandler+0x4ea>
 800691e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f929 	bl	8006b82 <UART_Transmit_IT>
    return;
 8006930:	e014      	b.n	800695c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00e      	beq.n	800695c <HAL_UART_IRQHandler+0x514>
 800693e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d008      	beq.n	800695c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f969 	bl	8006c22 <UART_EndTransmit_IT>
    return;
 8006950:	e004      	b.n	800695c <HAL_UART_IRQHandler+0x514>
    return;
 8006952:	bf00      	nop
 8006954:	e002      	b.n	800695c <HAL_UART_IRQHandler+0x514>
      return;
 8006956:	bf00      	nop
 8006958:	e000      	b.n	800695c <HAL_UART_IRQHandler+0x514>
      return;
 800695a:	bf00      	nop
  }
}
 800695c:	37e8      	adds	r7, #232	; 0xe8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop

08006964 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b090      	sub	sp, #64	; 0x40
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	4613      	mov	r3, r2
 80069c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c8:	e050      	b.n	8006a6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d04c      	beq.n	8006a6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80069d8:	f7fb f9fe 	bl	8001dd8 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d241      	bcs.n	8006a6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	330c      	adds	r3, #12
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	330c      	adds	r3, #12
 8006a06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a08:	637a      	str	r2, [r7, #52]	; 0x34
 8006a0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e5      	bne.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3314      	adds	r3, #20
 8006a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f023 0301 	bic.w	r3, r3, #1
 8006a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3314      	adds	r3, #20
 8006a3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a3c:	623a      	str	r2, [r7, #32]
 8006a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	69f9      	ldr	r1, [r7, #28]
 8006a42:	6a3a      	ldr	r2, [r7, #32]
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e5      	bne.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e00f      	b.n	8006a8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4013      	ands	r3, r2
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	bf0c      	ite	eq
 8006a7c:	2301      	moveq	r3, #1
 8006a7e:	2300      	movne	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d09f      	beq.n	80069ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3740      	adds	r7, #64	; 0x40
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b095      	sub	sp, #84	; 0x54
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006abc:	643a      	str	r2, [r7, #64]	; 0x40
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e5      	bne.n	8006a9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3314      	adds	r3, #20
 8006ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f023 0301 	bic.w	r3, r3, #1
 8006ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3314      	adds	r3, #20
 8006aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e5      	bne.n	8006ad0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d119      	bne.n	8006b40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	330c      	adds	r3, #12
 8006b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f023 0310 	bic.w	r3, r3, #16
 8006b22:	647b      	str	r3, [r7, #68]	; 0x44
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b2c:	61ba      	str	r2, [r7, #24]
 8006b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6979      	ldr	r1, [r7, #20]
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e5      	bne.n	8006b0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b4e:	bf00      	nop
 8006b50:	3754      	adds	r7, #84	; 0x54
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff ff09 	bl	800698c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b21      	cmp	r3, #33	; 0x21
 8006b94:	d13e      	bne.n	8006c14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b9e:	d114      	bne.n	8006bca <UART_Transmit_IT+0x48>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d110      	bne.n	8006bca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	1c9a      	adds	r2, r3, #2
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	621a      	str	r2, [r3, #32]
 8006bc8:	e008      	b.n	8006bdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	1c59      	adds	r1, r3, #1
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6211      	str	r1, [r2, #32]
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	4619      	mov	r1, r3
 8006bea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10f      	bne.n	8006c10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	e000      	b.n	8006c16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c14:	2302      	movs	r3, #2
  }
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b082      	sub	sp, #8
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff fe8e 	bl	8006964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b08c      	sub	sp, #48	; 0x30
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b22      	cmp	r3, #34	; 0x22
 8006c64:	f040 80ab 	bne.w	8006dbe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c70:	d117      	bne.n	8006ca2 <UART_Receive_IT+0x50>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d113      	bne.n	8006ca2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	1c9a      	adds	r2, r3, #2
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006ca0:	e026      	b.n	8006cf0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb4:	d007      	beq.n	8006cc6 <UART_Receive_IT+0x74>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <UART_Receive_IT+0x82>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	e008      	b.n	8006ce6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d15a      	bne.n	8006dba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0220 	bic.w	r2, r2, #32
 8006d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695a      	ldr	r2, [r3, #20]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0201 	bic.w	r2, r2, #1
 8006d32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d135      	bne.n	8006db0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	330c      	adds	r3, #12
 8006d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	613b      	str	r3, [r7, #16]
   return(result);
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f023 0310 	bic.w	r3, r3, #16
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6a:	623a      	str	r2, [r7, #32]
 8006d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	69f9      	ldr	r1, [r7, #28]
 8006d70:	6a3a      	ldr	r2, [r7, #32]
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e5      	bne.n	8006d4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b10      	cmp	r3, #16
 8006d8a:	d10a      	bne.n	8006da2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff fdf9 	bl	80069a0 <HAL_UARTEx_RxEventCallback>
 8006dae:	e002      	b.n	8006db6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff fde1 	bl	8006978 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e002      	b.n	8006dc0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e000      	b.n	8006dc0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006dbe:	2302      	movs	r3, #2
  }
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3730      	adds	r7, #48	; 0x30
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dcc:	b0c0      	sub	sp, #256	; 0x100
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de4:	68d9      	ldr	r1, [r3, #12]
 8006de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	ea40 0301 	orr.w	r3, r0, r1
 8006df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	431a      	orrs	r2, r3
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e20:	f021 010c 	bic.w	r1, r1, #12
 8006e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e42:	6999      	ldr	r1, [r3, #24]
 8006e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	ea40 0301 	orr.w	r3, r0, r1
 8006e4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	4b8f      	ldr	r3, [pc, #572]	; (8007094 <UART_SetConfig+0x2cc>)
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d005      	beq.n	8006e68 <UART_SetConfig+0xa0>
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4b8d      	ldr	r3, [pc, #564]	; (8007098 <UART_SetConfig+0x2d0>)
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d104      	bne.n	8006e72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e68:	f7fd ff16 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 8006e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e70:	e003      	b.n	8006e7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e72:	f7fd fefd 	bl	8004c70 <HAL_RCC_GetPCLK1Freq>
 8006e76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e84:	f040 810c 	bne.w	80070a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	1891      	adds	r1, r2, r2
 8006ea0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ea2:	415b      	adcs	r3, r3
 8006ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006eaa:	4621      	mov	r1, r4
 8006eac:	eb12 0801 	adds.w	r8, r2, r1
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	eb43 0901 	adc.w	r9, r3, r1
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eca:	4690      	mov	r8, r2
 8006ecc:	4699      	mov	r9, r3
 8006ece:	4623      	mov	r3, r4
 8006ed0:	eb18 0303 	adds.w	r3, r8, r3
 8006ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ed8:	462b      	mov	r3, r5
 8006eda:	eb49 0303 	adc.w	r3, r9, r3
 8006ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006eee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	18db      	adds	r3, r3, r3
 8006efa:	653b      	str	r3, [r7, #80]	; 0x50
 8006efc:	4613      	mov	r3, r2
 8006efe:	eb42 0303 	adc.w	r3, r2, r3
 8006f02:	657b      	str	r3, [r7, #84]	; 0x54
 8006f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f0c:	f7f9 fedc 	bl	8000cc8 <__aeabi_uldivmod>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4b61      	ldr	r3, [pc, #388]	; (800709c <UART_SetConfig+0x2d4>)
 8006f16:	fba3 2302 	umull	r2, r3, r3, r2
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	011c      	lsls	r4, r3, #4
 8006f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f30:	4642      	mov	r2, r8
 8006f32:	464b      	mov	r3, r9
 8006f34:	1891      	adds	r1, r2, r2
 8006f36:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f38:	415b      	adcs	r3, r3
 8006f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f40:	4641      	mov	r1, r8
 8006f42:	eb12 0a01 	adds.w	sl, r2, r1
 8006f46:	4649      	mov	r1, r9
 8006f48:	eb43 0b01 	adc.w	fp, r3, r1
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f60:	4692      	mov	sl, r2
 8006f62:	469b      	mov	fp, r3
 8006f64:	4643      	mov	r3, r8
 8006f66:	eb1a 0303 	adds.w	r3, sl, r3
 8006f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f6e:	464b      	mov	r3, r9
 8006f70:	eb4b 0303 	adc.w	r3, fp, r3
 8006f74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	18db      	adds	r3, r3, r3
 8006f90:	643b      	str	r3, [r7, #64]	; 0x40
 8006f92:	4613      	mov	r3, r2
 8006f94:	eb42 0303 	adc.w	r3, r2, r3
 8006f98:	647b      	str	r3, [r7, #68]	; 0x44
 8006f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006fa2:	f7f9 fe91 	bl	8000cc8 <__aeabi_uldivmod>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	4b3b      	ldr	r3, [pc, #236]	; (800709c <UART_SetConfig+0x2d4>)
 8006fae:	fba3 2301 	umull	r2, r3, r3, r1
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	2264      	movs	r2, #100	; 0x64
 8006fb6:	fb02 f303 	mul.w	r3, r2, r3
 8006fba:	1acb      	subs	r3, r1, r3
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006fc2:	4b36      	ldr	r3, [pc, #216]	; (800709c <UART_SetConfig+0x2d4>)
 8006fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fd0:	441c      	add	r4, r3
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	1891      	adds	r1, r2, r2
 8006fea:	63b9      	str	r1, [r7, #56]	; 0x38
 8006fec:	415b      	adcs	r3, r3
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	1851      	adds	r1, r2, r1
 8006ff8:	6339      	str	r1, [r7, #48]	; 0x30
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	414b      	adcs	r3, r1
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800700c:	4659      	mov	r1, fp
 800700e:	00cb      	lsls	r3, r1, #3
 8007010:	4651      	mov	r1, sl
 8007012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007016:	4651      	mov	r1, sl
 8007018:	00ca      	lsls	r2, r1, #3
 800701a:	4610      	mov	r0, r2
 800701c:	4619      	mov	r1, r3
 800701e:	4603      	mov	r3, r0
 8007020:	4642      	mov	r2, r8
 8007022:	189b      	adds	r3, r3, r2
 8007024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007028:	464b      	mov	r3, r9
 800702a:	460a      	mov	r2, r1
 800702c:	eb42 0303 	adc.w	r3, r2, r3
 8007030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007040:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007048:	460b      	mov	r3, r1
 800704a:	18db      	adds	r3, r3, r3
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
 800704e:	4613      	mov	r3, r2
 8007050:	eb42 0303 	adc.w	r3, r2, r3
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800705a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800705e:	f7f9 fe33 	bl	8000cc8 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4b0d      	ldr	r3, [pc, #52]	; (800709c <UART_SetConfig+0x2d4>)
 8007068:	fba3 1302 	umull	r1, r3, r3, r2
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	2164      	movs	r1, #100	; 0x64
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	3332      	adds	r3, #50	; 0x32
 800707a:	4a08      	ldr	r2, [pc, #32]	; (800709c <UART_SetConfig+0x2d4>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	f003 0207 	and.w	r2, r3, #7
 8007086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4422      	add	r2, r4
 800708e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007090:	e105      	b.n	800729e <UART_SetConfig+0x4d6>
 8007092:	bf00      	nop
 8007094:	40011000 	.word	0x40011000
 8007098:	40011400 	.word	0x40011400
 800709c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80070ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80070b2:	4642      	mov	r2, r8
 80070b4:	464b      	mov	r3, r9
 80070b6:	1891      	adds	r1, r2, r2
 80070b8:	6239      	str	r1, [r7, #32]
 80070ba:	415b      	adcs	r3, r3
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
 80070be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070c2:	4641      	mov	r1, r8
 80070c4:	1854      	adds	r4, r2, r1
 80070c6:	4649      	mov	r1, r9
 80070c8:	eb43 0501 	adc.w	r5, r3, r1
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	00eb      	lsls	r3, r5, #3
 80070d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070da:	00e2      	lsls	r2, r4, #3
 80070dc:	4614      	mov	r4, r2
 80070de:	461d      	mov	r5, r3
 80070e0:	4643      	mov	r3, r8
 80070e2:	18e3      	adds	r3, r4, r3
 80070e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070e8:	464b      	mov	r3, r9
 80070ea:	eb45 0303 	adc.w	r3, r5, r3
 80070ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	f04f 0300 	mov.w	r3, #0
 800710a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800710e:	4629      	mov	r1, r5
 8007110:	008b      	lsls	r3, r1, #2
 8007112:	4621      	mov	r1, r4
 8007114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007118:	4621      	mov	r1, r4
 800711a:	008a      	lsls	r2, r1, #2
 800711c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007120:	f7f9 fdd2 	bl	8000cc8 <__aeabi_uldivmod>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4b60      	ldr	r3, [pc, #384]	; (80072ac <UART_SetConfig+0x4e4>)
 800712a:	fba3 2302 	umull	r2, r3, r3, r2
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	011c      	lsls	r4, r3, #4
 8007132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007136:	2200      	movs	r2, #0
 8007138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800713c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	1891      	adds	r1, r2, r2
 800714a:	61b9      	str	r1, [r7, #24]
 800714c:	415b      	adcs	r3, r3
 800714e:	61fb      	str	r3, [r7, #28]
 8007150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007154:	4641      	mov	r1, r8
 8007156:	1851      	adds	r1, r2, r1
 8007158:	6139      	str	r1, [r7, #16]
 800715a:	4649      	mov	r1, r9
 800715c:	414b      	adcs	r3, r1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800716c:	4659      	mov	r1, fp
 800716e:	00cb      	lsls	r3, r1, #3
 8007170:	4651      	mov	r1, sl
 8007172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007176:	4651      	mov	r1, sl
 8007178:	00ca      	lsls	r2, r1, #3
 800717a:	4610      	mov	r0, r2
 800717c:	4619      	mov	r1, r3
 800717e:	4603      	mov	r3, r0
 8007180:	4642      	mov	r2, r8
 8007182:	189b      	adds	r3, r3, r2
 8007184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007188:	464b      	mov	r3, r9
 800718a:	460a      	mov	r2, r1
 800718c:	eb42 0303 	adc.w	r3, r2, r3
 8007190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	67bb      	str	r3, [r7, #120]	; 0x78
 800719e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80071ac:	4649      	mov	r1, r9
 80071ae:	008b      	lsls	r3, r1, #2
 80071b0:	4641      	mov	r1, r8
 80071b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071b6:	4641      	mov	r1, r8
 80071b8:	008a      	lsls	r2, r1, #2
 80071ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071be:	f7f9 fd83 	bl	8000cc8 <__aeabi_uldivmod>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4b39      	ldr	r3, [pc, #228]	; (80072ac <UART_SetConfig+0x4e4>)
 80071c8:	fba3 1302 	umull	r1, r3, r3, r2
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	2164      	movs	r1, #100	; 0x64
 80071d0:	fb01 f303 	mul.w	r3, r1, r3
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	011b      	lsls	r3, r3, #4
 80071d8:	3332      	adds	r3, #50	; 0x32
 80071da:	4a34      	ldr	r2, [pc, #208]	; (80072ac <UART_SetConfig+0x4e4>)
 80071dc:	fba2 2303 	umull	r2, r3, r2, r3
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071e6:	441c      	add	r4, r3
 80071e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ec:	2200      	movs	r2, #0
 80071ee:	673b      	str	r3, [r7, #112]	; 0x70
 80071f0:	677a      	str	r2, [r7, #116]	; 0x74
 80071f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80071f6:	4642      	mov	r2, r8
 80071f8:	464b      	mov	r3, r9
 80071fa:	1891      	adds	r1, r2, r2
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	415b      	adcs	r3, r3
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007206:	4641      	mov	r1, r8
 8007208:	1851      	adds	r1, r2, r1
 800720a:	6039      	str	r1, [r7, #0]
 800720c:	4649      	mov	r1, r9
 800720e:	414b      	adcs	r3, r1
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	f04f 0300 	mov.w	r3, #0
 800721a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800721e:	4659      	mov	r1, fp
 8007220:	00cb      	lsls	r3, r1, #3
 8007222:	4651      	mov	r1, sl
 8007224:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007228:	4651      	mov	r1, sl
 800722a:	00ca      	lsls	r2, r1, #3
 800722c:	4610      	mov	r0, r2
 800722e:	4619      	mov	r1, r3
 8007230:	4603      	mov	r3, r0
 8007232:	4642      	mov	r2, r8
 8007234:	189b      	adds	r3, r3, r2
 8007236:	66bb      	str	r3, [r7, #104]	; 0x68
 8007238:	464b      	mov	r3, r9
 800723a:	460a      	mov	r2, r1
 800723c:	eb42 0303 	adc.w	r3, r2, r3
 8007240:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	663b      	str	r3, [r7, #96]	; 0x60
 800724c:	667a      	str	r2, [r7, #100]	; 0x64
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800725a:	4649      	mov	r1, r9
 800725c:	008b      	lsls	r3, r1, #2
 800725e:	4641      	mov	r1, r8
 8007260:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007264:	4641      	mov	r1, r8
 8007266:	008a      	lsls	r2, r1, #2
 8007268:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800726c:	f7f9 fd2c 	bl	8000cc8 <__aeabi_uldivmod>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4b0d      	ldr	r3, [pc, #52]	; (80072ac <UART_SetConfig+0x4e4>)
 8007276:	fba3 1302 	umull	r1, r3, r3, r2
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	2164      	movs	r1, #100	; 0x64
 800727e:	fb01 f303 	mul.w	r3, r1, r3
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	3332      	adds	r3, #50	; 0x32
 8007288:	4a08      	ldr	r2, [pc, #32]	; (80072ac <UART_SetConfig+0x4e4>)
 800728a:	fba2 2303 	umull	r2, r3, r2, r3
 800728e:	095b      	lsrs	r3, r3, #5
 8007290:	f003 020f 	and.w	r2, r3, #15
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4422      	add	r2, r4
 800729c:	609a      	str	r2, [r3, #8]
}
 800729e:	bf00      	nop
 80072a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80072a4:	46bd      	mov	sp, r7
 80072a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072aa:	bf00      	nop
 80072ac:	51eb851f 	.word	0x51eb851f

080072b0 <__errno>:
 80072b0:	4b01      	ldr	r3, [pc, #4]	; (80072b8 <__errno+0x8>)
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	2000000c 	.word	0x2000000c

080072bc <__libc_init_array>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	4d0d      	ldr	r5, [pc, #52]	; (80072f4 <__libc_init_array+0x38>)
 80072c0:	4c0d      	ldr	r4, [pc, #52]	; (80072f8 <__libc_init_array+0x3c>)
 80072c2:	1b64      	subs	r4, r4, r5
 80072c4:	10a4      	asrs	r4, r4, #2
 80072c6:	2600      	movs	r6, #0
 80072c8:	42a6      	cmp	r6, r4
 80072ca:	d109      	bne.n	80072e0 <__libc_init_array+0x24>
 80072cc:	4d0b      	ldr	r5, [pc, #44]	; (80072fc <__libc_init_array+0x40>)
 80072ce:	4c0c      	ldr	r4, [pc, #48]	; (8007300 <__libc_init_array+0x44>)
 80072d0:	f005 fd78 	bl	800cdc4 <_init>
 80072d4:	1b64      	subs	r4, r4, r5
 80072d6:	10a4      	asrs	r4, r4, #2
 80072d8:	2600      	movs	r6, #0
 80072da:	42a6      	cmp	r6, r4
 80072dc:	d105      	bne.n	80072ea <__libc_init_array+0x2e>
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e4:	4798      	blx	r3
 80072e6:	3601      	adds	r6, #1
 80072e8:	e7ee      	b.n	80072c8 <__libc_init_array+0xc>
 80072ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ee:	4798      	blx	r3
 80072f0:	3601      	adds	r6, #1
 80072f2:	e7f2      	b.n	80072da <__libc_init_array+0x1e>
 80072f4:	0800d5d4 	.word	0x0800d5d4
 80072f8:	0800d5d4 	.word	0x0800d5d4
 80072fc:	0800d5d4 	.word	0x0800d5d4
 8007300:	0800d5d8 	.word	0x0800d5d8

08007304 <memset>:
 8007304:	4402      	add	r2, r0
 8007306:	4603      	mov	r3, r0
 8007308:	4293      	cmp	r3, r2
 800730a:	d100      	bne.n	800730e <memset+0xa>
 800730c:	4770      	bx	lr
 800730e:	f803 1b01 	strb.w	r1, [r3], #1
 8007312:	e7f9      	b.n	8007308 <memset+0x4>

08007314 <__cvt>:
 8007314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007318:	ec55 4b10 	vmov	r4, r5, d0
 800731c:	2d00      	cmp	r5, #0
 800731e:	460e      	mov	r6, r1
 8007320:	4619      	mov	r1, r3
 8007322:	462b      	mov	r3, r5
 8007324:	bfbb      	ittet	lt
 8007326:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800732a:	461d      	movlt	r5, r3
 800732c:	2300      	movge	r3, #0
 800732e:	232d      	movlt	r3, #45	; 0x2d
 8007330:	700b      	strb	r3, [r1, #0]
 8007332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007334:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007338:	4691      	mov	r9, r2
 800733a:	f023 0820 	bic.w	r8, r3, #32
 800733e:	bfbc      	itt	lt
 8007340:	4622      	movlt	r2, r4
 8007342:	4614      	movlt	r4, r2
 8007344:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007348:	d005      	beq.n	8007356 <__cvt+0x42>
 800734a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800734e:	d100      	bne.n	8007352 <__cvt+0x3e>
 8007350:	3601      	adds	r6, #1
 8007352:	2102      	movs	r1, #2
 8007354:	e000      	b.n	8007358 <__cvt+0x44>
 8007356:	2103      	movs	r1, #3
 8007358:	ab03      	add	r3, sp, #12
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	ab02      	add	r3, sp, #8
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	ec45 4b10 	vmov	d0, r4, r5
 8007364:	4653      	mov	r3, sl
 8007366:	4632      	mov	r2, r6
 8007368:	f002 f886 	bl	8009478 <_dtoa_r>
 800736c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007370:	4607      	mov	r7, r0
 8007372:	d102      	bne.n	800737a <__cvt+0x66>
 8007374:	f019 0f01 	tst.w	r9, #1
 8007378:	d022      	beq.n	80073c0 <__cvt+0xac>
 800737a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800737e:	eb07 0906 	add.w	r9, r7, r6
 8007382:	d110      	bne.n	80073a6 <__cvt+0x92>
 8007384:	783b      	ldrb	r3, [r7, #0]
 8007386:	2b30      	cmp	r3, #48	; 0x30
 8007388:	d10a      	bne.n	80073a0 <__cvt+0x8c>
 800738a:	2200      	movs	r2, #0
 800738c:	2300      	movs	r3, #0
 800738e:	4620      	mov	r0, r4
 8007390:	4629      	mov	r1, r5
 8007392:	f7f9 fbb9 	bl	8000b08 <__aeabi_dcmpeq>
 8007396:	b918      	cbnz	r0, 80073a0 <__cvt+0x8c>
 8007398:	f1c6 0601 	rsb	r6, r6, #1
 800739c:	f8ca 6000 	str.w	r6, [sl]
 80073a0:	f8da 3000 	ldr.w	r3, [sl]
 80073a4:	4499      	add	r9, r3
 80073a6:	2200      	movs	r2, #0
 80073a8:	2300      	movs	r3, #0
 80073aa:	4620      	mov	r0, r4
 80073ac:	4629      	mov	r1, r5
 80073ae:	f7f9 fbab 	bl	8000b08 <__aeabi_dcmpeq>
 80073b2:	b108      	cbz	r0, 80073b8 <__cvt+0xa4>
 80073b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80073b8:	2230      	movs	r2, #48	; 0x30
 80073ba:	9b03      	ldr	r3, [sp, #12]
 80073bc:	454b      	cmp	r3, r9
 80073be:	d307      	bcc.n	80073d0 <__cvt+0xbc>
 80073c0:	9b03      	ldr	r3, [sp, #12]
 80073c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073c4:	1bdb      	subs	r3, r3, r7
 80073c6:	4638      	mov	r0, r7
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	b004      	add	sp, #16
 80073cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d0:	1c59      	adds	r1, r3, #1
 80073d2:	9103      	str	r1, [sp, #12]
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	e7f0      	b.n	80073ba <__cvt+0xa6>

080073d8 <__exponent>:
 80073d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073da:	4603      	mov	r3, r0
 80073dc:	2900      	cmp	r1, #0
 80073de:	bfb8      	it	lt
 80073e0:	4249      	neglt	r1, r1
 80073e2:	f803 2b02 	strb.w	r2, [r3], #2
 80073e6:	bfb4      	ite	lt
 80073e8:	222d      	movlt	r2, #45	; 0x2d
 80073ea:	222b      	movge	r2, #43	; 0x2b
 80073ec:	2909      	cmp	r1, #9
 80073ee:	7042      	strb	r2, [r0, #1]
 80073f0:	dd2a      	ble.n	8007448 <__exponent+0x70>
 80073f2:	f10d 0407 	add.w	r4, sp, #7
 80073f6:	46a4      	mov	ip, r4
 80073f8:	270a      	movs	r7, #10
 80073fa:	46a6      	mov	lr, r4
 80073fc:	460a      	mov	r2, r1
 80073fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8007402:	fb07 1516 	mls	r5, r7, r6, r1
 8007406:	3530      	adds	r5, #48	; 0x30
 8007408:	2a63      	cmp	r2, #99	; 0x63
 800740a:	f104 34ff 	add.w	r4, r4, #4294967295
 800740e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007412:	4631      	mov	r1, r6
 8007414:	dcf1      	bgt.n	80073fa <__exponent+0x22>
 8007416:	3130      	adds	r1, #48	; 0x30
 8007418:	f1ae 0502 	sub.w	r5, lr, #2
 800741c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007420:	1c44      	adds	r4, r0, #1
 8007422:	4629      	mov	r1, r5
 8007424:	4561      	cmp	r1, ip
 8007426:	d30a      	bcc.n	800743e <__exponent+0x66>
 8007428:	f10d 0209 	add.w	r2, sp, #9
 800742c:	eba2 020e 	sub.w	r2, r2, lr
 8007430:	4565      	cmp	r5, ip
 8007432:	bf88      	it	hi
 8007434:	2200      	movhi	r2, #0
 8007436:	4413      	add	r3, r2
 8007438:	1a18      	subs	r0, r3, r0
 800743a:	b003      	add	sp, #12
 800743c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800743e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007442:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007446:	e7ed      	b.n	8007424 <__exponent+0x4c>
 8007448:	2330      	movs	r3, #48	; 0x30
 800744a:	3130      	adds	r1, #48	; 0x30
 800744c:	7083      	strb	r3, [r0, #2]
 800744e:	70c1      	strb	r1, [r0, #3]
 8007450:	1d03      	adds	r3, r0, #4
 8007452:	e7f1      	b.n	8007438 <__exponent+0x60>

08007454 <_printf_float>:
 8007454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	ed2d 8b02 	vpush	{d8}
 800745c:	b08d      	sub	sp, #52	; 0x34
 800745e:	460c      	mov	r4, r1
 8007460:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007464:	4616      	mov	r6, r2
 8007466:	461f      	mov	r7, r3
 8007468:	4605      	mov	r5, r0
 800746a:	f003 fb49 	bl	800ab00 <_localeconv_r>
 800746e:	f8d0 a000 	ldr.w	sl, [r0]
 8007472:	4650      	mov	r0, sl
 8007474:	f7f8 fecc 	bl	8000210 <strlen>
 8007478:	2300      	movs	r3, #0
 800747a:	930a      	str	r3, [sp, #40]	; 0x28
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	9305      	str	r3, [sp, #20]
 8007480:	f8d8 3000 	ldr.w	r3, [r8]
 8007484:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007488:	3307      	adds	r3, #7
 800748a:	f023 0307 	bic.w	r3, r3, #7
 800748e:	f103 0208 	add.w	r2, r3, #8
 8007492:	f8c8 2000 	str.w	r2, [r8]
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800749e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80074a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074a6:	9307      	str	r3, [sp, #28]
 80074a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80074ac:	ee08 0a10 	vmov	s16, r0
 80074b0:	4b9f      	ldr	r3, [pc, #636]	; (8007730 <_printf_float+0x2dc>)
 80074b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074b6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ba:	f7f9 fb57 	bl	8000b6c <__aeabi_dcmpun>
 80074be:	bb88      	cbnz	r0, 8007524 <_printf_float+0xd0>
 80074c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074c4:	4b9a      	ldr	r3, [pc, #616]	; (8007730 <_printf_float+0x2dc>)
 80074c6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ca:	f7f9 fb31 	bl	8000b30 <__aeabi_dcmple>
 80074ce:	bb48      	cbnz	r0, 8007524 <_printf_float+0xd0>
 80074d0:	2200      	movs	r2, #0
 80074d2:	2300      	movs	r3, #0
 80074d4:	4640      	mov	r0, r8
 80074d6:	4649      	mov	r1, r9
 80074d8:	f7f9 fb20 	bl	8000b1c <__aeabi_dcmplt>
 80074dc:	b110      	cbz	r0, 80074e4 <_printf_float+0x90>
 80074de:	232d      	movs	r3, #45	; 0x2d
 80074e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e4:	4b93      	ldr	r3, [pc, #588]	; (8007734 <_printf_float+0x2e0>)
 80074e6:	4894      	ldr	r0, [pc, #592]	; (8007738 <_printf_float+0x2e4>)
 80074e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074ec:	bf94      	ite	ls
 80074ee:	4698      	movls	r8, r3
 80074f0:	4680      	movhi	r8, r0
 80074f2:	2303      	movs	r3, #3
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	9b05      	ldr	r3, [sp, #20]
 80074f8:	f023 0204 	bic.w	r2, r3, #4
 80074fc:	6022      	str	r2, [r4, #0]
 80074fe:	f04f 0900 	mov.w	r9, #0
 8007502:	9700      	str	r7, [sp, #0]
 8007504:	4633      	mov	r3, r6
 8007506:	aa0b      	add	r2, sp, #44	; 0x2c
 8007508:	4621      	mov	r1, r4
 800750a:	4628      	mov	r0, r5
 800750c:	f000 f9d8 	bl	80078c0 <_printf_common>
 8007510:	3001      	adds	r0, #1
 8007512:	f040 8090 	bne.w	8007636 <_printf_float+0x1e2>
 8007516:	f04f 30ff 	mov.w	r0, #4294967295
 800751a:	b00d      	add	sp, #52	; 0x34
 800751c:	ecbd 8b02 	vpop	{d8}
 8007520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007524:	4642      	mov	r2, r8
 8007526:	464b      	mov	r3, r9
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f9 fb1e 	bl	8000b6c <__aeabi_dcmpun>
 8007530:	b140      	cbz	r0, 8007544 <_printf_float+0xf0>
 8007532:	464b      	mov	r3, r9
 8007534:	2b00      	cmp	r3, #0
 8007536:	bfbc      	itt	lt
 8007538:	232d      	movlt	r3, #45	; 0x2d
 800753a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800753e:	487f      	ldr	r0, [pc, #508]	; (800773c <_printf_float+0x2e8>)
 8007540:	4b7f      	ldr	r3, [pc, #508]	; (8007740 <_printf_float+0x2ec>)
 8007542:	e7d1      	b.n	80074e8 <_printf_float+0x94>
 8007544:	6863      	ldr	r3, [r4, #4]
 8007546:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800754a:	9206      	str	r2, [sp, #24]
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	d13f      	bne.n	80075d0 <_printf_float+0x17c>
 8007550:	2306      	movs	r3, #6
 8007552:	6063      	str	r3, [r4, #4]
 8007554:	9b05      	ldr	r3, [sp, #20]
 8007556:	6861      	ldr	r1, [r4, #4]
 8007558:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800755c:	2300      	movs	r3, #0
 800755e:	9303      	str	r3, [sp, #12]
 8007560:	ab0a      	add	r3, sp, #40	; 0x28
 8007562:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007566:	ab09      	add	r3, sp, #36	; 0x24
 8007568:	ec49 8b10 	vmov	d0, r8, r9
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	6022      	str	r2, [r4, #0]
 8007570:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007574:	4628      	mov	r0, r5
 8007576:	f7ff fecd 	bl	8007314 <__cvt>
 800757a:	9b06      	ldr	r3, [sp, #24]
 800757c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800757e:	2b47      	cmp	r3, #71	; 0x47
 8007580:	4680      	mov	r8, r0
 8007582:	d108      	bne.n	8007596 <_printf_float+0x142>
 8007584:	1cc8      	adds	r0, r1, #3
 8007586:	db02      	blt.n	800758e <_printf_float+0x13a>
 8007588:	6863      	ldr	r3, [r4, #4]
 800758a:	4299      	cmp	r1, r3
 800758c:	dd41      	ble.n	8007612 <_printf_float+0x1be>
 800758e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007592:	fa5f fb8b 	uxtb.w	fp, fp
 8007596:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800759a:	d820      	bhi.n	80075de <_printf_float+0x18a>
 800759c:	3901      	subs	r1, #1
 800759e:	465a      	mov	r2, fp
 80075a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075a4:	9109      	str	r1, [sp, #36]	; 0x24
 80075a6:	f7ff ff17 	bl	80073d8 <__exponent>
 80075aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ac:	1813      	adds	r3, r2, r0
 80075ae:	2a01      	cmp	r2, #1
 80075b0:	4681      	mov	r9, r0
 80075b2:	6123      	str	r3, [r4, #16]
 80075b4:	dc02      	bgt.n	80075bc <_printf_float+0x168>
 80075b6:	6822      	ldr	r2, [r4, #0]
 80075b8:	07d2      	lsls	r2, r2, #31
 80075ba:	d501      	bpl.n	80075c0 <_printf_float+0x16c>
 80075bc:	3301      	adds	r3, #1
 80075be:	6123      	str	r3, [r4, #16]
 80075c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d09c      	beq.n	8007502 <_printf_float+0xae>
 80075c8:	232d      	movs	r3, #45	; 0x2d
 80075ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ce:	e798      	b.n	8007502 <_printf_float+0xae>
 80075d0:	9a06      	ldr	r2, [sp, #24]
 80075d2:	2a47      	cmp	r2, #71	; 0x47
 80075d4:	d1be      	bne.n	8007554 <_printf_float+0x100>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1bc      	bne.n	8007554 <_printf_float+0x100>
 80075da:	2301      	movs	r3, #1
 80075dc:	e7b9      	b.n	8007552 <_printf_float+0xfe>
 80075de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80075e2:	d118      	bne.n	8007616 <_printf_float+0x1c2>
 80075e4:	2900      	cmp	r1, #0
 80075e6:	6863      	ldr	r3, [r4, #4]
 80075e8:	dd0b      	ble.n	8007602 <_printf_float+0x1ae>
 80075ea:	6121      	str	r1, [r4, #16]
 80075ec:	b913      	cbnz	r3, 80075f4 <_printf_float+0x1a0>
 80075ee:	6822      	ldr	r2, [r4, #0]
 80075f0:	07d0      	lsls	r0, r2, #31
 80075f2:	d502      	bpl.n	80075fa <_printf_float+0x1a6>
 80075f4:	3301      	adds	r3, #1
 80075f6:	440b      	add	r3, r1
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80075fc:	f04f 0900 	mov.w	r9, #0
 8007600:	e7de      	b.n	80075c0 <_printf_float+0x16c>
 8007602:	b913      	cbnz	r3, 800760a <_printf_float+0x1b6>
 8007604:	6822      	ldr	r2, [r4, #0]
 8007606:	07d2      	lsls	r2, r2, #31
 8007608:	d501      	bpl.n	800760e <_printf_float+0x1ba>
 800760a:	3302      	adds	r3, #2
 800760c:	e7f4      	b.n	80075f8 <_printf_float+0x1a4>
 800760e:	2301      	movs	r3, #1
 8007610:	e7f2      	b.n	80075f8 <_printf_float+0x1a4>
 8007612:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007618:	4299      	cmp	r1, r3
 800761a:	db05      	blt.n	8007628 <_printf_float+0x1d4>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	6121      	str	r1, [r4, #16]
 8007620:	07d8      	lsls	r0, r3, #31
 8007622:	d5ea      	bpl.n	80075fa <_printf_float+0x1a6>
 8007624:	1c4b      	adds	r3, r1, #1
 8007626:	e7e7      	b.n	80075f8 <_printf_float+0x1a4>
 8007628:	2900      	cmp	r1, #0
 800762a:	bfd4      	ite	le
 800762c:	f1c1 0202 	rsble	r2, r1, #2
 8007630:	2201      	movgt	r2, #1
 8007632:	4413      	add	r3, r2
 8007634:	e7e0      	b.n	80075f8 <_printf_float+0x1a4>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	055a      	lsls	r2, r3, #21
 800763a:	d407      	bmi.n	800764c <_printf_float+0x1f8>
 800763c:	6923      	ldr	r3, [r4, #16]
 800763e:	4642      	mov	r2, r8
 8007640:	4631      	mov	r1, r6
 8007642:	4628      	mov	r0, r5
 8007644:	47b8      	blx	r7
 8007646:	3001      	adds	r0, #1
 8007648:	d12c      	bne.n	80076a4 <_printf_float+0x250>
 800764a:	e764      	b.n	8007516 <_printf_float+0xc2>
 800764c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007650:	f240 80e0 	bls.w	8007814 <_printf_float+0x3c0>
 8007654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007658:	2200      	movs	r2, #0
 800765a:	2300      	movs	r3, #0
 800765c:	f7f9 fa54 	bl	8000b08 <__aeabi_dcmpeq>
 8007660:	2800      	cmp	r0, #0
 8007662:	d034      	beq.n	80076ce <_printf_float+0x27a>
 8007664:	4a37      	ldr	r2, [pc, #220]	; (8007744 <_printf_float+0x2f0>)
 8007666:	2301      	movs	r3, #1
 8007668:	4631      	mov	r1, r6
 800766a:	4628      	mov	r0, r5
 800766c:	47b8      	blx	r7
 800766e:	3001      	adds	r0, #1
 8007670:	f43f af51 	beq.w	8007516 <_printf_float+0xc2>
 8007674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007678:	429a      	cmp	r2, r3
 800767a:	db02      	blt.n	8007682 <_printf_float+0x22e>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	07d8      	lsls	r0, r3, #31
 8007680:	d510      	bpl.n	80076a4 <_printf_float+0x250>
 8007682:	ee18 3a10 	vmov	r3, s16
 8007686:	4652      	mov	r2, sl
 8007688:	4631      	mov	r1, r6
 800768a:	4628      	mov	r0, r5
 800768c:	47b8      	blx	r7
 800768e:	3001      	adds	r0, #1
 8007690:	f43f af41 	beq.w	8007516 <_printf_float+0xc2>
 8007694:	f04f 0800 	mov.w	r8, #0
 8007698:	f104 091a 	add.w	r9, r4, #26
 800769c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800769e:	3b01      	subs	r3, #1
 80076a0:	4543      	cmp	r3, r8
 80076a2:	dc09      	bgt.n	80076b8 <_printf_float+0x264>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	079b      	lsls	r3, r3, #30
 80076a8:	f100 8105 	bmi.w	80078b6 <_printf_float+0x462>
 80076ac:	68e0      	ldr	r0, [r4, #12]
 80076ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076b0:	4298      	cmp	r0, r3
 80076b2:	bfb8      	it	lt
 80076b4:	4618      	movlt	r0, r3
 80076b6:	e730      	b.n	800751a <_printf_float+0xc6>
 80076b8:	2301      	movs	r3, #1
 80076ba:	464a      	mov	r2, r9
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f af27 	beq.w	8007516 <_printf_float+0xc2>
 80076c8:	f108 0801 	add.w	r8, r8, #1
 80076cc:	e7e6      	b.n	800769c <_printf_float+0x248>
 80076ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	dc39      	bgt.n	8007748 <_printf_float+0x2f4>
 80076d4:	4a1b      	ldr	r2, [pc, #108]	; (8007744 <_printf_float+0x2f0>)
 80076d6:	2301      	movs	r3, #1
 80076d8:	4631      	mov	r1, r6
 80076da:	4628      	mov	r0, r5
 80076dc:	47b8      	blx	r7
 80076de:	3001      	adds	r0, #1
 80076e0:	f43f af19 	beq.w	8007516 <_printf_float+0xc2>
 80076e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076e8:	4313      	orrs	r3, r2
 80076ea:	d102      	bne.n	80076f2 <_printf_float+0x29e>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	07d9      	lsls	r1, r3, #31
 80076f0:	d5d8      	bpl.n	80076a4 <_printf_float+0x250>
 80076f2:	ee18 3a10 	vmov	r3, s16
 80076f6:	4652      	mov	r2, sl
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b8      	blx	r7
 80076fe:	3001      	adds	r0, #1
 8007700:	f43f af09 	beq.w	8007516 <_printf_float+0xc2>
 8007704:	f04f 0900 	mov.w	r9, #0
 8007708:	f104 0a1a 	add.w	sl, r4, #26
 800770c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770e:	425b      	negs	r3, r3
 8007710:	454b      	cmp	r3, r9
 8007712:	dc01      	bgt.n	8007718 <_printf_float+0x2c4>
 8007714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007716:	e792      	b.n	800763e <_printf_float+0x1ea>
 8007718:	2301      	movs	r3, #1
 800771a:	4652      	mov	r2, sl
 800771c:	4631      	mov	r1, r6
 800771e:	4628      	mov	r0, r5
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f43f aef7 	beq.w	8007516 <_printf_float+0xc2>
 8007728:	f109 0901 	add.w	r9, r9, #1
 800772c:	e7ee      	b.n	800770c <_printf_float+0x2b8>
 800772e:	bf00      	nop
 8007730:	7fefffff 	.word	0x7fefffff
 8007734:	0800d10c 	.word	0x0800d10c
 8007738:	0800d110 	.word	0x0800d110
 800773c:	0800d118 	.word	0x0800d118
 8007740:	0800d114 	.word	0x0800d114
 8007744:	0800d579 	.word	0x0800d579
 8007748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800774a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800774c:	429a      	cmp	r2, r3
 800774e:	bfa8      	it	ge
 8007750:	461a      	movge	r2, r3
 8007752:	2a00      	cmp	r2, #0
 8007754:	4691      	mov	r9, r2
 8007756:	dc37      	bgt.n	80077c8 <_printf_float+0x374>
 8007758:	f04f 0b00 	mov.w	fp, #0
 800775c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007760:	f104 021a 	add.w	r2, r4, #26
 8007764:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007766:	9305      	str	r3, [sp, #20]
 8007768:	eba3 0309 	sub.w	r3, r3, r9
 800776c:	455b      	cmp	r3, fp
 800776e:	dc33      	bgt.n	80077d8 <_printf_float+0x384>
 8007770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007774:	429a      	cmp	r2, r3
 8007776:	db3b      	blt.n	80077f0 <_printf_float+0x39c>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	07da      	lsls	r2, r3, #31
 800777c:	d438      	bmi.n	80077f0 <_printf_float+0x39c>
 800777e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007780:	9a05      	ldr	r2, [sp, #20]
 8007782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007784:	1a9a      	subs	r2, r3, r2
 8007786:	eba3 0901 	sub.w	r9, r3, r1
 800778a:	4591      	cmp	r9, r2
 800778c:	bfa8      	it	ge
 800778e:	4691      	movge	r9, r2
 8007790:	f1b9 0f00 	cmp.w	r9, #0
 8007794:	dc35      	bgt.n	8007802 <_printf_float+0x3ae>
 8007796:	f04f 0800 	mov.w	r8, #0
 800779a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800779e:	f104 0a1a 	add.w	sl, r4, #26
 80077a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077a6:	1a9b      	subs	r3, r3, r2
 80077a8:	eba3 0309 	sub.w	r3, r3, r9
 80077ac:	4543      	cmp	r3, r8
 80077ae:	f77f af79 	ble.w	80076a4 <_printf_float+0x250>
 80077b2:	2301      	movs	r3, #1
 80077b4:	4652      	mov	r2, sl
 80077b6:	4631      	mov	r1, r6
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b8      	blx	r7
 80077bc:	3001      	adds	r0, #1
 80077be:	f43f aeaa 	beq.w	8007516 <_printf_float+0xc2>
 80077c2:	f108 0801 	add.w	r8, r8, #1
 80077c6:	e7ec      	b.n	80077a2 <_printf_float+0x34e>
 80077c8:	4613      	mov	r3, r2
 80077ca:	4631      	mov	r1, r6
 80077cc:	4642      	mov	r2, r8
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	d1c0      	bne.n	8007758 <_printf_float+0x304>
 80077d6:	e69e      	b.n	8007516 <_printf_float+0xc2>
 80077d8:	2301      	movs	r3, #1
 80077da:	4631      	mov	r1, r6
 80077dc:	4628      	mov	r0, r5
 80077de:	9205      	str	r2, [sp, #20]
 80077e0:	47b8      	blx	r7
 80077e2:	3001      	adds	r0, #1
 80077e4:	f43f ae97 	beq.w	8007516 <_printf_float+0xc2>
 80077e8:	9a05      	ldr	r2, [sp, #20]
 80077ea:	f10b 0b01 	add.w	fp, fp, #1
 80077ee:	e7b9      	b.n	8007764 <_printf_float+0x310>
 80077f0:	ee18 3a10 	vmov	r3, s16
 80077f4:	4652      	mov	r2, sl
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	d1be      	bne.n	800777e <_printf_float+0x32a>
 8007800:	e689      	b.n	8007516 <_printf_float+0xc2>
 8007802:	9a05      	ldr	r2, [sp, #20]
 8007804:	464b      	mov	r3, r9
 8007806:	4442      	add	r2, r8
 8007808:	4631      	mov	r1, r6
 800780a:	4628      	mov	r0, r5
 800780c:	47b8      	blx	r7
 800780e:	3001      	adds	r0, #1
 8007810:	d1c1      	bne.n	8007796 <_printf_float+0x342>
 8007812:	e680      	b.n	8007516 <_printf_float+0xc2>
 8007814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007816:	2a01      	cmp	r2, #1
 8007818:	dc01      	bgt.n	800781e <_printf_float+0x3ca>
 800781a:	07db      	lsls	r3, r3, #31
 800781c:	d538      	bpl.n	8007890 <_printf_float+0x43c>
 800781e:	2301      	movs	r3, #1
 8007820:	4642      	mov	r2, r8
 8007822:	4631      	mov	r1, r6
 8007824:	4628      	mov	r0, r5
 8007826:	47b8      	blx	r7
 8007828:	3001      	adds	r0, #1
 800782a:	f43f ae74 	beq.w	8007516 <_printf_float+0xc2>
 800782e:	ee18 3a10 	vmov	r3, s16
 8007832:	4652      	mov	r2, sl
 8007834:	4631      	mov	r1, r6
 8007836:	4628      	mov	r0, r5
 8007838:	47b8      	blx	r7
 800783a:	3001      	adds	r0, #1
 800783c:	f43f ae6b 	beq.w	8007516 <_printf_float+0xc2>
 8007840:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007844:	2200      	movs	r2, #0
 8007846:	2300      	movs	r3, #0
 8007848:	f7f9 f95e 	bl	8000b08 <__aeabi_dcmpeq>
 800784c:	b9d8      	cbnz	r0, 8007886 <_printf_float+0x432>
 800784e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007850:	f108 0201 	add.w	r2, r8, #1
 8007854:	3b01      	subs	r3, #1
 8007856:	4631      	mov	r1, r6
 8007858:	4628      	mov	r0, r5
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	d10e      	bne.n	800787e <_printf_float+0x42a>
 8007860:	e659      	b.n	8007516 <_printf_float+0xc2>
 8007862:	2301      	movs	r3, #1
 8007864:	4652      	mov	r2, sl
 8007866:	4631      	mov	r1, r6
 8007868:	4628      	mov	r0, r5
 800786a:	47b8      	blx	r7
 800786c:	3001      	adds	r0, #1
 800786e:	f43f ae52 	beq.w	8007516 <_printf_float+0xc2>
 8007872:	f108 0801 	add.w	r8, r8, #1
 8007876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007878:	3b01      	subs	r3, #1
 800787a:	4543      	cmp	r3, r8
 800787c:	dcf1      	bgt.n	8007862 <_printf_float+0x40e>
 800787e:	464b      	mov	r3, r9
 8007880:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007884:	e6dc      	b.n	8007640 <_printf_float+0x1ec>
 8007886:	f04f 0800 	mov.w	r8, #0
 800788a:	f104 0a1a 	add.w	sl, r4, #26
 800788e:	e7f2      	b.n	8007876 <_printf_float+0x422>
 8007890:	2301      	movs	r3, #1
 8007892:	4642      	mov	r2, r8
 8007894:	e7df      	b.n	8007856 <_printf_float+0x402>
 8007896:	2301      	movs	r3, #1
 8007898:	464a      	mov	r2, r9
 800789a:	4631      	mov	r1, r6
 800789c:	4628      	mov	r0, r5
 800789e:	47b8      	blx	r7
 80078a0:	3001      	adds	r0, #1
 80078a2:	f43f ae38 	beq.w	8007516 <_printf_float+0xc2>
 80078a6:	f108 0801 	add.w	r8, r8, #1
 80078aa:	68e3      	ldr	r3, [r4, #12]
 80078ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078ae:	1a5b      	subs	r3, r3, r1
 80078b0:	4543      	cmp	r3, r8
 80078b2:	dcf0      	bgt.n	8007896 <_printf_float+0x442>
 80078b4:	e6fa      	b.n	80076ac <_printf_float+0x258>
 80078b6:	f04f 0800 	mov.w	r8, #0
 80078ba:	f104 0919 	add.w	r9, r4, #25
 80078be:	e7f4      	b.n	80078aa <_printf_float+0x456>

080078c0 <_printf_common>:
 80078c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c4:	4616      	mov	r6, r2
 80078c6:	4699      	mov	r9, r3
 80078c8:	688a      	ldr	r2, [r1, #8]
 80078ca:	690b      	ldr	r3, [r1, #16]
 80078cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078d0:	4293      	cmp	r3, r2
 80078d2:	bfb8      	it	lt
 80078d4:	4613      	movlt	r3, r2
 80078d6:	6033      	str	r3, [r6, #0]
 80078d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078dc:	4607      	mov	r7, r0
 80078de:	460c      	mov	r4, r1
 80078e0:	b10a      	cbz	r2, 80078e6 <_printf_common+0x26>
 80078e2:	3301      	adds	r3, #1
 80078e4:	6033      	str	r3, [r6, #0]
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	0699      	lsls	r1, r3, #26
 80078ea:	bf42      	ittt	mi
 80078ec:	6833      	ldrmi	r3, [r6, #0]
 80078ee:	3302      	addmi	r3, #2
 80078f0:	6033      	strmi	r3, [r6, #0]
 80078f2:	6825      	ldr	r5, [r4, #0]
 80078f4:	f015 0506 	ands.w	r5, r5, #6
 80078f8:	d106      	bne.n	8007908 <_printf_common+0x48>
 80078fa:	f104 0a19 	add.w	sl, r4, #25
 80078fe:	68e3      	ldr	r3, [r4, #12]
 8007900:	6832      	ldr	r2, [r6, #0]
 8007902:	1a9b      	subs	r3, r3, r2
 8007904:	42ab      	cmp	r3, r5
 8007906:	dc26      	bgt.n	8007956 <_printf_common+0x96>
 8007908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800790c:	1e13      	subs	r3, r2, #0
 800790e:	6822      	ldr	r2, [r4, #0]
 8007910:	bf18      	it	ne
 8007912:	2301      	movne	r3, #1
 8007914:	0692      	lsls	r2, r2, #26
 8007916:	d42b      	bmi.n	8007970 <_printf_common+0xb0>
 8007918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800791c:	4649      	mov	r1, r9
 800791e:	4638      	mov	r0, r7
 8007920:	47c0      	blx	r8
 8007922:	3001      	adds	r0, #1
 8007924:	d01e      	beq.n	8007964 <_printf_common+0xa4>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	68e5      	ldr	r5, [r4, #12]
 800792a:	6832      	ldr	r2, [r6, #0]
 800792c:	f003 0306 	and.w	r3, r3, #6
 8007930:	2b04      	cmp	r3, #4
 8007932:	bf08      	it	eq
 8007934:	1aad      	subeq	r5, r5, r2
 8007936:	68a3      	ldr	r3, [r4, #8]
 8007938:	6922      	ldr	r2, [r4, #16]
 800793a:	bf0c      	ite	eq
 800793c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007940:	2500      	movne	r5, #0
 8007942:	4293      	cmp	r3, r2
 8007944:	bfc4      	itt	gt
 8007946:	1a9b      	subgt	r3, r3, r2
 8007948:	18ed      	addgt	r5, r5, r3
 800794a:	2600      	movs	r6, #0
 800794c:	341a      	adds	r4, #26
 800794e:	42b5      	cmp	r5, r6
 8007950:	d11a      	bne.n	8007988 <_printf_common+0xc8>
 8007952:	2000      	movs	r0, #0
 8007954:	e008      	b.n	8007968 <_printf_common+0xa8>
 8007956:	2301      	movs	r3, #1
 8007958:	4652      	mov	r2, sl
 800795a:	4649      	mov	r1, r9
 800795c:	4638      	mov	r0, r7
 800795e:	47c0      	blx	r8
 8007960:	3001      	adds	r0, #1
 8007962:	d103      	bne.n	800796c <_printf_common+0xac>
 8007964:	f04f 30ff 	mov.w	r0, #4294967295
 8007968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796c:	3501      	adds	r5, #1
 800796e:	e7c6      	b.n	80078fe <_printf_common+0x3e>
 8007970:	18e1      	adds	r1, r4, r3
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	2030      	movs	r0, #48	; 0x30
 8007976:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800797a:	4422      	add	r2, r4
 800797c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007980:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007984:	3302      	adds	r3, #2
 8007986:	e7c7      	b.n	8007918 <_printf_common+0x58>
 8007988:	2301      	movs	r3, #1
 800798a:	4622      	mov	r2, r4
 800798c:	4649      	mov	r1, r9
 800798e:	4638      	mov	r0, r7
 8007990:	47c0      	blx	r8
 8007992:	3001      	adds	r0, #1
 8007994:	d0e6      	beq.n	8007964 <_printf_common+0xa4>
 8007996:	3601      	adds	r6, #1
 8007998:	e7d9      	b.n	800794e <_printf_common+0x8e>
	...

0800799c <_printf_i>:
 800799c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	7e0f      	ldrb	r7, [r1, #24]
 80079a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079a4:	2f78      	cmp	r7, #120	; 0x78
 80079a6:	4691      	mov	r9, r2
 80079a8:	4680      	mov	r8, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	469a      	mov	sl, r3
 80079ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079b2:	d807      	bhi.n	80079c4 <_printf_i+0x28>
 80079b4:	2f62      	cmp	r7, #98	; 0x62
 80079b6:	d80a      	bhi.n	80079ce <_printf_i+0x32>
 80079b8:	2f00      	cmp	r7, #0
 80079ba:	f000 80d8 	beq.w	8007b6e <_printf_i+0x1d2>
 80079be:	2f58      	cmp	r7, #88	; 0x58
 80079c0:	f000 80a3 	beq.w	8007b0a <_printf_i+0x16e>
 80079c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079cc:	e03a      	b.n	8007a44 <_printf_i+0xa8>
 80079ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079d2:	2b15      	cmp	r3, #21
 80079d4:	d8f6      	bhi.n	80079c4 <_printf_i+0x28>
 80079d6:	a101      	add	r1, pc, #4	; (adr r1, 80079dc <_printf_i+0x40>)
 80079d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079dc:	08007a35 	.word	0x08007a35
 80079e0:	08007a49 	.word	0x08007a49
 80079e4:	080079c5 	.word	0x080079c5
 80079e8:	080079c5 	.word	0x080079c5
 80079ec:	080079c5 	.word	0x080079c5
 80079f0:	080079c5 	.word	0x080079c5
 80079f4:	08007a49 	.word	0x08007a49
 80079f8:	080079c5 	.word	0x080079c5
 80079fc:	080079c5 	.word	0x080079c5
 8007a00:	080079c5 	.word	0x080079c5
 8007a04:	080079c5 	.word	0x080079c5
 8007a08:	08007b55 	.word	0x08007b55
 8007a0c:	08007a79 	.word	0x08007a79
 8007a10:	08007b37 	.word	0x08007b37
 8007a14:	080079c5 	.word	0x080079c5
 8007a18:	080079c5 	.word	0x080079c5
 8007a1c:	08007b77 	.word	0x08007b77
 8007a20:	080079c5 	.word	0x080079c5
 8007a24:	08007a79 	.word	0x08007a79
 8007a28:	080079c5 	.word	0x080079c5
 8007a2c:	080079c5 	.word	0x080079c5
 8007a30:	08007b3f 	.word	0x08007b3f
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	1d1a      	adds	r2, r3, #4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	602a      	str	r2, [r5, #0]
 8007a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0a3      	b.n	8007b90 <_printf_i+0x1f4>
 8007a48:	6820      	ldr	r0, [r4, #0]
 8007a4a:	6829      	ldr	r1, [r5, #0]
 8007a4c:	0606      	lsls	r6, r0, #24
 8007a4e:	f101 0304 	add.w	r3, r1, #4
 8007a52:	d50a      	bpl.n	8007a6a <_printf_i+0xce>
 8007a54:	680e      	ldr	r6, [r1, #0]
 8007a56:	602b      	str	r3, [r5, #0]
 8007a58:	2e00      	cmp	r6, #0
 8007a5a:	da03      	bge.n	8007a64 <_printf_i+0xc8>
 8007a5c:	232d      	movs	r3, #45	; 0x2d
 8007a5e:	4276      	negs	r6, r6
 8007a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a64:	485e      	ldr	r0, [pc, #376]	; (8007be0 <_printf_i+0x244>)
 8007a66:	230a      	movs	r3, #10
 8007a68:	e019      	b.n	8007a9e <_printf_i+0x102>
 8007a6a:	680e      	ldr	r6, [r1, #0]
 8007a6c:	602b      	str	r3, [r5, #0]
 8007a6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a72:	bf18      	it	ne
 8007a74:	b236      	sxthne	r6, r6
 8007a76:	e7ef      	b.n	8007a58 <_printf_i+0xbc>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	6820      	ldr	r0, [r4, #0]
 8007a7c:	1d19      	adds	r1, r3, #4
 8007a7e:	6029      	str	r1, [r5, #0]
 8007a80:	0601      	lsls	r1, r0, #24
 8007a82:	d501      	bpl.n	8007a88 <_printf_i+0xec>
 8007a84:	681e      	ldr	r6, [r3, #0]
 8007a86:	e002      	b.n	8007a8e <_printf_i+0xf2>
 8007a88:	0646      	lsls	r6, r0, #25
 8007a8a:	d5fb      	bpl.n	8007a84 <_printf_i+0xe8>
 8007a8c:	881e      	ldrh	r6, [r3, #0]
 8007a8e:	4854      	ldr	r0, [pc, #336]	; (8007be0 <_printf_i+0x244>)
 8007a90:	2f6f      	cmp	r7, #111	; 0x6f
 8007a92:	bf0c      	ite	eq
 8007a94:	2308      	moveq	r3, #8
 8007a96:	230a      	movne	r3, #10
 8007a98:	2100      	movs	r1, #0
 8007a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a9e:	6865      	ldr	r5, [r4, #4]
 8007aa0:	60a5      	str	r5, [r4, #8]
 8007aa2:	2d00      	cmp	r5, #0
 8007aa4:	bfa2      	ittt	ge
 8007aa6:	6821      	ldrge	r1, [r4, #0]
 8007aa8:	f021 0104 	bicge.w	r1, r1, #4
 8007aac:	6021      	strge	r1, [r4, #0]
 8007aae:	b90e      	cbnz	r6, 8007ab4 <_printf_i+0x118>
 8007ab0:	2d00      	cmp	r5, #0
 8007ab2:	d04d      	beq.n	8007b50 <_printf_i+0x1b4>
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007aba:	fb03 6711 	mls	r7, r3, r1, r6
 8007abe:	5dc7      	ldrb	r7, [r0, r7]
 8007ac0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ac4:	4637      	mov	r7, r6
 8007ac6:	42bb      	cmp	r3, r7
 8007ac8:	460e      	mov	r6, r1
 8007aca:	d9f4      	bls.n	8007ab6 <_printf_i+0x11a>
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d10b      	bne.n	8007ae8 <_printf_i+0x14c>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	07de      	lsls	r6, r3, #31
 8007ad4:	d508      	bpl.n	8007ae8 <_printf_i+0x14c>
 8007ad6:	6923      	ldr	r3, [r4, #16]
 8007ad8:	6861      	ldr	r1, [r4, #4]
 8007ada:	4299      	cmp	r1, r3
 8007adc:	bfde      	ittt	le
 8007ade:	2330      	movle	r3, #48	; 0x30
 8007ae0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ae4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ae8:	1b52      	subs	r2, r2, r5
 8007aea:	6122      	str	r2, [r4, #16]
 8007aec:	f8cd a000 	str.w	sl, [sp]
 8007af0:	464b      	mov	r3, r9
 8007af2:	aa03      	add	r2, sp, #12
 8007af4:	4621      	mov	r1, r4
 8007af6:	4640      	mov	r0, r8
 8007af8:	f7ff fee2 	bl	80078c0 <_printf_common>
 8007afc:	3001      	adds	r0, #1
 8007afe:	d14c      	bne.n	8007b9a <_printf_i+0x1fe>
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	b004      	add	sp, #16
 8007b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b0a:	4835      	ldr	r0, [pc, #212]	; (8007be0 <_printf_i+0x244>)
 8007b0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b10:	6829      	ldr	r1, [r5, #0]
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b18:	6029      	str	r1, [r5, #0]
 8007b1a:	061d      	lsls	r5, r3, #24
 8007b1c:	d514      	bpl.n	8007b48 <_printf_i+0x1ac>
 8007b1e:	07df      	lsls	r7, r3, #31
 8007b20:	bf44      	itt	mi
 8007b22:	f043 0320 	orrmi.w	r3, r3, #32
 8007b26:	6023      	strmi	r3, [r4, #0]
 8007b28:	b91e      	cbnz	r6, 8007b32 <_printf_i+0x196>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	f023 0320 	bic.w	r3, r3, #32
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	2310      	movs	r3, #16
 8007b34:	e7b0      	b.n	8007a98 <_printf_i+0xfc>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	f043 0320 	orr.w	r3, r3, #32
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	2378      	movs	r3, #120	; 0x78
 8007b40:	4828      	ldr	r0, [pc, #160]	; (8007be4 <_printf_i+0x248>)
 8007b42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b46:	e7e3      	b.n	8007b10 <_printf_i+0x174>
 8007b48:	0659      	lsls	r1, r3, #25
 8007b4a:	bf48      	it	mi
 8007b4c:	b2b6      	uxthmi	r6, r6
 8007b4e:	e7e6      	b.n	8007b1e <_printf_i+0x182>
 8007b50:	4615      	mov	r5, r2
 8007b52:	e7bb      	b.n	8007acc <_printf_i+0x130>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	6826      	ldr	r6, [r4, #0]
 8007b58:	6961      	ldr	r1, [r4, #20]
 8007b5a:	1d18      	adds	r0, r3, #4
 8007b5c:	6028      	str	r0, [r5, #0]
 8007b5e:	0635      	lsls	r5, r6, #24
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	d501      	bpl.n	8007b68 <_printf_i+0x1cc>
 8007b64:	6019      	str	r1, [r3, #0]
 8007b66:	e002      	b.n	8007b6e <_printf_i+0x1d2>
 8007b68:	0670      	lsls	r0, r6, #25
 8007b6a:	d5fb      	bpl.n	8007b64 <_printf_i+0x1c8>
 8007b6c:	8019      	strh	r1, [r3, #0]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	6123      	str	r3, [r4, #16]
 8007b72:	4615      	mov	r5, r2
 8007b74:	e7ba      	b.n	8007aec <_printf_i+0x150>
 8007b76:	682b      	ldr	r3, [r5, #0]
 8007b78:	1d1a      	adds	r2, r3, #4
 8007b7a:	602a      	str	r2, [r5, #0]
 8007b7c:	681d      	ldr	r5, [r3, #0]
 8007b7e:	6862      	ldr	r2, [r4, #4]
 8007b80:	2100      	movs	r1, #0
 8007b82:	4628      	mov	r0, r5
 8007b84:	f7f8 fb4c 	bl	8000220 <memchr>
 8007b88:	b108      	cbz	r0, 8007b8e <_printf_i+0x1f2>
 8007b8a:	1b40      	subs	r0, r0, r5
 8007b8c:	6060      	str	r0, [r4, #4]
 8007b8e:	6863      	ldr	r3, [r4, #4]
 8007b90:	6123      	str	r3, [r4, #16]
 8007b92:	2300      	movs	r3, #0
 8007b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b98:	e7a8      	b.n	8007aec <_printf_i+0x150>
 8007b9a:	6923      	ldr	r3, [r4, #16]
 8007b9c:	462a      	mov	r2, r5
 8007b9e:	4649      	mov	r1, r9
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	47d0      	blx	sl
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d0ab      	beq.n	8007b00 <_printf_i+0x164>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	079b      	lsls	r3, r3, #30
 8007bac:	d413      	bmi.n	8007bd6 <_printf_i+0x23a>
 8007bae:	68e0      	ldr	r0, [r4, #12]
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	4298      	cmp	r0, r3
 8007bb4:	bfb8      	it	lt
 8007bb6:	4618      	movlt	r0, r3
 8007bb8:	e7a4      	b.n	8007b04 <_printf_i+0x168>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	47d0      	blx	sl
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d09b      	beq.n	8007b00 <_printf_i+0x164>
 8007bc8:	3501      	adds	r5, #1
 8007bca:	68e3      	ldr	r3, [r4, #12]
 8007bcc:	9903      	ldr	r1, [sp, #12]
 8007bce:	1a5b      	subs	r3, r3, r1
 8007bd0:	42ab      	cmp	r3, r5
 8007bd2:	dcf2      	bgt.n	8007bba <_printf_i+0x21e>
 8007bd4:	e7eb      	b.n	8007bae <_printf_i+0x212>
 8007bd6:	2500      	movs	r5, #0
 8007bd8:	f104 0619 	add.w	r6, r4, #25
 8007bdc:	e7f5      	b.n	8007bca <_printf_i+0x22e>
 8007bde:	bf00      	nop
 8007be0:	0800d11c 	.word	0x0800d11c
 8007be4:	0800d12d 	.word	0x0800d12d

08007be8 <_scanf_float>:
 8007be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	b087      	sub	sp, #28
 8007bee:	4617      	mov	r7, r2
 8007bf0:	9303      	str	r3, [sp, #12]
 8007bf2:	688b      	ldr	r3, [r1, #8]
 8007bf4:	1e5a      	subs	r2, r3, #1
 8007bf6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007bfa:	bf83      	ittte	hi
 8007bfc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007c00:	195b      	addhi	r3, r3, r5
 8007c02:	9302      	strhi	r3, [sp, #8]
 8007c04:	2300      	movls	r3, #0
 8007c06:	bf86      	itte	hi
 8007c08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007c0c:	608b      	strhi	r3, [r1, #8]
 8007c0e:	9302      	strls	r3, [sp, #8]
 8007c10:	680b      	ldr	r3, [r1, #0]
 8007c12:	468b      	mov	fp, r1
 8007c14:	2500      	movs	r5, #0
 8007c16:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007c1a:	f84b 3b1c 	str.w	r3, [fp], #28
 8007c1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c22:	4680      	mov	r8, r0
 8007c24:	460c      	mov	r4, r1
 8007c26:	465e      	mov	r6, fp
 8007c28:	46aa      	mov	sl, r5
 8007c2a:	46a9      	mov	r9, r5
 8007c2c:	9501      	str	r5, [sp, #4]
 8007c2e:	68a2      	ldr	r2, [r4, #8]
 8007c30:	b152      	cbz	r2, 8007c48 <_scanf_float+0x60>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b4e      	cmp	r3, #78	; 0x4e
 8007c38:	d864      	bhi.n	8007d04 <_scanf_float+0x11c>
 8007c3a:	2b40      	cmp	r3, #64	; 0x40
 8007c3c:	d83c      	bhi.n	8007cb8 <_scanf_float+0xd0>
 8007c3e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007c42:	b2c8      	uxtb	r0, r1
 8007c44:	280e      	cmp	r0, #14
 8007c46:	d93a      	bls.n	8007cbe <_scanf_float+0xd6>
 8007c48:	f1b9 0f00 	cmp.w	r9, #0
 8007c4c:	d003      	beq.n	8007c56 <_scanf_float+0x6e>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c5a:	f1ba 0f01 	cmp.w	sl, #1
 8007c5e:	f200 8113 	bhi.w	8007e88 <_scanf_float+0x2a0>
 8007c62:	455e      	cmp	r6, fp
 8007c64:	f200 8105 	bhi.w	8007e72 <_scanf_float+0x28a>
 8007c68:	2501      	movs	r5, #1
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	b007      	add	sp, #28
 8007c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c72:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007c76:	2a0d      	cmp	r2, #13
 8007c78:	d8e6      	bhi.n	8007c48 <_scanf_float+0x60>
 8007c7a:	a101      	add	r1, pc, #4	; (adr r1, 8007c80 <_scanf_float+0x98>)
 8007c7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c80:	08007dbf 	.word	0x08007dbf
 8007c84:	08007c49 	.word	0x08007c49
 8007c88:	08007c49 	.word	0x08007c49
 8007c8c:	08007c49 	.word	0x08007c49
 8007c90:	08007e1f 	.word	0x08007e1f
 8007c94:	08007df7 	.word	0x08007df7
 8007c98:	08007c49 	.word	0x08007c49
 8007c9c:	08007c49 	.word	0x08007c49
 8007ca0:	08007dcd 	.word	0x08007dcd
 8007ca4:	08007c49 	.word	0x08007c49
 8007ca8:	08007c49 	.word	0x08007c49
 8007cac:	08007c49 	.word	0x08007c49
 8007cb0:	08007c49 	.word	0x08007c49
 8007cb4:	08007d85 	.word	0x08007d85
 8007cb8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007cbc:	e7db      	b.n	8007c76 <_scanf_float+0x8e>
 8007cbe:	290e      	cmp	r1, #14
 8007cc0:	d8c2      	bhi.n	8007c48 <_scanf_float+0x60>
 8007cc2:	a001      	add	r0, pc, #4	; (adr r0, 8007cc8 <_scanf_float+0xe0>)
 8007cc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007cc8:	08007d77 	.word	0x08007d77
 8007ccc:	08007c49 	.word	0x08007c49
 8007cd0:	08007d77 	.word	0x08007d77
 8007cd4:	08007e0b 	.word	0x08007e0b
 8007cd8:	08007c49 	.word	0x08007c49
 8007cdc:	08007d25 	.word	0x08007d25
 8007ce0:	08007d61 	.word	0x08007d61
 8007ce4:	08007d61 	.word	0x08007d61
 8007ce8:	08007d61 	.word	0x08007d61
 8007cec:	08007d61 	.word	0x08007d61
 8007cf0:	08007d61 	.word	0x08007d61
 8007cf4:	08007d61 	.word	0x08007d61
 8007cf8:	08007d61 	.word	0x08007d61
 8007cfc:	08007d61 	.word	0x08007d61
 8007d00:	08007d61 	.word	0x08007d61
 8007d04:	2b6e      	cmp	r3, #110	; 0x6e
 8007d06:	d809      	bhi.n	8007d1c <_scanf_float+0x134>
 8007d08:	2b60      	cmp	r3, #96	; 0x60
 8007d0a:	d8b2      	bhi.n	8007c72 <_scanf_float+0x8a>
 8007d0c:	2b54      	cmp	r3, #84	; 0x54
 8007d0e:	d077      	beq.n	8007e00 <_scanf_float+0x218>
 8007d10:	2b59      	cmp	r3, #89	; 0x59
 8007d12:	d199      	bne.n	8007c48 <_scanf_float+0x60>
 8007d14:	2d07      	cmp	r5, #7
 8007d16:	d197      	bne.n	8007c48 <_scanf_float+0x60>
 8007d18:	2508      	movs	r5, #8
 8007d1a:	e029      	b.n	8007d70 <_scanf_float+0x188>
 8007d1c:	2b74      	cmp	r3, #116	; 0x74
 8007d1e:	d06f      	beq.n	8007e00 <_scanf_float+0x218>
 8007d20:	2b79      	cmp	r3, #121	; 0x79
 8007d22:	e7f6      	b.n	8007d12 <_scanf_float+0x12a>
 8007d24:	6821      	ldr	r1, [r4, #0]
 8007d26:	05c8      	lsls	r0, r1, #23
 8007d28:	d51a      	bpl.n	8007d60 <_scanf_float+0x178>
 8007d2a:	9b02      	ldr	r3, [sp, #8]
 8007d2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007d30:	6021      	str	r1, [r4, #0]
 8007d32:	f109 0901 	add.w	r9, r9, #1
 8007d36:	b11b      	cbz	r3, 8007d40 <_scanf_float+0x158>
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	3201      	adds	r2, #1
 8007d3c:	9302      	str	r3, [sp, #8]
 8007d3e:	60a2      	str	r2, [r4, #8]
 8007d40:	68a3      	ldr	r3, [r4, #8]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	60a3      	str	r3, [r4, #8]
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	6123      	str	r3, [r4, #16]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	607b      	str	r3, [r7, #4]
 8007d54:	f340 8084 	ble.w	8007e60 <_scanf_float+0x278>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	603b      	str	r3, [r7, #0]
 8007d5e:	e766      	b.n	8007c2e <_scanf_float+0x46>
 8007d60:	eb1a 0f05 	cmn.w	sl, r5
 8007d64:	f47f af70 	bne.w	8007c48 <_scanf_float+0x60>
 8007d68:	6822      	ldr	r2, [r4, #0]
 8007d6a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007d6e:	6022      	str	r2, [r4, #0]
 8007d70:	f806 3b01 	strb.w	r3, [r6], #1
 8007d74:	e7e4      	b.n	8007d40 <_scanf_float+0x158>
 8007d76:	6822      	ldr	r2, [r4, #0]
 8007d78:	0610      	lsls	r0, r2, #24
 8007d7a:	f57f af65 	bpl.w	8007c48 <_scanf_float+0x60>
 8007d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d82:	e7f4      	b.n	8007d6e <_scanf_float+0x186>
 8007d84:	f1ba 0f00 	cmp.w	sl, #0
 8007d88:	d10e      	bne.n	8007da8 <_scanf_float+0x1c0>
 8007d8a:	f1b9 0f00 	cmp.w	r9, #0
 8007d8e:	d10e      	bne.n	8007dae <_scanf_float+0x1c6>
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007d96:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007d9a:	d108      	bne.n	8007dae <_scanf_float+0x1c6>
 8007d9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007da0:	6022      	str	r2, [r4, #0]
 8007da2:	f04f 0a01 	mov.w	sl, #1
 8007da6:	e7e3      	b.n	8007d70 <_scanf_float+0x188>
 8007da8:	f1ba 0f02 	cmp.w	sl, #2
 8007dac:	d055      	beq.n	8007e5a <_scanf_float+0x272>
 8007dae:	2d01      	cmp	r5, #1
 8007db0:	d002      	beq.n	8007db8 <_scanf_float+0x1d0>
 8007db2:	2d04      	cmp	r5, #4
 8007db4:	f47f af48 	bne.w	8007c48 <_scanf_float+0x60>
 8007db8:	3501      	adds	r5, #1
 8007dba:	b2ed      	uxtb	r5, r5
 8007dbc:	e7d8      	b.n	8007d70 <_scanf_float+0x188>
 8007dbe:	f1ba 0f01 	cmp.w	sl, #1
 8007dc2:	f47f af41 	bne.w	8007c48 <_scanf_float+0x60>
 8007dc6:	f04f 0a02 	mov.w	sl, #2
 8007dca:	e7d1      	b.n	8007d70 <_scanf_float+0x188>
 8007dcc:	b97d      	cbnz	r5, 8007dee <_scanf_float+0x206>
 8007dce:	f1b9 0f00 	cmp.w	r9, #0
 8007dd2:	f47f af3c 	bne.w	8007c4e <_scanf_float+0x66>
 8007dd6:	6822      	ldr	r2, [r4, #0]
 8007dd8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007ddc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007de0:	f47f af39 	bne.w	8007c56 <_scanf_float+0x6e>
 8007de4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007de8:	6022      	str	r2, [r4, #0]
 8007dea:	2501      	movs	r5, #1
 8007dec:	e7c0      	b.n	8007d70 <_scanf_float+0x188>
 8007dee:	2d03      	cmp	r5, #3
 8007df0:	d0e2      	beq.n	8007db8 <_scanf_float+0x1d0>
 8007df2:	2d05      	cmp	r5, #5
 8007df4:	e7de      	b.n	8007db4 <_scanf_float+0x1cc>
 8007df6:	2d02      	cmp	r5, #2
 8007df8:	f47f af26 	bne.w	8007c48 <_scanf_float+0x60>
 8007dfc:	2503      	movs	r5, #3
 8007dfe:	e7b7      	b.n	8007d70 <_scanf_float+0x188>
 8007e00:	2d06      	cmp	r5, #6
 8007e02:	f47f af21 	bne.w	8007c48 <_scanf_float+0x60>
 8007e06:	2507      	movs	r5, #7
 8007e08:	e7b2      	b.n	8007d70 <_scanf_float+0x188>
 8007e0a:	6822      	ldr	r2, [r4, #0]
 8007e0c:	0591      	lsls	r1, r2, #22
 8007e0e:	f57f af1b 	bpl.w	8007c48 <_scanf_float+0x60>
 8007e12:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e1c:	e7a8      	b.n	8007d70 <_scanf_float+0x188>
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007e24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007e28:	d006      	beq.n	8007e38 <_scanf_float+0x250>
 8007e2a:	0550      	lsls	r0, r2, #21
 8007e2c:	f57f af0c 	bpl.w	8007c48 <_scanf_float+0x60>
 8007e30:	f1b9 0f00 	cmp.w	r9, #0
 8007e34:	f43f af0f 	beq.w	8007c56 <_scanf_float+0x6e>
 8007e38:	0591      	lsls	r1, r2, #22
 8007e3a:	bf58      	it	pl
 8007e3c:	9901      	ldrpl	r1, [sp, #4]
 8007e3e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e42:	bf58      	it	pl
 8007e44:	eba9 0101 	subpl.w	r1, r9, r1
 8007e48:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007e4c:	bf58      	it	pl
 8007e4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007e52:	6022      	str	r2, [r4, #0]
 8007e54:	f04f 0900 	mov.w	r9, #0
 8007e58:	e78a      	b.n	8007d70 <_scanf_float+0x188>
 8007e5a:	f04f 0a03 	mov.w	sl, #3
 8007e5e:	e787      	b.n	8007d70 <_scanf_float+0x188>
 8007e60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e64:	4639      	mov	r1, r7
 8007e66:	4640      	mov	r0, r8
 8007e68:	4798      	blx	r3
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	f43f aedf 	beq.w	8007c2e <_scanf_float+0x46>
 8007e70:	e6ea      	b.n	8007c48 <_scanf_float+0x60>
 8007e72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e7a:	463a      	mov	r2, r7
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	4798      	blx	r3
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	6123      	str	r3, [r4, #16]
 8007e86:	e6ec      	b.n	8007c62 <_scanf_float+0x7a>
 8007e88:	1e6b      	subs	r3, r5, #1
 8007e8a:	2b06      	cmp	r3, #6
 8007e8c:	d825      	bhi.n	8007eda <_scanf_float+0x2f2>
 8007e8e:	2d02      	cmp	r5, #2
 8007e90:	d836      	bhi.n	8007f00 <_scanf_float+0x318>
 8007e92:	455e      	cmp	r6, fp
 8007e94:	f67f aee8 	bls.w	8007c68 <_scanf_float+0x80>
 8007e98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e9c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ea0:	463a      	mov	r2, r7
 8007ea2:	4640      	mov	r0, r8
 8007ea4:	4798      	blx	r3
 8007ea6:	6923      	ldr	r3, [r4, #16]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	6123      	str	r3, [r4, #16]
 8007eac:	e7f1      	b.n	8007e92 <_scanf_float+0x2aa>
 8007eae:	9802      	ldr	r0, [sp, #8]
 8007eb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eb4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007eb8:	9002      	str	r0, [sp, #8]
 8007eba:	463a      	mov	r2, r7
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4798      	blx	r3
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	6123      	str	r3, [r4, #16]
 8007ec6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eca:	fa5f fa8a 	uxtb.w	sl, sl
 8007ece:	f1ba 0f02 	cmp.w	sl, #2
 8007ed2:	d1ec      	bne.n	8007eae <_scanf_float+0x2c6>
 8007ed4:	3d03      	subs	r5, #3
 8007ed6:	b2ed      	uxtb	r5, r5
 8007ed8:	1b76      	subs	r6, r6, r5
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	05da      	lsls	r2, r3, #23
 8007ede:	d52f      	bpl.n	8007f40 <_scanf_float+0x358>
 8007ee0:	055b      	lsls	r3, r3, #21
 8007ee2:	d510      	bpl.n	8007f06 <_scanf_float+0x31e>
 8007ee4:	455e      	cmp	r6, fp
 8007ee6:	f67f aebf 	bls.w	8007c68 <_scanf_float+0x80>
 8007eea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ef2:	463a      	mov	r2, r7
 8007ef4:	4640      	mov	r0, r8
 8007ef6:	4798      	blx	r3
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	6123      	str	r3, [r4, #16]
 8007efe:	e7f1      	b.n	8007ee4 <_scanf_float+0x2fc>
 8007f00:	46aa      	mov	sl, r5
 8007f02:	9602      	str	r6, [sp, #8]
 8007f04:	e7df      	b.n	8007ec6 <_scanf_float+0x2de>
 8007f06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f0a:	6923      	ldr	r3, [r4, #16]
 8007f0c:	2965      	cmp	r1, #101	; 0x65
 8007f0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f12:	f106 35ff 	add.w	r5, r6, #4294967295
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	d00c      	beq.n	8007f34 <_scanf_float+0x34c>
 8007f1a:	2945      	cmp	r1, #69	; 0x45
 8007f1c:	d00a      	beq.n	8007f34 <_scanf_float+0x34c>
 8007f1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f22:	463a      	mov	r2, r7
 8007f24:	4640      	mov	r0, r8
 8007f26:	4798      	blx	r3
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	1eb5      	subs	r5, r6, #2
 8007f32:	6123      	str	r3, [r4, #16]
 8007f34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f38:	463a      	mov	r2, r7
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	4798      	blx	r3
 8007f3e:	462e      	mov	r6, r5
 8007f40:	6825      	ldr	r5, [r4, #0]
 8007f42:	f015 0510 	ands.w	r5, r5, #16
 8007f46:	d159      	bne.n	8007ffc <_scanf_float+0x414>
 8007f48:	7035      	strb	r5, [r6, #0]
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f54:	d11b      	bne.n	8007f8e <_scanf_float+0x3a6>
 8007f56:	9b01      	ldr	r3, [sp, #4]
 8007f58:	454b      	cmp	r3, r9
 8007f5a:	eba3 0209 	sub.w	r2, r3, r9
 8007f5e:	d123      	bne.n	8007fa8 <_scanf_float+0x3c0>
 8007f60:	2200      	movs	r2, #0
 8007f62:	4659      	mov	r1, fp
 8007f64:	4640      	mov	r0, r8
 8007f66:	f001 f88d 	bl	8009084 <_strtod_r>
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	f012 0f02 	tst.w	r2, #2
 8007f72:	ec57 6b10 	vmov	r6, r7, d0
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	d021      	beq.n	8007fbe <_scanf_float+0x3d6>
 8007f7a:	9903      	ldr	r1, [sp, #12]
 8007f7c:	1d1a      	adds	r2, r3, #4
 8007f7e:	600a      	str	r2, [r1, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	e9c3 6700 	strd	r6, r7, [r3]
 8007f86:	68e3      	ldr	r3, [r4, #12]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	60e3      	str	r3, [r4, #12]
 8007f8c:	e66d      	b.n	8007c6a <_scanf_float+0x82>
 8007f8e:	9b04      	ldr	r3, [sp, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0e5      	beq.n	8007f60 <_scanf_float+0x378>
 8007f94:	9905      	ldr	r1, [sp, #20]
 8007f96:	230a      	movs	r3, #10
 8007f98:	462a      	mov	r2, r5
 8007f9a:	3101      	adds	r1, #1
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	f001 f8f9 	bl	8009194 <_strtol_r>
 8007fa2:	9b04      	ldr	r3, [sp, #16]
 8007fa4:	9e05      	ldr	r6, [sp, #20]
 8007fa6:	1ac2      	subs	r2, r0, r3
 8007fa8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007fac:	429e      	cmp	r6, r3
 8007fae:	bf28      	it	cs
 8007fb0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007fb4:	4912      	ldr	r1, [pc, #72]	; (8008000 <_scanf_float+0x418>)
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f000 f998 	bl	80082ec <siprintf>
 8007fbc:	e7d0      	b.n	8007f60 <_scanf_float+0x378>
 8007fbe:	9903      	ldr	r1, [sp, #12]
 8007fc0:	f012 0f04 	tst.w	r2, #4
 8007fc4:	f103 0204 	add.w	r2, r3, #4
 8007fc8:	600a      	str	r2, [r1, #0]
 8007fca:	d1d9      	bne.n	8007f80 <_scanf_float+0x398>
 8007fcc:	f8d3 8000 	ldr.w	r8, [r3]
 8007fd0:	ee10 2a10 	vmov	r2, s0
 8007fd4:	ee10 0a10 	vmov	r0, s0
 8007fd8:	463b      	mov	r3, r7
 8007fda:	4639      	mov	r1, r7
 8007fdc:	f7f8 fdc6 	bl	8000b6c <__aeabi_dcmpun>
 8007fe0:	b128      	cbz	r0, 8007fee <_scanf_float+0x406>
 8007fe2:	4808      	ldr	r0, [pc, #32]	; (8008004 <_scanf_float+0x41c>)
 8007fe4:	f000 f97c 	bl	80082e0 <nanf>
 8007fe8:	ed88 0a00 	vstr	s0, [r8]
 8007fec:	e7cb      	b.n	8007f86 <_scanf_float+0x39e>
 8007fee:	4630      	mov	r0, r6
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	f7f8 fe19 	bl	8000c28 <__aeabi_d2f>
 8007ff6:	f8c8 0000 	str.w	r0, [r8]
 8007ffa:	e7c4      	b.n	8007f86 <_scanf_float+0x39e>
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	e634      	b.n	8007c6a <_scanf_float+0x82>
 8008000:	0800d13e 	.word	0x0800d13e
 8008004:	0800d5cb 	.word	0x0800d5cb

08008008 <iprintf>:
 8008008:	b40f      	push	{r0, r1, r2, r3}
 800800a:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <iprintf+0x2c>)
 800800c:	b513      	push	{r0, r1, r4, lr}
 800800e:	681c      	ldr	r4, [r3, #0]
 8008010:	b124      	cbz	r4, 800801c <iprintf+0x14>
 8008012:	69a3      	ldr	r3, [r4, #24]
 8008014:	b913      	cbnz	r3, 800801c <iprintf+0x14>
 8008016:	4620      	mov	r0, r4
 8008018:	f002 f948 	bl	800a2ac <__sinit>
 800801c:	ab05      	add	r3, sp, #20
 800801e:	9a04      	ldr	r2, [sp, #16]
 8008020:	68a1      	ldr	r1, [r4, #8]
 8008022:	9301      	str	r3, [sp, #4]
 8008024:	4620      	mov	r0, r4
 8008026:	f003 ff23 	bl	800be70 <_vfiprintf_r>
 800802a:	b002      	add	sp, #8
 800802c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008030:	b004      	add	sp, #16
 8008032:	4770      	bx	lr
 8008034:	2000000c 	.word	0x2000000c

08008038 <_puts_r>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	460e      	mov	r6, r1
 800803c:	4605      	mov	r5, r0
 800803e:	b118      	cbz	r0, 8008048 <_puts_r+0x10>
 8008040:	6983      	ldr	r3, [r0, #24]
 8008042:	b90b      	cbnz	r3, 8008048 <_puts_r+0x10>
 8008044:	f002 f932 	bl	800a2ac <__sinit>
 8008048:	69ab      	ldr	r3, [r5, #24]
 800804a:	68ac      	ldr	r4, [r5, #8]
 800804c:	b913      	cbnz	r3, 8008054 <_puts_r+0x1c>
 800804e:	4628      	mov	r0, r5
 8008050:	f002 f92c 	bl	800a2ac <__sinit>
 8008054:	4b2c      	ldr	r3, [pc, #176]	; (8008108 <_puts_r+0xd0>)
 8008056:	429c      	cmp	r4, r3
 8008058:	d120      	bne.n	800809c <_puts_r+0x64>
 800805a:	686c      	ldr	r4, [r5, #4]
 800805c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800805e:	07db      	lsls	r3, r3, #31
 8008060:	d405      	bmi.n	800806e <_puts_r+0x36>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	0598      	lsls	r0, r3, #22
 8008066:	d402      	bmi.n	800806e <_puts_r+0x36>
 8008068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800806a:	f002 fd4e 	bl	800ab0a <__retarget_lock_acquire_recursive>
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	0719      	lsls	r1, r3, #28
 8008072:	d51d      	bpl.n	80080b0 <_puts_r+0x78>
 8008074:	6923      	ldr	r3, [r4, #16]
 8008076:	b1db      	cbz	r3, 80080b0 <_puts_r+0x78>
 8008078:	3e01      	subs	r6, #1
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008080:	3b01      	subs	r3, #1
 8008082:	60a3      	str	r3, [r4, #8]
 8008084:	bb39      	cbnz	r1, 80080d6 <_puts_r+0x9e>
 8008086:	2b00      	cmp	r3, #0
 8008088:	da38      	bge.n	80080fc <_puts_r+0xc4>
 800808a:	4622      	mov	r2, r4
 800808c:	210a      	movs	r1, #10
 800808e:	4628      	mov	r0, r5
 8008090:	f001 f882 	bl	8009198 <__swbuf_r>
 8008094:	3001      	adds	r0, #1
 8008096:	d011      	beq.n	80080bc <_puts_r+0x84>
 8008098:	250a      	movs	r5, #10
 800809a:	e011      	b.n	80080c0 <_puts_r+0x88>
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <_puts_r+0xd4>)
 800809e:	429c      	cmp	r4, r3
 80080a0:	d101      	bne.n	80080a6 <_puts_r+0x6e>
 80080a2:	68ac      	ldr	r4, [r5, #8]
 80080a4:	e7da      	b.n	800805c <_puts_r+0x24>
 80080a6:	4b1a      	ldr	r3, [pc, #104]	; (8008110 <_puts_r+0xd8>)
 80080a8:	429c      	cmp	r4, r3
 80080aa:	bf08      	it	eq
 80080ac:	68ec      	ldreq	r4, [r5, #12]
 80080ae:	e7d5      	b.n	800805c <_puts_r+0x24>
 80080b0:	4621      	mov	r1, r4
 80080b2:	4628      	mov	r0, r5
 80080b4:	f001 f8d4 	bl	8009260 <__swsetup_r>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d0dd      	beq.n	8008078 <_puts_r+0x40>
 80080bc:	f04f 35ff 	mov.w	r5, #4294967295
 80080c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080c2:	07da      	lsls	r2, r3, #31
 80080c4:	d405      	bmi.n	80080d2 <_puts_r+0x9a>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	059b      	lsls	r3, r3, #22
 80080ca:	d402      	bmi.n	80080d2 <_puts_r+0x9a>
 80080cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ce:	f002 fd1d 	bl	800ab0c <__retarget_lock_release_recursive>
 80080d2:	4628      	mov	r0, r5
 80080d4:	bd70      	pop	{r4, r5, r6, pc}
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	da04      	bge.n	80080e4 <_puts_r+0xac>
 80080da:	69a2      	ldr	r2, [r4, #24]
 80080dc:	429a      	cmp	r2, r3
 80080de:	dc06      	bgt.n	80080ee <_puts_r+0xb6>
 80080e0:	290a      	cmp	r1, #10
 80080e2:	d004      	beq.n	80080ee <_puts_r+0xb6>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	6022      	str	r2, [r4, #0]
 80080ea:	7019      	strb	r1, [r3, #0]
 80080ec:	e7c5      	b.n	800807a <_puts_r+0x42>
 80080ee:	4622      	mov	r2, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	f001 f851 	bl	8009198 <__swbuf_r>
 80080f6:	3001      	adds	r0, #1
 80080f8:	d1bf      	bne.n	800807a <_puts_r+0x42>
 80080fa:	e7df      	b.n	80080bc <_puts_r+0x84>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	250a      	movs	r5, #10
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	6022      	str	r2, [r4, #0]
 8008104:	701d      	strb	r5, [r3, #0]
 8008106:	e7db      	b.n	80080c0 <_puts_r+0x88>
 8008108:	0800d34c 	.word	0x0800d34c
 800810c:	0800d36c 	.word	0x0800d36c
 8008110:	0800d32c 	.word	0x0800d32c

08008114 <puts>:
 8008114:	4b02      	ldr	r3, [pc, #8]	; (8008120 <puts+0xc>)
 8008116:	4601      	mov	r1, r0
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	f7ff bf8d 	b.w	8008038 <_puts_r>
 800811e:	bf00      	nop
 8008120:	2000000c 	.word	0x2000000c

08008124 <iscanf>:
 8008124:	b40f      	push	{r0, r1, r2, r3}
 8008126:	4b0a      	ldr	r3, [pc, #40]	; (8008150 <iscanf+0x2c>)
 8008128:	b513      	push	{r0, r1, r4, lr}
 800812a:	681c      	ldr	r4, [r3, #0]
 800812c:	b124      	cbz	r4, 8008138 <iscanf+0x14>
 800812e:	69a3      	ldr	r3, [r4, #24]
 8008130:	b913      	cbnz	r3, 8008138 <iscanf+0x14>
 8008132:	4620      	mov	r0, r4
 8008134:	f002 f8ba 	bl	800a2ac <__sinit>
 8008138:	ab05      	add	r3, sp, #20
 800813a:	9a04      	ldr	r2, [sp, #16]
 800813c:	6861      	ldr	r1, [r4, #4]
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	4620      	mov	r0, r4
 8008142:	f004 f96b 	bl	800c41c <_vfiscanf_r>
 8008146:	b002      	add	sp, #8
 8008148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800814c:	b004      	add	sp, #16
 800814e:	4770      	bx	lr
 8008150:	2000000c 	.word	0x2000000c

08008154 <setvbuf>:
 8008154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008158:	461d      	mov	r5, r3
 800815a:	4b5d      	ldr	r3, [pc, #372]	; (80082d0 <setvbuf+0x17c>)
 800815c:	681f      	ldr	r7, [r3, #0]
 800815e:	4604      	mov	r4, r0
 8008160:	460e      	mov	r6, r1
 8008162:	4690      	mov	r8, r2
 8008164:	b127      	cbz	r7, 8008170 <setvbuf+0x1c>
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	b913      	cbnz	r3, 8008170 <setvbuf+0x1c>
 800816a:	4638      	mov	r0, r7
 800816c:	f002 f89e 	bl	800a2ac <__sinit>
 8008170:	4b58      	ldr	r3, [pc, #352]	; (80082d4 <setvbuf+0x180>)
 8008172:	429c      	cmp	r4, r3
 8008174:	d167      	bne.n	8008246 <setvbuf+0xf2>
 8008176:	687c      	ldr	r4, [r7, #4]
 8008178:	f1b8 0f02 	cmp.w	r8, #2
 800817c:	d006      	beq.n	800818c <setvbuf+0x38>
 800817e:	f1b8 0f01 	cmp.w	r8, #1
 8008182:	f200 809f 	bhi.w	80082c4 <setvbuf+0x170>
 8008186:	2d00      	cmp	r5, #0
 8008188:	f2c0 809c 	blt.w	80082c4 <setvbuf+0x170>
 800818c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800818e:	07db      	lsls	r3, r3, #31
 8008190:	d405      	bmi.n	800819e <setvbuf+0x4a>
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	0598      	lsls	r0, r3, #22
 8008196:	d402      	bmi.n	800819e <setvbuf+0x4a>
 8008198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800819a:	f002 fcb6 	bl	800ab0a <__retarget_lock_acquire_recursive>
 800819e:	4621      	mov	r1, r4
 80081a0:	4638      	mov	r0, r7
 80081a2:	f001 ffdd 	bl	800a160 <_fflush_r>
 80081a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081a8:	b141      	cbz	r1, 80081bc <setvbuf+0x68>
 80081aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081ae:	4299      	cmp	r1, r3
 80081b0:	d002      	beq.n	80081b8 <setvbuf+0x64>
 80081b2:	4638      	mov	r0, r7
 80081b4:	f003 fa24 	bl	800b600 <_free_r>
 80081b8:	2300      	movs	r3, #0
 80081ba:	6363      	str	r3, [r4, #52]	; 0x34
 80081bc:	2300      	movs	r3, #0
 80081be:	61a3      	str	r3, [r4, #24]
 80081c0:	6063      	str	r3, [r4, #4]
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	0619      	lsls	r1, r3, #24
 80081c6:	d503      	bpl.n	80081d0 <setvbuf+0x7c>
 80081c8:	6921      	ldr	r1, [r4, #16]
 80081ca:	4638      	mov	r0, r7
 80081cc:	f003 fa18 	bl	800b600 <_free_r>
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80081d6:	f023 0303 	bic.w	r3, r3, #3
 80081da:	f1b8 0f02 	cmp.w	r8, #2
 80081de:	81a3      	strh	r3, [r4, #12]
 80081e0:	d06c      	beq.n	80082bc <setvbuf+0x168>
 80081e2:	ab01      	add	r3, sp, #4
 80081e4:	466a      	mov	r2, sp
 80081e6:	4621      	mov	r1, r4
 80081e8:	4638      	mov	r0, r7
 80081ea:	f002 fca3 	bl	800ab34 <__swhatbuf_r>
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	4318      	orrs	r0, r3
 80081f2:	81a0      	strh	r0, [r4, #12]
 80081f4:	2d00      	cmp	r5, #0
 80081f6:	d130      	bne.n	800825a <setvbuf+0x106>
 80081f8:	9d00      	ldr	r5, [sp, #0]
 80081fa:	4628      	mov	r0, r5
 80081fc:	f002 fd00 	bl	800ac00 <malloc>
 8008200:	4606      	mov	r6, r0
 8008202:	2800      	cmp	r0, #0
 8008204:	d155      	bne.n	80082b2 <setvbuf+0x15e>
 8008206:	f8dd 9000 	ldr.w	r9, [sp]
 800820a:	45a9      	cmp	r9, r5
 800820c:	d14a      	bne.n	80082a4 <setvbuf+0x150>
 800820e:	f04f 35ff 	mov.w	r5, #4294967295
 8008212:	2200      	movs	r2, #0
 8008214:	60a2      	str	r2, [r4, #8]
 8008216:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800821a:	6022      	str	r2, [r4, #0]
 800821c:	6122      	str	r2, [r4, #16]
 800821e:	2201      	movs	r2, #1
 8008220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008224:	6162      	str	r2, [r4, #20]
 8008226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008228:	f043 0302 	orr.w	r3, r3, #2
 800822c:	07d2      	lsls	r2, r2, #31
 800822e:	81a3      	strh	r3, [r4, #12]
 8008230:	d405      	bmi.n	800823e <setvbuf+0xea>
 8008232:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008236:	d102      	bne.n	800823e <setvbuf+0xea>
 8008238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800823a:	f002 fc67 	bl	800ab0c <__retarget_lock_release_recursive>
 800823e:	4628      	mov	r0, r5
 8008240:	b003      	add	sp, #12
 8008242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008246:	4b24      	ldr	r3, [pc, #144]	; (80082d8 <setvbuf+0x184>)
 8008248:	429c      	cmp	r4, r3
 800824a:	d101      	bne.n	8008250 <setvbuf+0xfc>
 800824c:	68bc      	ldr	r4, [r7, #8]
 800824e:	e793      	b.n	8008178 <setvbuf+0x24>
 8008250:	4b22      	ldr	r3, [pc, #136]	; (80082dc <setvbuf+0x188>)
 8008252:	429c      	cmp	r4, r3
 8008254:	bf08      	it	eq
 8008256:	68fc      	ldreq	r4, [r7, #12]
 8008258:	e78e      	b.n	8008178 <setvbuf+0x24>
 800825a:	2e00      	cmp	r6, #0
 800825c:	d0cd      	beq.n	80081fa <setvbuf+0xa6>
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	b913      	cbnz	r3, 8008268 <setvbuf+0x114>
 8008262:	4638      	mov	r0, r7
 8008264:	f002 f822 	bl	800a2ac <__sinit>
 8008268:	f1b8 0f01 	cmp.w	r8, #1
 800826c:	bf08      	it	eq
 800826e:	89a3      	ldrheq	r3, [r4, #12]
 8008270:	6026      	str	r6, [r4, #0]
 8008272:	bf04      	itt	eq
 8008274:	f043 0301 	orreq.w	r3, r3, #1
 8008278:	81a3      	strheq	r3, [r4, #12]
 800827a:	89a2      	ldrh	r2, [r4, #12]
 800827c:	f012 0308 	ands.w	r3, r2, #8
 8008280:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008284:	d01c      	beq.n	80082c0 <setvbuf+0x16c>
 8008286:	07d3      	lsls	r3, r2, #31
 8008288:	bf41      	itttt	mi
 800828a:	2300      	movmi	r3, #0
 800828c:	426d      	negmi	r5, r5
 800828e:	60a3      	strmi	r3, [r4, #8]
 8008290:	61a5      	strmi	r5, [r4, #24]
 8008292:	bf58      	it	pl
 8008294:	60a5      	strpl	r5, [r4, #8]
 8008296:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008298:	f015 0501 	ands.w	r5, r5, #1
 800829c:	d115      	bne.n	80082ca <setvbuf+0x176>
 800829e:	f412 7f00 	tst.w	r2, #512	; 0x200
 80082a2:	e7c8      	b.n	8008236 <setvbuf+0xe2>
 80082a4:	4648      	mov	r0, r9
 80082a6:	f002 fcab 	bl	800ac00 <malloc>
 80082aa:	4606      	mov	r6, r0
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d0ae      	beq.n	800820e <setvbuf+0xba>
 80082b0:	464d      	mov	r5, r9
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b8:	81a3      	strh	r3, [r4, #12]
 80082ba:	e7d0      	b.n	800825e <setvbuf+0x10a>
 80082bc:	2500      	movs	r5, #0
 80082be:	e7a8      	b.n	8008212 <setvbuf+0xbe>
 80082c0:	60a3      	str	r3, [r4, #8]
 80082c2:	e7e8      	b.n	8008296 <setvbuf+0x142>
 80082c4:	f04f 35ff 	mov.w	r5, #4294967295
 80082c8:	e7b9      	b.n	800823e <setvbuf+0xea>
 80082ca:	2500      	movs	r5, #0
 80082cc:	e7b7      	b.n	800823e <setvbuf+0xea>
 80082ce:	bf00      	nop
 80082d0:	2000000c 	.word	0x2000000c
 80082d4:	0800d34c 	.word	0x0800d34c
 80082d8:	0800d36c 	.word	0x0800d36c
 80082dc:	0800d32c 	.word	0x0800d32c

080082e0 <nanf>:
 80082e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80082e8 <nanf+0x8>
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	7fc00000 	.word	0x7fc00000

080082ec <siprintf>:
 80082ec:	b40e      	push	{r1, r2, r3}
 80082ee:	b500      	push	{lr}
 80082f0:	b09c      	sub	sp, #112	; 0x70
 80082f2:	ab1d      	add	r3, sp, #116	; 0x74
 80082f4:	9002      	str	r0, [sp, #8]
 80082f6:	9006      	str	r0, [sp, #24]
 80082f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082fc:	4809      	ldr	r0, [pc, #36]	; (8008324 <siprintf+0x38>)
 80082fe:	9107      	str	r1, [sp, #28]
 8008300:	9104      	str	r1, [sp, #16]
 8008302:	4909      	ldr	r1, [pc, #36]	; (8008328 <siprintf+0x3c>)
 8008304:	f853 2b04 	ldr.w	r2, [r3], #4
 8008308:	9105      	str	r1, [sp, #20]
 800830a:	6800      	ldr	r0, [r0, #0]
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	a902      	add	r1, sp, #8
 8008310:	f003 fab2 	bl	800b878 <_svfiprintf_r>
 8008314:	9b02      	ldr	r3, [sp, #8]
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
 800831a:	b01c      	add	sp, #112	; 0x70
 800831c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008320:	b003      	add	sp, #12
 8008322:	4770      	bx	lr
 8008324:	2000000c 	.word	0x2000000c
 8008328:	ffff0208 	.word	0xffff0208

0800832c <siscanf>:
 800832c:	b40e      	push	{r1, r2, r3}
 800832e:	b510      	push	{r4, lr}
 8008330:	b09f      	sub	sp, #124	; 0x7c
 8008332:	ac21      	add	r4, sp, #132	; 0x84
 8008334:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008338:	f854 2b04 	ldr.w	r2, [r4], #4
 800833c:	9201      	str	r2, [sp, #4]
 800833e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008342:	9004      	str	r0, [sp, #16]
 8008344:	9008      	str	r0, [sp, #32]
 8008346:	f7f7 ff63 	bl	8000210 <strlen>
 800834a:	4b0c      	ldr	r3, [pc, #48]	; (800837c <siscanf+0x50>)
 800834c:	9005      	str	r0, [sp, #20]
 800834e:	9009      	str	r0, [sp, #36]	; 0x24
 8008350:	930d      	str	r3, [sp, #52]	; 0x34
 8008352:	480b      	ldr	r0, [pc, #44]	; (8008380 <siscanf+0x54>)
 8008354:	9a01      	ldr	r2, [sp, #4]
 8008356:	6800      	ldr	r0, [r0, #0]
 8008358:	9403      	str	r4, [sp, #12]
 800835a:	2300      	movs	r3, #0
 800835c:	9311      	str	r3, [sp, #68]	; 0x44
 800835e:	9316      	str	r3, [sp, #88]	; 0x58
 8008360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008364:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008368:	a904      	add	r1, sp, #16
 800836a:	4623      	mov	r3, r4
 800836c:	f003 fbde 	bl	800bb2c <__ssvfiscanf_r>
 8008370:	b01f      	add	sp, #124	; 0x7c
 8008372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008376:	b003      	add	sp, #12
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	080083a7 	.word	0x080083a7
 8008380:	2000000c 	.word	0x2000000c

08008384 <__sread>:
 8008384:	b510      	push	{r4, lr}
 8008386:	460c      	mov	r4, r1
 8008388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838c:	f004 f9c0 	bl	800c710 <_read_r>
 8008390:	2800      	cmp	r0, #0
 8008392:	bfab      	itete	ge
 8008394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008396:	89a3      	ldrhlt	r3, [r4, #12]
 8008398:	181b      	addge	r3, r3, r0
 800839a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800839e:	bfac      	ite	ge
 80083a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80083a2:	81a3      	strhlt	r3, [r4, #12]
 80083a4:	bd10      	pop	{r4, pc}

080083a6 <__seofread>:
 80083a6:	2000      	movs	r0, #0
 80083a8:	4770      	bx	lr

080083aa <__swrite>:
 80083aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ae:	461f      	mov	r7, r3
 80083b0:	898b      	ldrh	r3, [r1, #12]
 80083b2:	05db      	lsls	r3, r3, #23
 80083b4:	4605      	mov	r5, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	4616      	mov	r6, r2
 80083ba:	d505      	bpl.n	80083c8 <__swrite+0x1e>
 80083bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c0:	2302      	movs	r3, #2
 80083c2:	2200      	movs	r2, #0
 80083c4:	f002 fba4 	bl	800ab10 <_lseek_r>
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083d2:	81a3      	strh	r3, [r4, #12]
 80083d4:	4632      	mov	r2, r6
 80083d6:	463b      	mov	r3, r7
 80083d8:	4628      	mov	r0, r5
 80083da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083de:	f000 bf2d 	b.w	800923c <_write_r>

080083e2 <__sseek>:
 80083e2:	b510      	push	{r4, lr}
 80083e4:	460c      	mov	r4, r1
 80083e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ea:	f002 fb91 	bl	800ab10 <_lseek_r>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	bf15      	itete	ne
 80083f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80083f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083fe:	81a3      	strheq	r3, [r4, #12]
 8008400:	bf18      	it	ne
 8008402:	81a3      	strhne	r3, [r4, #12]
 8008404:	bd10      	pop	{r4, pc}

08008406 <__sclose>:
 8008406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800840a:	f000 bf97 	b.w	800933c <_close_r>

0800840e <strstr>:
 800840e:	780a      	ldrb	r2, [r1, #0]
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	b96a      	cbnz	r2, 8008430 <strstr+0x22>
 8008414:	bd70      	pop	{r4, r5, r6, pc}
 8008416:	429a      	cmp	r2, r3
 8008418:	d109      	bne.n	800842e <strstr+0x20>
 800841a:	460c      	mov	r4, r1
 800841c:	4605      	mov	r5, r0
 800841e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008422:	2b00      	cmp	r3, #0
 8008424:	d0f6      	beq.n	8008414 <strstr+0x6>
 8008426:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800842a:	429e      	cmp	r6, r3
 800842c:	d0f7      	beq.n	800841e <strstr+0x10>
 800842e:	3001      	adds	r0, #1
 8008430:	7803      	ldrb	r3, [r0, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1ef      	bne.n	8008416 <strstr+0x8>
 8008436:	4618      	mov	r0, r3
 8008438:	e7ec      	b.n	8008414 <strstr+0x6>

0800843a <sulp>:
 800843a:	b570      	push	{r4, r5, r6, lr}
 800843c:	4604      	mov	r4, r0
 800843e:	460d      	mov	r5, r1
 8008440:	ec45 4b10 	vmov	d0, r4, r5
 8008444:	4616      	mov	r6, r2
 8008446:	f002 ff75 	bl	800b334 <__ulp>
 800844a:	ec51 0b10 	vmov	r0, r1, d0
 800844e:	b17e      	cbz	r6, 8008470 <sulp+0x36>
 8008450:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008454:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008458:	2b00      	cmp	r3, #0
 800845a:	dd09      	ble.n	8008470 <sulp+0x36>
 800845c:	051b      	lsls	r3, r3, #20
 800845e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008462:	2400      	movs	r4, #0
 8008464:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008468:	4622      	mov	r2, r4
 800846a:	462b      	mov	r3, r5
 800846c:	f7f8 f8e4 	bl	8000638 <__aeabi_dmul>
 8008470:	bd70      	pop	{r4, r5, r6, pc}
 8008472:	0000      	movs	r0, r0
 8008474:	0000      	movs	r0, r0
	...

08008478 <_strtod_l>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	ed2d 8b02 	vpush	{d8}
 8008480:	b09d      	sub	sp, #116	; 0x74
 8008482:	461f      	mov	r7, r3
 8008484:	2300      	movs	r3, #0
 8008486:	9318      	str	r3, [sp, #96]	; 0x60
 8008488:	4ba2      	ldr	r3, [pc, #648]	; (8008714 <_strtod_l+0x29c>)
 800848a:	9213      	str	r2, [sp, #76]	; 0x4c
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	9305      	str	r3, [sp, #20]
 8008490:	4604      	mov	r4, r0
 8008492:	4618      	mov	r0, r3
 8008494:	4688      	mov	r8, r1
 8008496:	f7f7 febb 	bl	8000210 <strlen>
 800849a:	f04f 0a00 	mov.w	sl, #0
 800849e:	4605      	mov	r5, r0
 80084a0:	f04f 0b00 	mov.w	fp, #0
 80084a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80084a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084aa:	781a      	ldrb	r2, [r3, #0]
 80084ac:	2a2b      	cmp	r2, #43	; 0x2b
 80084ae:	d04e      	beq.n	800854e <_strtod_l+0xd6>
 80084b0:	d83b      	bhi.n	800852a <_strtod_l+0xb2>
 80084b2:	2a0d      	cmp	r2, #13
 80084b4:	d834      	bhi.n	8008520 <_strtod_l+0xa8>
 80084b6:	2a08      	cmp	r2, #8
 80084b8:	d834      	bhi.n	8008524 <_strtod_l+0xac>
 80084ba:	2a00      	cmp	r2, #0
 80084bc:	d03e      	beq.n	800853c <_strtod_l+0xc4>
 80084be:	2300      	movs	r3, #0
 80084c0:	930a      	str	r3, [sp, #40]	; 0x28
 80084c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80084c4:	7833      	ldrb	r3, [r6, #0]
 80084c6:	2b30      	cmp	r3, #48	; 0x30
 80084c8:	f040 80b0 	bne.w	800862c <_strtod_l+0x1b4>
 80084cc:	7873      	ldrb	r3, [r6, #1]
 80084ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80084d2:	2b58      	cmp	r3, #88	; 0x58
 80084d4:	d168      	bne.n	80085a8 <_strtod_l+0x130>
 80084d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	ab18      	add	r3, sp, #96	; 0x60
 80084dc:	9702      	str	r7, [sp, #8]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	4a8d      	ldr	r2, [pc, #564]	; (8008718 <_strtod_l+0x2a0>)
 80084e2:	ab19      	add	r3, sp, #100	; 0x64
 80084e4:	a917      	add	r1, sp, #92	; 0x5c
 80084e6:	4620      	mov	r0, r4
 80084e8:	f002 f802 	bl	800a4f0 <__gethex>
 80084ec:	f010 0707 	ands.w	r7, r0, #7
 80084f0:	4605      	mov	r5, r0
 80084f2:	d005      	beq.n	8008500 <_strtod_l+0x88>
 80084f4:	2f06      	cmp	r7, #6
 80084f6:	d12c      	bne.n	8008552 <_strtod_l+0xda>
 80084f8:	3601      	adds	r6, #1
 80084fa:	2300      	movs	r3, #0
 80084fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80084fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008500:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008502:	2b00      	cmp	r3, #0
 8008504:	f040 8590 	bne.w	8009028 <_strtod_l+0xbb0>
 8008508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800850a:	b1eb      	cbz	r3, 8008548 <_strtod_l+0xd0>
 800850c:	4652      	mov	r2, sl
 800850e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008512:	ec43 2b10 	vmov	d0, r2, r3
 8008516:	b01d      	add	sp, #116	; 0x74
 8008518:	ecbd 8b02 	vpop	{d8}
 800851c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008520:	2a20      	cmp	r2, #32
 8008522:	d1cc      	bne.n	80084be <_strtod_l+0x46>
 8008524:	3301      	adds	r3, #1
 8008526:	9317      	str	r3, [sp, #92]	; 0x5c
 8008528:	e7be      	b.n	80084a8 <_strtod_l+0x30>
 800852a:	2a2d      	cmp	r2, #45	; 0x2d
 800852c:	d1c7      	bne.n	80084be <_strtod_l+0x46>
 800852e:	2201      	movs	r2, #1
 8008530:	920a      	str	r2, [sp, #40]	; 0x28
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	9217      	str	r2, [sp, #92]	; 0x5c
 8008536:	785b      	ldrb	r3, [r3, #1]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1c2      	bne.n	80084c2 <_strtod_l+0x4a>
 800853c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800853e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008542:	2b00      	cmp	r3, #0
 8008544:	f040 856e 	bne.w	8009024 <_strtod_l+0xbac>
 8008548:	4652      	mov	r2, sl
 800854a:	465b      	mov	r3, fp
 800854c:	e7e1      	b.n	8008512 <_strtod_l+0x9a>
 800854e:	2200      	movs	r2, #0
 8008550:	e7ee      	b.n	8008530 <_strtod_l+0xb8>
 8008552:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008554:	b13a      	cbz	r2, 8008566 <_strtod_l+0xee>
 8008556:	2135      	movs	r1, #53	; 0x35
 8008558:	a81a      	add	r0, sp, #104	; 0x68
 800855a:	f002 fff6 	bl	800b54a <__copybits>
 800855e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008560:	4620      	mov	r0, r4
 8008562:	f002 fbb5 	bl	800acd0 <_Bfree>
 8008566:	3f01      	subs	r7, #1
 8008568:	2f04      	cmp	r7, #4
 800856a:	d806      	bhi.n	800857a <_strtod_l+0x102>
 800856c:	e8df f007 	tbb	[pc, r7]
 8008570:	1714030a 	.word	0x1714030a
 8008574:	0a          	.byte	0x0a
 8008575:	00          	.byte	0x00
 8008576:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800857a:	0728      	lsls	r0, r5, #28
 800857c:	d5c0      	bpl.n	8008500 <_strtod_l+0x88>
 800857e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008582:	e7bd      	b.n	8008500 <_strtod_l+0x88>
 8008584:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008588:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800858a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800858e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008592:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008596:	e7f0      	b.n	800857a <_strtod_l+0x102>
 8008598:	f8df b180 	ldr.w	fp, [pc, #384]	; 800871c <_strtod_l+0x2a4>
 800859c:	e7ed      	b.n	800857a <_strtod_l+0x102>
 800859e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80085a2:	f04f 3aff 	mov.w	sl, #4294967295
 80085a6:	e7e8      	b.n	800857a <_strtod_l+0x102>
 80085a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	2b30      	cmp	r3, #48	; 0x30
 80085b2:	d0f9      	beq.n	80085a8 <_strtod_l+0x130>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0a3      	beq.n	8008500 <_strtod_l+0x88>
 80085b8:	2301      	movs	r3, #1
 80085ba:	f04f 0900 	mov.w	r9, #0
 80085be:	9304      	str	r3, [sp, #16]
 80085c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085c2:	9308      	str	r3, [sp, #32]
 80085c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80085c8:	464f      	mov	r7, r9
 80085ca:	220a      	movs	r2, #10
 80085cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80085ce:	7806      	ldrb	r6, [r0, #0]
 80085d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80085d4:	b2d9      	uxtb	r1, r3
 80085d6:	2909      	cmp	r1, #9
 80085d8:	d92a      	bls.n	8008630 <_strtod_l+0x1b8>
 80085da:	9905      	ldr	r1, [sp, #20]
 80085dc:	462a      	mov	r2, r5
 80085de:	f004 f98f 	bl	800c900 <strncmp>
 80085e2:	b398      	cbz	r0, 800864c <_strtod_l+0x1d4>
 80085e4:	2000      	movs	r0, #0
 80085e6:	4632      	mov	r2, r6
 80085e8:	463d      	mov	r5, r7
 80085ea:	9005      	str	r0, [sp, #20]
 80085ec:	4603      	mov	r3, r0
 80085ee:	2a65      	cmp	r2, #101	; 0x65
 80085f0:	d001      	beq.n	80085f6 <_strtod_l+0x17e>
 80085f2:	2a45      	cmp	r2, #69	; 0x45
 80085f4:	d118      	bne.n	8008628 <_strtod_l+0x1b0>
 80085f6:	b91d      	cbnz	r5, 8008600 <_strtod_l+0x188>
 80085f8:	9a04      	ldr	r2, [sp, #16]
 80085fa:	4302      	orrs	r2, r0
 80085fc:	d09e      	beq.n	800853c <_strtod_l+0xc4>
 80085fe:	2500      	movs	r5, #0
 8008600:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008604:	f108 0201 	add.w	r2, r8, #1
 8008608:	9217      	str	r2, [sp, #92]	; 0x5c
 800860a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800860e:	2a2b      	cmp	r2, #43	; 0x2b
 8008610:	d075      	beq.n	80086fe <_strtod_l+0x286>
 8008612:	2a2d      	cmp	r2, #45	; 0x2d
 8008614:	d07b      	beq.n	800870e <_strtod_l+0x296>
 8008616:	f04f 0c00 	mov.w	ip, #0
 800861a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800861e:	2909      	cmp	r1, #9
 8008620:	f240 8082 	bls.w	8008728 <_strtod_l+0x2b0>
 8008624:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008628:	2600      	movs	r6, #0
 800862a:	e09d      	b.n	8008768 <_strtod_l+0x2f0>
 800862c:	2300      	movs	r3, #0
 800862e:	e7c4      	b.n	80085ba <_strtod_l+0x142>
 8008630:	2f08      	cmp	r7, #8
 8008632:	bfd8      	it	le
 8008634:	9907      	ldrle	r1, [sp, #28]
 8008636:	f100 0001 	add.w	r0, r0, #1
 800863a:	bfda      	itte	le
 800863c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008640:	9307      	strle	r3, [sp, #28]
 8008642:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008646:	3701      	adds	r7, #1
 8008648:	9017      	str	r0, [sp, #92]	; 0x5c
 800864a:	e7bf      	b.n	80085cc <_strtod_l+0x154>
 800864c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800864e:	195a      	adds	r2, r3, r5
 8008650:	9217      	str	r2, [sp, #92]	; 0x5c
 8008652:	5d5a      	ldrb	r2, [r3, r5]
 8008654:	2f00      	cmp	r7, #0
 8008656:	d037      	beq.n	80086c8 <_strtod_l+0x250>
 8008658:	9005      	str	r0, [sp, #20]
 800865a:	463d      	mov	r5, r7
 800865c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008660:	2b09      	cmp	r3, #9
 8008662:	d912      	bls.n	800868a <_strtod_l+0x212>
 8008664:	2301      	movs	r3, #1
 8008666:	e7c2      	b.n	80085ee <_strtod_l+0x176>
 8008668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	9217      	str	r2, [sp, #92]	; 0x5c
 800866e:	785a      	ldrb	r2, [r3, #1]
 8008670:	3001      	adds	r0, #1
 8008672:	2a30      	cmp	r2, #48	; 0x30
 8008674:	d0f8      	beq.n	8008668 <_strtod_l+0x1f0>
 8008676:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800867a:	2b08      	cmp	r3, #8
 800867c:	f200 84d9 	bhi.w	8009032 <_strtod_l+0xbba>
 8008680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008682:	9005      	str	r0, [sp, #20]
 8008684:	2000      	movs	r0, #0
 8008686:	9308      	str	r3, [sp, #32]
 8008688:	4605      	mov	r5, r0
 800868a:	3a30      	subs	r2, #48	; 0x30
 800868c:	f100 0301 	add.w	r3, r0, #1
 8008690:	d014      	beq.n	80086bc <_strtod_l+0x244>
 8008692:	9905      	ldr	r1, [sp, #20]
 8008694:	4419      	add	r1, r3
 8008696:	9105      	str	r1, [sp, #20]
 8008698:	462b      	mov	r3, r5
 800869a:	eb00 0e05 	add.w	lr, r0, r5
 800869e:	210a      	movs	r1, #10
 80086a0:	4573      	cmp	r3, lr
 80086a2:	d113      	bne.n	80086cc <_strtod_l+0x254>
 80086a4:	182b      	adds	r3, r5, r0
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	f105 0501 	add.w	r5, r5, #1
 80086ac:	4405      	add	r5, r0
 80086ae:	dc1c      	bgt.n	80086ea <_strtod_l+0x272>
 80086b0:	9907      	ldr	r1, [sp, #28]
 80086b2:	230a      	movs	r3, #10
 80086b4:	fb03 2301 	mla	r3, r3, r1, r2
 80086b8:	9307      	str	r3, [sp, #28]
 80086ba:	2300      	movs	r3, #0
 80086bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086be:	1c51      	adds	r1, r2, #1
 80086c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80086c2:	7852      	ldrb	r2, [r2, #1]
 80086c4:	4618      	mov	r0, r3
 80086c6:	e7c9      	b.n	800865c <_strtod_l+0x1e4>
 80086c8:	4638      	mov	r0, r7
 80086ca:	e7d2      	b.n	8008672 <_strtod_l+0x1fa>
 80086cc:	2b08      	cmp	r3, #8
 80086ce:	dc04      	bgt.n	80086da <_strtod_l+0x262>
 80086d0:	9e07      	ldr	r6, [sp, #28]
 80086d2:	434e      	muls	r6, r1
 80086d4:	9607      	str	r6, [sp, #28]
 80086d6:	3301      	adds	r3, #1
 80086d8:	e7e2      	b.n	80086a0 <_strtod_l+0x228>
 80086da:	f103 0c01 	add.w	ip, r3, #1
 80086de:	f1bc 0f10 	cmp.w	ip, #16
 80086e2:	bfd8      	it	le
 80086e4:	fb01 f909 	mulle.w	r9, r1, r9
 80086e8:	e7f5      	b.n	80086d6 <_strtod_l+0x25e>
 80086ea:	2d10      	cmp	r5, #16
 80086ec:	bfdc      	itt	le
 80086ee:	230a      	movle	r3, #10
 80086f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80086f4:	e7e1      	b.n	80086ba <_strtod_l+0x242>
 80086f6:	2300      	movs	r3, #0
 80086f8:	9305      	str	r3, [sp, #20]
 80086fa:	2301      	movs	r3, #1
 80086fc:	e77c      	b.n	80085f8 <_strtod_l+0x180>
 80086fe:	f04f 0c00 	mov.w	ip, #0
 8008702:	f108 0202 	add.w	r2, r8, #2
 8008706:	9217      	str	r2, [sp, #92]	; 0x5c
 8008708:	f898 2002 	ldrb.w	r2, [r8, #2]
 800870c:	e785      	b.n	800861a <_strtod_l+0x1a2>
 800870e:	f04f 0c01 	mov.w	ip, #1
 8008712:	e7f6      	b.n	8008702 <_strtod_l+0x28a>
 8008714:	0800d3f4 	.word	0x0800d3f4
 8008718:	0800d144 	.word	0x0800d144
 800871c:	7ff00000 	.word	0x7ff00000
 8008720:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008722:	1c51      	adds	r1, r2, #1
 8008724:	9117      	str	r1, [sp, #92]	; 0x5c
 8008726:	7852      	ldrb	r2, [r2, #1]
 8008728:	2a30      	cmp	r2, #48	; 0x30
 800872a:	d0f9      	beq.n	8008720 <_strtod_l+0x2a8>
 800872c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008730:	2908      	cmp	r1, #8
 8008732:	f63f af79 	bhi.w	8008628 <_strtod_l+0x1b0>
 8008736:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800873a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800873c:	9206      	str	r2, [sp, #24]
 800873e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008740:	1c51      	adds	r1, r2, #1
 8008742:	9117      	str	r1, [sp, #92]	; 0x5c
 8008744:	7852      	ldrb	r2, [r2, #1]
 8008746:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800874a:	2e09      	cmp	r6, #9
 800874c:	d937      	bls.n	80087be <_strtod_l+0x346>
 800874e:	9e06      	ldr	r6, [sp, #24]
 8008750:	1b89      	subs	r1, r1, r6
 8008752:	2908      	cmp	r1, #8
 8008754:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008758:	dc02      	bgt.n	8008760 <_strtod_l+0x2e8>
 800875a:	4576      	cmp	r6, lr
 800875c:	bfa8      	it	ge
 800875e:	4676      	movge	r6, lr
 8008760:	f1bc 0f00 	cmp.w	ip, #0
 8008764:	d000      	beq.n	8008768 <_strtod_l+0x2f0>
 8008766:	4276      	negs	r6, r6
 8008768:	2d00      	cmp	r5, #0
 800876a:	d14d      	bne.n	8008808 <_strtod_l+0x390>
 800876c:	9904      	ldr	r1, [sp, #16]
 800876e:	4301      	orrs	r1, r0
 8008770:	f47f aec6 	bne.w	8008500 <_strtod_l+0x88>
 8008774:	2b00      	cmp	r3, #0
 8008776:	f47f aee1 	bne.w	800853c <_strtod_l+0xc4>
 800877a:	2a69      	cmp	r2, #105	; 0x69
 800877c:	d027      	beq.n	80087ce <_strtod_l+0x356>
 800877e:	dc24      	bgt.n	80087ca <_strtod_l+0x352>
 8008780:	2a49      	cmp	r2, #73	; 0x49
 8008782:	d024      	beq.n	80087ce <_strtod_l+0x356>
 8008784:	2a4e      	cmp	r2, #78	; 0x4e
 8008786:	f47f aed9 	bne.w	800853c <_strtod_l+0xc4>
 800878a:	499f      	ldr	r1, [pc, #636]	; (8008a08 <_strtod_l+0x590>)
 800878c:	a817      	add	r0, sp, #92	; 0x5c
 800878e:	f002 f907 	bl	800a9a0 <__match>
 8008792:	2800      	cmp	r0, #0
 8008794:	f43f aed2 	beq.w	800853c <_strtod_l+0xc4>
 8008798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b28      	cmp	r3, #40	; 0x28
 800879e:	d12d      	bne.n	80087fc <_strtod_l+0x384>
 80087a0:	499a      	ldr	r1, [pc, #616]	; (8008a0c <_strtod_l+0x594>)
 80087a2:	aa1a      	add	r2, sp, #104	; 0x68
 80087a4:	a817      	add	r0, sp, #92	; 0x5c
 80087a6:	f002 f90f 	bl	800a9c8 <__hexnan>
 80087aa:	2805      	cmp	r0, #5
 80087ac:	d126      	bne.n	80087fc <_strtod_l+0x384>
 80087ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80087b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80087b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80087bc:	e6a0      	b.n	8008500 <_strtod_l+0x88>
 80087be:	210a      	movs	r1, #10
 80087c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80087c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80087c8:	e7b9      	b.n	800873e <_strtod_l+0x2c6>
 80087ca:	2a6e      	cmp	r2, #110	; 0x6e
 80087cc:	e7db      	b.n	8008786 <_strtod_l+0x30e>
 80087ce:	4990      	ldr	r1, [pc, #576]	; (8008a10 <_strtod_l+0x598>)
 80087d0:	a817      	add	r0, sp, #92	; 0x5c
 80087d2:	f002 f8e5 	bl	800a9a0 <__match>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f43f aeb0 	beq.w	800853c <_strtod_l+0xc4>
 80087dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087de:	498d      	ldr	r1, [pc, #564]	; (8008a14 <_strtod_l+0x59c>)
 80087e0:	3b01      	subs	r3, #1
 80087e2:	a817      	add	r0, sp, #92	; 0x5c
 80087e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80087e6:	f002 f8db 	bl	800a9a0 <__match>
 80087ea:	b910      	cbnz	r0, 80087f2 <_strtod_l+0x37a>
 80087ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087ee:	3301      	adds	r3, #1
 80087f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80087f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008a24 <_strtod_l+0x5ac>
 80087f6:	f04f 0a00 	mov.w	sl, #0
 80087fa:	e681      	b.n	8008500 <_strtod_l+0x88>
 80087fc:	4886      	ldr	r0, [pc, #536]	; (8008a18 <_strtod_l+0x5a0>)
 80087fe:	f004 f82f 	bl	800c860 <nan>
 8008802:	ec5b ab10 	vmov	sl, fp, d0
 8008806:	e67b      	b.n	8008500 <_strtod_l+0x88>
 8008808:	9b05      	ldr	r3, [sp, #20]
 800880a:	9807      	ldr	r0, [sp, #28]
 800880c:	1af3      	subs	r3, r6, r3
 800880e:	2f00      	cmp	r7, #0
 8008810:	bf08      	it	eq
 8008812:	462f      	moveq	r7, r5
 8008814:	2d10      	cmp	r5, #16
 8008816:	9306      	str	r3, [sp, #24]
 8008818:	46a8      	mov	r8, r5
 800881a:	bfa8      	it	ge
 800881c:	f04f 0810 	movge.w	r8, #16
 8008820:	f7f7 fe90 	bl	8000544 <__aeabi_ui2d>
 8008824:	2d09      	cmp	r5, #9
 8008826:	4682      	mov	sl, r0
 8008828:	468b      	mov	fp, r1
 800882a:	dd13      	ble.n	8008854 <_strtod_l+0x3dc>
 800882c:	4b7b      	ldr	r3, [pc, #492]	; (8008a1c <_strtod_l+0x5a4>)
 800882e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008832:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008836:	f7f7 feff 	bl	8000638 <__aeabi_dmul>
 800883a:	4682      	mov	sl, r0
 800883c:	4648      	mov	r0, r9
 800883e:	468b      	mov	fp, r1
 8008840:	f7f7 fe80 	bl	8000544 <__aeabi_ui2d>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	4650      	mov	r0, sl
 800884a:	4659      	mov	r1, fp
 800884c:	f7f7 fd3e 	bl	80002cc <__adddf3>
 8008850:	4682      	mov	sl, r0
 8008852:	468b      	mov	fp, r1
 8008854:	2d0f      	cmp	r5, #15
 8008856:	dc38      	bgt.n	80088ca <_strtod_l+0x452>
 8008858:	9b06      	ldr	r3, [sp, #24]
 800885a:	2b00      	cmp	r3, #0
 800885c:	f43f ae50 	beq.w	8008500 <_strtod_l+0x88>
 8008860:	dd24      	ble.n	80088ac <_strtod_l+0x434>
 8008862:	2b16      	cmp	r3, #22
 8008864:	dc0b      	bgt.n	800887e <_strtod_l+0x406>
 8008866:	496d      	ldr	r1, [pc, #436]	; (8008a1c <_strtod_l+0x5a4>)
 8008868:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800886c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008870:	4652      	mov	r2, sl
 8008872:	465b      	mov	r3, fp
 8008874:	f7f7 fee0 	bl	8000638 <__aeabi_dmul>
 8008878:	4682      	mov	sl, r0
 800887a:	468b      	mov	fp, r1
 800887c:	e640      	b.n	8008500 <_strtod_l+0x88>
 800887e:	9a06      	ldr	r2, [sp, #24]
 8008880:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008884:	4293      	cmp	r3, r2
 8008886:	db20      	blt.n	80088ca <_strtod_l+0x452>
 8008888:	4c64      	ldr	r4, [pc, #400]	; (8008a1c <_strtod_l+0x5a4>)
 800888a:	f1c5 050f 	rsb	r5, r5, #15
 800888e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008892:	4652      	mov	r2, sl
 8008894:	465b      	mov	r3, fp
 8008896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800889a:	f7f7 fecd 	bl	8000638 <__aeabi_dmul>
 800889e:	9b06      	ldr	r3, [sp, #24]
 80088a0:	1b5d      	subs	r5, r3, r5
 80088a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80088a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80088aa:	e7e3      	b.n	8008874 <_strtod_l+0x3fc>
 80088ac:	9b06      	ldr	r3, [sp, #24]
 80088ae:	3316      	adds	r3, #22
 80088b0:	db0b      	blt.n	80088ca <_strtod_l+0x452>
 80088b2:	9b05      	ldr	r3, [sp, #20]
 80088b4:	1b9e      	subs	r6, r3, r6
 80088b6:	4b59      	ldr	r3, [pc, #356]	; (8008a1c <_strtod_l+0x5a4>)
 80088b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80088bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088c0:	4650      	mov	r0, sl
 80088c2:	4659      	mov	r1, fp
 80088c4:	f7f7 ffe2 	bl	800088c <__aeabi_ddiv>
 80088c8:	e7d6      	b.n	8008878 <_strtod_l+0x400>
 80088ca:	9b06      	ldr	r3, [sp, #24]
 80088cc:	eba5 0808 	sub.w	r8, r5, r8
 80088d0:	4498      	add	r8, r3
 80088d2:	f1b8 0f00 	cmp.w	r8, #0
 80088d6:	dd74      	ble.n	80089c2 <_strtod_l+0x54a>
 80088d8:	f018 030f 	ands.w	r3, r8, #15
 80088dc:	d00a      	beq.n	80088f4 <_strtod_l+0x47c>
 80088de:	494f      	ldr	r1, [pc, #316]	; (8008a1c <_strtod_l+0x5a4>)
 80088e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80088e4:	4652      	mov	r2, sl
 80088e6:	465b      	mov	r3, fp
 80088e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ec:	f7f7 fea4 	bl	8000638 <__aeabi_dmul>
 80088f0:	4682      	mov	sl, r0
 80088f2:	468b      	mov	fp, r1
 80088f4:	f038 080f 	bics.w	r8, r8, #15
 80088f8:	d04f      	beq.n	800899a <_strtod_l+0x522>
 80088fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80088fe:	dd22      	ble.n	8008946 <_strtod_l+0x4ce>
 8008900:	2500      	movs	r5, #0
 8008902:	462e      	mov	r6, r5
 8008904:	9507      	str	r5, [sp, #28]
 8008906:	9505      	str	r5, [sp, #20]
 8008908:	2322      	movs	r3, #34	; 0x22
 800890a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008a24 <_strtod_l+0x5ac>
 800890e:	6023      	str	r3, [r4, #0]
 8008910:	f04f 0a00 	mov.w	sl, #0
 8008914:	9b07      	ldr	r3, [sp, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	f43f adf2 	beq.w	8008500 <_strtod_l+0x88>
 800891c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800891e:	4620      	mov	r0, r4
 8008920:	f002 f9d6 	bl	800acd0 <_Bfree>
 8008924:	9905      	ldr	r1, [sp, #20]
 8008926:	4620      	mov	r0, r4
 8008928:	f002 f9d2 	bl	800acd0 <_Bfree>
 800892c:	4631      	mov	r1, r6
 800892e:	4620      	mov	r0, r4
 8008930:	f002 f9ce 	bl	800acd0 <_Bfree>
 8008934:	9907      	ldr	r1, [sp, #28]
 8008936:	4620      	mov	r0, r4
 8008938:	f002 f9ca 	bl	800acd0 <_Bfree>
 800893c:	4629      	mov	r1, r5
 800893e:	4620      	mov	r0, r4
 8008940:	f002 f9c6 	bl	800acd0 <_Bfree>
 8008944:	e5dc      	b.n	8008500 <_strtod_l+0x88>
 8008946:	4b36      	ldr	r3, [pc, #216]	; (8008a20 <_strtod_l+0x5a8>)
 8008948:	9304      	str	r3, [sp, #16]
 800894a:	2300      	movs	r3, #0
 800894c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008950:	4650      	mov	r0, sl
 8008952:	4659      	mov	r1, fp
 8008954:	4699      	mov	r9, r3
 8008956:	f1b8 0f01 	cmp.w	r8, #1
 800895a:	dc21      	bgt.n	80089a0 <_strtod_l+0x528>
 800895c:	b10b      	cbz	r3, 8008962 <_strtod_l+0x4ea>
 800895e:	4682      	mov	sl, r0
 8008960:	468b      	mov	fp, r1
 8008962:	4b2f      	ldr	r3, [pc, #188]	; (8008a20 <_strtod_l+0x5a8>)
 8008964:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008968:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800896c:	4652      	mov	r2, sl
 800896e:	465b      	mov	r3, fp
 8008970:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008974:	f7f7 fe60 	bl	8000638 <__aeabi_dmul>
 8008978:	4b2a      	ldr	r3, [pc, #168]	; (8008a24 <_strtod_l+0x5ac>)
 800897a:	460a      	mov	r2, r1
 800897c:	400b      	ands	r3, r1
 800897e:	492a      	ldr	r1, [pc, #168]	; (8008a28 <_strtod_l+0x5b0>)
 8008980:	428b      	cmp	r3, r1
 8008982:	4682      	mov	sl, r0
 8008984:	d8bc      	bhi.n	8008900 <_strtod_l+0x488>
 8008986:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800898a:	428b      	cmp	r3, r1
 800898c:	bf86      	itte	hi
 800898e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008a2c <_strtod_l+0x5b4>
 8008992:	f04f 3aff 	movhi.w	sl, #4294967295
 8008996:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800899a:	2300      	movs	r3, #0
 800899c:	9304      	str	r3, [sp, #16]
 800899e:	e084      	b.n	8008aaa <_strtod_l+0x632>
 80089a0:	f018 0f01 	tst.w	r8, #1
 80089a4:	d005      	beq.n	80089b2 <_strtod_l+0x53a>
 80089a6:	9b04      	ldr	r3, [sp, #16]
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	f7f7 fe44 	bl	8000638 <__aeabi_dmul>
 80089b0:	2301      	movs	r3, #1
 80089b2:	9a04      	ldr	r2, [sp, #16]
 80089b4:	3208      	adds	r2, #8
 80089b6:	f109 0901 	add.w	r9, r9, #1
 80089ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80089be:	9204      	str	r2, [sp, #16]
 80089c0:	e7c9      	b.n	8008956 <_strtod_l+0x4de>
 80089c2:	d0ea      	beq.n	800899a <_strtod_l+0x522>
 80089c4:	f1c8 0800 	rsb	r8, r8, #0
 80089c8:	f018 020f 	ands.w	r2, r8, #15
 80089cc:	d00a      	beq.n	80089e4 <_strtod_l+0x56c>
 80089ce:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <_strtod_l+0x5a4>)
 80089d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089d4:	4650      	mov	r0, sl
 80089d6:	4659      	mov	r1, fp
 80089d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089dc:	f7f7 ff56 	bl	800088c <__aeabi_ddiv>
 80089e0:	4682      	mov	sl, r0
 80089e2:	468b      	mov	fp, r1
 80089e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80089e8:	d0d7      	beq.n	800899a <_strtod_l+0x522>
 80089ea:	f1b8 0f1f 	cmp.w	r8, #31
 80089ee:	dd1f      	ble.n	8008a30 <_strtod_l+0x5b8>
 80089f0:	2500      	movs	r5, #0
 80089f2:	462e      	mov	r6, r5
 80089f4:	9507      	str	r5, [sp, #28]
 80089f6:	9505      	str	r5, [sp, #20]
 80089f8:	2322      	movs	r3, #34	; 0x22
 80089fa:	f04f 0a00 	mov.w	sl, #0
 80089fe:	f04f 0b00 	mov.w	fp, #0
 8008a02:	6023      	str	r3, [r4, #0]
 8008a04:	e786      	b.n	8008914 <_strtod_l+0x49c>
 8008a06:	bf00      	nop
 8008a08:	0800d119 	.word	0x0800d119
 8008a0c:	0800d158 	.word	0x0800d158
 8008a10:	0800d111 	.word	0x0800d111
 8008a14:	0800d29c 	.word	0x0800d29c
 8008a18:	0800d5cb 	.word	0x0800d5cb
 8008a1c:	0800d490 	.word	0x0800d490
 8008a20:	0800d468 	.word	0x0800d468
 8008a24:	7ff00000 	.word	0x7ff00000
 8008a28:	7ca00000 	.word	0x7ca00000
 8008a2c:	7fefffff 	.word	0x7fefffff
 8008a30:	f018 0310 	ands.w	r3, r8, #16
 8008a34:	bf18      	it	ne
 8008a36:	236a      	movne	r3, #106	; 0x6a
 8008a38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008de8 <_strtod_l+0x970>
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	4650      	mov	r0, sl
 8008a40:	4659      	mov	r1, fp
 8008a42:	2300      	movs	r3, #0
 8008a44:	f018 0f01 	tst.w	r8, #1
 8008a48:	d004      	beq.n	8008a54 <_strtod_l+0x5dc>
 8008a4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008a4e:	f7f7 fdf3 	bl	8000638 <__aeabi_dmul>
 8008a52:	2301      	movs	r3, #1
 8008a54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008a58:	f109 0908 	add.w	r9, r9, #8
 8008a5c:	d1f2      	bne.n	8008a44 <_strtod_l+0x5cc>
 8008a5e:	b10b      	cbz	r3, 8008a64 <_strtod_l+0x5ec>
 8008a60:	4682      	mov	sl, r0
 8008a62:	468b      	mov	fp, r1
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	b1c3      	cbz	r3, 8008a9a <_strtod_l+0x622>
 8008a68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008a6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	4659      	mov	r1, fp
 8008a74:	dd11      	ble.n	8008a9a <_strtod_l+0x622>
 8008a76:	2b1f      	cmp	r3, #31
 8008a78:	f340 8124 	ble.w	8008cc4 <_strtod_l+0x84c>
 8008a7c:	2b34      	cmp	r3, #52	; 0x34
 8008a7e:	bfde      	ittt	le
 8008a80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008a84:	f04f 33ff 	movle.w	r3, #4294967295
 8008a88:	fa03 f202 	lslle.w	r2, r3, r2
 8008a8c:	f04f 0a00 	mov.w	sl, #0
 8008a90:	bfcc      	ite	gt
 8008a92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008a96:	ea02 0b01 	andle.w	fp, r2, r1
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4650      	mov	r0, sl
 8008aa0:	4659      	mov	r1, fp
 8008aa2:	f7f8 f831 	bl	8000b08 <__aeabi_dcmpeq>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d1a2      	bne.n	80089f0 <_strtod_l+0x578>
 8008aaa:	9b07      	ldr	r3, [sp, #28]
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	9908      	ldr	r1, [sp, #32]
 8008ab0:	462b      	mov	r3, r5
 8008ab2:	463a      	mov	r2, r7
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f002 f973 	bl	800ada0 <__s2b>
 8008aba:	9007      	str	r0, [sp, #28]
 8008abc:	2800      	cmp	r0, #0
 8008abe:	f43f af1f 	beq.w	8008900 <_strtod_l+0x488>
 8008ac2:	9b05      	ldr	r3, [sp, #20]
 8008ac4:	1b9e      	subs	r6, r3, r6
 8008ac6:	9b06      	ldr	r3, [sp, #24]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	bfb4      	ite	lt
 8008acc:	4633      	movlt	r3, r6
 8008ace:	2300      	movge	r3, #0
 8008ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8008ad2:	9b06      	ldr	r3, [sp, #24]
 8008ad4:	2500      	movs	r5, #0
 8008ad6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008ada:	9312      	str	r3, [sp, #72]	; 0x48
 8008adc:	462e      	mov	r6, r5
 8008ade:	9b07      	ldr	r3, [sp, #28]
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	6859      	ldr	r1, [r3, #4]
 8008ae4:	f002 f8b4 	bl	800ac50 <_Balloc>
 8008ae8:	9005      	str	r0, [sp, #20]
 8008aea:	2800      	cmp	r0, #0
 8008aec:	f43f af0c 	beq.w	8008908 <_strtod_l+0x490>
 8008af0:	9b07      	ldr	r3, [sp, #28]
 8008af2:	691a      	ldr	r2, [r3, #16]
 8008af4:	3202      	adds	r2, #2
 8008af6:	f103 010c 	add.w	r1, r3, #12
 8008afa:	0092      	lsls	r2, r2, #2
 8008afc:	300c      	adds	r0, #12
 8008afe:	f002 f899 	bl	800ac34 <memcpy>
 8008b02:	ec4b ab10 	vmov	d0, sl, fp
 8008b06:	aa1a      	add	r2, sp, #104	; 0x68
 8008b08:	a919      	add	r1, sp, #100	; 0x64
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f002 fc8e 	bl	800b42c <__d2b>
 8008b10:	ec4b ab18 	vmov	d8, sl, fp
 8008b14:	9018      	str	r0, [sp, #96]	; 0x60
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f43f aef6 	beq.w	8008908 <_strtod_l+0x490>
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f002 f9d8 	bl	800aed4 <__i2b>
 8008b24:	4606      	mov	r6, r0
 8008b26:	2800      	cmp	r0, #0
 8008b28:	f43f aeee 	beq.w	8008908 <_strtod_l+0x490>
 8008b2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b2e:	9904      	ldr	r1, [sp, #16]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	bfab      	itete	ge
 8008b34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008b36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008b38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008b3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008b3e:	bfac      	ite	ge
 8008b40:	eb03 0902 	addge.w	r9, r3, r2
 8008b44:	1ad7      	sublt	r7, r2, r3
 8008b46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008b48:	eba3 0801 	sub.w	r8, r3, r1
 8008b4c:	4490      	add	r8, r2
 8008b4e:	4ba1      	ldr	r3, [pc, #644]	; (8008dd4 <_strtod_l+0x95c>)
 8008b50:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b54:	4598      	cmp	r8, r3
 8008b56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008b5a:	f280 80c7 	bge.w	8008cec <_strtod_l+0x874>
 8008b5e:	eba3 0308 	sub.w	r3, r3, r8
 8008b62:	2b1f      	cmp	r3, #31
 8008b64:	eba2 0203 	sub.w	r2, r2, r3
 8008b68:	f04f 0101 	mov.w	r1, #1
 8008b6c:	f300 80b1 	bgt.w	8008cd2 <_strtod_l+0x85a>
 8008b70:	fa01 f303 	lsl.w	r3, r1, r3
 8008b74:	930d      	str	r3, [sp, #52]	; 0x34
 8008b76:	2300      	movs	r3, #0
 8008b78:	9308      	str	r3, [sp, #32]
 8008b7a:	eb09 0802 	add.w	r8, r9, r2
 8008b7e:	9b04      	ldr	r3, [sp, #16]
 8008b80:	45c1      	cmp	r9, r8
 8008b82:	4417      	add	r7, r2
 8008b84:	441f      	add	r7, r3
 8008b86:	464b      	mov	r3, r9
 8008b88:	bfa8      	it	ge
 8008b8a:	4643      	movge	r3, r8
 8008b8c:	42bb      	cmp	r3, r7
 8008b8e:	bfa8      	it	ge
 8008b90:	463b      	movge	r3, r7
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	bfc2      	ittt	gt
 8008b96:	eba8 0803 	subgt.w	r8, r8, r3
 8008b9a:	1aff      	subgt	r7, r7, r3
 8008b9c:	eba9 0903 	subgt.w	r9, r9, r3
 8008ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dd17      	ble.n	8008bd6 <_strtod_l+0x75e>
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	461a      	mov	r2, r3
 8008baa:	4620      	mov	r0, r4
 8008bac:	f002 fa52 	bl	800b054 <__pow5mult>
 8008bb0:	4606      	mov	r6, r0
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	f43f aea8 	beq.w	8008908 <_strtod_l+0x490>
 8008bb8:	4601      	mov	r1, r0
 8008bba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f002 f99f 	bl	800af00 <__multiply>
 8008bc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	f43f ae9f 	beq.w	8008908 <_strtod_l+0x490>
 8008bca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f002 f87f 	bl	800acd0 <_Bfree>
 8008bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd4:	9318      	str	r3, [sp, #96]	; 0x60
 8008bd6:	f1b8 0f00 	cmp.w	r8, #0
 8008bda:	f300 808c 	bgt.w	8008cf6 <_strtod_l+0x87e>
 8008bde:	9b06      	ldr	r3, [sp, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dd08      	ble.n	8008bf6 <_strtod_l+0x77e>
 8008be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008be6:	9905      	ldr	r1, [sp, #20]
 8008be8:	4620      	mov	r0, r4
 8008bea:	f002 fa33 	bl	800b054 <__pow5mult>
 8008bee:	9005      	str	r0, [sp, #20]
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f43f ae89 	beq.w	8008908 <_strtod_l+0x490>
 8008bf6:	2f00      	cmp	r7, #0
 8008bf8:	dd08      	ble.n	8008c0c <_strtod_l+0x794>
 8008bfa:	9905      	ldr	r1, [sp, #20]
 8008bfc:	463a      	mov	r2, r7
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f002 fa82 	bl	800b108 <__lshift>
 8008c04:	9005      	str	r0, [sp, #20]
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f43f ae7e 	beq.w	8008908 <_strtod_l+0x490>
 8008c0c:	f1b9 0f00 	cmp.w	r9, #0
 8008c10:	dd08      	ble.n	8008c24 <_strtod_l+0x7ac>
 8008c12:	4631      	mov	r1, r6
 8008c14:	464a      	mov	r2, r9
 8008c16:	4620      	mov	r0, r4
 8008c18:	f002 fa76 	bl	800b108 <__lshift>
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f43f ae72 	beq.w	8008908 <_strtod_l+0x490>
 8008c24:	9a05      	ldr	r2, [sp, #20]
 8008c26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f002 faf9 	bl	800b220 <__mdiff>
 8008c2e:	4605      	mov	r5, r0
 8008c30:	2800      	cmp	r0, #0
 8008c32:	f43f ae69 	beq.w	8008908 <_strtod_l+0x490>
 8008c36:	68c3      	ldr	r3, [r0, #12]
 8008c38:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60c3      	str	r3, [r0, #12]
 8008c3e:	4631      	mov	r1, r6
 8008c40:	f002 fad2 	bl	800b1e8 <__mcmp>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	da60      	bge.n	8008d0a <_strtod_l+0x892>
 8008c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c4a:	ea53 030a 	orrs.w	r3, r3, sl
 8008c4e:	f040 8082 	bne.w	8008d56 <_strtod_l+0x8de>
 8008c52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d17d      	bne.n	8008d56 <_strtod_l+0x8de>
 8008c5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c5e:	0d1b      	lsrs	r3, r3, #20
 8008c60:	051b      	lsls	r3, r3, #20
 8008c62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008c66:	d976      	bls.n	8008d56 <_strtod_l+0x8de>
 8008c68:	696b      	ldr	r3, [r5, #20]
 8008c6a:	b913      	cbnz	r3, 8008c72 <_strtod_l+0x7fa>
 8008c6c:	692b      	ldr	r3, [r5, #16]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	dd71      	ble.n	8008d56 <_strtod_l+0x8de>
 8008c72:	4629      	mov	r1, r5
 8008c74:	2201      	movs	r2, #1
 8008c76:	4620      	mov	r0, r4
 8008c78:	f002 fa46 	bl	800b108 <__lshift>
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	4605      	mov	r5, r0
 8008c80:	f002 fab2 	bl	800b1e8 <__mcmp>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	dd66      	ble.n	8008d56 <_strtod_l+0x8de>
 8008c88:	9904      	ldr	r1, [sp, #16]
 8008c8a:	4a53      	ldr	r2, [pc, #332]	; (8008dd8 <_strtod_l+0x960>)
 8008c8c:	465b      	mov	r3, fp
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	f000 8081 	beq.w	8008d96 <_strtod_l+0x91e>
 8008c94:	ea02 010b 	and.w	r1, r2, fp
 8008c98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c9c:	dc7b      	bgt.n	8008d96 <_strtod_l+0x91e>
 8008c9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008ca2:	f77f aea9 	ble.w	80089f8 <_strtod_l+0x580>
 8008ca6:	4b4d      	ldr	r3, [pc, #308]	; (8008ddc <_strtod_l+0x964>)
 8008ca8:	4650      	mov	r0, sl
 8008caa:	4659      	mov	r1, fp
 8008cac:	2200      	movs	r2, #0
 8008cae:	f7f7 fcc3 	bl	8000638 <__aeabi_dmul>
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4303      	orrs	r3, r0
 8008cb6:	bf08      	it	eq
 8008cb8:	2322      	moveq	r3, #34	; 0x22
 8008cba:	4682      	mov	sl, r0
 8008cbc:	468b      	mov	fp, r1
 8008cbe:	bf08      	it	eq
 8008cc0:	6023      	streq	r3, [r4, #0]
 8008cc2:	e62b      	b.n	800891c <_strtod_l+0x4a4>
 8008cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ccc:	ea03 0a0a 	and.w	sl, r3, sl
 8008cd0:	e6e3      	b.n	8008a9a <_strtod_l+0x622>
 8008cd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008cd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008cda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008cde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008ce2:	fa01 f308 	lsl.w	r3, r1, r8
 8008ce6:	9308      	str	r3, [sp, #32]
 8008ce8:	910d      	str	r1, [sp, #52]	; 0x34
 8008cea:	e746      	b.n	8008b7a <_strtod_l+0x702>
 8008cec:	2300      	movs	r3, #0
 8008cee:	9308      	str	r3, [sp, #32]
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8008cf4:	e741      	b.n	8008b7a <_strtod_l+0x702>
 8008cf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f002 fa04 	bl	800b108 <__lshift>
 8008d00:	9018      	str	r0, [sp, #96]	; 0x60
 8008d02:	2800      	cmp	r0, #0
 8008d04:	f47f af6b 	bne.w	8008bde <_strtod_l+0x766>
 8008d08:	e5fe      	b.n	8008908 <_strtod_l+0x490>
 8008d0a:	465f      	mov	r7, fp
 8008d0c:	d16e      	bne.n	8008dec <_strtod_l+0x974>
 8008d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d14:	b342      	cbz	r2, 8008d68 <_strtod_l+0x8f0>
 8008d16:	4a32      	ldr	r2, [pc, #200]	; (8008de0 <_strtod_l+0x968>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d128      	bne.n	8008d6e <_strtod_l+0x8f6>
 8008d1c:	9b04      	ldr	r3, [sp, #16]
 8008d1e:	4651      	mov	r1, sl
 8008d20:	b1eb      	cbz	r3, 8008d5e <_strtod_l+0x8e6>
 8008d22:	4b2d      	ldr	r3, [pc, #180]	; (8008dd8 <_strtod_l+0x960>)
 8008d24:	403b      	ands	r3, r7
 8008d26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2e:	d819      	bhi.n	8008d64 <_strtod_l+0x8ec>
 8008d30:	0d1b      	lsrs	r3, r3, #20
 8008d32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d36:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3a:	4299      	cmp	r1, r3
 8008d3c:	d117      	bne.n	8008d6e <_strtod_l+0x8f6>
 8008d3e:	4b29      	ldr	r3, [pc, #164]	; (8008de4 <_strtod_l+0x96c>)
 8008d40:	429f      	cmp	r7, r3
 8008d42:	d102      	bne.n	8008d4a <_strtod_l+0x8d2>
 8008d44:	3101      	adds	r1, #1
 8008d46:	f43f addf 	beq.w	8008908 <_strtod_l+0x490>
 8008d4a:	4b23      	ldr	r3, [pc, #140]	; (8008dd8 <_strtod_l+0x960>)
 8008d4c:	403b      	ands	r3, r7
 8008d4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008d52:	f04f 0a00 	mov.w	sl, #0
 8008d56:	9b04      	ldr	r3, [sp, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1a4      	bne.n	8008ca6 <_strtod_l+0x82e>
 8008d5c:	e5de      	b.n	800891c <_strtod_l+0x4a4>
 8008d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d62:	e7ea      	b.n	8008d3a <_strtod_l+0x8c2>
 8008d64:	4613      	mov	r3, r2
 8008d66:	e7e8      	b.n	8008d3a <_strtod_l+0x8c2>
 8008d68:	ea53 030a 	orrs.w	r3, r3, sl
 8008d6c:	d08c      	beq.n	8008c88 <_strtod_l+0x810>
 8008d6e:	9b08      	ldr	r3, [sp, #32]
 8008d70:	b1db      	cbz	r3, 8008daa <_strtod_l+0x932>
 8008d72:	423b      	tst	r3, r7
 8008d74:	d0ef      	beq.n	8008d56 <_strtod_l+0x8de>
 8008d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d78:	9a04      	ldr	r2, [sp, #16]
 8008d7a:	4650      	mov	r0, sl
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	b1c3      	cbz	r3, 8008db2 <_strtod_l+0x93a>
 8008d80:	f7ff fb5b 	bl	800843a <sulp>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	ec51 0b18 	vmov	r0, r1, d8
 8008d8c:	f7f7 fa9e 	bl	80002cc <__adddf3>
 8008d90:	4682      	mov	sl, r0
 8008d92:	468b      	mov	fp, r1
 8008d94:	e7df      	b.n	8008d56 <_strtod_l+0x8de>
 8008d96:	4013      	ands	r3, r2
 8008d98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008da0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008da4:	f04f 3aff 	mov.w	sl, #4294967295
 8008da8:	e7d5      	b.n	8008d56 <_strtod_l+0x8de>
 8008daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dac:	ea13 0f0a 	tst.w	r3, sl
 8008db0:	e7e0      	b.n	8008d74 <_strtod_l+0x8fc>
 8008db2:	f7ff fb42 	bl	800843a <sulp>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	ec51 0b18 	vmov	r0, r1, d8
 8008dbe:	f7f7 fa83 	bl	80002c8 <__aeabi_dsub>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4682      	mov	sl, r0
 8008dc8:	468b      	mov	fp, r1
 8008dca:	f7f7 fe9d 	bl	8000b08 <__aeabi_dcmpeq>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d0c1      	beq.n	8008d56 <_strtod_l+0x8de>
 8008dd2:	e611      	b.n	80089f8 <_strtod_l+0x580>
 8008dd4:	fffffc02 	.word	0xfffffc02
 8008dd8:	7ff00000 	.word	0x7ff00000
 8008ddc:	39500000 	.word	0x39500000
 8008de0:	000fffff 	.word	0x000fffff
 8008de4:	7fefffff 	.word	0x7fefffff
 8008de8:	0800d170 	.word	0x0800d170
 8008dec:	4631      	mov	r1, r6
 8008dee:	4628      	mov	r0, r5
 8008df0:	f002 fb78 	bl	800b4e4 <__ratio>
 8008df4:	ec59 8b10 	vmov	r8, r9, d0
 8008df8:	ee10 0a10 	vmov	r0, s0
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e02:	4649      	mov	r1, r9
 8008e04:	f7f7 fe94 	bl	8000b30 <__aeabi_dcmple>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d07a      	beq.n	8008f02 <_strtod_l+0xa8a>
 8008e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d04a      	beq.n	8008ea8 <_strtod_l+0xa30>
 8008e12:	4b95      	ldr	r3, [pc, #596]	; (8009068 <_strtod_l+0xbf0>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009068 <_strtod_l+0xbf0>
 8008e1e:	f04f 0800 	mov.w	r8, #0
 8008e22:	4b92      	ldr	r3, [pc, #584]	; (800906c <_strtod_l+0xbf4>)
 8008e24:	403b      	ands	r3, r7
 8008e26:	930d      	str	r3, [sp, #52]	; 0x34
 8008e28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e2a:	4b91      	ldr	r3, [pc, #580]	; (8009070 <_strtod_l+0xbf8>)
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	f040 80b0 	bne.w	8008f92 <_strtod_l+0xb1a>
 8008e32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008e3a:	ec4b ab10 	vmov	d0, sl, fp
 8008e3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008e42:	f002 fa77 	bl	800b334 <__ulp>
 8008e46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e4a:	ec53 2b10 	vmov	r2, r3, d0
 8008e4e:	f7f7 fbf3 	bl	8000638 <__aeabi_dmul>
 8008e52:	4652      	mov	r2, sl
 8008e54:	465b      	mov	r3, fp
 8008e56:	f7f7 fa39 	bl	80002cc <__adddf3>
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4983      	ldr	r1, [pc, #524]	; (800906c <_strtod_l+0xbf4>)
 8008e5e:	4a85      	ldr	r2, [pc, #532]	; (8009074 <_strtod_l+0xbfc>)
 8008e60:	4019      	ands	r1, r3
 8008e62:	4291      	cmp	r1, r2
 8008e64:	4682      	mov	sl, r0
 8008e66:	d960      	bls.n	8008f2a <_strtod_l+0xab2>
 8008e68:	ee18 3a90 	vmov	r3, s17
 8008e6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d104      	bne.n	8008e7e <_strtod_l+0xa06>
 8008e74:	ee18 3a10 	vmov	r3, s16
 8008e78:	3301      	adds	r3, #1
 8008e7a:	f43f ad45 	beq.w	8008908 <_strtod_l+0x490>
 8008e7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009080 <_strtod_l+0xc08>
 8008e82:	f04f 3aff 	mov.w	sl, #4294967295
 8008e86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f001 ff21 	bl	800acd0 <_Bfree>
 8008e8e:	9905      	ldr	r1, [sp, #20]
 8008e90:	4620      	mov	r0, r4
 8008e92:	f001 ff1d 	bl	800acd0 <_Bfree>
 8008e96:	4631      	mov	r1, r6
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f001 ff19 	bl	800acd0 <_Bfree>
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f001 ff15 	bl	800acd0 <_Bfree>
 8008ea6:	e61a      	b.n	8008ade <_strtod_l+0x666>
 8008ea8:	f1ba 0f00 	cmp.w	sl, #0
 8008eac:	d11b      	bne.n	8008ee6 <_strtod_l+0xa6e>
 8008eae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008eb2:	b9f3      	cbnz	r3, 8008ef2 <_strtod_l+0xa7a>
 8008eb4:	4b6c      	ldr	r3, [pc, #432]	; (8009068 <_strtod_l+0xbf0>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	4640      	mov	r0, r8
 8008eba:	4649      	mov	r1, r9
 8008ebc:	f7f7 fe2e 	bl	8000b1c <__aeabi_dcmplt>
 8008ec0:	b9d0      	cbnz	r0, 8008ef8 <_strtod_l+0xa80>
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	4b6c      	ldr	r3, [pc, #432]	; (8009078 <_strtod_l+0xc00>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f7f7 fbb5 	bl	8000638 <__aeabi_dmul>
 8008ece:	4680      	mov	r8, r0
 8008ed0:	4689      	mov	r9, r1
 8008ed2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ed6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008eda:	9315      	str	r3, [sp, #84]	; 0x54
 8008edc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008ee0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008ee4:	e79d      	b.n	8008e22 <_strtod_l+0x9aa>
 8008ee6:	f1ba 0f01 	cmp.w	sl, #1
 8008eea:	d102      	bne.n	8008ef2 <_strtod_l+0xa7a>
 8008eec:	2f00      	cmp	r7, #0
 8008eee:	f43f ad83 	beq.w	80089f8 <_strtod_l+0x580>
 8008ef2:	4b62      	ldr	r3, [pc, #392]	; (800907c <_strtod_l+0xc04>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	e78e      	b.n	8008e16 <_strtod_l+0x99e>
 8008ef8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009078 <_strtod_l+0xc00>
 8008efc:	f04f 0800 	mov.w	r8, #0
 8008f00:	e7e7      	b.n	8008ed2 <_strtod_l+0xa5a>
 8008f02:	4b5d      	ldr	r3, [pc, #372]	; (8009078 <_strtod_l+0xc00>)
 8008f04:	4640      	mov	r0, r8
 8008f06:	4649      	mov	r1, r9
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f7f7 fb95 	bl	8000638 <__aeabi_dmul>
 8008f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f10:	4680      	mov	r8, r0
 8008f12:	4689      	mov	r9, r1
 8008f14:	b933      	cbnz	r3, 8008f24 <_strtod_l+0xaac>
 8008f16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f1a:	900e      	str	r0, [sp, #56]	; 0x38
 8008f1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008f22:	e7dd      	b.n	8008ee0 <_strtod_l+0xa68>
 8008f24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008f28:	e7f9      	b.n	8008f1e <_strtod_l+0xaa6>
 8008f2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008f2e:	9b04      	ldr	r3, [sp, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1a8      	bne.n	8008e86 <_strtod_l+0xa0e>
 8008f34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f3a:	0d1b      	lsrs	r3, r3, #20
 8008f3c:	051b      	lsls	r3, r3, #20
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d1a1      	bne.n	8008e86 <_strtod_l+0xa0e>
 8008f42:	4640      	mov	r0, r8
 8008f44:	4649      	mov	r1, r9
 8008f46:	f7f7 fed7 	bl	8000cf8 <__aeabi_d2lz>
 8008f4a:	f7f7 fb47 	bl	80005dc <__aeabi_l2d>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 f9b7 	bl	80002c8 <__aeabi_dsub>
 8008f5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f60:	ea43 030a 	orr.w	r3, r3, sl
 8008f64:	4313      	orrs	r3, r2
 8008f66:	4680      	mov	r8, r0
 8008f68:	4689      	mov	r9, r1
 8008f6a:	d055      	beq.n	8009018 <_strtod_l+0xba0>
 8008f6c:	a336      	add	r3, pc, #216	; (adr r3, 8009048 <_strtod_l+0xbd0>)
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	f7f7 fdd3 	bl	8000b1c <__aeabi_dcmplt>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	f47f acd0 	bne.w	800891c <_strtod_l+0x4a4>
 8008f7c:	a334      	add	r3, pc, #208	; (adr r3, 8009050 <_strtod_l+0xbd8>)
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	f7f7 fde7 	bl	8000b58 <__aeabi_dcmpgt>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	f43f af7b 	beq.w	8008e86 <_strtod_l+0xa0e>
 8008f90:	e4c4      	b.n	800891c <_strtod_l+0x4a4>
 8008f92:	9b04      	ldr	r3, [sp, #16]
 8008f94:	b333      	cbz	r3, 8008fe4 <_strtod_l+0xb6c>
 8008f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f9c:	d822      	bhi.n	8008fe4 <_strtod_l+0xb6c>
 8008f9e:	a32e      	add	r3, pc, #184	; (adr r3, 8009058 <_strtod_l+0xbe0>)
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	4640      	mov	r0, r8
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	f7f7 fdc2 	bl	8000b30 <__aeabi_dcmple>
 8008fac:	b1a0      	cbz	r0, 8008fd8 <_strtod_l+0xb60>
 8008fae:	4649      	mov	r1, r9
 8008fb0:	4640      	mov	r0, r8
 8008fb2:	f7f7 fe19 	bl	8000be8 <__aeabi_d2uiz>
 8008fb6:	2801      	cmp	r0, #1
 8008fb8:	bf38      	it	cc
 8008fba:	2001      	movcc	r0, #1
 8008fbc:	f7f7 fac2 	bl	8000544 <__aeabi_ui2d>
 8008fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fc2:	4680      	mov	r8, r0
 8008fc4:	4689      	mov	r9, r1
 8008fc6:	bb23      	cbnz	r3, 8009012 <_strtod_l+0xb9a>
 8008fc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fcc:	9010      	str	r0, [sp, #64]	; 0x40
 8008fce:	9311      	str	r3, [sp, #68]	; 0x44
 8008fd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fdc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008fe0:	1a9b      	subs	r3, r3, r2
 8008fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fe8:	eeb0 0a48 	vmov.f32	s0, s16
 8008fec:	eef0 0a68 	vmov.f32	s1, s17
 8008ff0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008ff4:	f002 f99e 	bl	800b334 <__ulp>
 8008ff8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ffc:	ec53 2b10 	vmov	r2, r3, d0
 8009000:	f7f7 fb1a 	bl	8000638 <__aeabi_dmul>
 8009004:	ec53 2b18 	vmov	r2, r3, d8
 8009008:	f7f7 f960 	bl	80002cc <__adddf3>
 800900c:	4682      	mov	sl, r0
 800900e:	468b      	mov	fp, r1
 8009010:	e78d      	b.n	8008f2e <_strtod_l+0xab6>
 8009012:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009016:	e7db      	b.n	8008fd0 <_strtod_l+0xb58>
 8009018:	a311      	add	r3, pc, #68	; (adr r3, 8009060 <_strtod_l+0xbe8>)
 800901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901e:	f7f7 fd7d 	bl	8000b1c <__aeabi_dcmplt>
 8009022:	e7b2      	b.n	8008f8a <_strtod_l+0xb12>
 8009024:	2300      	movs	r3, #0
 8009026:	930a      	str	r3, [sp, #40]	; 0x28
 8009028:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800902a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	f7ff ba6b 	b.w	8008508 <_strtod_l+0x90>
 8009032:	2a65      	cmp	r2, #101	; 0x65
 8009034:	f43f ab5f 	beq.w	80086f6 <_strtod_l+0x27e>
 8009038:	2a45      	cmp	r2, #69	; 0x45
 800903a:	f43f ab5c 	beq.w	80086f6 <_strtod_l+0x27e>
 800903e:	2301      	movs	r3, #1
 8009040:	f7ff bb94 	b.w	800876c <_strtod_l+0x2f4>
 8009044:	f3af 8000 	nop.w
 8009048:	94a03595 	.word	0x94a03595
 800904c:	3fdfffff 	.word	0x3fdfffff
 8009050:	35afe535 	.word	0x35afe535
 8009054:	3fe00000 	.word	0x3fe00000
 8009058:	ffc00000 	.word	0xffc00000
 800905c:	41dfffff 	.word	0x41dfffff
 8009060:	94a03595 	.word	0x94a03595
 8009064:	3fcfffff 	.word	0x3fcfffff
 8009068:	3ff00000 	.word	0x3ff00000
 800906c:	7ff00000 	.word	0x7ff00000
 8009070:	7fe00000 	.word	0x7fe00000
 8009074:	7c9fffff 	.word	0x7c9fffff
 8009078:	3fe00000 	.word	0x3fe00000
 800907c:	bff00000 	.word	0xbff00000
 8009080:	7fefffff 	.word	0x7fefffff

08009084 <_strtod_r>:
 8009084:	4b01      	ldr	r3, [pc, #4]	; (800908c <_strtod_r+0x8>)
 8009086:	f7ff b9f7 	b.w	8008478 <_strtod_l>
 800908a:	bf00      	nop
 800908c:	20000074 	.word	0x20000074

08009090 <_strtol_l.constprop.0>:
 8009090:	2b01      	cmp	r3, #1
 8009092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009096:	d001      	beq.n	800909c <_strtol_l.constprop.0+0xc>
 8009098:	2b24      	cmp	r3, #36	; 0x24
 800909a:	d906      	bls.n	80090aa <_strtol_l.constprop.0+0x1a>
 800909c:	f7fe f908 	bl	80072b0 <__errno>
 80090a0:	2316      	movs	r3, #22
 80090a2:	6003      	str	r3, [r0, #0]
 80090a4:	2000      	movs	r0, #0
 80090a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009190 <_strtol_l.constprop.0+0x100>
 80090ae:	460d      	mov	r5, r1
 80090b0:	462e      	mov	r6, r5
 80090b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80090ba:	f017 0708 	ands.w	r7, r7, #8
 80090be:	d1f7      	bne.n	80090b0 <_strtol_l.constprop.0+0x20>
 80090c0:	2c2d      	cmp	r4, #45	; 0x2d
 80090c2:	d132      	bne.n	800912a <_strtol_l.constprop.0+0x9a>
 80090c4:	782c      	ldrb	r4, [r5, #0]
 80090c6:	2701      	movs	r7, #1
 80090c8:	1cb5      	adds	r5, r6, #2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d05b      	beq.n	8009186 <_strtol_l.constprop.0+0xf6>
 80090ce:	2b10      	cmp	r3, #16
 80090d0:	d109      	bne.n	80090e6 <_strtol_l.constprop.0+0x56>
 80090d2:	2c30      	cmp	r4, #48	; 0x30
 80090d4:	d107      	bne.n	80090e6 <_strtol_l.constprop.0+0x56>
 80090d6:	782c      	ldrb	r4, [r5, #0]
 80090d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80090dc:	2c58      	cmp	r4, #88	; 0x58
 80090de:	d14d      	bne.n	800917c <_strtol_l.constprop.0+0xec>
 80090e0:	786c      	ldrb	r4, [r5, #1]
 80090e2:	2310      	movs	r3, #16
 80090e4:	3502      	adds	r5, #2
 80090e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80090ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80090ee:	f04f 0c00 	mov.w	ip, #0
 80090f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80090f6:	4666      	mov	r6, ip
 80090f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80090fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009100:	f1be 0f09 	cmp.w	lr, #9
 8009104:	d816      	bhi.n	8009134 <_strtol_l.constprop.0+0xa4>
 8009106:	4674      	mov	r4, lr
 8009108:	42a3      	cmp	r3, r4
 800910a:	dd24      	ble.n	8009156 <_strtol_l.constprop.0+0xc6>
 800910c:	f1bc 0f00 	cmp.w	ip, #0
 8009110:	db1e      	blt.n	8009150 <_strtol_l.constprop.0+0xc0>
 8009112:	45b1      	cmp	r9, r6
 8009114:	d31c      	bcc.n	8009150 <_strtol_l.constprop.0+0xc0>
 8009116:	d101      	bne.n	800911c <_strtol_l.constprop.0+0x8c>
 8009118:	45a2      	cmp	sl, r4
 800911a:	db19      	blt.n	8009150 <_strtol_l.constprop.0+0xc0>
 800911c:	fb06 4603 	mla	r6, r6, r3, r4
 8009120:	f04f 0c01 	mov.w	ip, #1
 8009124:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009128:	e7e8      	b.n	80090fc <_strtol_l.constprop.0+0x6c>
 800912a:	2c2b      	cmp	r4, #43	; 0x2b
 800912c:	bf04      	itt	eq
 800912e:	782c      	ldrbeq	r4, [r5, #0]
 8009130:	1cb5      	addeq	r5, r6, #2
 8009132:	e7ca      	b.n	80090ca <_strtol_l.constprop.0+0x3a>
 8009134:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009138:	f1be 0f19 	cmp.w	lr, #25
 800913c:	d801      	bhi.n	8009142 <_strtol_l.constprop.0+0xb2>
 800913e:	3c37      	subs	r4, #55	; 0x37
 8009140:	e7e2      	b.n	8009108 <_strtol_l.constprop.0+0x78>
 8009142:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009146:	f1be 0f19 	cmp.w	lr, #25
 800914a:	d804      	bhi.n	8009156 <_strtol_l.constprop.0+0xc6>
 800914c:	3c57      	subs	r4, #87	; 0x57
 800914e:	e7db      	b.n	8009108 <_strtol_l.constprop.0+0x78>
 8009150:	f04f 3cff 	mov.w	ip, #4294967295
 8009154:	e7e6      	b.n	8009124 <_strtol_l.constprop.0+0x94>
 8009156:	f1bc 0f00 	cmp.w	ip, #0
 800915a:	da05      	bge.n	8009168 <_strtol_l.constprop.0+0xd8>
 800915c:	2322      	movs	r3, #34	; 0x22
 800915e:	6003      	str	r3, [r0, #0]
 8009160:	4646      	mov	r6, r8
 8009162:	b942      	cbnz	r2, 8009176 <_strtol_l.constprop.0+0xe6>
 8009164:	4630      	mov	r0, r6
 8009166:	e79e      	b.n	80090a6 <_strtol_l.constprop.0+0x16>
 8009168:	b107      	cbz	r7, 800916c <_strtol_l.constprop.0+0xdc>
 800916a:	4276      	negs	r6, r6
 800916c:	2a00      	cmp	r2, #0
 800916e:	d0f9      	beq.n	8009164 <_strtol_l.constprop.0+0xd4>
 8009170:	f1bc 0f00 	cmp.w	ip, #0
 8009174:	d000      	beq.n	8009178 <_strtol_l.constprop.0+0xe8>
 8009176:	1e69      	subs	r1, r5, #1
 8009178:	6011      	str	r1, [r2, #0]
 800917a:	e7f3      	b.n	8009164 <_strtol_l.constprop.0+0xd4>
 800917c:	2430      	movs	r4, #48	; 0x30
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1b1      	bne.n	80090e6 <_strtol_l.constprop.0+0x56>
 8009182:	2308      	movs	r3, #8
 8009184:	e7af      	b.n	80090e6 <_strtol_l.constprop.0+0x56>
 8009186:	2c30      	cmp	r4, #48	; 0x30
 8009188:	d0a5      	beq.n	80090d6 <_strtol_l.constprop.0+0x46>
 800918a:	230a      	movs	r3, #10
 800918c:	e7ab      	b.n	80090e6 <_strtol_l.constprop.0+0x56>
 800918e:	bf00      	nop
 8009190:	0800d199 	.word	0x0800d199

08009194 <_strtol_r>:
 8009194:	f7ff bf7c 	b.w	8009090 <_strtol_l.constprop.0>

08009198 <__swbuf_r>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	460e      	mov	r6, r1
 800919c:	4614      	mov	r4, r2
 800919e:	4605      	mov	r5, r0
 80091a0:	b118      	cbz	r0, 80091aa <__swbuf_r+0x12>
 80091a2:	6983      	ldr	r3, [r0, #24]
 80091a4:	b90b      	cbnz	r3, 80091aa <__swbuf_r+0x12>
 80091a6:	f001 f881 	bl	800a2ac <__sinit>
 80091aa:	4b21      	ldr	r3, [pc, #132]	; (8009230 <__swbuf_r+0x98>)
 80091ac:	429c      	cmp	r4, r3
 80091ae:	d12b      	bne.n	8009208 <__swbuf_r+0x70>
 80091b0:	686c      	ldr	r4, [r5, #4]
 80091b2:	69a3      	ldr	r3, [r4, #24]
 80091b4:	60a3      	str	r3, [r4, #8]
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	071a      	lsls	r2, r3, #28
 80091ba:	d52f      	bpl.n	800921c <__swbuf_r+0x84>
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	b36b      	cbz	r3, 800921c <__swbuf_r+0x84>
 80091c0:	6923      	ldr	r3, [r4, #16]
 80091c2:	6820      	ldr	r0, [r4, #0]
 80091c4:	1ac0      	subs	r0, r0, r3
 80091c6:	6963      	ldr	r3, [r4, #20]
 80091c8:	b2f6      	uxtb	r6, r6
 80091ca:	4283      	cmp	r3, r0
 80091cc:	4637      	mov	r7, r6
 80091ce:	dc04      	bgt.n	80091da <__swbuf_r+0x42>
 80091d0:	4621      	mov	r1, r4
 80091d2:	4628      	mov	r0, r5
 80091d4:	f000 ffc4 	bl	800a160 <_fflush_r>
 80091d8:	bb30      	cbnz	r0, 8009228 <__swbuf_r+0x90>
 80091da:	68a3      	ldr	r3, [r4, #8]
 80091dc:	3b01      	subs	r3, #1
 80091de:	60a3      	str	r3, [r4, #8]
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	1c5a      	adds	r2, r3, #1
 80091e4:	6022      	str	r2, [r4, #0]
 80091e6:	701e      	strb	r6, [r3, #0]
 80091e8:	6963      	ldr	r3, [r4, #20]
 80091ea:	3001      	adds	r0, #1
 80091ec:	4283      	cmp	r3, r0
 80091ee:	d004      	beq.n	80091fa <__swbuf_r+0x62>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	07db      	lsls	r3, r3, #31
 80091f4:	d506      	bpl.n	8009204 <__swbuf_r+0x6c>
 80091f6:	2e0a      	cmp	r6, #10
 80091f8:	d104      	bne.n	8009204 <__swbuf_r+0x6c>
 80091fa:	4621      	mov	r1, r4
 80091fc:	4628      	mov	r0, r5
 80091fe:	f000 ffaf 	bl	800a160 <_fflush_r>
 8009202:	b988      	cbnz	r0, 8009228 <__swbuf_r+0x90>
 8009204:	4638      	mov	r0, r7
 8009206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009208:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <__swbuf_r+0x9c>)
 800920a:	429c      	cmp	r4, r3
 800920c:	d101      	bne.n	8009212 <__swbuf_r+0x7a>
 800920e:	68ac      	ldr	r4, [r5, #8]
 8009210:	e7cf      	b.n	80091b2 <__swbuf_r+0x1a>
 8009212:	4b09      	ldr	r3, [pc, #36]	; (8009238 <__swbuf_r+0xa0>)
 8009214:	429c      	cmp	r4, r3
 8009216:	bf08      	it	eq
 8009218:	68ec      	ldreq	r4, [r5, #12]
 800921a:	e7ca      	b.n	80091b2 <__swbuf_r+0x1a>
 800921c:	4621      	mov	r1, r4
 800921e:	4628      	mov	r0, r5
 8009220:	f000 f81e 	bl	8009260 <__swsetup_r>
 8009224:	2800      	cmp	r0, #0
 8009226:	d0cb      	beq.n	80091c0 <__swbuf_r+0x28>
 8009228:	f04f 37ff 	mov.w	r7, #4294967295
 800922c:	e7ea      	b.n	8009204 <__swbuf_r+0x6c>
 800922e:	bf00      	nop
 8009230:	0800d34c 	.word	0x0800d34c
 8009234:	0800d36c 	.word	0x0800d36c
 8009238:	0800d32c 	.word	0x0800d32c

0800923c <_write_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d07      	ldr	r5, [pc, #28]	; (800925c <_write_r+0x20>)
 8009240:	4604      	mov	r4, r0
 8009242:	4608      	mov	r0, r1
 8009244:	4611      	mov	r1, r2
 8009246:	2200      	movs	r2, #0
 8009248:	602a      	str	r2, [r5, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	f7f8 fc9b 	bl	8001b86 <_write>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_write_r+0x1e>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	b103      	cbz	r3, 800925a <_write_r+0x1e>
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	20000408 	.word	0x20000408

08009260 <__swsetup_r>:
 8009260:	4b32      	ldr	r3, [pc, #200]	; (800932c <__swsetup_r+0xcc>)
 8009262:	b570      	push	{r4, r5, r6, lr}
 8009264:	681d      	ldr	r5, [r3, #0]
 8009266:	4606      	mov	r6, r0
 8009268:	460c      	mov	r4, r1
 800926a:	b125      	cbz	r5, 8009276 <__swsetup_r+0x16>
 800926c:	69ab      	ldr	r3, [r5, #24]
 800926e:	b913      	cbnz	r3, 8009276 <__swsetup_r+0x16>
 8009270:	4628      	mov	r0, r5
 8009272:	f001 f81b 	bl	800a2ac <__sinit>
 8009276:	4b2e      	ldr	r3, [pc, #184]	; (8009330 <__swsetup_r+0xd0>)
 8009278:	429c      	cmp	r4, r3
 800927a:	d10f      	bne.n	800929c <__swsetup_r+0x3c>
 800927c:	686c      	ldr	r4, [r5, #4]
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009284:	0719      	lsls	r1, r3, #28
 8009286:	d42c      	bmi.n	80092e2 <__swsetup_r+0x82>
 8009288:	06dd      	lsls	r5, r3, #27
 800928a:	d411      	bmi.n	80092b0 <__swsetup_r+0x50>
 800928c:	2309      	movs	r3, #9
 800928e:	6033      	str	r3, [r6, #0]
 8009290:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009294:	81a3      	strh	r3, [r4, #12]
 8009296:	f04f 30ff 	mov.w	r0, #4294967295
 800929a:	e03e      	b.n	800931a <__swsetup_r+0xba>
 800929c:	4b25      	ldr	r3, [pc, #148]	; (8009334 <__swsetup_r+0xd4>)
 800929e:	429c      	cmp	r4, r3
 80092a0:	d101      	bne.n	80092a6 <__swsetup_r+0x46>
 80092a2:	68ac      	ldr	r4, [r5, #8]
 80092a4:	e7eb      	b.n	800927e <__swsetup_r+0x1e>
 80092a6:	4b24      	ldr	r3, [pc, #144]	; (8009338 <__swsetup_r+0xd8>)
 80092a8:	429c      	cmp	r4, r3
 80092aa:	bf08      	it	eq
 80092ac:	68ec      	ldreq	r4, [r5, #12]
 80092ae:	e7e6      	b.n	800927e <__swsetup_r+0x1e>
 80092b0:	0758      	lsls	r0, r3, #29
 80092b2:	d512      	bpl.n	80092da <__swsetup_r+0x7a>
 80092b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092b6:	b141      	cbz	r1, 80092ca <__swsetup_r+0x6a>
 80092b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092bc:	4299      	cmp	r1, r3
 80092be:	d002      	beq.n	80092c6 <__swsetup_r+0x66>
 80092c0:	4630      	mov	r0, r6
 80092c2:	f002 f99d 	bl	800b600 <_free_r>
 80092c6:	2300      	movs	r3, #0
 80092c8:	6363      	str	r3, [r4, #52]	; 0x34
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092d0:	81a3      	strh	r3, [r4, #12]
 80092d2:	2300      	movs	r3, #0
 80092d4:	6063      	str	r3, [r4, #4]
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	f043 0308 	orr.w	r3, r3, #8
 80092e0:	81a3      	strh	r3, [r4, #12]
 80092e2:	6923      	ldr	r3, [r4, #16]
 80092e4:	b94b      	cbnz	r3, 80092fa <__swsetup_r+0x9a>
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092f0:	d003      	beq.n	80092fa <__swsetup_r+0x9a>
 80092f2:	4621      	mov	r1, r4
 80092f4:	4630      	mov	r0, r6
 80092f6:	f001 fc43 	bl	800ab80 <__smakebuf_r>
 80092fa:	89a0      	ldrh	r0, [r4, #12]
 80092fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009300:	f010 0301 	ands.w	r3, r0, #1
 8009304:	d00a      	beq.n	800931c <__swsetup_r+0xbc>
 8009306:	2300      	movs	r3, #0
 8009308:	60a3      	str	r3, [r4, #8]
 800930a:	6963      	ldr	r3, [r4, #20]
 800930c:	425b      	negs	r3, r3
 800930e:	61a3      	str	r3, [r4, #24]
 8009310:	6923      	ldr	r3, [r4, #16]
 8009312:	b943      	cbnz	r3, 8009326 <__swsetup_r+0xc6>
 8009314:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009318:	d1ba      	bne.n	8009290 <__swsetup_r+0x30>
 800931a:	bd70      	pop	{r4, r5, r6, pc}
 800931c:	0781      	lsls	r1, r0, #30
 800931e:	bf58      	it	pl
 8009320:	6963      	ldrpl	r3, [r4, #20]
 8009322:	60a3      	str	r3, [r4, #8]
 8009324:	e7f4      	b.n	8009310 <__swsetup_r+0xb0>
 8009326:	2000      	movs	r0, #0
 8009328:	e7f7      	b.n	800931a <__swsetup_r+0xba>
 800932a:	bf00      	nop
 800932c:	2000000c 	.word	0x2000000c
 8009330:	0800d34c 	.word	0x0800d34c
 8009334:	0800d36c 	.word	0x0800d36c
 8009338:	0800d32c 	.word	0x0800d32c

0800933c <_close_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4d06      	ldr	r5, [pc, #24]	; (8009358 <_close_r+0x1c>)
 8009340:	2300      	movs	r3, #0
 8009342:	4604      	mov	r4, r0
 8009344:	4608      	mov	r0, r1
 8009346:	602b      	str	r3, [r5, #0]
 8009348:	f7f8 fc39 	bl	8001bbe <_close>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	d102      	bne.n	8009356 <_close_r+0x1a>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	b103      	cbz	r3, 8009356 <_close_r+0x1a>
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	20000408 	.word	0x20000408

0800935c <quorem>:
 800935c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	6903      	ldr	r3, [r0, #16]
 8009362:	690c      	ldr	r4, [r1, #16]
 8009364:	42a3      	cmp	r3, r4
 8009366:	4607      	mov	r7, r0
 8009368:	f2c0 8081 	blt.w	800946e <quorem+0x112>
 800936c:	3c01      	subs	r4, #1
 800936e:	f101 0814 	add.w	r8, r1, #20
 8009372:	f100 0514 	add.w	r5, r0, #20
 8009376:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009380:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009384:	3301      	adds	r3, #1
 8009386:	429a      	cmp	r2, r3
 8009388:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800938c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009390:	fbb2 f6f3 	udiv	r6, r2, r3
 8009394:	d331      	bcc.n	80093fa <quorem+0x9e>
 8009396:	f04f 0e00 	mov.w	lr, #0
 800939a:	4640      	mov	r0, r8
 800939c:	46ac      	mov	ip, r5
 800939e:	46f2      	mov	sl, lr
 80093a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80093a4:	b293      	uxth	r3, r2
 80093a6:	fb06 e303 	mla	r3, r6, r3, lr
 80093aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	ebaa 0303 	sub.w	r3, sl, r3
 80093b4:	f8dc a000 	ldr.w	sl, [ip]
 80093b8:	0c12      	lsrs	r2, r2, #16
 80093ba:	fa13 f38a 	uxtah	r3, r3, sl
 80093be:	fb06 e202 	mla	r2, r6, r2, lr
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	9b00      	ldr	r3, [sp, #0]
 80093c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093ca:	b292      	uxth	r2, r2
 80093cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80093d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80093d8:	4581      	cmp	r9, r0
 80093da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093de:	f84c 3b04 	str.w	r3, [ip], #4
 80093e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093e6:	d2db      	bcs.n	80093a0 <quorem+0x44>
 80093e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80093ec:	b92b      	cbnz	r3, 80093fa <quorem+0x9e>
 80093ee:	9b01      	ldr	r3, [sp, #4]
 80093f0:	3b04      	subs	r3, #4
 80093f2:	429d      	cmp	r5, r3
 80093f4:	461a      	mov	r2, r3
 80093f6:	d32e      	bcc.n	8009456 <quorem+0xfa>
 80093f8:	613c      	str	r4, [r7, #16]
 80093fa:	4638      	mov	r0, r7
 80093fc:	f001 fef4 	bl	800b1e8 <__mcmp>
 8009400:	2800      	cmp	r0, #0
 8009402:	db24      	blt.n	800944e <quorem+0xf2>
 8009404:	3601      	adds	r6, #1
 8009406:	4628      	mov	r0, r5
 8009408:	f04f 0c00 	mov.w	ip, #0
 800940c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009410:	f8d0 e000 	ldr.w	lr, [r0]
 8009414:	b293      	uxth	r3, r2
 8009416:	ebac 0303 	sub.w	r3, ip, r3
 800941a:	0c12      	lsrs	r2, r2, #16
 800941c:	fa13 f38e 	uxtah	r3, r3, lr
 8009420:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009428:	b29b      	uxth	r3, r3
 800942a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800942e:	45c1      	cmp	r9, r8
 8009430:	f840 3b04 	str.w	r3, [r0], #4
 8009434:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009438:	d2e8      	bcs.n	800940c <quorem+0xb0>
 800943a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800943e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009442:	b922      	cbnz	r2, 800944e <quorem+0xf2>
 8009444:	3b04      	subs	r3, #4
 8009446:	429d      	cmp	r5, r3
 8009448:	461a      	mov	r2, r3
 800944a:	d30a      	bcc.n	8009462 <quorem+0x106>
 800944c:	613c      	str	r4, [r7, #16]
 800944e:	4630      	mov	r0, r6
 8009450:	b003      	add	sp, #12
 8009452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009456:	6812      	ldr	r2, [r2, #0]
 8009458:	3b04      	subs	r3, #4
 800945a:	2a00      	cmp	r2, #0
 800945c:	d1cc      	bne.n	80093f8 <quorem+0x9c>
 800945e:	3c01      	subs	r4, #1
 8009460:	e7c7      	b.n	80093f2 <quorem+0x96>
 8009462:	6812      	ldr	r2, [r2, #0]
 8009464:	3b04      	subs	r3, #4
 8009466:	2a00      	cmp	r2, #0
 8009468:	d1f0      	bne.n	800944c <quorem+0xf0>
 800946a:	3c01      	subs	r4, #1
 800946c:	e7eb      	b.n	8009446 <quorem+0xea>
 800946e:	2000      	movs	r0, #0
 8009470:	e7ee      	b.n	8009450 <quorem+0xf4>
 8009472:	0000      	movs	r0, r0
 8009474:	0000      	movs	r0, r0
	...

08009478 <_dtoa_r>:
 8009478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947c:	ed2d 8b04 	vpush	{d8-d9}
 8009480:	ec57 6b10 	vmov	r6, r7, d0
 8009484:	b093      	sub	sp, #76	; 0x4c
 8009486:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009488:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800948c:	9106      	str	r1, [sp, #24]
 800948e:	ee10 aa10 	vmov	sl, s0
 8009492:	4604      	mov	r4, r0
 8009494:	9209      	str	r2, [sp, #36]	; 0x24
 8009496:	930c      	str	r3, [sp, #48]	; 0x30
 8009498:	46bb      	mov	fp, r7
 800949a:	b975      	cbnz	r5, 80094ba <_dtoa_r+0x42>
 800949c:	2010      	movs	r0, #16
 800949e:	f001 fbaf 	bl	800ac00 <malloc>
 80094a2:	4602      	mov	r2, r0
 80094a4:	6260      	str	r0, [r4, #36]	; 0x24
 80094a6:	b920      	cbnz	r0, 80094b2 <_dtoa_r+0x3a>
 80094a8:	4ba7      	ldr	r3, [pc, #668]	; (8009748 <_dtoa_r+0x2d0>)
 80094aa:	21ea      	movs	r1, #234	; 0xea
 80094ac:	48a7      	ldr	r0, [pc, #668]	; (800974c <_dtoa_r+0x2d4>)
 80094ae:	f003 fb8f 	bl	800cbd0 <__assert_func>
 80094b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094b6:	6005      	str	r5, [r0, #0]
 80094b8:	60c5      	str	r5, [r0, #12]
 80094ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094bc:	6819      	ldr	r1, [r3, #0]
 80094be:	b151      	cbz	r1, 80094d6 <_dtoa_r+0x5e>
 80094c0:	685a      	ldr	r2, [r3, #4]
 80094c2:	604a      	str	r2, [r1, #4]
 80094c4:	2301      	movs	r3, #1
 80094c6:	4093      	lsls	r3, r2
 80094c8:	608b      	str	r3, [r1, #8]
 80094ca:	4620      	mov	r0, r4
 80094cc:	f001 fc00 	bl	800acd0 <_Bfree>
 80094d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094d2:	2200      	movs	r2, #0
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	1e3b      	subs	r3, r7, #0
 80094d8:	bfaa      	itet	ge
 80094da:	2300      	movge	r3, #0
 80094dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80094e0:	f8c8 3000 	strge.w	r3, [r8]
 80094e4:	4b9a      	ldr	r3, [pc, #616]	; (8009750 <_dtoa_r+0x2d8>)
 80094e6:	bfbc      	itt	lt
 80094e8:	2201      	movlt	r2, #1
 80094ea:	f8c8 2000 	strlt.w	r2, [r8]
 80094ee:	ea33 030b 	bics.w	r3, r3, fp
 80094f2:	d11b      	bne.n	800952c <_dtoa_r+0xb4>
 80094f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009500:	4333      	orrs	r3, r6
 8009502:	f000 8592 	beq.w	800a02a <_dtoa_r+0xbb2>
 8009506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009508:	b963      	cbnz	r3, 8009524 <_dtoa_r+0xac>
 800950a:	4b92      	ldr	r3, [pc, #584]	; (8009754 <_dtoa_r+0x2dc>)
 800950c:	e022      	b.n	8009554 <_dtoa_r+0xdc>
 800950e:	4b92      	ldr	r3, [pc, #584]	; (8009758 <_dtoa_r+0x2e0>)
 8009510:	9301      	str	r3, [sp, #4]
 8009512:	3308      	adds	r3, #8
 8009514:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	9801      	ldr	r0, [sp, #4]
 800951a:	b013      	add	sp, #76	; 0x4c
 800951c:	ecbd 8b04 	vpop	{d8-d9}
 8009520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009524:	4b8b      	ldr	r3, [pc, #556]	; (8009754 <_dtoa_r+0x2dc>)
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	3303      	adds	r3, #3
 800952a:	e7f3      	b.n	8009514 <_dtoa_r+0x9c>
 800952c:	2200      	movs	r2, #0
 800952e:	2300      	movs	r3, #0
 8009530:	4650      	mov	r0, sl
 8009532:	4659      	mov	r1, fp
 8009534:	f7f7 fae8 	bl	8000b08 <__aeabi_dcmpeq>
 8009538:	ec4b ab19 	vmov	d9, sl, fp
 800953c:	4680      	mov	r8, r0
 800953e:	b158      	cbz	r0, 8009558 <_dtoa_r+0xe0>
 8009540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009542:	2301      	movs	r3, #1
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 856b 	beq.w	800a024 <_dtoa_r+0xbac>
 800954e:	4883      	ldr	r0, [pc, #524]	; (800975c <_dtoa_r+0x2e4>)
 8009550:	6018      	str	r0, [r3, #0]
 8009552:	1e43      	subs	r3, r0, #1
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	e7df      	b.n	8009518 <_dtoa_r+0xa0>
 8009558:	ec4b ab10 	vmov	d0, sl, fp
 800955c:	aa10      	add	r2, sp, #64	; 0x40
 800955e:	a911      	add	r1, sp, #68	; 0x44
 8009560:	4620      	mov	r0, r4
 8009562:	f001 ff63 	bl	800b42c <__d2b>
 8009566:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800956a:	ee08 0a10 	vmov	s16, r0
 800956e:	2d00      	cmp	r5, #0
 8009570:	f000 8084 	beq.w	800967c <_dtoa_r+0x204>
 8009574:	ee19 3a90 	vmov	r3, s19
 8009578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800957c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009580:	4656      	mov	r6, sl
 8009582:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009586:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800958a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800958e:	4b74      	ldr	r3, [pc, #464]	; (8009760 <_dtoa_r+0x2e8>)
 8009590:	2200      	movs	r2, #0
 8009592:	4630      	mov	r0, r6
 8009594:	4639      	mov	r1, r7
 8009596:	f7f6 fe97 	bl	80002c8 <__aeabi_dsub>
 800959a:	a365      	add	r3, pc, #404	; (adr r3, 8009730 <_dtoa_r+0x2b8>)
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	f7f7 f84a 	bl	8000638 <__aeabi_dmul>
 80095a4:	a364      	add	r3, pc, #400	; (adr r3, 8009738 <_dtoa_r+0x2c0>)
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	f7f6 fe8f 	bl	80002cc <__adddf3>
 80095ae:	4606      	mov	r6, r0
 80095b0:	4628      	mov	r0, r5
 80095b2:	460f      	mov	r7, r1
 80095b4:	f7f6 ffd6 	bl	8000564 <__aeabi_i2d>
 80095b8:	a361      	add	r3, pc, #388	; (adr r3, 8009740 <_dtoa_r+0x2c8>)
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	f7f7 f83b 	bl	8000638 <__aeabi_dmul>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	4630      	mov	r0, r6
 80095c8:	4639      	mov	r1, r7
 80095ca:	f7f6 fe7f 	bl	80002cc <__adddf3>
 80095ce:	4606      	mov	r6, r0
 80095d0:	460f      	mov	r7, r1
 80095d2:	f7f7 fae1 	bl	8000b98 <__aeabi_d2iz>
 80095d6:	2200      	movs	r2, #0
 80095d8:	9000      	str	r0, [sp, #0]
 80095da:	2300      	movs	r3, #0
 80095dc:	4630      	mov	r0, r6
 80095de:	4639      	mov	r1, r7
 80095e0:	f7f7 fa9c 	bl	8000b1c <__aeabi_dcmplt>
 80095e4:	b150      	cbz	r0, 80095fc <_dtoa_r+0x184>
 80095e6:	9800      	ldr	r0, [sp, #0]
 80095e8:	f7f6 ffbc 	bl	8000564 <__aeabi_i2d>
 80095ec:	4632      	mov	r2, r6
 80095ee:	463b      	mov	r3, r7
 80095f0:	f7f7 fa8a 	bl	8000b08 <__aeabi_dcmpeq>
 80095f4:	b910      	cbnz	r0, 80095fc <_dtoa_r+0x184>
 80095f6:	9b00      	ldr	r3, [sp, #0]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	9b00      	ldr	r3, [sp, #0]
 80095fe:	2b16      	cmp	r3, #22
 8009600:	d85a      	bhi.n	80096b8 <_dtoa_r+0x240>
 8009602:	9a00      	ldr	r2, [sp, #0]
 8009604:	4b57      	ldr	r3, [pc, #348]	; (8009764 <_dtoa_r+0x2ec>)
 8009606:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	ec51 0b19 	vmov	r0, r1, d9
 8009612:	f7f7 fa83 	bl	8000b1c <__aeabi_dcmplt>
 8009616:	2800      	cmp	r0, #0
 8009618:	d050      	beq.n	80096bc <_dtoa_r+0x244>
 800961a:	9b00      	ldr	r3, [sp, #0]
 800961c:	3b01      	subs	r3, #1
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	2300      	movs	r3, #0
 8009622:	930b      	str	r3, [sp, #44]	; 0x2c
 8009624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009626:	1b5d      	subs	r5, r3, r5
 8009628:	1e6b      	subs	r3, r5, #1
 800962a:	9305      	str	r3, [sp, #20]
 800962c:	bf45      	ittet	mi
 800962e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009632:	9304      	strmi	r3, [sp, #16]
 8009634:	2300      	movpl	r3, #0
 8009636:	2300      	movmi	r3, #0
 8009638:	bf4c      	ite	mi
 800963a:	9305      	strmi	r3, [sp, #20]
 800963c:	9304      	strpl	r3, [sp, #16]
 800963e:	9b00      	ldr	r3, [sp, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	db3d      	blt.n	80096c0 <_dtoa_r+0x248>
 8009644:	9b05      	ldr	r3, [sp, #20]
 8009646:	9a00      	ldr	r2, [sp, #0]
 8009648:	920a      	str	r2, [sp, #40]	; 0x28
 800964a:	4413      	add	r3, r2
 800964c:	9305      	str	r3, [sp, #20]
 800964e:	2300      	movs	r3, #0
 8009650:	9307      	str	r3, [sp, #28]
 8009652:	9b06      	ldr	r3, [sp, #24]
 8009654:	2b09      	cmp	r3, #9
 8009656:	f200 8089 	bhi.w	800976c <_dtoa_r+0x2f4>
 800965a:	2b05      	cmp	r3, #5
 800965c:	bfc4      	itt	gt
 800965e:	3b04      	subgt	r3, #4
 8009660:	9306      	strgt	r3, [sp, #24]
 8009662:	9b06      	ldr	r3, [sp, #24]
 8009664:	f1a3 0302 	sub.w	r3, r3, #2
 8009668:	bfcc      	ite	gt
 800966a:	2500      	movgt	r5, #0
 800966c:	2501      	movle	r5, #1
 800966e:	2b03      	cmp	r3, #3
 8009670:	f200 8087 	bhi.w	8009782 <_dtoa_r+0x30a>
 8009674:	e8df f003 	tbb	[pc, r3]
 8009678:	59383a2d 	.word	0x59383a2d
 800967c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009680:	441d      	add	r5, r3
 8009682:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009686:	2b20      	cmp	r3, #32
 8009688:	bfc1      	itttt	gt
 800968a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800968e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009692:	fa0b f303 	lslgt.w	r3, fp, r3
 8009696:	fa26 f000 	lsrgt.w	r0, r6, r0
 800969a:	bfda      	itte	le
 800969c:	f1c3 0320 	rsble	r3, r3, #32
 80096a0:	fa06 f003 	lslle.w	r0, r6, r3
 80096a4:	4318      	orrgt	r0, r3
 80096a6:	f7f6 ff4d 	bl	8000544 <__aeabi_ui2d>
 80096aa:	2301      	movs	r3, #1
 80096ac:	4606      	mov	r6, r0
 80096ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80096b2:	3d01      	subs	r5, #1
 80096b4:	930e      	str	r3, [sp, #56]	; 0x38
 80096b6:	e76a      	b.n	800958e <_dtoa_r+0x116>
 80096b8:	2301      	movs	r3, #1
 80096ba:	e7b2      	b.n	8009622 <_dtoa_r+0x1aa>
 80096bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80096be:	e7b1      	b.n	8009624 <_dtoa_r+0x1ac>
 80096c0:	9b04      	ldr	r3, [sp, #16]
 80096c2:	9a00      	ldr	r2, [sp, #0]
 80096c4:	1a9b      	subs	r3, r3, r2
 80096c6:	9304      	str	r3, [sp, #16]
 80096c8:	4253      	negs	r3, r2
 80096ca:	9307      	str	r3, [sp, #28]
 80096cc:	2300      	movs	r3, #0
 80096ce:	930a      	str	r3, [sp, #40]	; 0x28
 80096d0:	e7bf      	b.n	8009652 <_dtoa_r+0x1da>
 80096d2:	2300      	movs	r3, #0
 80096d4:	9308      	str	r3, [sp, #32]
 80096d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d8:	2b00      	cmp	r3, #0
 80096da:	dc55      	bgt.n	8009788 <_dtoa_r+0x310>
 80096dc:	2301      	movs	r3, #1
 80096de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096e2:	461a      	mov	r2, r3
 80096e4:	9209      	str	r2, [sp, #36]	; 0x24
 80096e6:	e00c      	b.n	8009702 <_dtoa_r+0x28a>
 80096e8:	2301      	movs	r3, #1
 80096ea:	e7f3      	b.n	80096d4 <_dtoa_r+0x25c>
 80096ec:	2300      	movs	r3, #0
 80096ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096f0:	9308      	str	r3, [sp, #32]
 80096f2:	9b00      	ldr	r3, [sp, #0]
 80096f4:	4413      	add	r3, r2
 80096f6:	9302      	str	r3, [sp, #8]
 80096f8:	3301      	adds	r3, #1
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	9303      	str	r3, [sp, #12]
 80096fe:	bfb8      	it	lt
 8009700:	2301      	movlt	r3, #1
 8009702:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009704:	2200      	movs	r2, #0
 8009706:	6042      	str	r2, [r0, #4]
 8009708:	2204      	movs	r2, #4
 800970a:	f102 0614 	add.w	r6, r2, #20
 800970e:	429e      	cmp	r6, r3
 8009710:	6841      	ldr	r1, [r0, #4]
 8009712:	d93d      	bls.n	8009790 <_dtoa_r+0x318>
 8009714:	4620      	mov	r0, r4
 8009716:	f001 fa9b 	bl	800ac50 <_Balloc>
 800971a:	9001      	str	r0, [sp, #4]
 800971c:	2800      	cmp	r0, #0
 800971e:	d13b      	bne.n	8009798 <_dtoa_r+0x320>
 8009720:	4b11      	ldr	r3, [pc, #68]	; (8009768 <_dtoa_r+0x2f0>)
 8009722:	4602      	mov	r2, r0
 8009724:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009728:	e6c0      	b.n	80094ac <_dtoa_r+0x34>
 800972a:	2301      	movs	r3, #1
 800972c:	e7df      	b.n	80096ee <_dtoa_r+0x276>
 800972e:	bf00      	nop
 8009730:	636f4361 	.word	0x636f4361
 8009734:	3fd287a7 	.word	0x3fd287a7
 8009738:	8b60c8b3 	.word	0x8b60c8b3
 800973c:	3fc68a28 	.word	0x3fc68a28
 8009740:	509f79fb 	.word	0x509f79fb
 8009744:	3fd34413 	.word	0x3fd34413
 8009748:	0800d2a6 	.word	0x0800d2a6
 800974c:	0800d2bd 	.word	0x0800d2bd
 8009750:	7ff00000 	.word	0x7ff00000
 8009754:	0800d2a2 	.word	0x0800d2a2
 8009758:	0800d299 	.word	0x0800d299
 800975c:	0800d57a 	.word	0x0800d57a
 8009760:	3ff80000 	.word	0x3ff80000
 8009764:	0800d490 	.word	0x0800d490
 8009768:	0800d318 	.word	0x0800d318
 800976c:	2501      	movs	r5, #1
 800976e:	2300      	movs	r3, #0
 8009770:	9306      	str	r3, [sp, #24]
 8009772:	9508      	str	r5, [sp, #32]
 8009774:	f04f 33ff 	mov.w	r3, #4294967295
 8009778:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800977c:	2200      	movs	r2, #0
 800977e:	2312      	movs	r3, #18
 8009780:	e7b0      	b.n	80096e4 <_dtoa_r+0x26c>
 8009782:	2301      	movs	r3, #1
 8009784:	9308      	str	r3, [sp, #32]
 8009786:	e7f5      	b.n	8009774 <_dtoa_r+0x2fc>
 8009788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800978e:	e7b8      	b.n	8009702 <_dtoa_r+0x28a>
 8009790:	3101      	adds	r1, #1
 8009792:	6041      	str	r1, [r0, #4]
 8009794:	0052      	lsls	r2, r2, #1
 8009796:	e7b8      	b.n	800970a <_dtoa_r+0x292>
 8009798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800979a:	9a01      	ldr	r2, [sp, #4]
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	9b03      	ldr	r3, [sp, #12]
 80097a0:	2b0e      	cmp	r3, #14
 80097a2:	f200 809d 	bhi.w	80098e0 <_dtoa_r+0x468>
 80097a6:	2d00      	cmp	r5, #0
 80097a8:	f000 809a 	beq.w	80098e0 <_dtoa_r+0x468>
 80097ac:	9b00      	ldr	r3, [sp, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	dd32      	ble.n	8009818 <_dtoa_r+0x3a0>
 80097b2:	4ab7      	ldr	r2, [pc, #732]	; (8009a90 <_dtoa_r+0x618>)
 80097b4:	f003 030f 	and.w	r3, r3, #15
 80097b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80097bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097c0:	9b00      	ldr	r3, [sp, #0]
 80097c2:	05d8      	lsls	r0, r3, #23
 80097c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80097c8:	d516      	bpl.n	80097f8 <_dtoa_r+0x380>
 80097ca:	4bb2      	ldr	r3, [pc, #712]	; (8009a94 <_dtoa_r+0x61c>)
 80097cc:	ec51 0b19 	vmov	r0, r1, d9
 80097d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097d4:	f7f7 f85a 	bl	800088c <__aeabi_ddiv>
 80097d8:	f007 070f 	and.w	r7, r7, #15
 80097dc:	4682      	mov	sl, r0
 80097de:	468b      	mov	fp, r1
 80097e0:	2503      	movs	r5, #3
 80097e2:	4eac      	ldr	r6, [pc, #688]	; (8009a94 <_dtoa_r+0x61c>)
 80097e4:	b957      	cbnz	r7, 80097fc <_dtoa_r+0x384>
 80097e6:	4642      	mov	r2, r8
 80097e8:	464b      	mov	r3, r9
 80097ea:	4650      	mov	r0, sl
 80097ec:	4659      	mov	r1, fp
 80097ee:	f7f7 f84d 	bl	800088c <__aeabi_ddiv>
 80097f2:	4682      	mov	sl, r0
 80097f4:	468b      	mov	fp, r1
 80097f6:	e028      	b.n	800984a <_dtoa_r+0x3d2>
 80097f8:	2502      	movs	r5, #2
 80097fa:	e7f2      	b.n	80097e2 <_dtoa_r+0x36a>
 80097fc:	07f9      	lsls	r1, r7, #31
 80097fe:	d508      	bpl.n	8009812 <_dtoa_r+0x39a>
 8009800:	4640      	mov	r0, r8
 8009802:	4649      	mov	r1, r9
 8009804:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009808:	f7f6 ff16 	bl	8000638 <__aeabi_dmul>
 800980c:	3501      	adds	r5, #1
 800980e:	4680      	mov	r8, r0
 8009810:	4689      	mov	r9, r1
 8009812:	107f      	asrs	r7, r7, #1
 8009814:	3608      	adds	r6, #8
 8009816:	e7e5      	b.n	80097e4 <_dtoa_r+0x36c>
 8009818:	f000 809b 	beq.w	8009952 <_dtoa_r+0x4da>
 800981c:	9b00      	ldr	r3, [sp, #0]
 800981e:	4f9d      	ldr	r7, [pc, #628]	; (8009a94 <_dtoa_r+0x61c>)
 8009820:	425e      	negs	r6, r3
 8009822:	4b9b      	ldr	r3, [pc, #620]	; (8009a90 <_dtoa_r+0x618>)
 8009824:	f006 020f 	and.w	r2, r6, #15
 8009828:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800982c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009830:	ec51 0b19 	vmov	r0, r1, d9
 8009834:	f7f6 ff00 	bl	8000638 <__aeabi_dmul>
 8009838:	1136      	asrs	r6, r6, #4
 800983a:	4682      	mov	sl, r0
 800983c:	468b      	mov	fp, r1
 800983e:	2300      	movs	r3, #0
 8009840:	2502      	movs	r5, #2
 8009842:	2e00      	cmp	r6, #0
 8009844:	d17a      	bne.n	800993c <_dtoa_r+0x4c4>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1d3      	bne.n	80097f2 <_dtoa_r+0x37a>
 800984a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 8082 	beq.w	8009956 <_dtoa_r+0x4de>
 8009852:	4b91      	ldr	r3, [pc, #580]	; (8009a98 <_dtoa_r+0x620>)
 8009854:	2200      	movs	r2, #0
 8009856:	4650      	mov	r0, sl
 8009858:	4659      	mov	r1, fp
 800985a:	f7f7 f95f 	bl	8000b1c <__aeabi_dcmplt>
 800985e:	2800      	cmp	r0, #0
 8009860:	d079      	beq.n	8009956 <_dtoa_r+0x4de>
 8009862:	9b03      	ldr	r3, [sp, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d076      	beq.n	8009956 <_dtoa_r+0x4de>
 8009868:	9b02      	ldr	r3, [sp, #8]
 800986a:	2b00      	cmp	r3, #0
 800986c:	dd36      	ble.n	80098dc <_dtoa_r+0x464>
 800986e:	9b00      	ldr	r3, [sp, #0]
 8009870:	4650      	mov	r0, sl
 8009872:	4659      	mov	r1, fp
 8009874:	1e5f      	subs	r7, r3, #1
 8009876:	2200      	movs	r2, #0
 8009878:	4b88      	ldr	r3, [pc, #544]	; (8009a9c <_dtoa_r+0x624>)
 800987a:	f7f6 fedd 	bl	8000638 <__aeabi_dmul>
 800987e:	9e02      	ldr	r6, [sp, #8]
 8009880:	4682      	mov	sl, r0
 8009882:	468b      	mov	fp, r1
 8009884:	3501      	adds	r5, #1
 8009886:	4628      	mov	r0, r5
 8009888:	f7f6 fe6c 	bl	8000564 <__aeabi_i2d>
 800988c:	4652      	mov	r2, sl
 800988e:	465b      	mov	r3, fp
 8009890:	f7f6 fed2 	bl	8000638 <__aeabi_dmul>
 8009894:	4b82      	ldr	r3, [pc, #520]	; (8009aa0 <_dtoa_r+0x628>)
 8009896:	2200      	movs	r2, #0
 8009898:	f7f6 fd18 	bl	80002cc <__adddf3>
 800989c:	46d0      	mov	r8, sl
 800989e:	46d9      	mov	r9, fp
 80098a0:	4682      	mov	sl, r0
 80098a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80098a6:	2e00      	cmp	r6, #0
 80098a8:	d158      	bne.n	800995c <_dtoa_r+0x4e4>
 80098aa:	4b7e      	ldr	r3, [pc, #504]	; (8009aa4 <_dtoa_r+0x62c>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	4640      	mov	r0, r8
 80098b0:	4649      	mov	r1, r9
 80098b2:	f7f6 fd09 	bl	80002c8 <__aeabi_dsub>
 80098b6:	4652      	mov	r2, sl
 80098b8:	465b      	mov	r3, fp
 80098ba:	4680      	mov	r8, r0
 80098bc:	4689      	mov	r9, r1
 80098be:	f7f7 f94b 	bl	8000b58 <__aeabi_dcmpgt>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	f040 8295 	bne.w	8009df2 <_dtoa_r+0x97a>
 80098c8:	4652      	mov	r2, sl
 80098ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80098ce:	4640      	mov	r0, r8
 80098d0:	4649      	mov	r1, r9
 80098d2:	f7f7 f923 	bl	8000b1c <__aeabi_dcmplt>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f040 8289 	bne.w	8009dee <_dtoa_r+0x976>
 80098dc:	ec5b ab19 	vmov	sl, fp, d9
 80098e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f2c0 8148 	blt.w	8009b78 <_dtoa_r+0x700>
 80098e8:	9a00      	ldr	r2, [sp, #0]
 80098ea:	2a0e      	cmp	r2, #14
 80098ec:	f300 8144 	bgt.w	8009b78 <_dtoa_r+0x700>
 80098f0:	4b67      	ldr	r3, [pc, #412]	; (8009a90 <_dtoa_r+0x618>)
 80098f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f280 80d5 	bge.w	8009aac <_dtoa_r+0x634>
 8009902:	9b03      	ldr	r3, [sp, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	f300 80d1 	bgt.w	8009aac <_dtoa_r+0x634>
 800990a:	f040 826f 	bne.w	8009dec <_dtoa_r+0x974>
 800990e:	4b65      	ldr	r3, [pc, #404]	; (8009aa4 <_dtoa_r+0x62c>)
 8009910:	2200      	movs	r2, #0
 8009912:	4640      	mov	r0, r8
 8009914:	4649      	mov	r1, r9
 8009916:	f7f6 fe8f 	bl	8000638 <__aeabi_dmul>
 800991a:	4652      	mov	r2, sl
 800991c:	465b      	mov	r3, fp
 800991e:	f7f7 f911 	bl	8000b44 <__aeabi_dcmpge>
 8009922:	9e03      	ldr	r6, [sp, #12]
 8009924:	4637      	mov	r7, r6
 8009926:	2800      	cmp	r0, #0
 8009928:	f040 8245 	bne.w	8009db6 <_dtoa_r+0x93e>
 800992c:	9d01      	ldr	r5, [sp, #4]
 800992e:	2331      	movs	r3, #49	; 0x31
 8009930:	f805 3b01 	strb.w	r3, [r5], #1
 8009934:	9b00      	ldr	r3, [sp, #0]
 8009936:	3301      	adds	r3, #1
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	e240      	b.n	8009dbe <_dtoa_r+0x946>
 800993c:	07f2      	lsls	r2, r6, #31
 800993e:	d505      	bpl.n	800994c <_dtoa_r+0x4d4>
 8009940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009944:	f7f6 fe78 	bl	8000638 <__aeabi_dmul>
 8009948:	3501      	adds	r5, #1
 800994a:	2301      	movs	r3, #1
 800994c:	1076      	asrs	r6, r6, #1
 800994e:	3708      	adds	r7, #8
 8009950:	e777      	b.n	8009842 <_dtoa_r+0x3ca>
 8009952:	2502      	movs	r5, #2
 8009954:	e779      	b.n	800984a <_dtoa_r+0x3d2>
 8009956:	9f00      	ldr	r7, [sp, #0]
 8009958:	9e03      	ldr	r6, [sp, #12]
 800995a:	e794      	b.n	8009886 <_dtoa_r+0x40e>
 800995c:	9901      	ldr	r1, [sp, #4]
 800995e:	4b4c      	ldr	r3, [pc, #304]	; (8009a90 <_dtoa_r+0x618>)
 8009960:	4431      	add	r1, r6
 8009962:	910d      	str	r1, [sp, #52]	; 0x34
 8009964:	9908      	ldr	r1, [sp, #32]
 8009966:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800996a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800996e:	2900      	cmp	r1, #0
 8009970:	d043      	beq.n	80099fa <_dtoa_r+0x582>
 8009972:	494d      	ldr	r1, [pc, #308]	; (8009aa8 <_dtoa_r+0x630>)
 8009974:	2000      	movs	r0, #0
 8009976:	f7f6 ff89 	bl	800088c <__aeabi_ddiv>
 800997a:	4652      	mov	r2, sl
 800997c:	465b      	mov	r3, fp
 800997e:	f7f6 fca3 	bl	80002c8 <__aeabi_dsub>
 8009982:	9d01      	ldr	r5, [sp, #4]
 8009984:	4682      	mov	sl, r0
 8009986:	468b      	mov	fp, r1
 8009988:	4649      	mov	r1, r9
 800998a:	4640      	mov	r0, r8
 800998c:	f7f7 f904 	bl	8000b98 <__aeabi_d2iz>
 8009990:	4606      	mov	r6, r0
 8009992:	f7f6 fde7 	bl	8000564 <__aeabi_i2d>
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	4640      	mov	r0, r8
 800999c:	4649      	mov	r1, r9
 800999e:	f7f6 fc93 	bl	80002c8 <__aeabi_dsub>
 80099a2:	3630      	adds	r6, #48	; 0x30
 80099a4:	f805 6b01 	strb.w	r6, [r5], #1
 80099a8:	4652      	mov	r2, sl
 80099aa:	465b      	mov	r3, fp
 80099ac:	4680      	mov	r8, r0
 80099ae:	4689      	mov	r9, r1
 80099b0:	f7f7 f8b4 	bl	8000b1c <__aeabi_dcmplt>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d163      	bne.n	8009a80 <_dtoa_r+0x608>
 80099b8:	4642      	mov	r2, r8
 80099ba:	464b      	mov	r3, r9
 80099bc:	4936      	ldr	r1, [pc, #216]	; (8009a98 <_dtoa_r+0x620>)
 80099be:	2000      	movs	r0, #0
 80099c0:	f7f6 fc82 	bl	80002c8 <__aeabi_dsub>
 80099c4:	4652      	mov	r2, sl
 80099c6:	465b      	mov	r3, fp
 80099c8:	f7f7 f8a8 	bl	8000b1c <__aeabi_dcmplt>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	f040 80b5 	bne.w	8009b3c <_dtoa_r+0x6c4>
 80099d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099d4:	429d      	cmp	r5, r3
 80099d6:	d081      	beq.n	80098dc <_dtoa_r+0x464>
 80099d8:	4b30      	ldr	r3, [pc, #192]	; (8009a9c <_dtoa_r+0x624>)
 80099da:	2200      	movs	r2, #0
 80099dc:	4650      	mov	r0, sl
 80099de:	4659      	mov	r1, fp
 80099e0:	f7f6 fe2a 	bl	8000638 <__aeabi_dmul>
 80099e4:	4b2d      	ldr	r3, [pc, #180]	; (8009a9c <_dtoa_r+0x624>)
 80099e6:	4682      	mov	sl, r0
 80099e8:	468b      	mov	fp, r1
 80099ea:	4640      	mov	r0, r8
 80099ec:	4649      	mov	r1, r9
 80099ee:	2200      	movs	r2, #0
 80099f0:	f7f6 fe22 	bl	8000638 <__aeabi_dmul>
 80099f4:	4680      	mov	r8, r0
 80099f6:	4689      	mov	r9, r1
 80099f8:	e7c6      	b.n	8009988 <_dtoa_r+0x510>
 80099fa:	4650      	mov	r0, sl
 80099fc:	4659      	mov	r1, fp
 80099fe:	f7f6 fe1b 	bl	8000638 <__aeabi_dmul>
 8009a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a04:	9d01      	ldr	r5, [sp, #4]
 8009a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a08:	4682      	mov	sl, r0
 8009a0a:	468b      	mov	fp, r1
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	4640      	mov	r0, r8
 8009a10:	f7f7 f8c2 	bl	8000b98 <__aeabi_d2iz>
 8009a14:	4606      	mov	r6, r0
 8009a16:	f7f6 fda5 	bl	8000564 <__aeabi_i2d>
 8009a1a:	3630      	adds	r6, #48	; 0x30
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4640      	mov	r0, r8
 8009a22:	4649      	mov	r1, r9
 8009a24:	f7f6 fc50 	bl	80002c8 <__aeabi_dsub>
 8009a28:	f805 6b01 	strb.w	r6, [r5], #1
 8009a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a2e:	429d      	cmp	r5, r3
 8009a30:	4680      	mov	r8, r0
 8009a32:	4689      	mov	r9, r1
 8009a34:	f04f 0200 	mov.w	r2, #0
 8009a38:	d124      	bne.n	8009a84 <_dtoa_r+0x60c>
 8009a3a:	4b1b      	ldr	r3, [pc, #108]	; (8009aa8 <_dtoa_r+0x630>)
 8009a3c:	4650      	mov	r0, sl
 8009a3e:	4659      	mov	r1, fp
 8009a40:	f7f6 fc44 	bl	80002cc <__adddf3>
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	4640      	mov	r0, r8
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	f7f7 f884 	bl	8000b58 <__aeabi_dcmpgt>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d173      	bne.n	8009b3c <_dtoa_r+0x6c4>
 8009a54:	4652      	mov	r2, sl
 8009a56:	465b      	mov	r3, fp
 8009a58:	4913      	ldr	r1, [pc, #76]	; (8009aa8 <_dtoa_r+0x630>)
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	f7f6 fc34 	bl	80002c8 <__aeabi_dsub>
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	4640      	mov	r0, r8
 8009a66:	4649      	mov	r1, r9
 8009a68:	f7f7 f858 	bl	8000b1c <__aeabi_dcmplt>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	f43f af35 	beq.w	80098dc <_dtoa_r+0x464>
 8009a72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a74:	1e6b      	subs	r3, r5, #1
 8009a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a7c:	2b30      	cmp	r3, #48	; 0x30
 8009a7e:	d0f8      	beq.n	8009a72 <_dtoa_r+0x5fa>
 8009a80:	9700      	str	r7, [sp, #0]
 8009a82:	e049      	b.n	8009b18 <_dtoa_r+0x6a0>
 8009a84:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <_dtoa_r+0x624>)
 8009a86:	f7f6 fdd7 	bl	8000638 <__aeabi_dmul>
 8009a8a:	4680      	mov	r8, r0
 8009a8c:	4689      	mov	r9, r1
 8009a8e:	e7bd      	b.n	8009a0c <_dtoa_r+0x594>
 8009a90:	0800d490 	.word	0x0800d490
 8009a94:	0800d468 	.word	0x0800d468
 8009a98:	3ff00000 	.word	0x3ff00000
 8009a9c:	40240000 	.word	0x40240000
 8009aa0:	401c0000 	.word	0x401c0000
 8009aa4:	40140000 	.word	0x40140000
 8009aa8:	3fe00000 	.word	0x3fe00000
 8009aac:	9d01      	ldr	r5, [sp, #4]
 8009aae:	4656      	mov	r6, sl
 8009ab0:	465f      	mov	r7, fp
 8009ab2:	4642      	mov	r2, r8
 8009ab4:	464b      	mov	r3, r9
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	4639      	mov	r1, r7
 8009aba:	f7f6 fee7 	bl	800088c <__aeabi_ddiv>
 8009abe:	f7f7 f86b 	bl	8000b98 <__aeabi_d2iz>
 8009ac2:	4682      	mov	sl, r0
 8009ac4:	f7f6 fd4e 	bl	8000564 <__aeabi_i2d>
 8009ac8:	4642      	mov	r2, r8
 8009aca:	464b      	mov	r3, r9
 8009acc:	f7f6 fdb4 	bl	8000638 <__aeabi_dmul>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009adc:	f7f6 fbf4 	bl	80002c8 <__aeabi_dsub>
 8009ae0:	f805 6b01 	strb.w	r6, [r5], #1
 8009ae4:	9e01      	ldr	r6, [sp, #4]
 8009ae6:	9f03      	ldr	r7, [sp, #12]
 8009ae8:	1bae      	subs	r6, r5, r6
 8009aea:	42b7      	cmp	r7, r6
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	d135      	bne.n	8009b5e <_dtoa_r+0x6e6>
 8009af2:	f7f6 fbeb 	bl	80002cc <__adddf3>
 8009af6:	4642      	mov	r2, r8
 8009af8:	464b      	mov	r3, r9
 8009afa:	4606      	mov	r6, r0
 8009afc:	460f      	mov	r7, r1
 8009afe:	f7f7 f82b 	bl	8000b58 <__aeabi_dcmpgt>
 8009b02:	b9d0      	cbnz	r0, 8009b3a <_dtoa_r+0x6c2>
 8009b04:	4642      	mov	r2, r8
 8009b06:	464b      	mov	r3, r9
 8009b08:	4630      	mov	r0, r6
 8009b0a:	4639      	mov	r1, r7
 8009b0c:	f7f6 fffc 	bl	8000b08 <__aeabi_dcmpeq>
 8009b10:	b110      	cbz	r0, 8009b18 <_dtoa_r+0x6a0>
 8009b12:	f01a 0f01 	tst.w	sl, #1
 8009b16:	d110      	bne.n	8009b3a <_dtoa_r+0x6c2>
 8009b18:	4620      	mov	r0, r4
 8009b1a:	ee18 1a10 	vmov	r1, s16
 8009b1e:	f001 f8d7 	bl	800acd0 <_Bfree>
 8009b22:	2300      	movs	r3, #0
 8009b24:	9800      	ldr	r0, [sp, #0]
 8009b26:	702b      	strb	r3, [r5, #0]
 8009b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	6018      	str	r0, [r3, #0]
 8009b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f43f acf1 	beq.w	8009518 <_dtoa_r+0xa0>
 8009b36:	601d      	str	r5, [r3, #0]
 8009b38:	e4ee      	b.n	8009518 <_dtoa_r+0xa0>
 8009b3a:	9f00      	ldr	r7, [sp, #0]
 8009b3c:	462b      	mov	r3, r5
 8009b3e:	461d      	mov	r5, r3
 8009b40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b44:	2a39      	cmp	r2, #57	; 0x39
 8009b46:	d106      	bne.n	8009b56 <_dtoa_r+0x6de>
 8009b48:	9a01      	ldr	r2, [sp, #4]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d1f7      	bne.n	8009b3e <_dtoa_r+0x6c6>
 8009b4e:	9901      	ldr	r1, [sp, #4]
 8009b50:	2230      	movs	r2, #48	; 0x30
 8009b52:	3701      	adds	r7, #1
 8009b54:	700a      	strb	r2, [r1, #0]
 8009b56:	781a      	ldrb	r2, [r3, #0]
 8009b58:	3201      	adds	r2, #1
 8009b5a:	701a      	strb	r2, [r3, #0]
 8009b5c:	e790      	b.n	8009a80 <_dtoa_r+0x608>
 8009b5e:	4ba6      	ldr	r3, [pc, #664]	; (8009df8 <_dtoa_r+0x980>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	f7f6 fd69 	bl	8000638 <__aeabi_dmul>
 8009b66:	2200      	movs	r2, #0
 8009b68:	2300      	movs	r3, #0
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460f      	mov	r7, r1
 8009b6e:	f7f6 ffcb 	bl	8000b08 <__aeabi_dcmpeq>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d09d      	beq.n	8009ab2 <_dtoa_r+0x63a>
 8009b76:	e7cf      	b.n	8009b18 <_dtoa_r+0x6a0>
 8009b78:	9a08      	ldr	r2, [sp, #32]
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	f000 80d7 	beq.w	8009d2e <_dtoa_r+0x8b6>
 8009b80:	9a06      	ldr	r2, [sp, #24]
 8009b82:	2a01      	cmp	r2, #1
 8009b84:	f300 80ba 	bgt.w	8009cfc <_dtoa_r+0x884>
 8009b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b8a:	2a00      	cmp	r2, #0
 8009b8c:	f000 80b2 	beq.w	8009cf4 <_dtoa_r+0x87c>
 8009b90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b94:	9e07      	ldr	r6, [sp, #28]
 8009b96:	9d04      	ldr	r5, [sp, #16]
 8009b98:	9a04      	ldr	r2, [sp, #16]
 8009b9a:	441a      	add	r2, r3
 8009b9c:	9204      	str	r2, [sp, #16]
 8009b9e:	9a05      	ldr	r2, [sp, #20]
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	441a      	add	r2, r3
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	9205      	str	r2, [sp, #20]
 8009ba8:	f001 f994 	bl	800aed4 <__i2b>
 8009bac:	4607      	mov	r7, r0
 8009bae:	2d00      	cmp	r5, #0
 8009bb0:	dd0c      	ble.n	8009bcc <_dtoa_r+0x754>
 8009bb2:	9b05      	ldr	r3, [sp, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	dd09      	ble.n	8009bcc <_dtoa_r+0x754>
 8009bb8:	42ab      	cmp	r3, r5
 8009bba:	9a04      	ldr	r2, [sp, #16]
 8009bbc:	bfa8      	it	ge
 8009bbe:	462b      	movge	r3, r5
 8009bc0:	1ad2      	subs	r2, r2, r3
 8009bc2:	9204      	str	r2, [sp, #16]
 8009bc4:	9a05      	ldr	r2, [sp, #20]
 8009bc6:	1aed      	subs	r5, r5, r3
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	9305      	str	r3, [sp, #20]
 8009bcc:	9b07      	ldr	r3, [sp, #28]
 8009bce:	b31b      	cbz	r3, 8009c18 <_dtoa_r+0x7a0>
 8009bd0:	9b08      	ldr	r3, [sp, #32]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 80af 	beq.w	8009d36 <_dtoa_r+0x8be>
 8009bd8:	2e00      	cmp	r6, #0
 8009bda:	dd13      	ble.n	8009c04 <_dtoa_r+0x78c>
 8009bdc:	4639      	mov	r1, r7
 8009bde:	4632      	mov	r2, r6
 8009be0:	4620      	mov	r0, r4
 8009be2:	f001 fa37 	bl	800b054 <__pow5mult>
 8009be6:	ee18 2a10 	vmov	r2, s16
 8009bea:	4601      	mov	r1, r0
 8009bec:	4607      	mov	r7, r0
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f001 f986 	bl	800af00 <__multiply>
 8009bf4:	ee18 1a10 	vmov	r1, s16
 8009bf8:	4680      	mov	r8, r0
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f001 f868 	bl	800acd0 <_Bfree>
 8009c00:	ee08 8a10 	vmov	s16, r8
 8009c04:	9b07      	ldr	r3, [sp, #28]
 8009c06:	1b9a      	subs	r2, r3, r6
 8009c08:	d006      	beq.n	8009c18 <_dtoa_r+0x7a0>
 8009c0a:	ee18 1a10 	vmov	r1, s16
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f001 fa20 	bl	800b054 <__pow5mult>
 8009c14:	ee08 0a10 	vmov	s16, r0
 8009c18:	2101      	movs	r1, #1
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f001 f95a 	bl	800aed4 <__i2b>
 8009c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	4606      	mov	r6, r0
 8009c26:	f340 8088 	ble.w	8009d3a <_dtoa_r+0x8c2>
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f001 fa10 	bl	800b054 <__pow5mult>
 8009c34:	9b06      	ldr	r3, [sp, #24]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	4606      	mov	r6, r0
 8009c3a:	f340 8081 	ble.w	8009d40 <_dtoa_r+0x8c8>
 8009c3e:	f04f 0800 	mov.w	r8, #0
 8009c42:	6933      	ldr	r3, [r6, #16]
 8009c44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c48:	6918      	ldr	r0, [r3, #16]
 8009c4a:	f001 f8f3 	bl	800ae34 <__hi0bits>
 8009c4e:	f1c0 0020 	rsb	r0, r0, #32
 8009c52:	9b05      	ldr	r3, [sp, #20]
 8009c54:	4418      	add	r0, r3
 8009c56:	f010 001f 	ands.w	r0, r0, #31
 8009c5a:	f000 8092 	beq.w	8009d82 <_dtoa_r+0x90a>
 8009c5e:	f1c0 0320 	rsb	r3, r0, #32
 8009c62:	2b04      	cmp	r3, #4
 8009c64:	f340 808a 	ble.w	8009d7c <_dtoa_r+0x904>
 8009c68:	f1c0 001c 	rsb	r0, r0, #28
 8009c6c:	9b04      	ldr	r3, [sp, #16]
 8009c6e:	4403      	add	r3, r0
 8009c70:	9304      	str	r3, [sp, #16]
 8009c72:	9b05      	ldr	r3, [sp, #20]
 8009c74:	4403      	add	r3, r0
 8009c76:	4405      	add	r5, r0
 8009c78:	9305      	str	r3, [sp, #20]
 8009c7a:	9b04      	ldr	r3, [sp, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	dd07      	ble.n	8009c90 <_dtoa_r+0x818>
 8009c80:	ee18 1a10 	vmov	r1, s16
 8009c84:	461a      	mov	r2, r3
 8009c86:	4620      	mov	r0, r4
 8009c88:	f001 fa3e 	bl	800b108 <__lshift>
 8009c8c:	ee08 0a10 	vmov	s16, r0
 8009c90:	9b05      	ldr	r3, [sp, #20]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	dd05      	ble.n	8009ca2 <_dtoa_r+0x82a>
 8009c96:	4631      	mov	r1, r6
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f001 fa34 	bl	800b108 <__lshift>
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d06e      	beq.n	8009d86 <_dtoa_r+0x90e>
 8009ca8:	ee18 0a10 	vmov	r0, s16
 8009cac:	4631      	mov	r1, r6
 8009cae:	f001 fa9b 	bl	800b1e8 <__mcmp>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	da67      	bge.n	8009d86 <_dtoa_r+0x90e>
 8009cb6:	9b00      	ldr	r3, [sp, #0]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	ee18 1a10 	vmov	r1, s16
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	220a      	movs	r2, #10
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f001 f825 	bl	800ad14 <__multadd>
 8009cca:	9b08      	ldr	r3, [sp, #32]
 8009ccc:	ee08 0a10 	vmov	s16, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 81b1 	beq.w	800a038 <_dtoa_r+0xbc0>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	4639      	mov	r1, r7
 8009cda:	220a      	movs	r2, #10
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f001 f819 	bl	800ad14 <__multadd>
 8009ce2:	9b02      	ldr	r3, [sp, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	f300 808e 	bgt.w	8009e08 <_dtoa_r+0x990>
 8009cec:	9b06      	ldr	r3, [sp, #24]
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	dc51      	bgt.n	8009d96 <_dtoa_r+0x91e>
 8009cf2:	e089      	b.n	8009e08 <_dtoa_r+0x990>
 8009cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009cfa:	e74b      	b.n	8009b94 <_dtoa_r+0x71c>
 8009cfc:	9b03      	ldr	r3, [sp, #12]
 8009cfe:	1e5e      	subs	r6, r3, #1
 8009d00:	9b07      	ldr	r3, [sp, #28]
 8009d02:	42b3      	cmp	r3, r6
 8009d04:	bfbf      	itttt	lt
 8009d06:	9b07      	ldrlt	r3, [sp, #28]
 8009d08:	9607      	strlt	r6, [sp, #28]
 8009d0a:	1af2      	sublt	r2, r6, r3
 8009d0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009d0e:	bfb6      	itet	lt
 8009d10:	189b      	addlt	r3, r3, r2
 8009d12:	1b9e      	subge	r6, r3, r6
 8009d14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009d16:	9b03      	ldr	r3, [sp, #12]
 8009d18:	bfb8      	it	lt
 8009d1a:	2600      	movlt	r6, #0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	bfb7      	itett	lt
 8009d20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009d24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009d28:	1a9d      	sublt	r5, r3, r2
 8009d2a:	2300      	movlt	r3, #0
 8009d2c:	e734      	b.n	8009b98 <_dtoa_r+0x720>
 8009d2e:	9e07      	ldr	r6, [sp, #28]
 8009d30:	9d04      	ldr	r5, [sp, #16]
 8009d32:	9f08      	ldr	r7, [sp, #32]
 8009d34:	e73b      	b.n	8009bae <_dtoa_r+0x736>
 8009d36:	9a07      	ldr	r2, [sp, #28]
 8009d38:	e767      	b.n	8009c0a <_dtoa_r+0x792>
 8009d3a:	9b06      	ldr	r3, [sp, #24]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	dc18      	bgt.n	8009d72 <_dtoa_r+0x8fa>
 8009d40:	f1ba 0f00 	cmp.w	sl, #0
 8009d44:	d115      	bne.n	8009d72 <_dtoa_r+0x8fa>
 8009d46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d4a:	b993      	cbnz	r3, 8009d72 <_dtoa_r+0x8fa>
 8009d4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d50:	0d1b      	lsrs	r3, r3, #20
 8009d52:	051b      	lsls	r3, r3, #20
 8009d54:	b183      	cbz	r3, 8009d78 <_dtoa_r+0x900>
 8009d56:	9b04      	ldr	r3, [sp, #16]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	9304      	str	r3, [sp, #16]
 8009d5c:	9b05      	ldr	r3, [sp, #20]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	f04f 0801 	mov.w	r8, #1
 8009d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f47f af6a 	bne.w	8009c42 <_dtoa_r+0x7ca>
 8009d6e:	2001      	movs	r0, #1
 8009d70:	e76f      	b.n	8009c52 <_dtoa_r+0x7da>
 8009d72:	f04f 0800 	mov.w	r8, #0
 8009d76:	e7f6      	b.n	8009d66 <_dtoa_r+0x8ee>
 8009d78:	4698      	mov	r8, r3
 8009d7a:	e7f4      	b.n	8009d66 <_dtoa_r+0x8ee>
 8009d7c:	f43f af7d 	beq.w	8009c7a <_dtoa_r+0x802>
 8009d80:	4618      	mov	r0, r3
 8009d82:	301c      	adds	r0, #28
 8009d84:	e772      	b.n	8009c6c <_dtoa_r+0x7f4>
 8009d86:	9b03      	ldr	r3, [sp, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	dc37      	bgt.n	8009dfc <_dtoa_r+0x984>
 8009d8c:	9b06      	ldr	r3, [sp, #24]
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	dd34      	ble.n	8009dfc <_dtoa_r+0x984>
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	9302      	str	r3, [sp, #8]
 8009d96:	9b02      	ldr	r3, [sp, #8]
 8009d98:	b96b      	cbnz	r3, 8009db6 <_dtoa_r+0x93e>
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	2205      	movs	r2, #5
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f000 ffb8 	bl	800ad14 <__multadd>
 8009da4:	4601      	mov	r1, r0
 8009da6:	4606      	mov	r6, r0
 8009da8:	ee18 0a10 	vmov	r0, s16
 8009dac:	f001 fa1c 	bl	800b1e8 <__mcmp>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	f73f adbb 	bgt.w	800992c <_dtoa_r+0x4b4>
 8009db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db8:	9d01      	ldr	r5, [sp, #4]
 8009dba:	43db      	mvns	r3, r3
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	f04f 0800 	mov.w	r8, #0
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 ff83 	bl	800acd0 <_Bfree>
 8009dca:	2f00      	cmp	r7, #0
 8009dcc:	f43f aea4 	beq.w	8009b18 <_dtoa_r+0x6a0>
 8009dd0:	f1b8 0f00 	cmp.w	r8, #0
 8009dd4:	d005      	beq.n	8009de2 <_dtoa_r+0x96a>
 8009dd6:	45b8      	cmp	r8, r7
 8009dd8:	d003      	beq.n	8009de2 <_dtoa_r+0x96a>
 8009dda:	4641      	mov	r1, r8
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f000 ff77 	bl	800acd0 <_Bfree>
 8009de2:	4639      	mov	r1, r7
 8009de4:	4620      	mov	r0, r4
 8009de6:	f000 ff73 	bl	800acd0 <_Bfree>
 8009dea:	e695      	b.n	8009b18 <_dtoa_r+0x6a0>
 8009dec:	2600      	movs	r6, #0
 8009dee:	4637      	mov	r7, r6
 8009df0:	e7e1      	b.n	8009db6 <_dtoa_r+0x93e>
 8009df2:	9700      	str	r7, [sp, #0]
 8009df4:	4637      	mov	r7, r6
 8009df6:	e599      	b.n	800992c <_dtoa_r+0x4b4>
 8009df8:	40240000 	.word	0x40240000
 8009dfc:	9b08      	ldr	r3, [sp, #32]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f000 80ca 	beq.w	8009f98 <_dtoa_r+0xb20>
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	9302      	str	r3, [sp, #8]
 8009e08:	2d00      	cmp	r5, #0
 8009e0a:	dd05      	ble.n	8009e18 <_dtoa_r+0x9a0>
 8009e0c:	4639      	mov	r1, r7
 8009e0e:	462a      	mov	r2, r5
 8009e10:	4620      	mov	r0, r4
 8009e12:	f001 f979 	bl	800b108 <__lshift>
 8009e16:	4607      	mov	r7, r0
 8009e18:	f1b8 0f00 	cmp.w	r8, #0
 8009e1c:	d05b      	beq.n	8009ed6 <_dtoa_r+0xa5e>
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	4620      	mov	r0, r4
 8009e22:	f000 ff15 	bl	800ac50 <_Balloc>
 8009e26:	4605      	mov	r5, r0
 8009e28:	b928      	cbnz	r0, 8009e36 <_dtoa_r+0x9be>
 8009e2a:	4b87      	ldr	r3, [pc, #540]	; (800a048 <_dtoa_r+0xbd0>)
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009e32:	f7ff bb3b 	b.w	80094ac <_dtoa_r+0x34>
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	3202      	adds	r2, #2
 8009e3a:	0092      	lsls	r2, r2, #2
 8009e3c:	f107 010c 	add.w	r1, r7, #12
 8009e40:	300c      	adds	r0, #12
 8009e42:	f000 fef7 	bl	800ac34 <memcpy>
 8009e46:	2201      	movs	r2, #1
 8009e48:	4629      	mov	r1, r5
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f001 f95c 	bl	800b108 <__lshift>
 8009e50:	9b01      	ldr	r3, [sp, #4]
 8009e52:	f103 0901 	add.w	r9, r3, #1
 8009e56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	9305      	str	r3, [sp, #20]
 8009e5e:	f00a 0301 	and.w	r3, sl, #1
 8009e62:	46b8      	mov	r8, r7
 8009e64:	9304      	str	r3, [sp, #16]
 8009e66:	4607      	mov	r7, r0
 8009e68:	4631      	mov	r1, r6
 8009e6a:	ee18 0a10 	vmov	r0, s16
 8009e6e:	f7ff fa75 	bl	800935c <quorem>
 8009e72:	4641      	mov	r1, r8
 8009e74:	9002      	str	r0, [sp, #8]
 8009e76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e7a:	ee18 0a10 	vmov	r0, s16
 8009e7e:	f001 f9b3 	bl	800b1e8 <__mcmp>
 8009e82:	463a      	mov	r2, r7
 8009e84:	9003      	str	r0, [sp, #12]
 8009e86:	4631      	mov	r1, r6
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f001 f9c9 	bl	800b220 <__mdiff>
 8009e8e:	68c2      	ldr	r2, [r0, #12]
 8009e90:	f109 3bff 	add.w	fp, r9, #4294967295
 8009e94:	4605      	mov	r5, r0
 8009e96:	bb02      	cbnz	r2, 8009eda <_dtoa_r+0xa62>
 8009e98:	4601      	mov	r1, r0
 8009e9a:	ee18 0a10 	vmov	r0, s16
 8009e9e:	f001 f9a3 	bl	800b1e8 <__mcmp>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	9207      	str	r2, [sp, #28]
 8009eaa:	f000 ff11 	bl	800acd0 <_Bfree>
 8009eae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009eb2:	ea43 0102 	orr.w	r1, r3, r2
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	430b      	orrs	r3, r1
 8009eba:	464d      	mov	r5, r9
 8009ebc:	d10f      	bne.n	8009ede <_dtoa_r+0xa66>
 8009ebe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ec2:	d02a      	beq.n	8009f1a <_dtoa_r+0xaa2>
 8009ec4:	9b03      	ldr	r3, [sp, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	dd02      	ble.n	8009ed0 <_dtoa_r+0xa58>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009ed0:	f88b a000 	strb.w	sl, [fp]
 8009ed4:	e775      	b.n	8009dc2 <_dtoa_r+0x94a>
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	e7ba      	b.n	8009e50 <_dtoa_r+0x9d8>
 8009eda:	2201      	movs	r2, #1
 8009edc:	e7e2      	b.n	8009ea4 <_dtoa_r+0xa2c>
 8009ede:	9b03      	ldr	r3, [sp, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	db04      	blt.n	8009eee <_dtoa_r+0xa76>
 8009ee4:	9906      	ldr	r1, [sp, #24]
 8009ee6:	430b      	orrs	r3, r1
 8009ee8:	9904      	ldr	r1, [sp, #16]
 8009eea:	430b      	orrs	r3, r1
 8009eec:	d122      	bne.n	8009f34 <_dtoa_r+0xabc>
 8009eee:	2a00      	cmp	r2, #0
 8009ef0:	ddee      	ble.n	8009ed0 <_dtoa_r+0xa58>
 8009ef2:	ee18 1a10 	vmov	r1, s16
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f001 f905 	bl	800b108 <__lshift>
 8009efe:	4631      	mov	r1, r6
 8009f00:	ee08 0a10 	vmov	s16, r0
 8009f04:	f001 f970 	bl	800b1e8 <__mcmp>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	dc03      	bgt.n	8009f14 <_dtoa_r+0xa9c>
 8009f0c:	d1e0      	bne.n	8009ed0 <_dtoa_r+0xa58>
 8009f0e:	f01a 0f01 	tst.w	sl, #1
 8009f12:	d0dd      	beq.n	8009ed0 <_dtoa_r+0xa58>
 8009f14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f18:	d1d7      	bne.n	8009eca <_dtoa_r+0xa52>
 8009f1a:	2339      	movs	r3, #57	; 0x39
 8009f1c:	f88b 3000 	strb.w	r3, [fp]
 8009f20:	462b      	mov	r3, r5
 8009f22:	461d      	mov	r5, r3
 8009f24:	3b01      	subs	r3, #1
 8009f26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f2a:	2a39      	cmp	r2, #57	; 0x39
 8009f2c:	d071      	beq.n	800a012 <_dtoa_r+0xb9a>
 8009f2e:	3201      	adds	r2, #1
 8009f30:	701a      	strb	r2, [r3, #0]
 8009f32:	e746      	b.n	8009dc2 <_dtoa_r+0x94a>
 8009f34:	2a00      	cmp	r2, #0
 8009f36:	dd07      	ble.n	8009f48 <_dtoa_r+0xad0>
 8009f38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f3c:	d0ed      	beq.n	8009f1a <_dtoa_r+0xaa2>
 8009f3e:	f10a 0301 	add.w	r3, sl, #1
 8009f42:	f88b 3000 	strb.w	r3, [fp]
 8009f46:	e73c      	b.n	8009dc2 <_dtoa_r+0x94a>
 8009f48:	9b05      	ldr	r3, [sp, #20]
 8009f4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009f4e:	4599      	cmp	r9, r3
 8009f50:	d047      	beq.n	8009fe2 <_dtoa_r+0xb6a>
 8009f52:	ee18 1a10 	vmov	r1, s16
 8009f56:	2300      	movs	r3, #0
 8009f58:	220a      	movs	r2, #10
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 feda 	bl	800ad14 <__multadd>
 8009f60:	45b8      	cmp	r8, r7
 8009f62:	ee08 0a10 	vmov	s16, r0
 8009f66:	f04f 0300 	mov.w	r3, #0
 8009f6a:	f04f 020a 	mov.w	r2, #10
 8009f6e:	4641      	mov	r1, r8
 8009f70:	4620      	mov	r0, r4
 8009f72:	d106      	bne.n	8009f82 <_dtoa_r+0xb0a>
 8009f74:	f000 fece 	bl	800ad14 <__multadd>
 8009f78:	4680      	mov	r8, r0
 8009f7a:	4607      	mov	r7, r0
 8009f7c:	f109 0901 	add.w	r9, r9, #1
 8009f80:	e772      	b.n	8009e68 <_dtoa_r+0x9f0>
 8009f82:	f000 fec7 	bl	800ad14 <__multadd>
 8009f86:	4639      	mov	r1, r7
 8009f88:	4680      	mov	r8, r0
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	220a      	movs	r2, #10
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 fec0 	bl	800ad14 <__multadd>
 8009f94:	4607      	mov	r7, r0
 8009f96:	e7f1      	b.n	8009f7c <_dtoa_r+0xb04>
 8009f98:	9b03      	ldr	r3, [sp, #12]
 8009f9a:	9302      	str	r3, [sp, #8]
 8009f9c:	9d01      	ldr	r5, [sp, #4]
 8009f9e:	ee18 0a10 	vmov	r0, s16
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	f7ff f9da 	bl	800935c <quorem>
 8009fa8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009fac:	9b01      	ldr	r3, [sp, #4]
 8009fae:	f805 ab01 	strb.w	sl, [r5], #1
 8009fb2:	1aea      	subs	r2, r5, r3
 8009fb4:	9b02      	ldr	r3, [sp, #8]
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	dd09      	ble.n	8009fce <_dtoa_r+0xb56>
 8009fba:	ee18 1a10 	vmov	r1, s16
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	220a      	movs	r2, #10
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 fea6 	bl	800ad14 <__multadd>
 8009fc8:	ee08 0a10 	vmov	s16, r0
 8009fcc:	e7e7      	b.n	8009f9e <_dtoa_r+0xb26>
 8009fce:	9b02      	ldr	r3, [sp, #8]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	bfc8      	it	gt
 8009fd4:	461d      	movgt	r5, r3
 8009fd6:	9b01      	ldr	r3, [sp, #4]
 8009fd8:	bfd8      	it	le
 8009fda:	2501      	movle	r5, #1
 8009fdc:	441d      	add	r5, r3
 8009fde:	f04f 0800 	mov.w	r8, #0
 8009fe2:	ee18 1a10 	vmov	r1, s16
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f001 f88d 	bl	800b108 <__lshift>
 8009fee:	4631      	mov	r1, r6
 8009ff0:	ee08 0a10 	vmov	s16, r0
 8009ff4:	f001 f8f8 	bl	800b1e8 <__mcmp>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	dc91      	bgt.n	8009f20 <_dtoa_r+0xaa8>
 8009ffc:	d102      	bne.n	800a004 <_dtoa_r+0xb8c>
 8009ffe:	f01a 0f01 	tst.w	sl, #1
 800a002:	d18d      	bne.n	8009f20 <_dtoa_r+0xaa8>
 800a004:	462b      	mov	r3, r5
 800a006:	461d      	mov	r5, r3
 800a008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a00c:	2a30      	cmp	r2, #48	; 0x30
 800a00e:	d0fa      	beq.n	800a006 <_dtoa_r+0xb8e>
 800a010:	e6d7      	b.n	8009dc2 <_dtoa_r+0x94a>
 800a012:	9a01      	ldr	r2, [sp, #4]
 800a014:	429a      	cmp	r2, r3
 800a016:	d184      	bne.n	8009f22 <_dtoa_r+0xaaa>
 800a018:	9b00      	ldr	r3, [sp, #0]
 800a01a:	3301      	adds	r3, #1
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	2331      	movs	r3, #49	; 0x31
 800a020:	7013      	strb	r3, [r2, #0]
 800a022:	e6ce      	b.n	8009dc2 <_dtoa_r+0x94a>
 800a024:	4b09      	ldr	r3, [pc, #36]	; (800a04c <_dtoa_r+0xbd4>)
 800a026:	f7ff ba95 	b.w	8009554 <_dtoa_r+0xdc>
 800a02a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f47f aa6e 	bne.w	800950e <_dtoa_r+0x96>
 800a032:	4b07      	ldr	r3, [pc, #28]	; (800a050 <_dtoa_r+0xbd8>)
 800a034:	f7ff ba8e 	b.w	8009554 <_dtoa_r+0xdc>
 800a038:	9b02      	ldr	r3, [sp, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	dcae      	bgt.n	8009f9c <_dtoa_r+0xb24>
 800a03e:	9b06      	ldr	r3, [sp, #24]
 800a040:	2b02      	cmp	r3, #2
 800a042:	f73f aea8 	bgt.w	8009d96 <_dtoa_r+0x91e>
 800a046:	e7a9      	b.n	8009f9c <_dtoa_r+0xb24>
 800a048:	0800d318 	.word	0x0800d318
 800a04c:	0800d579 	.word	0x0800d579
 800a050:	0800d299 	.word	0x0800d299

0800a054 <__sflush_r>:
 800a054:	898a      	ldrh	r2, [r1, #12]
 800a056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05a:	4605      	mov	r5, r0
 800a05c:	0710      	lsls	r0, r2, #28
 800a05e:	460c      	mov	r4, r1
 800a060:	d458      	bmi.n	800a114 <__sflush_r+0xc0>
 800a062:	684b      	ldr	r3, [r1, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	dc05      	bgt.n	800a074 <__sflush_r+0x20>
 800a068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dc02      	bgt.n	800a074 <__sflush_r+0x20>
 800a06e:	2000      	movs	r0, #0
 800a070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a076:	2e00      	cmp	r6, #0
 800a078:	d0f9      	beq.n	800a06e <__sflush_r+0x1a>
 800a07a:	2300      	movs	r3, #0
 800a07c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a080:	682f      	ldr	r7, [r5, #0]
 800a082:	602b      	str	r3, [r5, #0]
 800a084:	d032      	beq.n	800a0ec <__sflush_r+0x98>
 800a086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	075a      	lsls	r2, r3, #29
 800a08c:	d505      	bpl.n	800a09a <__sflush_r+0x46>
 800a08e:	6863      	ldr	r3, [r4, #4]
 800a090:	1ac0      	subs	r0, r0, r3
 800a092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a094:	b10b      	cbz	r3, 800a09a <__sflush_r+0x46>
 800a096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a098:	1ac0      	subs	r0, r0, r3
 800a09a:	2300      	movs	r3, #0
 800a09c:	4602      	mov	r2, r0
 800a09e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0a0:	6a21      	ldr	r1, [r4, #32]
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	47b0      	blx	r6
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	d106      	bne.n	800a0ba <__sflush_r+0x66>
 800a0ac:	6829      	ldr	r1, [r5, #0]
 800a0ae:	291d      	cmp	r1, #29
 800a0b0:	d82c      	bhi.n	800a10c <__sflush_r+0xb8>
 800a0b2:	4a2a      	ldr	r2, [pc, #168]	; (800a15c <__sflush_r+0x108>)
 800a0b4:	40ca      	lsrs	r2, r1
 800a0b6:	07d6      	lsls	r6, r2, #31
 800a0b8:	d528      	bpl.n	800a10c <__sflush_r+0xb8>
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	6062      	str	r2, [r4, #4]
 800a0be:	04d9      	lsls	r1, r3, #19
 800a0c0:	6922      	ldr	r2, [r4, #16]
 800a0c2:	6022      	str	r2, [r4, #0]
 800a0c4:	d504      	bpl.n	800a0d0 <__sflush_r+0x7c>
 800a0c6:	1c42      	adds	r2, r0, #1
 800a0c8:	d101      	bne.n	800a0ce <__sflush_r+0x7a>
 800a0ca:	682b      	ldr	r3, [r5, #0]
 800a0cc:	b903      	cbnz	r3, 800a0d0 <__sflush_r+0x7c>
 800a0ce:	6560      	str	r0, [r4, #84]	; 0x54
 800a0d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0d2:	602f      	str	r7, [r5, #0]
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	d0ca      	beq.n	800a06e <__sflush_r+0x1a>
 800a0d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0dc:	4299      	cmp	r1, r3
 800a0de:	d002      	beq.n	800a0e6 <__sflush_r+0x92>
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	f001 fa8d 	bl	800b600 <_free_r>
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	6360      	str	r0, [r4, #52]	; 0x34
 800a0ea:	e7c1      	b.n	800a070 <__sflush_r+0x1c>
 800a0ec:	6a21      	ldr	r1, [r4, #32]
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b0      	blx	r6
 800a0f4:	1c41      	adds	r1, r0, #1
 800a0f6:	d1c7      	bne.n	800a088 <__sflush_r+0x34>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0c4      	beq.n	800a088 <__sflush_r+0x34>
 800a0fe:	2b1d      	cmp	r3, #29
 800a100:	d001      	beq.n	800a106 <__sflush_r+0xb2>
 800a102:	2b16      	cmp	r3, #22
 800a104:	d101      	bne.n	800a10a <__sflush_r+0xb6>
 800a106:	602f      	str	r7, [r5, #0]
 800a108:	e7b1      	b.n	800a06e <__sflush_r+0x1a>
 800a10a:	89a3      	ldrh	r3, [r4, #12]
 800a10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a110:	81a3      	strh	r3, [r4, #12]
 800a112:	e7ad      	b.n	800a070 <__sflush_r+0x1c>
 800a114:	690f      	ldr	r7, [r1, #16]
 800a116:	2f00      	cmp	r7, #0
 800a118:	d0a9      	beq.n	800a06e <__sflush_r+0x1a>
 800a11a:	0793      	lsls	r3, r2, #30
 800a11c:	680e      	ldr	r6, [r1, #0]
 800a11e:	bf08      	it	eq
 800a120:	694b      	ldreq	r3, [r1, #20]
 800a122:	600f      	str	r7, [r1, #0]
 800a124:	bf18      	it	ne
 800a126:	2300      	movne	r3, #0
 800a128:	eba6 0807 	sub.w	r8, r6, r7
 800a12c:	608b      	str	r3, [r1, #8]
 800a12e:	f1b8 0f00 	cmp.w	r8, #0
 800a132:	dd9c      	ble.n	800a06e <__sflush_r+0x1a>
 800a134:	6a21      	ldr	r1, [r4, #32]
 800a136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a138:	4643      	mov	r3, r8
 800a13a:	463a      	mov	r2, r7
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b0      	blx	r6
 800a140:	2800      	cmp	r0, #0
 800a142:	dc06      	bgt.n	800a152 <__sflush_r+0xfe>
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295
 800a150:	e78e      	b.n	800a070 <__sflush_r+0x1c>
 800a152:	4407      	add	r7, r0
 800a154:	eba8 0800 	sub.w	r8, r8, r0
 800a158:	e7e9      	b.n	800a12e <__sflush_r+0xda>
 800a15a:	bf00      	nop
 800a15c:	20400001 	.word	0x20400001

0800a160 <_fflush_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	690b      	ldr	r3, [r1, #16]
 800a164:	4605      	mov	r5, r0
 800a166:	460c      	mov	r4, r1
 800a168:	b913      	cbnz	r3, 800a170 <_fflush_r+0x10>
 800a16a:	2500      	movs	r5, #0
 800a16c:	4628      	mov	r0, r5
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	b118      	cbz	r0, 800a17a <_fflush_r+0x1a>
 800a172:	6983      	ldr	r3, [r0, #24]
 800a174:	b90b      	cbnz	r3, 800a17a <_fflush_r+0x1a>
 800a176:	f000 f899 	bl	800a2ac <__sinit>
 800a17a:	4b14      	ldr	r3, [pc, #80]	; (800a1cc <_fflush_r+0x6c>)
 800a17c:	429c      	cmp	r4, r3
 800a17e:	d11b      	bne.n	800a1b8 <_fflush_r+0x58>
 800a180:	686c      	ldr	r4, [r5, #4]
 800a182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0ef      	beq.n	800a16a <_fflush_r+0xa>
 800a18a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a18c:	07d0      	lsls	r0, r2, #31
 800a18e:	d404      	bmi.n	800a19a <_fflush_r+0x3a>
 800a190:	0599      	lsls	r1, r3, #22
 800a192:	d402      	bmi.n	800a19a <_fflush_r+0x3a>
 800a194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a196:	f000 fcb8 	bl	800ab0a <__retarget_lock_acquire_recursive>
 800a19a:	4628      	mov	r0, r5
 800a19c:	4621      	mov	r1, r4
 800a19e:	f7ff ff59 	bl	800a054 <__sflush_r>
 800a1a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1a4:	07da      	lsls	r2, r3, #31
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	d4e0      	bmi.n	800a16c <_fflush_r+0xc>
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	059b      	lsls	r3, r3, #22
 800a1ae:	d4dd      	bmi.n	800a16c <_fflush_r+0xc>
 800a1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1b2:	f000 fcab 	bl	800ab0c <__retarget_lock_release_recursive>
 800a1b6:	e7d9      	b.n	800a16c <_fflush_r+0xc>
 800a1b8:	4b05      	ldr	r3, [pc, #20]	; (800a1d0 <_fflush_r+0x70>)
 800a1ba:	429c      	cmp	r4, r3
 800a1bc:	d101      	bne.n	800a1c2 <_fflush_r+0x62>
 800a1be:	68ac      	ldr	r4, [r5, #8]
 800a1c0:	e7df      	b.n	800a182 <_fflush_r+0x22>
 800a1c2:	4b04      	ldr	r3, [pc, #16]	; (800a1d4 <_fflush_r+0x74>)
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	bf08      	it	eq
 800a1c8:	68ec      	ldreq	r4, [r5, #12]
 800a1ca:	e7da      	b.n	800a182 <_fflush_r+0x22>
 800a1cc:	0800d34c 	.word	0x0800d34c
 800a1d0:	0800d36c 	.word	0x0800d36c
 800a1d4:	0800d32c 	.word	0x0800d32c

0800a1d8 <fflush>:
 800a1d8:	4601      	mov	r1, r0
 800a1da:	b920      	cbnz	r0, 800a1e6 <fflush+0xe>
 800a1dc:	4b04      	ldr	r3, [pc, #16]	; (800a1f0 <fflush+0x18>)
 800a1de:	4905      	ldr	r1, [pc, #20]	; (800a1f4 <fflush+0x1c>)
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	f000 b8fe 	b.w	800a3e2 <_fwalk_reent>
 800a1e6:	4b04      	ldr	r3, [pc, #16]	; (800a1f8 <fflush+0x20>)
 800a1e8:	6818      	ldr	r0, [r3, #0]
 800a1ea:	f7ff bfb9 	b.w	800a160 <_fflush_r>
 800a1ee:	bf00      	nop
 800a1f0:	0800d108 	.word	0x0800d108
 800a1f4:	0800a161 	.word	0x0800a161
 800a1f8:	2000000c 	.word	0x2000000c

0800a1fc <std>:
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	b510      	push	{r4, lr}
 800a200:	4604      	mov	r4, r0
 800a202:	e9c0 3300 	strd	r3, r3, [r0]
 800a206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a20a:	6083      	str	r3, [r0, #8]
 800a20c:	8181      	strh	r1, [r0, #12]
 800a20e:	6643      	str	r3, [r0, #100]	; 0x64
 800a210:	81c2      	strh	r2, [r0, #14]
 800a212:	6183      	str	r3, [r0, #24]
 800a214:	4619      	mov	r1, r3
 800a216:	2208      	movs	r2, #8
 800a218:	305c      	adds	r0, #92	; 0x5c
 800a21a:	f7fd f873 	bl	8007304 <memset>
 800a21e:	4b05      	ldr	r3, [pc, #20]	; (800a234 <std+0x38>)
 800a220:	6263      	str	r3, [r4, #36]	; 0x24
 800a222:	4b05      	ldr	r3, [pc, #20]	; (800a238 <std+0x3c>)
 800a224:	62a3      	str	r3, [r4, #40]	; 0x28
 800a226:	4b05      	ldr	r3, [pc, #20]	; (800a23c <std+0x40>)
 800a228:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a22a:	4b05      	ldr	r3, [pc, #20]	; (800a240 <std+0x44>)
 800a22c:	6224      	str	r4, [r4, #32]
 800a22e:	6323      	str	r3, [r4, #48]	; 0x30
 800a230:	bd10      	pop	{r4, pc}
 800a232:	bf00      	nop
 800a234:	08008385 	.word	0x08008385
 800a238:	080083ab 	.word	0x080083ab
 800a23c:	080083e3 	.word	0x080083e3
 800a240:	08008407 	.word	0x08008407

0800a244 <_cleanup_r>:
 800a244:	4901      	ldr	r1, [pc, #4]	; (800a24c <_cleanup_r+0x8>)
 800a246:	f000 b8cc 	b.w	800a3e2 <_fwalk_reent>
 800a24a:	bf00      	nop
 800a24c:	0800a161 	.word	0x0800a161

0800a250 <__sfmoreglue>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	2268      	movs	r2, #104	; 0x68
 800a254:	1e4d      	subs	r5, r1, #1
 800a256:	4355      	muls	r5, r2
 800a258:	460e      	mov	r6, r1
 800a25a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a25e:	f001 fa3b 	bl	800b6d8 <_malloc_r>
 800a262:	4604      	mov	r4, r0
 800a264:	b140      	cbz	r0, 800a278 <__sfmoreglue+0x28>
 800a266:	2100      	movs	r1, #0
 800a268:	e9c0 1600 	strd	r1, r6, [r0]
 800a26c:	300c      	adds	r0, #12
 800a26e:	60a0      	str	r0, [r4, #8]
 800a270:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a274:	f7fd f846 	bl	8007304 <memset>
 800a278:	4620      	mov	r0, r4
 800a27a:	bd70      	pop	{r4, r5, r6, pc}

0800a27c <__sfp_lock_acquire>:
 800a27c:	4801      	ldr	r0, [pc, #4]	; (800a284 <__sfp_lock_acquire+0x8>)
 800a27e:	f000 bc44 	b.w	800ab0a <__retarget_lock_acquire_recursive>
 800a282:	bf00      	nop
 800a284:	200003fd 	.word	0x200003fd

0800a288 <__sfp_lock_release>:
 800a288:	4801      	ldr	r0, [pc, #4]	; (800a290 <__sfp_lock_release+0x8>)
 800a28a:	f000 bc3f 	b.w	800ab0c <__retarget_lock_release_recursive>
 800a28e:	bf00      	nop
 800a290:	200003fd 	.word	0x200003fd

0800a294 <__sinit_lock_acquire>:
 800a294:	4801      	ldr	r0, [pc, #4]	; (800a29c <__sinit_lock_acquire+0x8>)
 800a296:	f000 bc38 	b.w	800ab0a <__retarget_lock_acquire_recursive>
 800a29a:	bf00      	nop
 800a29c:	200003fe 	.word	0x200003fe

0800a2a0 <__sinit_lock_release>:
 800a2a0:	4801      	ldr	r0, [pc, #4]	; (800a2a8 <__sinit_lock_release+0x8>)
 800a2a2:	f000 bc33 	b.w	800ab0c <__retarget_lock_release_recursive>
 800a2a6:	bf00      	nop
 800a2a8:	200003fe 	.word	0x200003fe

0800a2ac <__sinit>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	f7ff fff0 	bl	800a294 <__sinit_lock_acquire>
 800a2b4:	69a3      	ldr	r3, [r4, #24]
 800a2b6:	b11b      	cbz	r3, 800a2c0 <__sinit+0x14>
 800a2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2bc:	f7ff bff0 	b.w	800a2a0 <__sinit_lock_release>
 800a2c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2c4:	6523      	str	r3, [r4, #80]	; 0x50
 800a2c6:	4b13      	ldr	r3, [pc, #76]	; (800a314 <__sinit+0x68>)
 800a2c8:	4a13      	ldr	r2, [pc, #76]	; (800a318 <__sinit+0x6c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2ce:	42a3      	cmp	r3, r4
 800a2d0:	bf04      	itt	eq
 800a2d2:	2301      	moveq	r3, #1
 800a2d4:	61a3      	streq	r3, [r4, #24]
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 f820 	bl	800a31c <__sfp>
 800a2dc:	6060      	str	r0, [r4, #4]
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f000 f81c 	bl	800a31c <__sfp>
 800a2e4:	60a0      	str	r0, [r4, #8]
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f000 f818 	bl	800a31c <__sfp>
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	60e0      	str	r0, [r4, #12]
 800a2f0:	2104      	movs	r1, #4
 800a2f2:	6860      	ldr	r0, [r4, #4]
 800a2f4:	f7ff ff82 	bl	800a1fc <std>
 800a2f8:	68a0      	ldr	r0, [r4, #8]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	2109      	movs	r1, #9
 800a2fe:	f7ff ff7d 	bl	800a1fc <std>
 800a302:	68e0      	ldr	r0, [r4, #12]
 800a304:	2202      	movs	r2, #2
 800a306:	2112      	movs	r1, #18
 800a308:	f7ff ff78 	bl	800a1fc <std>
 800a30c:	2301      	movs	r3, #1
 800a30e:	61a3      	str	r3, [r4, #24]
 800a310:	e7d2      	b.n	800a2b8 <__sinit+0xc>
 800a312:	bf00      	nop
 800a314:	0800d108 	.word	0x0800d108
 800a318:	0800a245 	.word	0x0800a245

0800a31c <__sfp>:
 800a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31e:	4607      	mov	r7, r0
 800a320:	f7ff ffac 	bl	800a27c <__sfp_lock_acquire>
 800a324:	4b1e      	ldr	r3, [pc, #120]	; (800a3a0 <__sfp+0x84>)
 800a326:	681e      	ldr	r6, [r3, #0]
 800a328:	69b3      	ldr	r3, [r6, #24]
 800a32a:	b913      	cbnz	r3, 800a332 <__sfp+0x16>
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7ff ffbd 	bl	800a2ac <__sinit>
 800a332:	3648      	adds	r6, #72	; 0x48
 800a334:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a338:	3b01      	subs	r3, #1
 800a33a:	d503      	bpl.n	800a344 <__sfp+0x28>
 800a33c:	6833      	ldr	r3, [r6, #0]
 800a33e:	b30b      	cbz	r3, 800a384 <__sfp+0x68>
 800a340:	6836      	ldr	r6, [r6, #0]
 800a342:	e7f7      	b.n	800a334 <__sfp+0x18>
 800a344:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a348:	b9d5      	cbnz	r5, 800a380 <__sfp+0x64>
 800a34a:	4b16      	ldr	r3, [pc, #88]	; (800a3a4 <__sfp+0x88>)
 800a34c:	60e3      	str	r3, [r4, #12]
 800a34e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a352:	6665      	str	r5, [r4, #100]	; 0x64
 800a354:	f000 fbd8 	bl	800ab08 <__retarget_lock_init_recursive>
 800a358:	f7ff ff96 	bl	800a288 <__sfp_lock_release>
 800a35c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a360:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a364:	6025      	str	r5, [r4, #0]
 800a366:	61a5      	str	r5, [r4, #24]
 800a368:	2208      	movs	r2, #8
 800a36a:	4629      	mov	r1, r5
 800a36c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a370:	f7fc ffc8 	bl	8007304 <memset>
 800a374:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a378:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a37c:	4620      	mov	r0, r4
 800a37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a380:	3468      	adds	r4, #104	; 0x68
 800a382:	e7d9      	b.n	800a338 <__sfp+0x1c>
 800a384:	2104      	movs	r1, #4
 800a386:	4638      	mov	r0, r7
 800a388:	f7ff ff62 	bl	800a250 <__sfmoreglue>
 800a38c:	4604      	mov	r4, r0
 800a38e:	6030      	str	r0, [r6, #0]
 800a390:	2800      	cmp	r0, #0
 800a392:	d1d5      	bne.n	800a340 <__sfp+0x24>
 800a394:	f7ff ff78 	bl	800a288 <__sfp_lock_release>
 800a398:	230c      	movs	r3, #12
 800a39a:	603b      	str	r3, [r7, #0]
 800a39c:	e7ee      	b.n	800a37c <__sfp+0x60>
 800a39e:	bf00      	nop
 800a3a0:	0800d108 	.word	0x0800d108
 800a3a4:	ffff0001 	.word	0xffff0001

0800a3a8 <_fwalk>:
 800a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ac:	460f      	mov	r7, r1
 800a3ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3b2:	2600      	movs	r6, #0
 800a3b4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800a3b8:	f1b8 0801 	subs.w	r8, r8, #1
 800a3bc:	d505      	bpl.n	800a3ca <_fwalk+0x22>
 800a3be:	6824      	ldr	r4, [r4, #0]
 800a3c0:	2c00      	cmp	r4, #0
 800a3c2:	d1f7      	bne.n	800a3b4 <_fwalk+0xc>
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d906      	bls.n	800a3de <_fwalk+0x36>
 800a3d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	d002      	beq.n	800a3de <_fwalk+0x36>
 800a3d8:	4628      	mov	r0, r5
 800a3da:	47b8      	blx	r7
 800a3dc:	4306      	orrs	r6, r0
 800a3de:	3568      	adds	r5, #104	; 0x68
 800a3e0:	e7ea      	b.n	800a3b8 <_fwalk+0x10>

0800a3e2 <_fwalk_reent>:
 800a3e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	4688      	mov	r8, r1
 800a3ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3ee:	2700      	movs	r7, #0
 800a3f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3f4:	f1b9 0901 	subs.w	r9, r9, #1
 800a3f8:	d505      	bpl.n	800a406 <_fwalk_reent+0x24>
 800a3fa:	6824      	ldr	r4, [r4, #0]
 800a3fc:	2c00      	cmp	r4, #0
 800a3fe:	d1f7      	bne.n	800a3f0 <_fwalk_reent+0xe>
 800a400:	4638      	mov	r0, r7
 800a402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a406:	89ab      	ldrh	r3, [r5, #12]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d907      	bls.n	800a41c <_fwalk_reent+0x3a>
 800a40c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a410:	3301      	adds	r3, #1
 800a412:	d003      	beq.n	800a41c <_fwalk_reent+0x3a>
 800a414:	4629      	mov	r1, r5
 800a416:	4630      	mov	r0, r6
 800a418:	47c0      	blx	r8
 800a41a:	4307      	orrs	r7, r0
 800a41c:	3568      	adds	r5, #104	; 0x68
 800a41e:	e7e9      	b.n	800a3f4 <_fwalk_reent+0x12>

0800a420 <rshift>:
 800a420:	6903      	ldr	r3, [r0, #16]
 800a422:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a426:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a42a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a42e:	f100 0414 	add.w	r4, r0, #20
 800a432:	dd45      	ble.n	800a4c0 <rshift+0xa0>
 800a434:	f011 011f 	ands.w	r1, r1, #31
 800a438:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a43c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a440:	d10c      	bne.n	800a45c <rshift+0x3c>
 800a442:	f100 0710 	add.w	r7, r0, #16
 800a446:	4629      	mov	r1, r5
 800a448:	42b1      	cmp	r1, r6
 800a44a:	d334      	bcc.n	800a4b6 <rshift+0x96>
 800a44c:	1a9b      	subs	r3, r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	1eea      	subs	r2, r5, #3
 800a452:	4296      	cmp	r6, r2
 800a454:	bf38      	it	cc
 800a456:	2300      	movcc	r3, #0
 800a458:	4423      	add	r3, r4
 800a45a:	e015      	b.n	800a488 <rshift+0x68>
 800a45c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a460:	f1c1 0820 	rsb	r8, r1, #32
 800a464:	40cf      	lsrs	r7, r1
 800a466:	f105 0e04 	add.w	lr, r5, #4
 800a46a:	46a1      	mov	r9, r4
 800a46c:	4576      	cmp	r6, lr
 800a46e:	46f4      	mov	ip, lr
 800a470:	d815      	bhi.n	800a49e <rshift+0x7e>
 800a472:	1a9a      	subs	r2, r3, r2
 800a474:	0092      	lsls	r2, r2, #2
 800a476:	3a04      	subs	r2, #4
 800a478:	3501      	adds	r5, #1
 800a47a:	42ae      	cmp	r6, r5
 800a47c:	bf38      	it	cc
 800a47e:	2200      	movcc	r2, #0
 800a480:	18a3      	adds	r3, r4, r2
 800a482:	50a7      	str	r7, [r4, r2]
 800a484:	b107      	cbz	r7, 800a488 <rshift+0x68>
 800a486:	3304      	adds	r3, #4
 800a488:	1b1a      	subs	r2, r3, r4
 800a48a:	42a3      	cmp	r3, r4
 800a48c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a490:	bf08      	it	eq
 800a492:	2300      	moveq	r3, #0
 800a494:	6102      	str	r2, [r0, #16]
 800a496:	bf08      	it	eq
 800a498:	6143      	streq	r3, [r0, #20]
 800a49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a49e:	f8dc c000 	ldr.w	ip, [ip]
 800a4a2:	fa0c fc08 	lsl.w	ip, ip, r8
 800a4a6:	ea4c 0707 	orr.w	r7, ip, r7
 800a4aa:	f849 7b04 	str.w	r7, [r9], #4
 800a4ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a4b2:	40cf      	lsrs	r7, r1
 800a4b4:	e7da      	b.n	800a46c <rshift+0x4c>
 800a4b6:	f851 cb04 	ldr.w	ip, [r1], #4
 800a4ba:	f847 cf04 	str.w	ip, [r7, #4]!
 800a4be:	e7c3      	b.n	800a448 <rshift+0x28>
 800a4c0:	4623      	mov	r3, r4
 800a4c2:	e7e1      	b.n	800a488 <rshift+0x68>

0800a4c4 <__hexdig_fun>:
 800a4c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a4c8:	2b09      	cmp	r3, #9
 800a4ca:	d802      	bhi.n	800a4d2 <__hexdig_fun+0xe>
 800a4cc:	3820      	subs	r0, #32
 800a4ce:	b2c0      	uxtb	r0, r0
 800a4d0:	4770      	bx	lr
 800a4d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a4d6:	2b05      	cmp	r3, #5
 800a4d8:	d801      	bhi.n	800a4de <__hexdig_fun+0x1a>
 800a4da:	3847      	subs	r0, #71	; 0x47
 800a4dc:	e7f7      	b.n	800a4ce <__hexdig_fun+0xa>
 800a4de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a4e2:	2b05      	cmp	r3, #5
 800a4e4:	d801      	bhi.n	800a4ea <__hexdig_fun+0x26>
 800a4e6:	3827      	subs	r0, #39	; 0x27
 800a4e8:	e7f1      	b.n	800a4ce <__hexdig_fun+0xa>
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <__gethex>:
 800a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	ed2d 8b02 	vpush	{d8}
 800a4f8:	b089      	sub	sp, #36	; 0x24
 800a4fa:	ee08 0a10 	vmov	s16, r0
 800a4fe:	9304      	str	r3, [sp, #16]
 800a500:	4bb4      	ldr	r3, [pc, #720]	; (800a7d4 <__gethex+0x2e4>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	4618      	mov	r0, r3
 800a508:	468b      	mov	fp, r1
 800a50a:	4690      	mov	r8, r2
 800a50c:	f7f5 fe80 	bl	8000210 <strlen>
 800a510:	9b01      	ldr	r3, [sp, #4]
 800a512:	f8db 2000 	ldr.w	r2, [fp]
 800a516:	4403      	add	r3, r0
 800a518:	4682      	mov	sl, r0
 800a51a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a51e:	9305      	str	r3, [sp, #20]
 800a520:	1c93      	adds	r3, r2, #2
 800a522:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a526:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a52a:	32fe      	adds	r2, #254	; 0xfe
 800a52c:	18d1      	adds	r1, r2, r3
 800a52e:	461f      	mov	r7, r3
 800a530:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a534:	9100      	str	r1, [sp, #0]
 800a536:	2830      	cmp	r0, #48	; 0x30
 800a538:	d0f8      	beq.n	800a52c <__gethex+0x3c>
 800a53a:	f7ff ffc3 	bl	800a4c4 <__hexdig_fun>
 800a53e:	4604      	mov	r4, r0
 800a540:	2800      	cmp	r0, #0
 800a542:	d13a      	bne.n	800a5ba <__gethex+0xca>
 800a544:	9901      	ldr	r1, [sp, #4]
 800a546:	4652      	mov	r2, sl
 800a548:	4638      	mov	r0, r7
 800a54a:	f002 f9d9 	bl	800c900 <strncmp>
 800a54e:	4605      	mov	r5, r0
 800a550:	2800      	cmp	r0, #0
 800a552:	d168      	bne.n	800a626 <__gethex+0x136>
 800a554:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a558:	eb07 060a 	add.w	r6, r7, sl
 800a55c:	f7ff ffb2 	bl	800a4c4 <__hexdig_fun>
 800a560:	2800      	cmp	r0, #0
 800a562:	d062      	beq.n	800a62a <__gethex+0x13a>
 800a564:	4633      	mov	r3, r6
 800a566:	7818      	ldrb	r0, [r3, #0]
 800a568:	2830      	cmp	r0, #48	; 0x30
 800a56a:	461f      	mov	r7, r3
 800a56c:	f103 0301 	add.w	r3, r3, #1
 800a570:	d0f9      	beq.n	800a566 <__gethex+0x76>
 800a572:	f7ff ffa7 	bl	800a4c4 <__hexdig_fun>
 800a576:	2301      	movs	r3, #1
 800a578:	fab0 f480 	clz	r4, r0
 800a57c:	0964      	lsrs	r4, r4, #5
 800a57e:	4635      	mov	r5, r6
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	463a      	mov	r2, r7
 800a584:	4616      	mov	r6, r2
 800a586:	3201      	adds	r2, #1
 800a588:	7830      	ldrb	r0, [r6, #0]
 800a58a:	f7ff ff9b 	bl	800a4c4 <__hexdig_fun>
 800a58e:	2800      	cmp	r0, #0
 800a590:	d1f8      	bne.n	800a584 <__gethex+0x94>
 800a592:	9901      	ldr	r1, [sp, #4]
 800a594:	4652      	mov	r2, sl
 800a596:	4630      	mov	r0, r6
 800a598:	f002 f9b2 	bl	800c900 <strncmp>
 800a59c:	b980      	cbnz	r0, 800a5c0 <__gethex+0xd0>
 800a59e:	b94d      	cbnz	r5, 800a5b4 <__gethex+0xc4>
 800a5a0:	eb06 050a 	add.w	r5, r6, sl
 800a5a4:	462a      	mov	r2, r5
 800a5a6:	4616      	mov	r6, r2
 800a5a8:	3201      	adds	r2, #1
 800a5aa:	7830      	ldrb	r0, [r6, #0]
 800a5ac:	f7ff ff8a 	bl	800a4c4 <__hexdig_fun>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d1f8      	bne.n	800a5a6 <__gethex+0xb6>
 800a5b4:	1bad      	subs	r5, r5, r6
 800a5b6:	00ad      	lsls	r5, r5, #2
 800a5b8:	e004      	b.n	800a5c4 <__gethex+0xd4>
 800a5ba:	2400      	movs	r4, #0
 800a5bc:	4625      	mov	r5, r4
 800a5be:	e7e0      	b.n	800a582 <__gethex+0x92>
 800a5c0:	2d00      	cmp	r5, #0
 800a5c2:	d1f7      	bne.n	800a5b4 <__gethex+0xc4>
 800a5c4:	7833      	ldrb	r3, [r6, #0]
 800a5c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a5ca:	2b50      	cmp	r3, #80	; 0x50
 800a5cc:	d13b      	bne.n	800a646 <__gethex+0x156>
 800a5ce:	7873      	ldrb	r3, [r6, #1]
 800a5d0:	2b2b      	cmp	r3, #43	; 0x2b
 800a5d2:	d02c      	beq.n	800a62e <__gethex+0x13e>
 800a5d4:	2b2d      	cmp	r3, #45	; 0x2d
 800a5d6:	d02e      	beq.n	800a636 <__gethex+0x146>
 800a5d8:	1c71      	adds	r1, r6, #1
 800a5da:	f04f 0900 	mov.w	r9, #0
 800a5de:	7808      	ldrb	r0, [r1, #0]
 800a5e0:	f7ff ff70 	bl	800a4c4 <__hexdig_fun>
 800a5e4:	1e43      	subs	r3, r0, #1
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b18      	cmp	r3, #24
 800a5ea:	d82c      	bhi.n	800a646 <__gethex+0x156>
 800a5ec:	f1a0 0210 	sub.w	r2, r0, #16
 800a5f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5f4:	f7ff ff66 	bl	800a4c4 <__hexdig_fun>
 800a5f8:	1e43      	subs	r3, r0, #1
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b18      	cmp	r3, #24
 800a5fe:	d91d      	bls.n	800a63c <__gethex+0x14c>
 800a600:	f1b9 0f00 	cmp.w	r9, #0
 800a604:	d000      	beq.n	800a608 <__gethex+0x118>
 800a606:	4252      	negs	r2, r2
 800a608:	4415      	add	r5, r2
 800a60a:	f8cb 1000 	str.w	r1, [fp]
 800a60e:	b1e4      	cbz	r4, 800a64a <__gethex+0x15a>
 800a610:	9b00      	ldr	r3, [sp, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	bf14      	ite	ne
 800a616:	2700      	movne	r7, #0
 800a618:	2706      	moveq	r7, #6
 800a61a:	4638      	mov	r0, r7
 800a61c:	b009      	add	sp, #36	; 0x24
 800a61e:	ecbd 8b02 	vpop	{d8}
 800a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a626:	463e      	mov	r6, r7
 800a628:	4625      	mov	r5, r4
 800a62a:	2401      	movs	r4, #1
 800a62c:	e7ca      	b.n	800a5c4 <__gethex+0xd4>
 800a62e:	f04f 0900 	mov.w	r9, #0
 800a632:	1cb1      	adds	r1, r6, #2
 800a634:	e7d3      	b.n	800a5de <__gethex+0xee>
 800a636:	f04f 0901 	mov.w	r9, #1
 800a63a:	e7fa      	b.n	800a632 <__gethex+0x142>
 800a63c:	230a      	movs	r3, #10
 800a63e:	fb03 0202 	mla	r2, r3, r2, r0
 800a642:	3a10      	subs	r2, #16
 800a644:	e7d4      	b.n	800a5f0 <__gethex+0x100>
 800a646:	4631      	mov	r1, r6
 800a648:	e7df      	b.n	800a60a <__gethex+0x11a>
 800a64a:	1bf3      	subs	r3, r6, r7
 800a64c:	3b01      	subs	r3, #1
 800a64e:	4621      	mov	r1, r4
 800a650:	2b07      	cmp	r3, #7
 800a652:	dc0b      	bgt.n	800a66c <__gethex+0x17c>
 800a654:	ee18 0a10 	vmov	r0, s16
 800a658:	f000 fafa 	bl	800ac50 <_Balloc>
 800a65c:	4604      	mov	r4, r0
 800a65e:	b940      	cbnz	r0, 800a672 <__gethex+0x182>
 800a660:	4b5d      	ldr	r3, [pc, #372]	; (800a7d8 <__gethex+0x2e8>)
 800a662:	4602      	mov	r2, r0
 800a664:	21de      	movs	r1, #222	; 0xde
 800a666:	485d      	ldr	r0, [pc, #372]	; (800a7dc <__gethex+0x2ec>)
 800a668:	f002 fab2 	bl	800cbd0 <__assert_func>
 800a66c:	3101      	adds	r1, #1
 800a66e:	105b      	asrs	r3, r3, #1
 800a670:	e7ee      	b.n	800a650 <__gethex+0x160>
 800a672:	f100 0914 	add.w	r9, r0, #20
 800a676:	f04f 0b00 	mov.w	fp, #0
 800a67a:	f1ca 0301 	rsb	r3, sl, #1
 800a67e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a682:	f8cd b000 	str.w	fp, [sp]
 800a686:	9306      	str	r3, [sp, #24]
 800a688:	42b7      	cmp	r7, r6
 800a68a:	d340      	bcc.n	800a70e <__gethex+0x21e>
 800a68c:	9802      	ldr	r0, [sp, #8]
 800a68e:	9b00      	ldr	r3, [sp, #0]
 800a690:	f840 3b04 	str.w	r3, [r0], #4
 800a694:	eba0 0009 	sub.w	r0, r0, r9
 800a698:	1080      	asrs	r0, r0, #2
 800a69a:	0146      	lsls	r6, r0, #5
 800a69c:	6120      	str	r0, [r4, #16]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 fbc8 	bl	800ae34 <__hi0bits>
 800a6a4:	1a30      	subs	r0, r6, r0
 800a6a6:	f8d8 6000 	ldr.w	r6, [r8]
 800a6aa:	42b0      	cmp	r0, r6
 800a6ac:	dd63      	ble.n	800a776 <__gethex+0x286>
 800a6ae:	1b87      	subs	r7, r0, r6
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f000 ff6c 	bl	800b590 <__any_on>
 800a6b8:	4682      	mov	sl, r0
 800a6ba:	b1a8      	cbz	r0, 800a6e8 <__gethex+0x1f8>
 800a6bc:	1e7b      	subs	r3, r7, #1
 800a6be:	1159      	asrs	r1, r3, #5
 800a6c0:	f003 021f 	and.w	r2, r3, #31
 800a6c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a6c8:	f04f 0a01 	mov.w	sl, #1
 800a6cc:	fa0a f202 	lsl.w	r2, sl, r2
 800a6d0:	420a      	tst	r2, r1
 800a6d2:	d009      	beq.n	800a6e8 <__gethex+0x1f8>
 800a6d4:	4553      	cmp	r3, sl
 800a6d6:	dd05      	ble.n	800a6e4 <__gethex+0x1f4>
 800a6d8:	1eb9      	subs	r1, r7, #2
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 ff58 	bl	800b590 <__any_on>
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d145      	bne.n	800a770 <__gethex+0x280>
 800a6e4:	f04f 0a02 	mov.w	sl, #2
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f7ff fe98 	bl	800a420 <rshift>
 800a6f0:	443d      	add	r5, r7
 800a6f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6f6:	42ab      	cmp	r3, r5
 800a6f8:	da4c      	bge.n	800a794 <__gethex+0x2a4>
 800a6fa:	ee18 0a10 	vmov	r0, s16
 800a6fe:	4621      	mov	r1, r4
 800a700:	f000 fae6 	bl	800acd0 <_Bfree>
 800a704:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a706:	2300      	movs	r3, #0
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	27a3      	movs	r7, #163	; 0xa3
 800a70c:	e785      	b.n	800a61a <__gethex+0x12a>
 800a70e:	1e73      	subs	r3, r6, #1
 800a710:	9a05      	ldr	r2, [sp, #20]
 800a712:	9303      	str	r3, [sp, #12]
 800a714:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a718:	4293      	cmp	r3, r2
 800a71a:	d019      	beq.n	800a750 <__gethex+0x260>
 800a71c:	f1bb 0f20 	cmp.w	fp, #32
 800a720:	d107      	bne.n	800a732 <__gethex+0x242>
 800a722:	9b02      	ldr	r3, [sp, #8]
 800a724:	9a00      	ldr	r2, [sp, #0]
 800a726:	f843 2b04 	str.w	r2, [r3], #4
 800a72a:	9302      	str	r3, [sp, #8]
 800a72c:	2300      	movs	r3, #0
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	469b      	mov	fp, r3
 800a732:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a736:	f7ff fec5 	bl	800a4c4 <__hexdig_fun>
 800a73a:	9b00      	ldr	r3, [sp, #0]
 800a73c:	f000 000f 	and.w	r0, r0, #15
 800a740:	fa00 f00b 	lsl.w	r0, r0, fp
 800a744:	4303      	orrs	r3, r0
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	f10b 0b04 	add.w	fp, fp, #4
 800a74c:	9b03      	ldr	r3, [sp, #12]
 800a74e:	e00d      	b.n	800a76c <__gethex+0x27c>
 800a750:	9b03      	ldr	r3, [sp, #12]
 800a752:	9a06      	ldr	r2, [sp, #24]
 800a754:	4413      	add	r3, r2
 800a756:	42bb      	cmp	r3, r7
 800a758:	d3e0      	bcc.n	800a71c <__gethex+0x22c>
 800a75a:	4618      	mov	r0, r3
 800a75c:	9901      	ldr	r1, [sp, #4]
 800a75e:	9307      	str	r3, [sp, #28]
 800a760:	4652      	mov	r2, sl
 800a762:	f002 f8cd 	bl	800c900 <strncmp>
 800a766:	9b07      	ldr	r3, [sp, #28]
 800a768:	2800      	cmp	r0, #0
 800a76a:	d1d7      	bne.n	800a71c <__gethex+0x22c>
 800a76c:	461e      	mov	r6, r3
 800a76e:	e78b      	b.n	800a688 <__gethex+0x198>
 800a770:	f04f 0a03 	mov.w	sl, #3
 800a774:	e7b8      	b.n	800a6e8 <__gethex+0x1f8>
 800a776:	da0a      	bge.n	800a78e <__gethex+0x29e>
 800a778:	1a37      	subs	r7, r6, r0
 800a77a:	4621      	mov	r1, r4
 800a77c:	ee18 0a10 	vmov	r0, s16
 800a780:	463a      	mov	r2, r7
 800a782:	f000 fcc1 	bl	800b108 <__lshift>
 800a786:	1bed      	subs	r5, r5, r7
 800a788:	4604      	mov	r4, r0
 800a78a:	f100 0914 	add.w	r9, r0, #20
 800a78e:	f04f 0a00 	mov.w	sl, #0
 800a792:	e7ae      	b.n	800a6f2 <__gethex+0x202>
 800a794:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a798:	42a8      	cmp	r0, r5
 800a79a:	dd72      	ble.n	800a882 <__gethex+0x392>
 800a79c:	1b45      	subs	r5, r0, r5
 800a79e:	42ae      	cmp	r6, r5
 800a7a0:	dc36      	bgt.n	800a810 <__gethex+0x320>
 800a7a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d02a      	beq.n	800a800 <__gethex+0x310>
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d02c      	beq.n	800a808 <__gethex+0x318>
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d11c      	bne.n	800a7ec <__gethex+0x2fc>
 800a7b2:	42ae      	cmp	r6, r5
 800a7b4:	d11a      	bne.n	800a7ec <__gethex+0x2fc>
 800a7b6:	2e01      	cmp	r6, #1
 800a7b8:	d112      	bne.n	800a7e0 <__gethex+0x2f0>
 800a7ba:	9a04      	ldr	r2, [sp, #16]
 800a7bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7c0:	6013      	str	r3, [r2, #0]
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	6123      	str	r3, [r4, #16]
 800a7c6:	f8c9 3000 	str.w	r3, [r9]
 800a7ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7cc:	2762      	movs	r7, #98	; 0x62
 800a7ce:	601c      	str	r4, [r3, #0]
 800a7d0:	e723      	b.n	800a61a <__gethex+0x12a>
 800a7d2:	bf00      	nop
 800a7d4:	0800d3f4 	.word	0x0800d3f4
 800a7d8:	0800d318 	.word	0x0800d318
 800a7dc:	0800d38c 	.word	0x0800d38c
 800a7e0:	1e71      	subs	r1, r6, #1
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fed4 	bl	800b590 <__any_on>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d1e6      	bne.n	800a7ba <__gethex+0x2ca>
 800a7ec:	ee18 0a10 	vmov	r0, s16
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	f000 fa6d 	bl	800acd0 <_Bfree>
 800a7f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	6013      	str	r3, [r2, #0]
 800a7fc:	2750      	movs	r7, #80	; 0x50
 800a7fe:	e70c      	b.n	800a61a <__gethex+0x12a>
 800a800:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1f2      	bne.n	800a7ec <__gethex+0x2fc>
 800a806:	e7d8      	b.n	800a7ba <__gethex+0x2ca>
 800a808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1d5      	bne.n	800a7ba <__gethex+0x2ca>
 800a80e:	e7ed      	b.n	800a7ec <__gethex+0x2fc>
 800a810:	1e6f      	subs	r7, r5, #1
 800a812:	f1ba 0f00 	cmp.w	sl, #0
 800a816:	d131      	bne.n	800a87c <__gethex+0x38c>
 800a818:	b127      	cbz	r7, 800a824 <__gethex+0x334>
 800a81a:	4639      	mov	r1, r7
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 feb7 	bl	800b590 <__any_on>
 800a822:	4682      	mov	sl, r0
 800a824:	117b      	asrs	r3, r7, #5
 800a826:	2101      	movs	r1, #1
 800a828:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a82c:	f007 071f 	and.w	r7, r7, #31
 800a830:	fa01 f707 	lsl.w	r7, r1, r7
 800a834:	421f      	tst	r7, r3
 800a836:	4629      	mov	r1, r5
 800a838:	4620      	mov	r0, r4
 800a83a:	bf18      	it	ne
 800a83c:	f04a 0a02 	orrne.w	sl, sl, #2
 800a840:	1b76      	subs	r6, r6, r5
 800a842:	f7ff fded 	bl	800a420 <rshift>
 800a846:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a84a:	2702      	movs	r7, #2
 800a84c:	f1ba 0f00 	cmp.w	sl, #0
 800a850:	d048      	beq.n	800a8e4 <__gethex+0x3f4>
 800a852:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a856:	2b02      	cmp	r3, #2
 800a858:	d015      	beq.n	800a886 <__gethex+0x396>
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d017      	beq.n	800a88e <__gethex+0x39e>
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d109      	bne.n	800a876 <__gethex+0x386>
 800a862:	f01a 0f02 	tst.w	sl, #2
 800a866:	d006      	beq.n	800a876 <__gethex+0x386>
 800a868:	f8d9 0000 	ldr.w	r0, [r9]
 800a86c:	ea4a 0a00 	orr.w	sl, sl, r0
 800a870:	f01a 0f01 	tst.w	sl, #1
 800a874:	d10e      	bne.n	800a894 <__gethex+0x3a4>
 800a876:	f047 0710 	orr.w	r7, r7, #16
 800a87a:	e033      	b.n	800a8e4 <__gethex+0x3f4>
 800a87c:	f04f 0a01 	mov.w	sl, #1
 800a880:	e7d0      	b.n	800a824 <__gethex+0x334>
 800a882:	2701      	movs	r7, #1
 800a884:	e7e2      	b.n	800a84c <__gethex+0x35c>
 800a886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a888:	f1c3 0301 	rsb	r3, r3, #1
 800a88c:	9315      	str	r3, [sp, #84]	; 0x54
 800a88e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a890:	2b00      	cmp	r3, #0
 800a892:	d0f0      	beq.n	800a876 <__gethex+0x386>
 800a894:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a898:	f104 0314 	add.w	r3, r4, #20
 800a89c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a8a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a8a4:	f04f 0c00 	mov.w	ip, #0
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a8b2:	d01c      	beq.n	800a8ee <__gethex+0x3fe>
 800a8b4:	3201      	adds	r2, #1
 800a8b6:	6002      	str	r2, [r0, #0]
 800a8b8:	2f02      	cmp	r7, #2
 800a8ba:	f104 0314 	add.w	r3, r4, #20
 800a8be:	d13f      	bne.n	800a940 <__gethex+0x450>
 800a8c0:	f8d8 2000 	ldr.w	r2, [r8]
 800a8c4:	3a01      	subs	r2, #1
 800a8c6:	42b2      	cmp	r2, r6
 800a8c8:	d10a      	bne.n	800a8e0 <__gethex+0x3f0>
 800a8ca:	1171      	asrs	r1, r6, #5
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8d2:	f006 061f 	and.w	r6, r6, #31
 800a8d6:	fa02 f606 	lsl.w	r6, r2, r6
 800a8da:	421e      	tst	r6, r3
 800a8dc:	bf18      	it	ne
 800a8de:	4617      	movne	r7, r2
 800a8e0:	f047 0720 	orr.w	r7, r7, #32
 800a8e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8e6:	601c      	str	r4, [r3, #0]
 800a8e8:	9b04      	ldr	r3, [sp, #16]
 800a8ea:	601d      	str	r5, [r3, #0]
 800a8ec:	e695      	b.n	800a61a <__gethex+0x12a>
 800a8ee:	4299      	cmp	r1, r3
 800a8f0:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8f4:	d8d8      	bhi.n	800a8a8 <__gethex+0x3b8>
 800a8f6:	68a3      	ldr	r3, [r4, #8]
 800a8f8:	459b      	cmp	fp, r3
 800a8fa:	db19      	blt.n	800a930 <__gethex+0x440>
 800a8fc:	6861      	ldr	r1, [r4, #4]
 800a8fe:	ee18 0a10 	vmov	r0, s16
 800a902:	3101      	adds	r1, #1
 800a904:	f000 f9a4 	bl	800ac50 <_Balloc>
 800a908:	4681      	mov	r9, r0
 800a90a:	b918      	cbnz	r0, 800a914 <__gethex+0x424>
 800a90c:	4b1a      	ldr	r3, [pc, #104]	; (800a978 <__gethex+0x488>)
 800a90e:	4602      	mov	r2, r0
 800a910:	2184      	movs	r1, #132	; 0x84
 800a912:	e6a8      	b.n	800a666 <__gethex+0x176>
 800a914:	6922      	ldr	r2, [r4, #16]
 800a916:	3202      	adds	r2, #2
 800a918:	f104 010c 	add.w	r1, r4, #12
 800a91c:	0092      	lsls	r2, r2, #2
 800a91e:	300c      	adds	r0, #12
 800a920:	f000 f988 	bl	800ac34 <memcpy>
 800a924:	4621      	mov	r1, r4
 800a926:	ee18 0a10 	vmov	r0, s16
 800a92a:	f000 f9d1 	bl	800acd0 <_Bfree>
 800a92e:	464c      	mov	r4, r9
 800a930:	6923      	ldr	r3, [r4, #16]
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a938:	6122      	str	r2, [r4, #16]
 800a93a:	2201      	movs	r2, #1
 800a93c:	615a      	str	r2, [r3, #20]
 800a93e:	e7bb      	b.n	800a8b8 <__gethex+0x3c8>
 800a940:	6922      	ldr	r2, [r4, #16]
 800a942:	455a      	cmp	r2, fp
 800a944:	dd0b      	ble.n	800a95e <__gethex+0x46e>
 800a946:	2101      	movs	r1, #1
 800a948:	4620      	mov	r0, r4
 800a94a:	f7ff fd69 	bl	800a420 <rshift>
 800a94e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a952:	3501      	adds	r5, #1
 800a954:	42ab      	cmp	r3, r5
 800a956:	f6ff aed0 	blt.w	800a6fa <__gethex+0x20a>
 800a95a:	2701      	movs	r7, #1
 800a95c:	e7c0      	b.n	800a8e0 <__gethex+0x3f0>
 800a95e:	f016 061f 	ands.w	r6, r6, #31
 800a962:	d0fa      	beq.n	800a95a <__gethex+0x46a>
 800a964:	4453      	add	r3, sl
 800a966:	f1c6 0620 	rsb	r6, r6, #32
 800a96a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a96e:	f000 fa61 	bl	800ae34 <__hi0bits>
 800a972:	42b0      	cmp	r0, r6
 800a974:	dbe7      	blt.n	800a946 <__gethex+0x456>
 800a976:	e7f0      	b.n	800a95a <__gethex+0x46a>
 800a978:	0800d318 	.word	0x0800d318

0800a97c <L_shift>:
 800a97c:	f1c2 0208 	rsb	r2, r2, #8
 800a980:	0092      	lsls	r2, r2, #2
 800a982:	b570      	push	{r4, r5, r6, lr}
 800a984:	f1c2 0620 	rsb	r6, r2, #32
 800a988:	6843      	ldr	r3, [r0, #4]
 800a98a:	6804      	ldr	r4, [r0, #0]
 800a98c:	fa03 f506 	lsl.w	r5, r3, r6
 800a990:	432c      	orrs	r4, r5
 800a992:	40d3      	lsrs	r3, r2
 800a994:	6004      	str	r4, [r0, #0]
 800a996:	f840 3f04 	str.w	r3, [r0, #4]!
 800a99a:	4288      	cmp	r0, r1
 800a99c:	d3f4      	bcc.n	800a988 <L_shift+0xc>
 800a99e:	bd70      	pop	{r4, r5, r6, pc}

0800a9a0 <__match>:
 800a9a0:	b530      	push	{r4, r5, lr}
 800a9a2:	6803      	ldr	r3, [r0, #0]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9aa:	b914      	cbnz	r4, 800a9b2 <__match+0x12>
 800a9ac:	6003      	str	r3, [r0, #0]
 800a9ae:	2001      	movs	r0, #1
 800a9b0:	bd30      	pop	{r4, r5, pc}
 800a9b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a9ba:	2d19      	cmp	r5, #25
 800a9bc:	bf98      	it	ls
 800a9be:	3220      	addls	r2, #32
 800a9c0:	42a2      	cmp	r2, r4
 800a9c2:	d0f0      	beq.n	800a9a6 <__match+0x6>
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	e7f3      	b.n	800a9b0 <__match+0x10>

0800a9c8 <__hexnan>:
 800a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9cc:	680b      	ldr	r3, [r1, #0]
 800a9ce:	115e      	asrs	r6, r3, #5
 800a9d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9d4:	f013 031f 	ands.w	r3, r3, #31
 800a9d8:	b087      	sub	sp, #28
 800a9da:	bf18      	it	ne
 800a9dc:	3604      	addne	r6, #4
 800a9de:	2500      	movs	r5, #0
 800a9e0:	1f37      	subs	r7, r6, #4
 800a9e2:	4690      	mov	r8, r2
 800a9e4:	6802      	ldr	r2, [r0, #0]
 800a9e6:	9301      	str	r3, [sp, #4]
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800a9ee:	46b9      	mov	r9, r7
 800a9f0:	463c      	mov	r4, r7
 800a9f2:	9502      	str	r5, [sp, #8]
 800a9f4:	46ab      	mov	fp, r5
 800a9f6:	7851      	ldrb	r1, [r2, #1]
 800a9f8:	1c53      	adds	r3, r2, #1
 800a9fa:	9303      	str	r3, [sp, #12]
 800a9fc:	b341      	cbz	r1, 800aa50 <__hexnan+0x88>
 800a9fe:	4608      	mov	r0, r1
 800aa00:	9205      	str	r2, [sp, #20]
 800aa02:	9104      	str	r1, [sp, #16]
 800aa04:	f7ff fd5e 	bl	800a4c4 <__hexdig_fun>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d14f      	bne.n	800aaac <__hexnan+0xe4>
 800aa0c:	9904      	ldr	r1, [sp, #16]
 800aa0e:	9a05      	ldr	r2, [sp, #20]
 800aa10:	2920      	cmp	r1, #32
 800aa12:	d818      	bhi.n	800aa46 <__hexnan+0x7e>
 800aa14:	9b02      	ldr	r3, [sp, #8]
 800aa16:	459b      	cmp	fp, r3
 800aa18:	dd13      	ble.n	800aa42 <__hexnan+0x7a>
 800aa1a:	454c      	cmp	r4, r9
 800aa1c:	d206      	bcs.n	800aa2c <__hexnan+0x64>
 800aa1e:	2d07      	cmp	r5, #7
 800aa20:	dc04      	bgt.n	800aa2c <__hexnan+0x64>
 800aa22:	462a      	mov	r2, r5
 800aa24:	4649      	mov	r1, r9
 800aa26:	4620      	mov	r0, r4
 800aa28:	f7ff ffa8 	bl	800a97c <L_shift>
 800aa2c:	4544      	cmp	r4, r8
 800aa2e:	d950      	bls.n	800aad2 <__hexnan+0x10a>
 800aa30:	2300      	movs	r3, #0
 800aa32:	f1a4 0904 	sub.w	r9, r4, #4
 800aa36:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa3a:	f8cd b008 	str.w	fp, [sp, #8]
 800aa3e:	464c      	mov	r4, r9
 800aa40:	461d      	mov	r5, r3
 800aa42:	9a03      	ldr	r2, [sp, #12]
 800aa44:	e7d7      	b.n	800a9f6 <__hexnan+0x2e>
 800aa46:	2929      	cmp	r1, #41	; 0x29
 800aa48:	d156      	bne.n	800aaf8 <__hexnan+0x130>
 800aa4a:	3202      	adds	r2, #2
 800aa4c:	f8ca 2000 	str.w	r2, [sl]
 800aa50:	f1bb 0f00 	cmp.w	fp, #0
 800aa54:	d050      	beq.n	800aaf8 <__hexnan+0x130>
 800aa56:	454c      	cmp	r4, r9
 800aa58:	d206      	bcs.n	800aa68 <__hexnan+0xa0>
 800aa5a:	2d07      	cmp	r5, #7
 800aa5c:	dc04      	bgt.n	800aa68 <__hexnan+0xa0>
 800aa5e:	462a      	mov	r2, r5
 800aa60:	4649      	mov	r1, r9
 800aa62:	4620      	mov	r0, r4
 800aa64:	f7ff ff8a 	bl	800a97c <L_shift>
 800aa68:	4544      	cmp	r4, r8
 800aa6a:	d934      	bls.n	800aad6 <__hexnan+0x10e>
 800aa6c:	f1a8 0204 	sub.w	r2, r8, #4
 800aa70:	4623      	mov	r3, r4
 800aa72:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa76:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa7a:	429f      	cmp	r7, r3
 800aa7c:	d2f9      	bcs.n	800aa72 <__hexnan+0xaa>
 800aa7e:	1b3b      	subs	r3, r7, r4
 800aa80:	f023 0303 	bic.w	r3, r3, #3
 800aa84:	3304      	adds	r3, #4
 800aa86:	3401      	adds	r4, #1
 800aa88:	3e03      	subs	r6, #3
 800aa8a:	42b4      	cmp	r4, r6
 800aa8c:	bf88      	it	hi
 800aa8e:	2304      	movhi	r3, #4
 800aa90:	4443      	add	r3, r8
 800aa92:	2200      	movs	r2, #0
 800aa94:	f843 2b04 	str.w	r2, [r3], #4
 800aa98:	429f      	cmp	r7, r3
 800aa9a:	d2fb      	bcs.n	800aa94 <__hexnan+0xcc>
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	b91b      	cbnz	r3, 800aaa8 <__hexnan+0xe0>
 800aaa0:	4547      	cmp	r7, r8
 800aaa2:	d127      	bne.n	800aaf4 <__hexnan+0x12c>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	603b      	str	r3, [r7, #0]
 800aaa8:	2005      	movs	r0, #5
 800aaaa:	e026      	b.n	800aafa <__hexnan+0x132>
 800aaac:	3501      	adds	r5, #1
 800aaae:	2d08      	cmp	r5, #8
 800aab0:	f10b 0b01 	add.w	fp, fp, #1
 800aab4:	dd06      	ble.n	800aac4 <__hexnan+0xfc>
 800aab6:	4544      	cmp	r4, r8
 800aab8:	d9c3      	bls.n	800aa42 <__hexnan+0x7a>
 800aaba:	2300      	movs	r3, #0
 800aabc:	f844 3c04 	str.w	r3, [r4, #-4]
 800aac0:	2501      	movs	r5, #1
 800aac2:	3c04      	subs	r4, #4
 800aac4:	6822      	ldr	r2, [r4, #0]
 800aac6:	f000 000f 	and.w	r0, r0, #15
 800aaca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aace:	6022      	str	r2, [r4, #0]
 800aad0:	e7b7      	b.n	800aa42 <__hexnan+0x7a>
 800aad2:	2508      	movs	r5, #8
 800aad4:	e7b5      	b.n	800aa42 <__hexnan+0x7a>
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0df      	beq.n	800aa9c <__hexnan+0xd4>
 800aadc:	f04f 32ff 	mov.w	r2, #4294967295
 800aae0:	f1c3 0320 	rsb	r3, r3, #32
 800aae4:	fa22 f303 	lsr.w	r3, r2, r3
 800aae8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aaec:	401a      	ands	r2, r3
 800aaee:	f846 2c04 	str.w	r2, [r6, #-4]
 800aaf2:	e7d3      	b.n	800aa9c <__hexnan+0xd4>
 800aaf4:	3f04      	subs	r7, #4
 800aaf6:	e7d1      	b.n	800aa9c <__hexnan+0xd4>
 800aaf8:	2004      	movs	r0, #4
 800aafa:	b007      	add	sp, #28
 800aafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab00 <_localeconv_r>:
 800ab00:	4800      	ldr	r0, [pc, #0]	; (800ab04 <_localeconv_r+0x4>)
 800ab02:	4770      	bx	lr
 800ab04:	20000164 	.word	0x20000164

0800ab08 <__retarget_lock_init_recursive>:
 800ab08:	4770      	bx	lr

0800ab0a <__retarget_lock_acquire_recursive>:
 800ab0a:	4770      	bx	lr

0800ab0c <__retarget_lock_release_recursive>:
 800ab0c:	4770      	bx	lr
	...

0800ab10 <_lseek_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4d07      	ldr	r5, [pc, #28]	; (800ab30 <_lseek_r+0x20>)
 800ab14:	4604      	mov	r4, r0
 800ab16:	4608      	mov	r0, r1
 800ab18:	4611      	mov	r1, r2
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	602a      	str	r2, [r5, #0]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	f7f7 f874 	bl	8001c0c <_lseek>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d102      	bne.n	800ab2e <_lseek_r+0x1e>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	b103      	cbz	r3, 800ab2e <_lseek_r+0x1e>
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}
 800ab30:	20000408 	.word	0x20000408

0800ab34 <__swhatbuf_r>:
 800ab34:	b570      	push	{r4, r5, r6, lr}
 800ab36:	460e      	mov	r6, r1
 800ab38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab3c:	2900      	cmp	r1, #0
 800ab3e:	b096      	sub	sp, #88	; 0x58
 800ab40:	4614      	mov	r4, r2
 800ab42:	461d      	mov	r5, r3
 800ab44:	da08      	bge.n	800ab58 <__swhatbuf_r+0x24>
 800ab46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	602a      	str	r2, [r5, #0]
 800ab4e:	061a      	lsls	r2, r3, #24
 800ab50:	d410      	bmi.n	800ab74 <__swhatbuf_r+0x40>
 800ab52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab56:	e00e      	b.n	800ab76 <__swhatbuf_r+0x42>
 800ab58:	466a      	mov	r2, sp
 800ab5a:	f002 f869 	bl	800cc30 <_fstat_r>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	dbf1      	blt.n	800ab46 <__swhatbuf_r+0x12>
 800ab62:	9a01      	ldr	r2, [sp, #4]
 800ab64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab6c:	425a      	negs	r2, r3
 800ab6e:	415a      	adcs	r2, r3
 800ab70:	602a      	str	r2, [r5, #0]
 800ab72:	e7ee      	b.n	800ab52 <__swhatbuf_r+0x1e>
 800ab74:	2340      	movs	r3, #64	; 0x40
 800ab76:	2000      	movs	r0, #0
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	b016      	add	sp, #88	; 0x58
 800ab7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab80 <__smakebuf_r>:
 800ab80:	898b      	ldrh	r3, [r1, #12]
 800ab82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab84:	079d      	lsls	r5, r3, #30
 800ab86:	4606      	mov	r6, r0
 800ab88:	460c      	mov	r4, r1
 800ab8a:	d507      	bpl.n	800ab9c <__smakebuf_r+0x1c>
 800ab8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	6123      	str	r3, [r4, #16]
 800ab94:	2301      	movs	r3, #1
 800ab96:	6163      	str	r3, [r4, #20]
 800ab98:	b002      	add	sp, #8
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}
 800ab9c:	ab01      	add	r3, sp, #4
 800ab9e:	466a      	mov	r2, sp
 800aba0:	f7ff ffc8 	bl	800ab34 <__swhatbuf_r>
 800aba4:	9900      	ldr	r1, [sp, #0]
 800aba6:	4605      	mov	r5, r0
 800aba8:	4630      	mov	r0, r6
 800abaa:	f000 fd95 	bl	800b6d8 <_malloc_r>
 800abae:	b948      	cbnz	r0, 800abc4 <__smakebuf_r+0x44>
 800abb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abb4:	059a      	lsls	r2, r3, #22
 800abb6:	d4ef      	bmi.n	800ab98 <__smakebuf_r+0x18>
 800abb8:	f023 0303 	bic.w	r3, r3, #3
 800abbc:	f043 0302 	orr.w	r3, r3, #2
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	e7e3      	b.n	800ab8c <__smakebuf_r+0xc>
 800abc4:	4b0d      	ldr	r3, [pc, #52]	; (800abfc <__smakebuf_r+0x7c>)
 800abc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	6020      	str	r0, [r4, #0]
 800abcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd0:	81a3      	strh	r3, [r4, #12]
 800abd2:	9b00      	ldr	r3, [sp, #0]
 800abd4:	6163      	str	r3, [r4, #20]
 800abd6:	9b01      	ldr	r3, [sp, #4]
 800abd8:	6120      	str	r0, [r4, #16]
 800abda:	b15b      	cbz	r3, 800abf4 <__smakebuf_r+0x74>
 800abdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abe0:	4630      	mov	r0, r6
 800abe2:	f002 f837 	bl	800cc54 <_isatty_r>
 800abe6:	b128      	cbz	r0, 800abf4 <__smakebuf_r+0x74>
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	f023 0303 	bic.w	r3, r3, #3
 800abee:	f043 0301 	orr.w	r3, r3, #1
 800abf2:	81a3      	strh	r3, [r4, #12]
 800abf4:	89a0      	ldrh	r0, [r4, #12]
 800abf6:	4305      	orrs	r5, r0
 800abf8:	81a5      	strh	r5, [r4, #12]
 800abfa:	e7cd      	b.n	800ab98 <__smakebuf_r+0x18>
 800abfc:	0800a245 	.word	0x0800a245

0800ac00 <malloc>:
 800ac00:	4b02      	ldr	r3, [pc, #8]	; (800ac0c <malloc+0xc>)
 800ac02:	4601      	mov	r1, r0
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	f000 bd67 	b.w	800b6d8 <_malloc_r>
 800ac0a:	bf00      	nop
 800ac0c:	2000000c 	.word	0x2000000c

0800ac10 <__ascii_mbtowc>:
 800ac10:	b082      	sub	sp, #8
 800ac12:	b901      	cbnz	r1, 800ac16 <__ascii_mbtowc+0x6>
 800ac14:	a901      	add	r1, sp, #4
 800ac16:	b142      	cbz	r2, 800ac2a <__ascii_mbtowc+0x1a>
 800ac18:	b14b      	cbz	r3, 800ac2e <__ascii_mbtowc+0x1e>
 800ac1a:	7813      	ldrb	r3, [r2, #0]
 800ac1c:	600b      	str	r3, [r1, #0]
 800ac1e:	7812      	ldrb	r2, [r2, #0]
 800ac20:	1e10      	subs	r0, r2, #0
 800ac22:	bf18      	it	ne
 800ac24:	2001      	movne	r0, #1
 800ac26:	b002      	add	sp, #8
 800ac28:	4770      	bx	lr
 800ac2a:	4610      	mov	r0, r2
 800ac2c:	e7fb      	b.n	800ac26 <__ascii_mbtowc+0x16>
 800ac2e:	f06f 0001 	mvn.w	r0, #1
 800ac32:	e7f8      	b.n	800ac26 <__ascii_mbtowc+0x16>

0800ac34 <memcpy>:
 800ac34:	440a      	add	r2, r1
 800ac36:	4291      	cmp	r1, r2
 800ac38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac3c:	d100      	bne.n	800ac40 <memcpy+0xc>
 800ac3e:	4770      	bx	lr
 800ac40:	b510      	push	{r4, lr}
 800ac42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac4a:	4291      	cmp	r1, r2
 800ac4c:	d1f9      	bne.n	800ac42 <memcpy+0xe>
 800ac4e:	bd10      	pop	{r4, pc}

0800ac50 <_Balloc>:
 800ac50:	b570      	push	{r4, r5, r6, lr}
 800ac52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac54:	4604      	mov	r4, r0
 800ac56:	460d      	mov	r5, r1
 800ac58:	b976      	cbnz	r6, 800ac78 <_Balloc+0x28>
 800ac5a:	2010      	movs	r0, #16
 800ac5c:	f7ff ffd0 	bl	800ac00 <malloc>
 800ac60:	4602      	mov	r2, r0
 800ac62:	6260      	str	r0, [r4, #36]	; 0x24
 800ac64:	b920      	cbnz	r0, 800ac70 <_Balloc+0x20>
 800ac66:	4b18      	ldr	r3, [pc, #96]	; (800acc8 <_Balloc+0x78>)
 800ac68:	4818      	ldr	r0, [pc, #96]	; (800accc <_Balloc+0x7c>)
 800ac6a:	2166      	movs	r1, #102	; 0x66
 800ac6c:	f001 ffb0 	bl	800cbd0 <__assert_func>
 800ac70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac74:	6006      	str	r6, [r0, #0]
 800ac76:	60c6      	str	r6, [r0, #12]
 800ac78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac7a:	68f3      	ldr	r3, [r6, #12]
 800ac7c:	b183      	cbz	r3, 800aca0 <_Balloc+0x50>
 800ac7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac86:	b9b8      	cbnz	r0, 800acb8 <_Balloc+0x68>
 800ac88:	2101      	movs	r1, #1
 800ac8a:	fa01 f605 	lsl.w	r6, r1, r5
 800ac8e:	1d72      	adds	r2, r6, #5
 800ac90:	0092      	lsls	r2, r2, #2
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 fc9d 	bl	800b5d2 <_calloc_r>
 800ac98:	b160      	cbz	r0, 800acb4 <_Balloc+0x64>
 800ac9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac9e:	e00e      	b.n	800acbe <_Balloc+0x6e>
 800aca0:	2221      	movs	r2, #33	; 0x21
 800aca2:	2104      	movs	r1, #4
 800aca4:	4620      	mov	r0, r4
 800aca6:	f000 fc94 	bl	800b5d2 <_calloc_r>
 800acaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acac:	60f0      	str	r0, [r6, #12]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1e4      	bne.n	800ac7e <_Balloc+0x2e>
 800acb4:	2000      	movs	r0, #0
 800acb6:	bd70      	pop	{r4, r5, r6, pc}
 800acb8:	6802      	ldr	r2, [r0, #0]
 800acba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acbe:	2300      	movs	r3, #0
 800acc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acc4:	e7f7      	b.n	800acb6 <_Balloc+0x66>
 800acc6:	bf00      	nop
 800acc8:	0800d2a6 	.word	0x0800d2a6
 800accc:	0800d408 	.word	0x0800d408

0800acd0 <_Bfree>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acd4:	4605      	mov	r5, r0
 800acd6:	460c      	mov	r4, r1
 800acd8:	b976      	cbnz	r6, 800acf8 <_Bfree+0x28>
 800acda:	2010      	movs	r0, #16
 800acdc:	f7ff ff90 	bl	800ac00 <malloc>
 800ace0:	4602      	mov	r2, r0
 800ace2:	6268      	str	r0, [r5, #36]	; 0x24
 800ace4:	b920      	cbnz	r0, 800acf0 <_Bfree+0x20>
 800ace6:	4b09      	ldr	r3, [pc, #36]	; (800ad0c <_Bfree+0x3c>)
 800ace8:	4809      	ldr	r0, [pc, #36]	; (800ad10 <_Bfree+0x40>)
 800acea:	218a      	movs	r1, #138	; 0x8a
 800acec:	f001 ff70 	bl	800cbd0 <__assert_func>
 800acf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acf4:	6006      	str	r6, [r0, #0]
 800acf6:	60c6      	str	r6, [r0, #12]
 800acf8:	b13c      	cbz	r4, 800ad0a <_Bfree+0x3a>
 800acfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800acfc:	6862      	ldr	r2, [r4, #4]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad04:	6021      	str	r1, [r4, #0]
 800ad06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}
 800ad0c:	0800d2a6 	.word	0x0800d2a6
 800ad10:	0800d408 	.word	0x0800d408

0800ad14 <__multadd>:
 800ad14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad18:	690d      	ldr	r5, [r1, #16]
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	461e      	mov	r6, r3
 800ad20:	f101 0c14 	add.w	ip, r1, #20
 800ad24:	2000      	movs	r0, #0
 800ad26:	f8dc 3000 	ldr.w	r3, [ip]
 800ad2a:	b299      	uxth	r1, r3
 800ad2c:	fb02 6101 	mla	r1, r2, r1, r6
 800ad30:	0c1e      	lsrs	r6, r3, #16
 800ad32:	0c0b      	lsrs	r3, r1, #16
 800ad34:	fb02 3306 	mla	r3, r2, r6, r3
 800ad38:	b289      	uxth	r1, r1
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad40:	4285      	cmp	r5, r0
 800ad42:	f84c 1b04 	str.w	r1, [ip], #4
 800ad46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad4a:	dcec      	bgt.n	800ad26 <__multadd+0x12>
 800ad4c:	b30e      	cbz	r6, 800ad92 <__multadd+0x7e>
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	42ab      	cmp	r3, r5
 800ad52:	dc19      	bgt.n	800ad88 <__multadd+0x74>
 800ad54:	6861      	ldr	r1, [r4, #4]
 800ad56:	4638      	mov	r0, r7
 800ad58:	3101      	adds	r1, #1
 800ad5a:	f7ff ff79 	bl	800ac50 <_Balloc>
 800ad5e:	4680      	mov	r8, r0
 800ad60:	b928      	cbnz	r0, 800ad6e <__multadd+0x5a>
 800ad62:	4602      	mov	r2, r0
 800ad64:	4b0c      	ldr	r3, [pc, #48]	; (800ad98 <__multadd+0x84>)
 800ad66:	480d      	ldr	r0, [pc, #52]	; (800ad9c <__multadd+0x88>)
 800ad68:	21b5      	movs	r1, #181	; 0xb5
 800ad6a:	f001 ff31 	bl	800cbd0 <__assert_func>
 800ad6e:	6922      	ldr	r2, [r4, #16]
 800ad70:	3202      	adds	r2, #2
 800ad72:	f104 010c 	add.w	r1, r4, #12
 800ad76:	0092      	lsls	r2, r2, #2
 800ad78:	300c      	adds	r0, #12
 800ad7a:	f7ff ff5b 	bl	800ac34 <memcpy>
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4638      	mov	r0, r7
 800ad82:	f7ff ffa5 	bl	800acd0 <_Bfree>
 800ad86:	4644      	mov	r4, r8
 800ad88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad8c:	3501      	adds	r5, #1
 800ad8e:	615e      	str	r6, [r3, #20]
 800ad90:	6125      	str	r5, [r4, #16]
 800ad92:	4620      	mov	r0, r4
 800ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad98:	0800d318 	.word	0x0800d318
 800ad9c:	0800d408 	.word	0x0800d408

0800ada0 <__s2b>:
 800ada0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada4:	460c      	mov	r4, r1
 800ada6:	4615      	mov	r5, r2
 800ada8:	461f      	mov	r7, r3
 800adaa:	2209      	movs	r2, #9
 800adac:	3308      	adds	r3, #8
 800adae:	4606      	mov	r6, r0
 800adb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800adb4:	2100      	movs	r1, #0
 800adb6:	2201      	movs	r2, #1
 800adb8:	429a      	cmp	r2, r3
 800adba:	db09      	blt.n	800add0 <__s2b+0x30>
 800adbc:	4630      	mov	r0, r6
 800adbe:	f7ff ff47 	bl	800ac50 <_Balloc>
 800adc2:	b940      	cbnz	r0, 800add6 <__s2b+0x36>
 800adc4:	4602      	mov	r2, r0
 800adc6:	4b19      	ldr	r3, [pc, #100]	; (800ae2c <__s2b+0x8c>)
 800adc8:	4819      	ldr	r0, [pc, #100]	; (800ae30 <__s2b+0x90>)
 800adca:	21ce      	movs	r1, #206	; 0xce
 800adcc:	f001 ff00 	bl	800cbd0 <__assert_func>
 800add0:	0052      	lsls	r2, r2, #1
 800add2:	3101      	adds	r1, #1
 800add4:	e7f0      	b.n	800adb8 <__s2b+0x18>
 800add6:	9b08      	ldr	r3, [sp, #32]
 800add8:	6143      	str	r3, [r0, #20]
 800adda:	2d09      	cmp	r5, #9
 800addc:	f04f 0301 	mov.w	r3, #1
 800ade0:	6103      	str	r3, [r0, #16]
 800ade2:	dd16      	ble.n	800ae12 <__s2b+0x72>
 800ade4:	f104 0909 	add.w	r9, r4, #9
 800ade8:	46c8      	mov	r8, r9
 800adea:	442c      	add	r4, r5
 800adec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800adf0:	4601      	mov	r1, r0
 800adf2:	3b30      	subs	r3, #48	; 0x30
 800adf4:	220a      	movs	r2, #10
 800adf6:	4630      	mov	r0, r6
 800adf8:	f7ff ff8c 	bl	800ad14 <__multadd>
 800adfc:	45a0      	cmp	r8, r4
 800adfe:	d1f5      	bne.n	800adec <__s2b+0x4c>
 800ae00:	f1a5 0408 	sub.w	r4, r5, #8
 800ae04:	444c      	add	r4, r9
 800ae06:	1b2d      	subs	r5, r5, r4
 800ae08:	1963      	adds	r3, r4, r5
 800ae0a:	42bb      	cmp	r3, r7
 800ae0c:	db04      	blt.n	800ae18 <__s2b+0x78>
 800ae0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae12:	340a      	adds	r4, #10
 800ae14:	2509      	movs	r5, #9
 800ae16:	e7f6      	b.n	800ae06 <__s2b+0x66>
 800ae18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae1c:	4601      	mov	r1, r0
 800ae1e:	3b30      	subs	r3, #48	; 0x30
 800ae20:	220a      	movs	r2, #10
 800ae22:	4630      	mov	r0, r6
 800ae24:	f7ff ff76 	bl	800ad14 <__multadd>
 800ae28:	e7ee      	b.n	800ae08 <__s2b+0x68>
 800ae2a:	bf00      	nop
 800ae2c:	0800d318 	.word	0x0800d318
 800ae30:	0800d408 	.word	0x0800d408

0800ae34 <__hi0bits>:
 800ae34:	0c03      	lsrs	r3, r0, #16
 800ae36:	041b      	lsls	r3, r3, #16
 800ae38:	b9d3      	cbnz	r3, 800ae70 <__hi0bits+0x3c>
 800ae3a:	0400      	lsls	r0, r0, #16
 800ae3c:	2310      	movs	r3, #16
 800ae3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae42:	bf04      	itt	eq
 800ae44:	0200      	lsleq	r0, r0, #8
 800ae46:	3308      	addeq	r3, #8
 800ae48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae4c:	bf04      	itt	eq
 800ae4e:	0100      	lsleq	r0, r0, #4
 800ae50:	3304      	addeq	r3, #4
 800ae52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae56:	bf04      	itt	eq
 800ae58:	0080      	lsleq	r0, r0, #2
 800ae5a:	3302      	addeq	r3, #2
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	db05      	blt.n	800ae6c <__hi0bits+0x38>
 800ae60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae64:	f103 0301 	add.w	r3, r3, #1
 800ae68:	bf08      	it	eq
 800ae6a:	2320      	moveq	r3, #32
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	4770      	bx	lr
 800ae70:	2300      	movs	r3, #0
 800ae72:	e7e4      	b.n	800ae3e <__hi0bits+0xa>

0800ae74 <__lo0bits>:
 800ae74:	6803      	ldr	r3, [r0, #0]
 800ae76:	f013 0207 	ands.w	r2, r3, #7
 800ae7a:	4601      	mov	r1, r0
 800ae7c:	d00b      	beq.n	800ae96 <__lo0bits+0x22>
 800ae7e:	07da      	lsls	r2, r3, #31
 800ae80:	d423      	bmi.n	800aeca <__lo0bits+0x56>
 800ae82:	0798      	lsls	r0, r3, #30
 800ae84:	bf49      	itett	mi
 800ae86:	085b      	lsrmi	r3, r3, #1
 800ae88:	089b      	lsrpl	r3, r3, #2
 800ae8a:	2001      	movmi	r0, #1
 800ae8c:	600b      	strmi	r3, [r1, #0]
 800ae8e:	bf5c      	itt	pl
 800ae90:	600b      	strpl	r3, [r1, #0]
 800ae92:	2002      	movpl	r0, #2
 800ae94:	4770      	bx	lr
 800ae96:	b298      	uxth	r0, r3
 800ae98:	b9a8      	cbnz	r0, 800aec6 <__lo0bits+0x52>
 800ae9a:	0c1b      	lsrs	r3, r3, #16
 800ae9c:	2010      	movs	r0, #16
 800ae9e:	b2da      	uxtb	r2, r3
 800aea0:	b90a      	cbnz	r2, 800aea6 <__lo0bits+0x32>
 800aea2:	3008      	adds	r0, #8
 800aea4:	0a1b      	lsrs	r3, r3, #8
 800aea6:	071a      	lsls	r2, r3, #28
 800aea8:	bf04      	itt	eq
 800aeaa:	091b      	lsreq	r3, r3, #4
 800aeac:	3004      	addeq	r0, #4
 800aeae:	079a      	lsls	r2, r3, #30
 800aeb0:	bf04      	itt	eq
 800aeb2:	089b      	lsreq	r3, r3, #2
 800aeb4:	3002      	addeq	r0, #2
 800aeb6:	07da      	lsls	r2, r3, #31
 800aeb8:	d403      	bmi.n	800aec2 <__lo0bits+0x4e>
 800aeba:	085b      	lsrs	r3, r3, #1
 800aebc:	f100 0001 	add.w	r0, r0, #1
 800aec0:	d005      	beq.n	800aece <__lo0bits+0x5a>
 800aec2:	600b      	str	r3, [r1, #0]
 800aec4:	4770      	bx	lr
 800aec6:	4610      	mov	r0, r2
 800aec8:	e7e9      	b.n	800ae9e <__lo0bits+0x2a>
 800aeca:	2000      	movs	r0, #0
 800aecc:	4770      	bx	lr
 800aece:	2020      	movs	r0, #32
 800aed0:	4770      	bx	lr
	...

0800aed4 <__i2b>:
 800aed4:	b510      	push	{r4, lr}
 800aed6:	460c      	mov	r4, r1
 800aed8:	2101      	movs	r1, #1
 800aeda:	f7ff feb9 	bl	800ac50 <_Balloc>
 800aede:	4602      	mov	r2, r0
 800aee0:	b928      	cbnz	r0, 800aeee <__i2b+0x1a>
 800aee2:	4b05      	ldr	r3, [pc, #20]	; (800aef8 <__i2b+0x24>)
 800aee4:	4805      	ldr	r0, [pc, #20]	; (800aefc <__i2b+0x28>)
 800aee6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aeea:	f001 fe71 	bl	800cbd0 <__assert_func>
 800aeee:	2301      	movs	r3, #1
 800aef0:	6144      	str	r4, [r0, #20]
 800aef2:	6103      	str	r3, [r0, #16]
 800aef4:	bd10      	pop	{r4, pc}
 800aef6:	bf00      	nop
 800aef8:	0800d318 	.word	0x0800d318
 800aefc:	0800d408 	.word	0x0800d408

0800af00 <__multiply>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	4691      	mov	r9, r2
 800af06:	690a      	ldr	r2, [r1, #16]
 800af08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	bfb8      	it	lt
 800af10:	460b      	movlt	r3, r1
 800af12:	460c      	mov	r4, r1
 800af14:	bfbc      	itt	lt
 800af16:	464c      	movlt	r4, r9
 800af18:	4699      	movlt	r9, r3
 800af1a:	6927      	ldr	r7, [r4, #16]
 800af1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af20:	68a3      	ldr	r3, [r4, #8]
 800af22:	6861      	ldr	r1, [r4, #4]
 800af24:	eb07 060a 	add.w	r6, r7, sl
 800af28:	42b3      	cmp	r3, r6
 800af2a:	b085      	sub	sp, #20
 800af2c:	bfb8      	it	lt
 800af2e:	3101      	addlt	r1, #1
 800af30:	f7ff fe8e 	bl	800ac50 <_Balloc>
 800af34:	b930      	cbnz	r0, 800af44 <__multiply+0x44>
 800af36:	4602      	mov	r2, r0
 800af38:	4b44      	ldr	r3, [pc, #272]	; (800b04c <__multiply+0x14c>)
 800af3a:	4845      	ldr	r0, [pc, #276]	; (800b050 <__multiply+0x150>)
 800af3c:	f240 115d 	movw	r1, #349	; 0x15d
 800af40:	f001 fe46 	bl	800cbd0 <__assert_func>
 800af44:	f100 0514 	add.w	r5, r0, #20
 800af48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af4c:	462b      	mov	r3, r5
 800af4e:	2200      	movs	r2, #0
 800af50:	4543      	cmp	r3, r8
 800af52:	d321      	bcc.n	800af98 <__multiply+0x98>
 800af54:	f104 0314 	add.w	r3, r4, #20
 800af58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af5c:	f109 0314 	add.w	r3, r9, #20
 800af60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af64:	9202      	str	r2, [sp, #8]
 800af66:	1b3a      	subs	r2, r7, r4
 800af68:	3a15      	subs	r2, #21
 800af6a:	f022 0203 	bic.w	r2, r2, #3
 800af6e:	3204      	adds	r2, #4
 800af70:	f104 0115 	add.w	r1, r4, #21
 800af74:	428f      	cmp	r7, r1
 800af76:	bf38      	it	cc
 800af78:	2204      	movcc	r2, #4
 800af7a:	9201      	str	r2, [sp, #4]
 800af7c:	9a02      	ldr	r2, [sp, #8]
 800af7e:	9303      	str	r3, [sp, #12]
 800af80:	429a      	cmp	r2, r3
 800af82:	d80c      	bhi.n	800af9e <__multiply+0x9e>
 800af84:	2e00      	cmp	r6, #0
 800af86:	dd03      	ble.n	800af90 <__multiply+0x90>
 800af88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d05a      	beq.n	800b046 <__multiply+0x146>
 800af90:	6106      	str	r6, [r0, #16]
 800af92:	b005      	add	sp, #20
 800af94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af98:	f843 2b04 	str.w	r2, [r3], #4
 800af9c:	e7d8      	b.n	800af50 <__multiply+0x50>
 800af9e:	f8b3 a000 	ldrh.w	sl, [r3]
 800afa2:	f1ba 0f00 	cmp.w	sl, #0
 800afa6:	d024      	beq.n	800aff2 <__multiply+0xf2>
 800afa8:	f104 0e14 	add.w	lr, r4, #20
 800afac:	46a9      	mov	r9, r5
 800afae:	f04f 0c00 	mov.w	ip, #0
 800afb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800afb6:	f8d9 1000 	ldr.w	r1, [r9]
 800afba:	fa1f fb82 	uxth.w	fp, r2
 800afbe:	b289      	uxth	r1, r1
 800afc0:	fb0a 110b 	mla	r1, sl, fp, r1
 800afc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800afc8:	f8d9 2000 	ldr.w	r2, [r9]
 800afcc:	4461      	add	r1, ip
 800afce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afd2:	fb0a c20b 	mla	r2, sl, fp, ip
 800afd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800afda:	b289      	uxth	r1, r1
 800afdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800afe0:	4577      	cmp	r7, lr
 800afe2:	f849 1b04 	str.w	r1, [r9], #4
 800afe6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afea:	d8e2      	bhi.n	800afb2 <__multiply+0xb2>
 800afec:	9a01      	ldr	r2, [sp, #4]
 800afee:	f845 c002 	str.w	ip, [r5, r2]
 800aff2:	9a03      	ldr	r2, [sp, #12]
 800aff4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aff8:	3304      	adds	r3, #4
 800affa:	f1b9 0f00 	cmp.w	r9, #0
 800affe:	d020      	beq.n	800b042 <__multiply+0x142>
 800b000:	6829      	ldr	r1, [r5, #0]
 800b002:	f104 0c14 	add.w	ip, r4, #20
 800b006:	46ae      	mov	lr, r5
 800b008:	f04f 0a00 	mov.w	sl, #0
 800b00c:	f8bc b000 	ldrh.w	fp, [ip]
 800b010:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b014:	fb09 220b 	mla	r2, r9, fp, r2
 800b018:	4492      	add	sl, r2
 800b01a:	b289      	uxth	r1, r1
 800b01c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b020:	f84e 1b04 	str.w	r1, [lr], #4
 800b024:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b028:	f8be 1000 	ldrh.w	r1, [lr]
 800b02c:	0c12      	lsrs	r2, r2, #16
 800b02e:	fb09 1102 	mla	r1, r9, r2, r1
 800b032:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b036:	4567      	cmp	r7, ip
 800b038:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b03c:	d8e6      	bhi.n	800b00c <__multiply+0x10c>
 800b03e:	9a01      	ldr	r2, [sp, #4]
 800b040:	50a9      	str	r1, [r5, r2]
 800b042:	3504      	adds	r5, #4
 800b044:	e79a      	b.n	800af7c <__multiply+0x7c>
 800b046:	3e01      	subs	r6, #1
 800b048:	e79c      	b.n	800af84 <__multiply+0x84>
 800b04a:	bf00      	nop
 800b04c:	0800d318 	.word	0x0800d318
 800b050:	0800d408 	.word	0x0800d408

0800b054 <__pow5mult>:
 800b054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b058:	4615      	mov	r5, r2
 800b05a:	f012 0203 	ands.w	r2, r2, #3
 800b05e:	4606      	mov	r6, r0
 800b060:	460f      	mov	r7, r1
 800b062:	d007      	beq.n	800b074 <__pow5mult+0x20>
 800b064:	4c25      	ldr	r4, [pc, #148]	; (800b0fc <__pow5mult+0xa8>)
 800b066:	3a01      	subs	r2, #1
 800b068:	2300      	movs	r3, #0
 800b06a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b06e:	f7ff fe51 	bl	800ad14 <__multadd>
 800b072:	4607      	mov	r7, r0
 800b074:	10ad      	asrs	r5, r5, #2
 800b076:	d03d      	beq.n	800b0f4 <__pow5mult+0xa0>
 800b078:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b07a:	b97c      	cbnz	r4, 800b09c <__pow5mult+0x48>
 800b07c:	2010      	movs	r0, #16
 800b07e:	f7ff fdbf 	bl	800ac00 <malloc>
 800b082:	4602      	mov	r2, r0
 800b084:	6270      	str	r0, [r6, #36]	; 0x24
 800b086:	b928      	cbnz	r0, 800b094 <__pow5mult+0x40>
 800b088:	4b1d      	ldr	r3, [pc, #116]	; (800b100 <__pow5mult+0xac>)
 800b08a:	481e      	ldr	r0, [pc, #120]	; (800b104 <__pow5mult+0xb0>)
 800b08c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b090:	f001 fd9e 	bl	800cbd0 <__assert_func>
 800b094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b098:	6004      	str	r4, [r0, #0]
 800b09a:	60c4      	str	r4, [r0, #12]
 800b09c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0a4:	b94c      	cbnz	r4, 800b0ba <__pow5mult+0x66>
 800b0a6:	f240 2171 	movw	r1, #625	; 0x271
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	f7ff ff12 	bl	800aed4 <__i2b>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	6003      	str	r3, [r0, #0]
 800b0ba:	f04f 0900 	mov.w	r9, #0
 800b0be:	07eb      	lsls	r3, r5, #31
 800b0c0:	d50a      	bpl.n	800b0d8 <__pow5mult+0x84>
 800b0c2:	4639      	mov	r1, r7
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f7ff ff1a 	bl	800af00 <__multiply>
 800b0cc:	4639      	mov	r1, r7
 800b0ce:	4680      	mov	r8, r0
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f7ff fdfd 	bl	800acd0 <_Bfree>
 800b0d6:	4647      	mov	r7, r8
 800b0d8:	106d      	asrs	r5, r5, #1
 800b0da:	d00b      	beq.n	800b0f4 <__pow5mult+0xa0>
 800b0dc:	6820      	ldr	r0, [r4, #0]
 800b0de:	b938      	cbnz	r0, 800b0f0 <__pow5mult+0x9c>
 800b0e0:	4622      	mov	r2, r4
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f7ff ff0b 	bl	800af00 <__multiply>
 800b0ea:	6020      	str	r0, [r4, #0]
 800b0ec:	f8c0 9000 	str.w	r9, [r0]
 800b0f0:	4604      	mov	r4, r0
 800b0f2:	e7e4      	b.n	800b0be <__pow5mult+0x6a>
 800b0f4:	4638      	mov	r0, r7
 800b0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0fa:	bf00      	nop
 800b0fc:	0800d558 	.word	0x0800d558
 800b100:	0800d2a6 	.word	0x0800d2a6
 800b104:	0800d408 	.word	0x0800d408

0800b108 <__lshift>:
 800b108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b10c:	460c      	mov	r4, r1
 800b10e:	6849      	ldr	r1, [r1, #4]
 800b110:	6923      	ldr	r3, [r4, #16]
 800b112:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b116:	68a3      	ldr	r3, [r4, #8]
 800b118:	4607      	mov	r7, r0
 800b11a:	4691      	mov	r9, r2
 800b11c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b120:	f108 0601 	add.w	r6, r8, #1
 800b124:	42b3      	cmp	r3, r6
 800b126:	db0b      	blt.n	800b140 <__lshift+0x38>
 800b128:	4638      	mov	r0, r7
 800b12a:	f7ff fd91 	bl	800ac50 <_Balloc>
 800b12e:	4605      	mov	r5, r0
 800b130:	b948      	cbnz	r0, 800b146 <__lshift+0x3e>
 800b132:	4602      	mov	r2, r0
 800b134:	4b2a      	ldr	r3, [pc, #168]	; (800b1e0 <__lshift+0xd8>)
 800b136:	482b      	ldr	r0, [pc, #172]	; (800b1e4 <__lshift+0xdc>)
 800b138:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b13c:	f001 fd48 	bl	800cbd0 <__assert_func>
 800b140:	3101      	adds	r1, #1
 800b142:	005b      	lsls	r3, r3, #1
 800b144:	e7ee      	b.n	800b124 <__lshift+0x1c>
 800b146:	2300      	movs	r3, #0
 800b148:	f100 0114 	add.w	r1, r0, #20
 800b14c:	f100 0210 	add.w	r2, r0, #16
 800b150:	4618      	mov	r0, r3
 800b152:	4553      	cmp	r3, sl
 800b154:	db37      	blt.n	800b1c6 <__lshift+0xbe>
 800b156:	6920      	ldr	r0, [r4, #16]
 800b158:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b15c:	f104 0314 	add.w	r3, r4, #20
 800b160:	f019 091f 	ands.w	r9, r9, #31
 800b164:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b168:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b16c:	d02f      	beq.n	800b1ce <__lshift+0xc6>
 800b16e:	f1c9 0e20 	rsb	lr, r9, #32
 800b172:	468a      	mov	sl, r1
 800b174:	f04f 0c00 	mov.w	ip, #0
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	fa02 f209 	lsl.w	r2, r2, r9
 800b17e:	ea42 020c 	orr.w	r2, r2, ip
 800b182:	f84a 2b04 	str.w	r2, [sl], #4
 800b186:	f853 2b04 	ldr.w	r2, [r3], #4
 800b18a:	4298      	cmp	r0, r3
 800b18c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b190:	d8f2      	bhi.n	800b178 <__lshift+0x70>
 800b192:	1b03      	subs	r3, r0, r4
 800b194:	3b15      	subs	r3, #21
 800b196:	f023 0303 	bic.w	r3, r3, #3
 800b19a:	3304      	adds	r3, #4
 800b19c:	f104 0215 	add.w	r2, r4, #21
 800b1a0:	4290      	cmp	r0, r2
 800b1a2:	bf38      	it	cc
 800b1a4:	2304      	movcc	r3, #4
 800b1a6:	f841 c003 	str.w	ip, [r1, r3]
 800b1aa:	f1bc 0f00 	cmp.w	ip, #0
 800b1ae:	d001      	beq.n	800b1b4 <__lshift+0xac>
 800b1b0:	f108 0602 	add.w	r6, r8, #2
 800b1b4:	3e01      	subs	r6, #1
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	612e      	str	r6, [r5, #16]
 800b1ba:	4621      	mov	r1, r4
 800b1bc:	f7ff fd88 	bl	800acd0 <_Bfree>
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	e7c1      	b.n	800b152 <__lshift+0x4a>
 800b1ce:	3904      	subs	r1, #4
 800b1d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1d8:	4298      	cmp	r0, r3
 800b1da:	d8f9      	bhi.n	800b1d0 <__lshift+0xc8>
 800b1dc:	e7ea      	b.n	800b1b4 <__lshift+0xac>
 800b1de:	bf00      	nop
 800b1e0:	0800d318 	.word	0x0800d318
 800b1e4:	0800d408 	.word	0x0800d408

0800b1e8 <__mcmp>:
 800b1e8:	b530      	push	{r4, r5, lr}
 800b1ea:	6902      	ldr	r2, [r0, #16]
 800b1ec:	690c      	ldr	r4, [r1, #16]
 800b1ee:	1b12      	subs	r2, r2, r4
 800b1f0:	d10e      	bne.n	800b210 <__mcmp+0x28>
 800b1f2:	f100 0314 	add.w	r3, r0, #20
 800b1f6:	3114      	adds	r1, #20
 800b1f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b1fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b200:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b204:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b208:	42a5      	cmp	r5, r4
 800b20a:	d003      	beq.n	800b214 <__mcmp+0x2c>
 800b20c:	d305      	bcc.n	800b21a <__mcmp+0x32>
 800b20e:	2201      	movs	r2, #1
 800b210:	4610      	mov	r0, r2
 800b212:	bd30      	pop	{r4, r5, pc}
 800b214:	4283      	cmp	r3, r0
 800b216:	d3f3      	bcc.n	800b200 <__mcmp+0x18>
 800b218:	e7fa      	b.n	800b210 <__mcmp+0x28>
 800b21a:	f04f 32ff 	mov.w	r2, #4294967295
 800b21e:	e7f7      	b.n	800b210 <__mcmp+0x28>

0800b220 <__mdiff>:
 800b220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b224:	460c      	mov	r4, r1
 800b226:	4606      	mov	r6, r0
 800b228:	4611      	mov	r1, r2
 800b22a:	4620      	mov	r0, r4
 800b22c:	4690      	mov	r8, r2
 800b22e:	f7ff ffdb 	bl	800b1e8 <__mcmp>
 800b232:	1e05      	subs	r5, r0, #0
 800b234:	d110      	bne.n	800b258 <__mdiff+0x38>
 800b236:	4629      	mov	r1, r5
 800b238:	4630      	mov	r0, r6
 800b23a:	f7ff fd09 	bl	800ac50 <_Balloc>
 800b23e:	b930      	cbnz	r0, 800b24e <__mdiff+0x2e>
 800b240:	4b3a      	ldr	r3, [pc, #232]	; (800b32c <__mdiff+0x10c>)
 800b242:	4602      	mov	r2, r0
 800b244:	f240 2132 	movw	r1, #562	; 0x232
 800b248:	4839      	ldr	r0, [pc, #228]	; (800b330 <__mdiff+0x110>)
 800b24a:	f001 fcc1 	bl	800cbd0 <__assert_func>
 800b24e:	2301      	movs	r3, #1
 800b250:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b258:	bfa4      	itt	ge
 800b25a:	4643      	movge	r3, r8
 800b25c:	46a0      	movge	r8, r4
 800b25e:	4630      	mov	r0, r6
 800b260:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b264:	bfa6      	itte	ge
 800b266:	461c      	movge	r4, r3
 800b268:	2500      	movge	r5, #0
 800b26a:	2501      	movlt	r5, #1
 800b26c:	f7ff fcf0 	bl	800ac50 <_Balloc>
 800b270:	b920      	cbnz	r0, 800b27c <__mdiff+0x5c>
 800b272:	4b2e      	ldr	r3, [pc, #184]	; (800b32c <__mdiff+0x10c>)
 800b274:	4602      	mov	r2, r0
 800b276:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b27a:	e7e5      	b.n	800b248 <__mdiff+0x28>
 800b27c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b280:	6926      	ldr	r6, [r4, #16]
 800b282:	60c5      	str	r5, [r0, #12]
 800b284:	f104 0914 	add.w	r9, r4, #20
 800b288:	f108 0514 	add.w	r5, r8, #20
 800b28c:	f100 0e14 	add.w	lr, r0, #20
 800b290:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b294:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b298:	f108 0210 	add.w	r2, r8, #16
 800b29c:	46f2      	mov	sl, lr
 800b29e:	2100      	movs	r1, #0
 800b2a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b2a8:	fa1f f883 	uxth.w	r8, r3
 800b2ac:	fa11 f18b 	uxtah	r1, r1, fp
 800b2b0:	0c1b      	lsrs	r3, r3, #16
 800b2b2:	eba1 0808 	sub.w	r8, r1, r8
 800b2b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b2be:	fa1f f888 	uxth.w	r8, r8
 800b2c2:	1419      	asrs	r1, r3, #16
 800b2c4:	454e      	cmp	r6, r9
 800b2c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b2ca:	f84a 3b04 	str.w	r3, [sl], #4
 800b2ce:	d8e7      	bhi.n	800b2a0 <__mdiff+0x80>
 800b2d0:	1b33      	subs	r3, r6, r4
 800b2d2:	3b15      	subs	r3, #21
 800b2d4:	f023 0303 	bic.w	r3, r3, #3
 800b2d8:	3304      	adds	r3, #4
 800b2da:	3415      	adds	r4, #21
 800b2dc:	42a6      	cmp	r6, r4
 800b2de:	bf38      	it	cc
 800b2e0:	2304      	movcc	r3, #4
 800b2e2:	441d      	add	r5, r3
 800b2e4:	4473      	add	r3, lr
 800b2e6:	469e      	mov	lr, r3
 800b2e8:	462e      	mov	r6, r5
 800b2ea:	4566      	cmp	r6, ip
 800b2ec:	d30e      	bcc.n	800b30c <__mdiff+0xec>
 800b2ee:	f10c 0203 	add.w	r2, ip, #3
 800b2f2:	1b52      	subs	r2, r2, r5
 800b2f4:	f022 0203 	bic.w	r2, r2, #3
 800b2f8:	3d03      	subs	r5, #3
 800b2fa:	45ac      	cmp	ip, r5
 800b2fc:	bf38      	it	cc
 800b2fe:	2200      	movcc	r2, #0
 800b300:	441a      	add	r2, r3
 800b302:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b306:	b17b      	cbz	r3, 800b328 <__mdiff+0x108>
 800b308:	6107      	str	r7, [r0, #16]
 800b30a:	e7a3      	b.n	800b254 <__mdiff+0x34>
 800b30c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b310:	fa11 f288 	uxtah	r2, r1, r8
 800b314:	1414      	asrs	r4, r2, #16
 800b316:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b31a:	b292      	uxth	r2, r2
 800b31c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b320:	f84e 2b04 	str.w	r2, [lr], #4
 800b324:	1421      	asrs	r1, r4, #16
 800b326:	e7e0      	b.n	800b2ea <__mdiff+0xca>
 800b328:	3f01      	subs	r7, #1
 800b32a:	e7ea      	b.n	800b302 <__mdiff+0xe2>
 800b32c:	0800d318 	.word	0x0800d318
 800b330:	0800d408 	.word	0x0800d408

0800b334 <__ulp>:
 800b334:	b082      	sub	sp, #8
 800b336:	ed8d 0b00 	vstr	d0, [sp]
 800b33a:	9b01      	ldr	r3, [sp, #4]
 800b33c:	4912      	ldr	r1, [pc, #72]	; (800b388 <__ulp+0x54>)
 800b33e:	4019      	ands	r1, r3
 800b340:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b344:	2900      	cmp	r1, #0
 800b346:	dd05      	ble.n	800b354 <__ulp+0x20>
 800b348:	2200      	movs	r2, #0
 800b34a:	460b      	mov	r3, r1
 800b34c:	ec43 2b10 	vmov	d0, r2, r3
 800b350:	b002      	add	sp, #8
 800b352:	4770      	bx	lr
 800b354:	4249      	negs	r1, r1
 800b356:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b35a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b35e:	f04f 0200 	mov.w	r2, #0
 800b362:	f04f 0300 	mov.w	r3, #0
 800b366:	da04      	bge.n	800b372 <__ulp+0x3e>
 800b368:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b36c:	fa41 f300 	asr.w	r3, r1, r0
 800b370:	e7ec      	b.n	800b34c <__ulp+0x18>
 800b372:	f1a0 0114 	sub.w	r1, r0, #20
 800b376:	291e      	cmp	r1, #30
 800b378:	bfda      	itte	le
 800b37a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b37e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b382:	2101      	movgt	r1, #1
 800b384:	460a      	mov	r2, r1
 800b386:	e7e1      	b.n	800b34c <__ulp+0x18>
 800b388:	7ff00000 	.word	0x7ff00000

0800b38c <__b2d>:
 800b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38e:	6905      	ldr	r5, [r0, #16]
 800b390:	f100 0714 	add.w	r7, r0, #20
 800b394:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b398:	1f2e      	subs	r6, r5, #4
 800b39a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f7ff fd48 	bl	800ae34 <__hi0bits>
 800b3a4:	f1c0 0320 	rsb	r3, r0, #32
 800b3a8:	280a      	cmp	r0, #10
 800b3aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b428 <__b2d+0x9c>
 800b3ae:	600b      	str	r3, [r1, #0]
 800b3b0:	dc14      	bgt.n	800b3dc <__b2d+0x50>
 800b3b2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b3b6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b3ba:	42b7      	cmp	r7, r6
 800b3bc:	ea41 030c 	orr.w	r3, r1, ip
 800b3c0:	bf34      	ite	cc
 800b3c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3c6:	2100      	movcs	r1, #0
 800b3c8:	3015      	adds	r0, #21
 800b3ca:	fa04 f000 	lsl.w	r0, r4, r0
 800b3ce:	fa21 f10e 	lsr.w	r1, r1, lr
 800b3d2:	ea40 0201 	orr.w	r2, r0, r1
 800b3d6:	ec43 2b10 	vmov	d0, r2, r3
 800b3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3dc:	42b7      	cmp	r7, r6
 800b3de:	bf3a      	itte	cc
 800b3e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3e4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b3e8:	2100      	movcs	r1, #0
 800b3ea:	380b      	subs	r0, #11
 800b3ec:	d017      	beq.n	800b41e <__b2d+0x92>
 800b3ee:	f1c0 0c20 	rsb	ip, r0, #32
 800b3f2:	fa04 f500 	lsl.w	r5, r4, r0
 800b3f6:	42be      	cmp	r6, r7
 800b3f8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b3fc:	ea45 0504 	orr.w	r5, r5, r4
 800b400:	bf8c      	ite	hi
 800b402:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b406:	2400      	movls	r4, #0
 800b408:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b40c:	fa01 f000 	lsl.w	r0, r1, r0
 800b410:	fa24 f40c 	lsr.w	r4, r4, ip
 800b414:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b418:	ea40 0204 	orr.w	r2, r0, r4
 800b41c:	e7db      	b.n	800b3d6 <__b2d+0x4a>
 800b41e:	ea44 030c 	orr.w	r3, r4, ip
 800b422:	460a      	mov	r2, r1
 800b424:	e7d7      	b.n	800b3d6 <__b2d+0x4a>
 800b426:	bf00      	nop
 800b428:	3ff00000 	.word	0x3ff00000

0800b42c <__d2b>:
 800b42c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b430:	4689      	mov	r9, r1
 800b432:	2101      	movs	r1, #1
 800b434:	ec57 6b10 	vmov	r6, r7, d0
 800b438:	4690      	mov	r8, r2
 800b43a:	f7ff fc09 	bl	800ac50 <_Balloc>
 800b43e:	4604      	mov	r4, r0
 800b440:	b930      	cbnz	r0, 800b450 <__d2b+0x24>
 800b442:	4602      	mov	r2, r0
 800b444:	4b25      	ldr	r3, [pc, #148]	; (800b4dc <__d2b+0xb0>)
 800b446:	4826      	ldr	r0, [pc, #152]	; (800b4e0 <__d2b+0xb4>)
 800b448:	f240 310a 	movw	r1, #778	; 0x30a
 800b44c:	f001 fbc0 	bl	800cbd0 <__assert_func>
 800b450:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b454:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b458:	bb35      	cbnz	r5, 800b4a8 <__d2b+0x7c>
 800b45a:	2e00      	cmp	r6, #0
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	d028      	beq.n	800b4b2 <__d2b+0x86>
 800b460:	4668      	mov	r0, sp
 800b462:	9600      	str	r6, [sp, #0]
 800b464:	f7ff fd06 	bl	800ae74 <__lo0bits>
 800b468:	9900      	ldr	r1, [sp, #0]
 800b46a:	b300      	cbz	r0, 800b4ae <__d2b+0x82>
 800b46c:	9a01      	ldr	r2, [sp, #4]
 800b46e:	f1c0 0320 	rsb	r3, r0, #32
 800b472:	fa02 f303 	lsl.w	r3, r2, r3
 800b476:	430b      	orrs	r3, r1
 800b478:	40c2      	lsrs	r2, r0
 800b47a:	6163      	str	r3, [r4, #20]
 800b47c:	9201      	str	r2, [sp, #4]
 800b47e:	9b01      	ldr	r3, [sp, #4]
 800b480:	61a3      	str	r3, [r4, #24]
 800b482:	2b00      	cmp	r3, #0
 800b484:	bf14      	ite	ne
 800b486:	2202      	movne	r2, #2
 800b488:	2201      	moveq	r2, #1
 800b48a:	6122      	str	r2, [r4, #16]
 800b48c:	b1d5      	cbz	r5, 800b4c4 <__d2b+0x98>
 800b48e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b492:	4405      	add	r5, r0
 800b494:	f8c9 5000 	str.w	r5, [r9]
 800b498:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b49c:	f8c8 0000 	str.w	r0, [r8]
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	b003      	add	sp, #12
 800b4a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4ac:	e7d5      	b.n	800b45a <__d2b+0x2e>
 800b4ae:	6161      	str	r1, [r4, #20]
 800b4b0:	e7e5      	b.n	800b47e <__d2b+0x52>
 800b4b2:	a801      	add	r0, sp, #4
 800b4b4:	f7ff fcde 	bl	800ae74 <__lo0bits>
 800b4b8:	9b01      	ldr	r3, [sp, #4]
 800b4ba:	6163      	str	r3, [r4, #20]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	6122      	str	r2, [r4, #16]
 800b4c0:	3020      	adds	r0, #32
 800b4c2:	e7e3      	b.n	800b48c <__d2b+0x60>
 800b4c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4cc:	f8c9 0000 	str.w	r0, [r9]
 800b4d0:	6918      	ldr	r0, [r3, #16]
 800b4d2:	f7ff fcaf 	bl	800ae34 <__hi0bits>
 800b4d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4da:	e7df      	b.n	800b49c <__d2b+0x70>
 800b4dc:	0800d318 	.word	0x0800d318
 800b4e0:	0800d408 	.word	0x0800d408

0800b4e4 <__ratio>:
 800b4e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e8:	4688      	mov	r8, r1
 800b4ea:	4669      	mov	r1, sp
 800b4ec:	4681      	mov	r9, r0
 800b4ee:	f7ff ff4d 	bl	800b38c <__b2d>
 800b4f2:	a901      	add	r1, sp, #4
 800b4f4:	4640      	mov	r0, r8
 800b4f6:	ec55 4b10 	vmov	r4, r5, d0
 800b4fa:	f7ff ff47 	bl	800b38c <__b2d>
 800b4fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b502:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b506:	eba3 0c02 	sub.w	ip, r3, r2
 800b50a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b514:	ec51 0b10 	vmov	r0, r1, d0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bfd6      	itet	le
 800b51c:	460a      	movle	r2, r1
 800b51e:	462a      	movgt	r2, r5
 800b520:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b524:	468b      	mov	fp, r1
 800b526:	462f      	mov	r7, r5
 800b528:	bfd4      	ite	le
 800b52a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b52e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b532:	4620      	mov	r0, r4
 800b534:	ee10 2a10 	vmov	r2, s0
 800b538:	465b      	mov	r3, fp
 800b53a:	4639      	mov	r1, r7
 800b53c:	f7f5 f9a6 	bl	800088c <__aeabi_ddiv>
 800b540:	ec41 0b10 	vmov	d0, r0, r1
 800b544:	b003      	add	sp, #12
 800b546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b54a <__copybits>:
 800b54a:	3901      	subs	r1, #1
 800b54c:	b570      	push	{r4, r5, r6, lr}
 800b54e:	1149      	asrs	r1, r1, #5
 800b550:	6914      	ldr	r4, [r2, #16]
 800b552:	3101      	adds	r1, #1
 800b554:	f102 0314 	add.w	r3, r2, #20
 800b558:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b55c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b560:	1f05      	subs	r5, r0, #4
 800b562:	42a3      	cmp	r3, r4
 800b564:	d30c      	bcc.n	800b580 <__copybits+0x36>
 800b566:	1aa3      	subs	r3, r4, r2
 800b568:	3b11      	subs	r3, #17
 800b56a:	f023 0303 	bic.w	r3, r3, #3
 800b56e:	3211      	adds	r2, #17
 800b570:	42a2      	cmp	r2, r4
 800b572:	bf88      	it	hi
 800b574:	2300      	movhi	r3, #0
 800b576:	4418      	add	r0, r3
 800b578:	2300      	movs	r3, #0
 800b57a:	4288      	cmp	r0, r1
 800b57c:	d305      	bcc.n	800b58a <__copybits+0x40>
 800b57e:	bd70      	pop	{r4, r5, r6, pc}
 800b580:	f853 6b04 	ldr.w	r6, [r3], #4
 800b584:	f845 6f04 	str.w	r6, [r5, #4]!
 800b588:	e7eb      	b.n	800b562 <__copybits+0x18>
 800b58a:	f840 3b04 	str.w	r3, [r0], #4
 800b58e:	e7f4      	b.n	800b57a <__copybits+0x30>

0800b590 <__any_on>:
 800b590:	f100 0214 	add.w	r2, r0, #20
 800b594:	6900      	ldr	r0, [r0, #16]
 800b596:	114b      	asrs	r3, r1, #5
 800b598:	4298      	cmp	r0, r3
 800b59a:	b510      	push	{r4, lr}
 800b59c:	db11      	blt.n	800b5c2 <__any_on+0x32>
 800b59e:	dd0a      	ble.n	800b5b6 <__any_on+0x26>
 800b5a0:	f011 011f 	ands.w	r1, r1, #31
 800b5a4:	d007      	beq.n	800b5b6 <__any_on+0x26>
 800b5a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5aa:	fa24 f001 	lsr.w	r0, r4, r1
 800b5ae:	fa00 f101 	lsl.w	r1, r0, r1
 800b5b2:	428c      	cmp	r4, r1
 800b5b4:	d10b      	bne.n	800b5ce <__any_on+0x3e>
 800b5b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d803      	bhi.n	800b5c6 <__any_on+0x36>
 800b5be:	2000      	movs	r0, #0
 800b5c0:	bd10      	pop	{r4, pc}
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	e7f7      	b.n	800b5b6 <__any_on+0x26>
 800b5c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5ca:	2900      	cmp	r1, #0
 800b5cc:	d0f5      	beq.n	800b5ba <__any_on+0x2a>
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	e7f6      	b.n	800b5c0 <__any_on+0x30>

0800b5d2 <_calloc_r>:
 800b5d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5d4:	fba1 2402 	umull	r2, r4, r1, r2
 800b5d8:	b94c      	cbnz	r4, 800b5ee <_calloc_r+0x1c>
 800b5da:	4611      	mov	r1, r2
 800b5dc:	9201      	str	r2, [sp, #4]
 800b5de:	f000 f87b 	bl	800b6d8 <_malloc_r>
 800b5e2:	9a01      	ldr	r2, [sp, #4]
 800b5e4:	4605      	mov	r5, r0
 800b5e6:	b930      	cbnz	r0, 800b5f6 <_calloc_r+0x24>
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	b003      	add	sp, #12
 800b5ec:	bd30      	pop	{r4, r5, pc}
 800b5ee:	220c      	movs	r2, #12
 800b5f0:	6002      	str	r2, [r0, #0]
 800b5f2:	2500      	movs	r5, #0
 800b5f4:	e7f8      	b.n	800b5e8 <_calloc_r+0x16>
 800b5f6:	4621      	mov	r1, r4
 800b5f8:	f7fb fe84 	bl	8007304 <memset>
 800b5fc:	e7f4      	b.n	800b5e8 <_calloc_r+0x16>
	...

0800b600 <_free_r>:
 800b600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b602:	2900      	cmp	r1, #0
 800b604:	d044      	beq.n	800b690 <_free_r+0x90>
 800b606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b60a:	9001      	str	r0, [sp, #4]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f1a1 0404 	sub.w	r4, r1, #4
 800b612:	bfb8      	it	lt
 800b614:	18e4      	addlt	r4, r4, r3
 800b616:	f001 fb47 	bl	800cca8 <__malloc_lock>
 800b61a:	4a1e      	ldr	r2, [pc, #120]	; (800b694 <_free_r+0x94>)
 800b61c:	9801      	ldr	r0, [sp, #4]
 800b61e:	6813      	ldr	r3, [r2, #0]
 800b620:	b933      	cbnz	r3, 800b630 <_free_r+0x30>
 800b622:	6063      	str	r3, [r4, #4]
 800b624:	6014      	str	r4, [r2, #0]
 800b626:	b003      	add	sp, #12
 800b628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b62c:	f001 bb42 	b.w	800ccb4 <__malloc_unlock>
 800b630:	42a3      	cmp	r3, r4
 800b632:	d908      	bls.n	800b646 <_free_r+0x46>
 800b634:	6825      	ldr	r5, [r4, #0]
 800b636:	1961      	adds	r1, r4, r5
 800b638:	428b      	cmp	r3, r1
 800b63a:	bf01      	itttt	eq
 800b63c:	6819      	ldreq	r1, [r3, #0]
 800b63e:	685b      	ldreq	r3, [r3, #4]
 800b640:	1949      	addeq	r1, r1, r5
 800b642:	6021      	streq	r1, [r4, #0]
 800b644:	e7ed      	b.n	800b622 <_free_r+0x22>
 800b646:	461a      	mov	r2, r3
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	b10b      	cbz	r3, 800b650 <_free_r+0x50>
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	d9fa      	bls.n	800b646 <_free_r+0x46>
 800b650:	6811      	ldr	r1, [r2, #0]
 800b652:	1855      	adds	r5, r2, r1
 800b654:	42a5      	cmp	r5, r4
 800b656:	d10b      	bne.n	800b670 <_free_r+0x70>
 800b658:	6824      	ldr	r4, [r4, #0]
 800b65a:	4421      	add	r1, r4
 800b65c:	1854      	adds	r4, r2, r1
 800b65e:	42a3      	cmp	r3, r4
 800b660:	6011      	str	r1, [r2, #0]
 800b662:	d1e0      	bne.n	800b626 <_free_r+0x26>
 800b664:	681c      	ldr	r4, [r3, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	6053      	str	r3, [r2, #4]
 800b66a:	4421      	add	r1, r4
 800b66c:	6011      	str	r1, [r2, #0]
 800b66e:	e7da      	b.n	800b626 <_free_r+0x26>
 800b670:	d902      	bls.n	800b678 <_free_r+0x78>
 800b672:	230c      	movs	r3, #12
 800b674:	6003      	str	r3, [r0, #0]
 800b676:	e7d6      	b.n	800b626 <_free_r+0x26>
 800b678:	6825      	ldr	r5, [r4, #0]
 800b67a:	1961      	adds	r1, r4, r5
 800b67c:	428b      	cmp	r3, r1
 800b67e:	bf04      	itt	eq
 800b680:	6819      	ldreq	r1, [r3, #0]
 800b682:	685b      	ldreq	r3, [r3, #4]
 800b684:	6063      	str	r3, [r4, #4]
 800b686:	bf04      	itt	eq
 800b688:	1949      	addeq	r1, r1, r5
 800b68a:	6021      	streq	r1, [r4, #0]
 800b68c:	6054      	str	r4, [r2, #4]
 800b68e:	e7ca      	b.n	800b626 <_free_r+0x26>
 800b690:	b003      	add	sp, #12
 800b692:	bd30      	pop	{r4, r5, pc}
 800b694:	20000400 	.word	0x20000400

0800b698 <sbrk_aligned>:
 800b698:	b570      	push	{r4, r5, r6, lr}
 800b69a:	4e0e      	ldr	r6, [pc, #56]	; (800b6d4 <sbrk_aligned+0x3c>)
 800b69c:	460c      	mov	r4, r1
 800b69e:	6831      	ldr	r1, [r6, #0]
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	b911      	cbnz	r1, 800b6aa <sbrk_aligned+0x12>
 800b6a4:	f001 f8e4 	bl	800c870 <_sbrk_r>
 800b6a8:	6030      	str	r0, [r6, #0]
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	f001 f8df 	bl	800c870 <_sbrk_r>
 800b6b2:	1c43      	adds	r3, r0, #1
 800b6b4:	d00a      	beq.n	800b6cc <sbrk_aligned+0x34>
 800b6b6:	1cc4      	adds	r4, r0, #3
 800b6b8:	f024 0403 	bic.w	r4, r4, #3
 800b6bc:	42a0      	cmp	r0, r4
 800b6be:	d007      	beq.n	800b6d0 <sbrk_aligned+0x38>
 800b6c0:	1a21      	subs	r1, r4, r0
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	f001 f8d4 	bl	800c870 <_sbrk_r>
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	d101      	bne.n	800b6d0 <sbrk_aligned+0x38>
 800b6cc:	f04f 34ff 	mov.w	r4, #4294967295
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	bd70      	pop	{r4, r5, r6, pc}
 800b6d4:	20000404 	.word	0x20000404

0800b6d8 <_malloc_r>:
 800b6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6dc:	1ccd      	adds	r5, r1, #3
 800b6de:	f025 0503 	bic.w	r5, r5, #3
 800b6e2:	3508      	adds	r5, #8
 800b6e4:	2d0c      	cmp	r5, #12
 800b6e6:	bf38      	it	cc
 800b6e8:	250c      	movcc	r5, #12
 800b6ea:	2d00      	cmp	r5, #0
 800b6ec:	4607      	mov	r7, r0
 800b6ee:	db01      	blt.n	800b6f4 <_malloc_r+0x1c>
 800b6f0:	42a9      	cmp	r1, r5
 800b6f2:	d905      	bls.n	800b700 <_malloc_r+0x28>
 800b6f4:	230c      	movs	r3, #12
 800b6f6:	603b      	str	r3, [r7, #0]
 800b6f8:	2600      	movs	r6, #0
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b700:	4e2e      	ldr	r6, [pc, #184]	; (800b7bc <_malloc_r+0xe4>)
 800b702:	f001 fad1 	bl	800cca8 <__malloc_lock>
 800b706:	6833      	ldr	r3, [r6, #0]
 800b708:	461c      	mov	r4, r3
 800b70a:	bb34      	cbnz	r4, 800b75a <_malloc_r+0x82>
 800b70c:	4629      	mov	r1, r5
 800b70e:	4638      	mov	r0, r7
 800b710:	f7ff ffc2 	bl	800b698 <sbrk_aligned>
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	4604      	mov	r4, r0
 800b718:	d14d      	bne.n	800b7b6 <_malloc_r+0xde>
 800b71a:	6834      	ldr	r4, [r6, #0]
 800b71c:	4626      	mov	r6, r4
 800b71e:	2e00      	cmp	r6, #0
 800b720:	d140      	bne.n	800b7a4 <_malloc_r+0xcc>
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	4631      	mov	r1, r6
 800b726:	4638      	mov	r0, r7
 800b728:	eb04 0803 	add.w	r8, r4, r3
 800b72c:	f001 f8a0 	bl	800c870 <_sbrk_r>
 800b730:	4580      	cmp	r8, r0
 800b732:	d13a      	bne.n	800b7aa <_malloc_r+0xd2>
 800b734:	6821      	ldr	r1, [r4, #0]
 800b736:	3503      	adds	r5, #3
 800b738:	1a6d      	subs	r5, r5, r1
 800b73a:	f025 0503 	bic.w	r5, r5, #3
 800b73e:	3508      	adds	r5, #8
 800b740:	2d0c      	cmp	r5, #12
 800b742:	bf38      	it	cc
 800b744:	250c      	movcc	r5, #12
 800b746:	4629      	mov	r1, r5
 800b748:	4638      	mov	r0, r7
 800b74a:	f7ff ffa5 	bl	800b698 <sbrk_aligned>
 800b74e:	3001      	adds	r0, #1
 800b750:	d02b      	beq.n	800b7aa <_malloc_r+0xd2>
 800b752:	6823      	ldr	r3, [r4, #0]
 800b754:	442b      	add	r3, r5
 800b756:	6023      	str	r3, [r4, #0]
 800b758:	e00e      	b.n	800b778 <_malloc_r+0xa0>
 800b75a:	6822      	ldr	r2, [r4, #0]
 800b75c:	1b52      	subs	r2, r2, r5
 800b75e:	d41e      	bmi.n	800b79e <_malloc_r+0xc6>
 800b760:	2a0b      	cmp	r2, #11
 800b762:	d916      	bls.n	800b792 <_malloc_r+0xba>
 800b764:	1961      	adds	r1, r4, r5
 800b766:	42a3      	cmp	r3, r4
 800b768:	6025      	str	r5, [r4, #0]
 800b76a:	bf18      	it	ne
 800b76c:	6059      	strne	r1, [r3, #4]
 800b76e:	6863      	ldr	r3, [r4, #4]
 800b770:	bf08      	it	eq
 800b772:	6031      	streq	r1, [r6, #0]
 800b774:	5162      	str	r2, [r4, r5]
 800b776:	604b      	str	r3, [r1, #4]
 800b778:	4638      	mov	r0, r7
 800b77a:	f104 060b 	add.w	r6, r4, #11
 800b77e:	f001 fa99 	bl	800ccb4 <__malloc_unlock>
 800b782:	f026 0607 	bic.w	r6, r6, #7
 800b786:	1d23      	adds	r3, r4, #4
 800b788:	1af2      	subs	r2, r6, r3
 800b78a:	d0b6      	beq.n	800b6fa <_malloc_r+0x22>
 800b78c:	1b9b      	subs	r3, r3, r6
 800b78e:	50a3      	str	r3, [r4, r2]
 800b790:	e7b3      	b.n	800b6fa <_malloc_r+0x22>
 800b792:	6862      	ldr	r2, [r4, #4]
 800b794:	42a3      	cmp	r3, r4
 800b796:	bf0c      	ite	eq
 800b798:	6032      	streq	r2, [r6, #0]
 800b79a:	605a      	strne	r2, [r3, #4]
 800b79c:	e7ec      	b.n	800b778 <_malloc_r+0xa0>
 800b79e:	4623      	mov	r3, r4
 800b7a0:	6864      	ldr	r4, [r4, #4]
 800b7a2:	e7b2      	b.n	800b70a <_malloc_r+0x32>
 800b7a4:	4634      	mov	r4, r6
 800b7a6:	6876      	ldr	r6, [r6, #4]
 800b7a8:	e7b9      	b.n	800b71e <_malloc_r+0x46>
 800b7aa:	230c      	movs	r3, #12
 800b7ac:	603b      	str	r3, [r7, #0]
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	f001 fa80 	bl	800ccb4 <__malloc_unlock>
 800b7b4:	e7a1      	b.n	800b6fa <_malloc_r+0x22>
 800b7b6:	6025      	str	r5, [r4, #0]
 800b7b8:	e7de      	b.n	800b778 <_malloc_r+0xa0>
 800b7ba:	bf00      	nop
 800b7bc:	20000400 	.word	0x20000400

0800b7c0 <__ssputs_r>:
 800b7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7c4:	688e      	ldr	r6, [r1, #8]
 800b7c6:	429e      	cmp	r6, r3
 800b7c8:	4682      	mov	sl, r0
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	4690      	mov	r8, r2
 800b7ce:	461f      	mov	r7, r3
 800b7d0:	d838      	bhi.n	800b844 <__ssputs_r+0x84>
 800b7d2:	898a      	ldrh	r2, [r1, #12]
 800b7d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7d8:	d032      	beq.n	800b840 <__ssputs_r+0x80>
 800b7da:	6825      	ldr	r5, [r4, #0]
 800b7dc:	6909      	ldr	r1, [r1, #16]
 800b7de:	eba5 0901 	sub.w	r9, r5, r1
 800b7e2:	6965      	ldr	r5, [r4, #20]
 800b7e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	444b      	add	r3, r9
 800b7f0:	106d      	asrs	r5, r5, #1
 800b7f2:	429d      	cmp	r5, r3
 800b7f4:	bf38      	it	cc
 800b7f6:	461d      	movcc	r5, r3
 800b7f8:	0553      	lsls	r3, r2, #21
 800b7fa:	d531      	bpl.n	800b860 <__ssputs_r+0xa0>
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	f7ff ff6b 	bl	800b6d8 <_malloc_r>
 800b802:	4606      	mov	r6, r0
 800b804:	b950      	cbnz	r0, 800b81c <__ssputs_r+0x5c>
 800b806:	230c      	movs	r3, #12
 800b808:	f8ca 3000 	str.w	r3, [sl]
 800b80c:	89a3      	ldrh	r3, [r4, #12]
 800b80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b812:	81a3      	strh	r3, [r4, #12]
 800b814:	f04f 30ff 	mov.w	r0, #4294967295
 800b818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b81c:	6921      	ldr	r1, [r4, #16]
 800b81e:	464a      	mov	r2, r9
 800b820:	f7ff fa08 	bl	800ac34 <memcpy>
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b82a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b82e:	81a3      	strh	r3, [r4, #12]
 800b830:	6126      	str	r6, [r4, #16]
 800b832:	6165      	str	r5, [r4, #20]
 800b834:	444e      	add	r6, r9
 800b836:	eba5 0509 	sub.w	r5, r5, r9
 800b83a:	6026      	str	r6, [r4, #0]
 800b83c:	60a5      	str	r5, [r4, #8]
 800b83e:	463e      	mov	r6, r7
 800b840:	42be      	cmp	r6, r7
 800b842:	d900      	bls.n	800b846 <__ssputs_r+0x86>
 800b844:	463e      	mov	r6, r7
 800b846:	6820      	ldr	r0, [r4, #0]
 800b848:	4632      	mov	r2, r6
 800b84a:	4641      	mov	r1, r8
 800b84c:	f001 fa12 	bl	800cc74 <memmove>
 800b850:	68a3      	ldr	r3, [r4, #8]
 800b852:	1b9b      	subs	r3, r3, r6
 800b854:	60a3      	str	r3, [r4, #8]
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	4433      	add	r3, r6
 800b85a:	6023      	str	r3, [r4, #0]
 800b85c:	2000      	movs	r0, #0
 800b85e:	e7db      	b.n	800b818 <__ssputs_r+0x58>
 800b860:	462a      	mov	r2, r5
 800b862:	f001 fa2d 	bl	800ccc0 <_realloc_r>
 800b866:	4606      	mov	r6, r0
 800b868:	2800      	cmp	r0, #0
 800b86a:	d1e1      	bne.n	800b830 <__ssputs_r+0x70>
 800b86c:	6921      	ldr	r1, [r4, #16]
 800b86e:	4650      	mov	r0, sl
 800b870:	f7ff fec6 	bl	800b600 <_free_r>
 800b874:	e7c7      	b.n	800b806 <__ssputs_r+0x46>
	...

0800b878 <_svfiprintf_r>:
 800b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87c:	4698      	mov	r8, r3
 800b87e:	898b      	ldrh	r3, [r1, #12]
 800b880:	061b      	lsls	r3, r3, #24
 800b882:	b09d      	sub	sp, #116	; 0x74
 800b884:	4607      	mov	r7, r0
 800b886:	460d      	mov	r5, r1
 800b888:	4614      	mov	r4, r2
 800b88a:	d50e      	bpl.n	800b8aa <_svfiprintf_r+0x32>
 800b88c:	690b      	ldr	r3, [r1, #16]
 800b88e:	b963      	cbnz	r3, 800b8aa <_svfiprintf_r+0x32>
 800b890:	2140      	movs	r1, #64	; 0x40
 800b892:	f7ff ff21 	bl	800b6d8 <_malloc_r>
 800b896:	6028      	str	r0, [r5, #0]
 800b898:	6128      	str	r0, [r5, #16]
 800b89a:	b920      	cbnz	r0, 800b8a6 <_svfiprintf_r+0x2e>
 800b89c:	230c      	movs	r3, #12
 800b89e:	603b      	str	r3, [r7, #0]
 800b8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a4:	e0d1      	b.n	800ba4a <_svfiprintf_r+0x1d2>
 800b8a6:	2340      	movs	r3, #64	; 0x40
 800b8a8:	616b      	str	r3, [r5, #20]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ae:	2320      	movs	r3, #32
 800b8b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8b8:	2330      	movs	r3, #48	; 0x30
 800b8ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba64 <_svfiprintf_r+0x1ec>
 800b8be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8c2:	f04f 0901 	mov.w	r9, #1
 800b8c6:	4623      	mov	r3, r4
 800b8c8:	469a      	mov	sl, r3
 800b8ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8ce:	b10a      	cbz	r2, 800b8d4 <_svfiprintf_r+0x5c>
 800b8d0:	2a25      	cmp	r2, #37	; 0x25
 800b8d2:	d1f9      	bne.n	800b8c8 <_svfiprintf_r+0x50>
 800b8d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b8d8:	d00b      	beq.n	800b8f2 <_svfiprintf_r+0x7a>
 800b8da:	465b      	mov	r3, fp
 800b8dc:	4622      	mov	r2, r4
 800b8de:	4629      	mov	r1, r5
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	f7ff ff6d 	bl	800b7c0 <__ssputs_r>
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	f000 80aa 	beq.w	800ba40 <_svfiprintf_r+0x1c8>
 800b8ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8ee:	445a      	add	r2, fp
 800b8f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	f000 80a2 	beq.w	800ba40 <_svfiprintf_r+0x1c8>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b906:	f10a 0a01 	add.w	sl, sl, #1
 800b90a:	9304      	str	r3, [sp, #16]
 800b90c:	9307      	str	r3, [sp, #28]
 800b90e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b912:	931a      	str	r3, [sp, #104]	; 0x68
 800b914:	4654      	mov	r4, sl
 800b916:	2205      	movs	r2, #5
 800b918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b91c:	4851      	ldr	r0, [pc, #324]	; (800ba64 <_svfiprintf_r+0x1ec>)
 800b91e:	f7f4 fc7f 	bl	8000220 <memchr>
 800b922:	9a04      	ldr	r2, [sp, #16]
 800b924:	b9d8      	cbnz	r0, 800b95e <_svfiprintf_r+0xe6>
 800b926:	06d0      	lsls	r0, r2, #27
 800b928:	bf44      	itt	mi
 800b92a:	2320      	movmi	r3, #32
 800b92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b930:	0711      	lsls	r1, r2, #28
 800b932:	bf44      	itt	mi
 800b934:	232b      	movmi	r3, #43	; 0x2b
 800b936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b93a:	f89a 3000 	ldrb.w	r3, [sl]
 800b93e:	2b2a      	cmp	r3, #42	; 0x2a
 800b940:	d015      	beq.n	800b96e <_svfiprintf_r+0xf6>
 800b942:	9a07      	ldr	r2, [sp, #28]
 800b944:	4654      	mov	r4, sl
 800b946:	2000      	movs	r0, #0
 800b948:	f04f 0c0a 	mov.w	ip, #10
 800b94c:	4621      	mov	r1, r4
 800b94e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b952:	3b30      	subs	r3, #48	; 0x30
 800b954:	2b09      	cmp	r3, #9
 800b956:	d94e      	bls.n	800b9f6 <_svfiprintf_r+0x17e>
 800b958:	b1b0      	cbz	r0, 800b988 <_svfiprintf_r+0x110>
 800b95a:	9207      	str	r2, [sp, #28]
 800b95c:	e014      	b.n	800b988 <_svfiprintf_r+0x110>
 800b95e:	eba0 0308 	sub.w	r3, r0, r8
 800b962:	fa09 f303 	lsl.w	r3, r9, r3
 800b966:	4313      	orrs	r3, r2
 800b968:	9304      	str	r3, [sp, #16]
 800b96a:	46a2      	mov	sl, r4
 800b96c:	e7d2      	b.n	800b914 <_svfiprintf_r+0x9c>
 800b96e:	9b03      	ldr	r3, [sp, #12]
 800b970:	1d19      	adds	r1, r3, #4
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	9103      	str	r1, [sp, #12]
 800b976:	2b00      	cmp	r3, #0
 800b978:	bfbb      	ittet	lt
 800b97a:	425b      	neglt	r3, r3
 800b97c:	f042 0202 	orrlt.w	r2, r2, #2
 800b980:	9307      	strge	r3, [sp, #28]
 800b982:	9307      	strlt	r3, [sp, #28]
 800b984:	bfb8      	it	lt
 800b986:	9204      	strlt	r2, [sp, #16]
 800b988:	7823      	ldrb	r3, [r4, #0]
 800b98a:	2b2e      	cmp	r3, #46	; 0x2e
 800b98c:	d10c      	bne.n	800b9a8 <_svfiprintf_r+0x130>
 800b98e:	7863      	ldrb	r3, [r4, #1]
 800b990:	2b2a      	cmp	r3, #42	; 0x2a
 800b992:	d135      	bne.n	800ba00 <_svfiprintf_r+0x188>
 800b994:	9b03      	ldr	r3, [sp, #12]
 800b996:	1d1a      	adds	r2, r3, #4
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	9203      	str	r2, [sp, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	bfb8      	it	lt
 800b9a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9a4:	3402      	adds	r4, #2
 800b9a6:	9305      	str	r3, [sp, #20]
 800b9a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba74 <_svfiprintf_r+0x1fc>
 800b9ac:	7821      	ldrb	r1, [r4, #0]
 800b9ae:	2203      	movs	r2, #3
 800b9b0:	4650      	mov	r0, sl
 800b9b2:	f7f4 fc35 	bl	8000220 <memchr>
 800b9b6:	b140      	cbz	r0, 800b9ca <_svfiprintf_r+0x152>
 800b9b8:	2340      	movs	r3, #64	; 0x40
 800b9ba:	eba0 000a 	sub.w	r0, r0, sl
 800b9be:	fa03 f000 	lsl.w	r0, r3, r0
 800b9c2:	9b04      	ldr	r3, [sp, #16]
 800b9c4:	4303      	orrs	r3, r0
 800b9c6:	3401      	adds	r4, #1
 800b9c8:	9304      	str	r3, [sp, #16]
 800b9ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ce:	4826      	ldr	r0, [pc, #152]	; (800ba68 <_svfiprintf_r+0x1f0>)
 800b9d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9d4:	2206      	movs	r2, #6
 800b9d6:	f7f4 fc23 	bl	8000220 <memchr>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d038      	beq.n	800ba50 <_svfiprintf_r+0x1d8>
 800b9de:	4b23      	ldr	r3, [pc, #140]	; (800ba6c <_svfiprintf_r+0x1f4>)
 800b9e0:	bb1b      	cbnz	r3, 800ba2a <_svfiprintf_r+0x1b2>
 800b9e2:	9b03      	ldr	r3, [sp, #12]
 800b9e4:	3307      	adds	r3, #7
 800b9e6:	f023 0307 	bic.w	r3, r3, #7
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	9303      	str	r3, [sp, #12]
 800b9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9f0:	4433      	add	r3, r6
 800b9f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f4:	e767      	b.n	800b8c6 <_svfiprintf_r+0x4e>
 800b9f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	2001      	movs	r0, #1
 800b9fe:	e7a5      	b.n	800b94c <_svfiprintf_r+0xd4>
 800ba00:	2300      	movs	r3, #0
 800ba02:	3401      	adds	r4, #1
 800ba04:	9305      	str	r3, [sp, #20]
 800ba06:	4619      	mov	r1, r3
 800ba08:	f04f 0c0a 	mov.w	ip, #10
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba12:	3a30      	subs	r2, #48	; 0x30
 800ba14:	2a09      	cmp	r2, #9
 800ba16:	d903      	bls.n	800ba20 <_svfiprintf_r+0x1a8>
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d0c5      	beq.n	800b9a8 <_svfiprintf_r+0x130>
 800ba1c:	9105      	str	r1, [sp, #20]
 800ba1e:	e7c3      	b.n	800b9a8 <_svfiprintf_r+0x130>
 800ba20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba24:	4604      	mov	r4, r0
 800ba26:	2301      	movs	r3, #1
 800ba28:	e7f0      	b.n	800ba0c <_svfiprintf_r+0x194>
 800ba2a:	ab03      	add	r3, sp, #12
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	462a      	mov	r2, r5
 800ba30:	4b0f      	ldr	r3, [pc, #60]	; (800ba70 <_svfiprintf_r+0x1f8>)
 800ba32:	a904      	add	r1, sp, #16
 800ba34:	4638      	mov	r0, r7
 800ba36:	f7fb fd0d 	bl	8007454 <_printf_float>
 800ba3a:	1c42      	adds	r2, r0, #1
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	d1d6      	bne.n	800b9ee <_svfiprintf_r+0x176>
 800ba40:	89ab      	ldrh	r3, [r5, #12]
 800ba42:	065b      	lsls	r3, r3, #25
 800ba44:	f53f af2c 	bmi.w	800b8a0 <_svfiprintf_r+0x28>
 800ba48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba4a:	b01d      	add	sp, #116	; 0x74
 800ba4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba50:	ab03      	add	r3, sp, #12
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	462a      	mov	r2, r5
 800ba56:	4b06      	ldr	r3, [pc, #24]	; (800ba70 <_svfiprintf_r+0x1f8>)
 800ba58:	a904      	add	r1, sp, #16
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	f7fb ff9e 	bl	800799c <_printf_i>
 800ba60:	e7eb      	b.n	800ba3a <_svfiprintf_r+0x1c2>
 800ba62:	bf00      	nop
 800ba64:	0800d564 	.word	0x0800d564
 800ba68:	0800d56e 	.word	0x0800d56e
 800ba6c:	08007455 	.word	0x08007455
 800ba70:	0800b7c1 	.word	0x0800b7c1
 800ba74:	0800d56a 	.word	0x0800d56a

0800ba78 <_sungetc_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	1c4b      	adds	r3, r1, #1
 800ba7c:	4614      	mov	r4, r2
 800ba7e:	d103      	bne.n	800ba88 <_sungetc_r+0x10>
 800ba80:	f04f 35ff 	mov.w	r5, #4294967295
 800ba84:	4628      	mov	r0, r5
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	8993      	ldrh	r3, [r2, #12]
 800ba8a:	f023 0320 	bic.w	r3, r3, #32
 800ba8e:	8193      	strh	r3, [r2, #12]
 800ba90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba92:	6852      	ldr	r2, [r2, #4]
 800ba94:	b2cd      	uxtb	r5, r1
 800ba96:	b18b      	cbz	r3, 800babc <_sungetc_r+0x44>
 800ba98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	dd08      	ble.n	800bab0 <_sungetc_r+0x38>
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	1e5a      	subs	r2, r3, #1
 800baa2:	6022      	str	r2, [r4, #0]
 800baa4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800baa8:	6863      	ldr	r3, [r4, #4]
 800baaa:	3301      	adds	r3, #1
 800baac:	6063      	str	r3, [r4, #4]
 800baae:	e7e9      	b.n	800ba84 <_sungetc_r+0xc>
 800bab0:	4621      	mov	r1, r4
 800bab2:	f000 ffad 	bl	800ca10 <__submore>
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d0f1      	beq.n	800ba9e <_sungetc_r+0x26>
 800baba:	e7e1      	b.n	800ba80 <_sungetc_r+0x8>
 800babc:	6921      	ldr	r1, [r4, #16]
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	b151      	cbz	r1, 800bad8 <_sungetc_r+0x60>
 800bac2:	4299      	cmp	r1, r3
 800bac4:	d208      	bcs.n	800bad8 <_sungetc_r+0x60>
 800bac6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800baca:	42a9      	cmp	r1, r5
 800bacc:	d104      	bne.n	800bad8 <_sungetc_r+0x60>
 800bace:	3b01      	subs	r3, #1
 800bad0:	3201      	adds	r2, #1
 800bad2:	6023      	str	r3, [r4, #0]
 800bad4:	6062      	str	r2, [r4, #4]
 800bad6:	e7d5      	b.n	800ba84 <_sungetc_r+0xc>
 800bad8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800badc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bae0:	6363      	str	r3, [r4, #52]	; 0x34
 800bae2:	2303      	movs	r3, #3
 800bae4:	63a3      	str	r3, [r4, #56]	; 0x38
 800bae6:	4623      	mov	r3, r4
 800bae8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	2301      	movs	r3, #1
 800baf0:	e7dc      	b.n	800baac <_sungetc_r+0x34>

0800baf2 <__ssrefill_r>:
 800baf2:	b510      	push	{r4, lr}
 800baf4:	460c      	mov	r4, r1
 800baf6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800baf8:	b169      	cbz	r1, 800bb16 <__ssrefill_r+0x24>
 800bafa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bafe:	4299      	cmp	r1, r3
 800bb00:	d001      	beq.n	800bb06 <__ssrefill_r+0x14>
 800bb02:	f7ff fd7d 	bl	800b600 <_free_r>
 800bb06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb08:	6063      	str	r3, [r4, #4]
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	6360      	str	r0, [r4, #52]	; 0x34
 800bb0e:	b113      	cbz	r3, 800bb16 <__ssrefill_r+0x24>
 800bb10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bb12:	6023      	str	r3, [r4, #0]
 800bb14:	bd10      	pop	{r4, pc}
 800bb16:	6923      	ldr	r3, [r4, #16]
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	6063      	str	r3, [r4, #4]
 800bb1e:	89a3      	ldrh	r3, [r4, #12]
 800bb20:	f043 0320 	orr.w	r3, r3, #32
 800bb24:	81a3      	strh	r3, [r4, #12]
 800bb26:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2a:	e7f3      	b.n	800bb14 <__ssrefill_r+0x22>

0800bb2c <__ssvfiscanf_r>:
 800bb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb30:	460c      	mov	r4, r1
 800bb32:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bb36:	2100      	movs	r1, #0
 800bb38:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bb3c:	49a6      	ldr	r1, [pc, #664]	; (800bdd8 <__ssvfiscanf_r+0x2ac>)
 800bb3e:	91a0      	str	r1, [sp, #640]	; 0x280
 800bb40:	f10d 0804 	add.w	r8, sp, #4
 800bb44:	49a5      	ldr	r1, [pc, #660]	; (800bddc <__ssvfiscanf_r+0x2b0>)
 800bb46:	4fa6      	ldr	r7, [pc, #664]	; (800bde0 <__ssvfiscanf_r+0x2b4>)
 800bb48:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800bde4 <__ssvfiscanf_r+0x2b8>
 800bb4c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bb50:	4606      	mov	r6, r0
 800bb52:	91a1      	str	r1, [sp, #644]	; 0x284
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	7813      	ldrb	r3, [r2, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f000 815a 	beq.w	800be12 <__ssvfiscanf_r+0x2e6>
 800bb5e:	5dd9      	ldrb	r1, [r3, r7]
 800bb60:	f011 0108 	ands.w	r1, r1, #8
 800bb64:	f102 0501 	add.w	r5, r2, #1
 800bb68:	d019      	beq.n	800bb9e <__ssvfiscanf_r+0x72>
 800bb6a:	6863      	ldr	r3, [r4, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	dd0f      	ble.n	800bb90 <__ssvfiscanf_r+0x64>
 800bb70:	6823      	ldr	r3, [r4, #0]
 800bb72:	781a      	ldrb	r2, [r3, #0]
 800bb74:	5cba      	ldrb	r2, [r7, r2]
 800bb76:	0712      	lsls	r2, r2, #28
 800bb78:	d401      	bmi.n	800bb7e <__ssvfiscanf_r+0x52>
 800bb7a:	462a      	mov	r2, r5
 800bb7c:	e7eb      	b.n	800bb56 <__ssvfiscanf_r+0x2a>
 800bb7e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb80:	3201      	adds	r2, #1
 800bb82:	9245      	str	r2, [sp, #276]	; 0x114
 800bb84:	6862      	ldr	r2, [r4, #4]
 800bb86:	3301      	adds	r3, #1
 800bb88:	3a01      	subs	r2, #1
 800bb8a:	6062      	str	r2, [r4, #4]
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	e7ec      	b.n	800bb6a <__ssvfiscanf_r+0x3e>
 800bb90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb92:	4621      	mov	r1, r4
 800bb94:	4630      	mov	r0, r6
 800bb96:	4798      	blx	r3
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d0e9      	beq.n	800bb70 <__ssvfiscanf_r+0x44>
 800bb9c:	e7ed      	b.n	800bb7a <__ssvfiscanf_r+0x4e>
 800bb9e:	2b25      	cmp	r3, #37	; 0x25
 800bba0:	d012      	beq.n	800bbc8 <__ssvfiscanf_r+0x9c>
 800bba2:	469a      	mov	sl, r3
 800bba4:	6863      	ldr	r3, [r4, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f340 8091 	ble.w	800bcce <__ssvfiscanf_r+0x1a2>
 800bbac:	6822      	ldr	r2, [r4, #0]
 800bbae:	7813      	ldrb	r3, [r2, #0]
 800bbb0:	4553      	cmp	r3, sl
 800bbb2:	f040 812e 	bne.w	800be12 <__ssvfiscanf_r+0x2e6>
 800bbb6:	6863      	ldr	r3, [r4, #4]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	6063      	str	r3, [r4, #4]
 800bbbc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bbbe:	3201      	adds	r2, #1
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	6022      	str	r2, [r4, #0]
 800bbc4:	9345      	str	r3, [sp, #276]	; 0x114
 800bbc6:	e7d8      	b.n	800bb7a <__ssvfiscanf_r+0x4e>
 800bbc8:	9141      	str	r1, [sp, #260]	; 0x104
 800bbca:	9143      	str	r1, [sp, #268]	; 0x10c
 800bbcc:	7853      	ldrb	r3, [r2, #1]
 800bbce:	2b2a      	cmp	r3, #42	; 0x2a
 800bbd0:	bf02      	ittt	eq
 800bbd2:	2310      	moveq	r3, #16
 800bbd4:	1c95      	addeq	r5, r2, #2
 800bbd6:	9341      	streq	r3, [sp, #260]	; 0x104
 800bbd8:	220a      	movs	r2, #10
 800bbda:	46aa      	mov	sl, r5
 800bbdc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bbe0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bbe4:	2b09      	cmp	r3, #9
 800bbe6:	d91d      	bls.n	800bc24 <__ssvfiscanf_r+0xf8>
 800bbe8:	487e      	ldr	r0, [pc, #504]	; (800bde4 <__ssvfiscanf_r+0x2b8>)
 800bbea:	2203      	movs	r2, #3
 800bbec:	f7f4 fb18 	bl	8000220 <memchr>
 800bbf0:	b140      	cbz	r0, 800bc04 <__ssvfiscanf_r+0xd8>
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	eba0 0009 	sub.w	r0, r0, r9
 800bbf8:	fa03 f000 	lsl.w	r0, r3, r0
 800bbfc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbfe:	4318      	orrs	r0, r3
 800bc00:	9041      	str	r0, [sp, #260]	; 0x104
 800bc02:	4655      	mov	r5, sl
 800bc04:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc08:	2b78      	cmp	r3, #120	; 0x78
 800bc0a:	d806      	bhi.n	800bc1a <__ssvfiscanf_r+0xee>
 800bc0c:	2b57      	cmp	r3, #87	; 0x57
 800bc0e:	d810      	bhi.n	800bc32 <__ssvfiscanf_r+0x106>
 800bc10:	2b25      	cmp	r3, #37	; 0x25
 800bc12:	d0c6      	beq.n	800bba2 <__ssvfiscanf_r+0x76>
 800bc14:	d856      	bhi.n	800bcc4 <__ssvfiscanf_r+0x198>
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d064      	beq.n	800bce4 <__ssvfiscanf_r+0x1b8>
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	9347      	str	r3, [sp, #284]	; 0x11c
 800bc1e:	230a      	movs	r3, #10
 800bc20:	9342      	str	r3, [sp, #264]	; 0x108
 800bc22:	e071      	b.n	800bd08 <__ssvfiscanf_r+0x1dc>
 800bc24:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bc26:	fb02 1103 	mla	r1, r2, r3, r1
 800bc2a:	3930      	subs	r1, #48	; 0x30
 800bc2c:	9143      	str	r1, [sp, #268]	; 0x10c
 800bc2e:	4655      	mov	r5, sl
 800bc30:	e7d3      	b.n	800bbda <__ssvfiscanf_r+0xae>
 800bc32:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bc36:	2a20      	cmp	r2, #32
 800bc38:	d8ef      	bhi.n	800bc1a <__ssvfiscanf_r+0xee>
 800bc3a:	a101      	add	r1, pc, #4	; (adr r1, 800bc40 <__ssvfiscanf_r+0x114>)
 800bc3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bc40:	0800bcf3 	.word	0x0800bcf3
 800bc44:	0800bc1b 	.word	0x0800bc1b
 800bc48:	0800bc1b 	.word	0x0800bc1b
 800bc4c:	0800bd51 	.word	0x0800bd51
 800bc50:	0800bc1b 	.word	0x0800bc1b
 800bc54:	0800bc1b 	.word	0x0800bc1b
 800bc58:	0800bc1b 	.word	0x0800bc1b
 800bc5c:	0800bc1b 	.word	0x0800bc1b
 800bc60:	0800bc1b 	.word	0x0800bc1b
 800bc64:	0800bc1b 	.word	0x0800bc1b
 800bc68:	0800bc1b 	.word	0x0800bc1b
 800bc6c:	0800bd67 	.word	0x0800bd67
 800bc70:	0800bd3d 	.word	0x0800bd3d
 800bc74:	0800bccb 	.word	0x0800bccb
 800bc78:	0800bccb 	.word	0x0800bccb
 800bc7c:	0800bccb 	.word	0x0800bccb
 800bc80:	0800bc1b 	.word	0x0800bc1b
 800bc84:	0800bd41 	.word	0x0800bd41
 800bc88:	0800bc1b 	.word	0x0800bc1b
 800bc8c:	0800bc1b 	.word	0x0800bc1b
 800bc90:	0800bc1b 	.word	0x0800bc1b
 800bc94:	0800bc1b 	.word	0x0800bc1b
 800bc98:	0800bd77 	.word	0x0800bd77
 800bc9c:	0800bd49 	.word	0x0800bd49
 800bca0:	0800bceb 	.word	0x0800bceb
 800bca4:	0800bc1b 	.word	0x0800bc1b
 800bca8:	0800bc1b 	.word	0x0800bc1b
 800bcac:	0800bd73 	.word	0x0800bd73
 800bcb0:	0800bc1b 	.word	0x0800bc1b
 800bcb4:	0800bd3d 	.word	0x0800bd3d
 800bcb8:	0800bc1b 	.word	0x0800bc1b
 800bcbc:	0800bc1b 	.word	0x0800bc1b
 800bcc0:	0800bcf3 	.word	0x0800bcf3
 800bcc4:	3b45      	subs	r3, #69	; 0x45
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d8a7      	bhi.n	800bc1a <__ssvfiscanf_r+0xee>
 800bcca:	2305      	movs	r3, #5
 800bccc:	e01b      	b.n	800bd06 <__ssvfiscanf_r+0x1da>
 800bcce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	4798      	blx	r3
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	f43f af68 	beq.w	800bbac <__ssvfiscanf_r+0x80>
 800bcdc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bcde:	2800      	cmp	r0, #0
 800bce0:	f040 808d 	bne.w	800bdfe <__ssvfiscanf_r+0x2d2>
 800bce4:	f04f 30ff 	mov.w	r0, #4294967295
 800bce8:	e08f      	b.n	800be0a <__ssvfiscanf_r+0x2de>
 800bcea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bcec:	f042 0220 	orr.w	r2, r2, #32
 800bcf0:	9241      	str	r2, [sp, #260]	; 0x104
 800bcf2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bcf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcf8:	9241      	str	r2, [sp, #260]	; 0x104
 800bcfa:	2210      	movs	r2, #16
 800bcfc:	2b6f      	cmp	r3, #111	; 0x6f
 800bcfe:	9242      	str	r2, [sp, #264]	; 0x108
 800bd00:	bf34      	ite	cc
 800bd02:	2303      	movcc	r3, #3
 800bd04:	2304      	movcs	r3, #4
 800bd06:	9347      	str	r3, [sp, #284]	; 0x11c
 800bd08:	6863      	ldr	r3, [r4, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	dd42      	ble.n	800bd94 <__ssvfiscanf_r+0x268>
 800bd0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd10:	0659      	lsls	r1, r3, #25
 800bd12:	d404      	bmi.n	800bd1e <__ssvfiscanf_r+0x1f2>
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	781a      	ldrb	r2, [r3, #0]
 800bd18:	5cba      	ldrb	r2, [r7, r2]
 800bd1a:	0712      	lsls	r2, r2, #28
 800bd1c:	d441      	bmi.n	800bda2 <__ssvfiscanf_r+0x276>
 800bd1e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bd20:	2b02      	cmp	r3, #2
 800bd22:	dc50      	bgt.n	800bdc6 <__ssvfiscanf_r+0x29a>
 800bd24:	466b      	mov	r3, sp
 800bd26:	4622      	mov	r2, r4
 800bd28:	a941      	add	r1, sp, #260	; 0x104
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f000 fb9e 	bl	800c46c <_scanf_chars>
 800bd30:	2801      	cmp	r0, #1
 800bd32:	d06e      	beq.n	800be12 <__ssvfiscanf_r+0x2e6>
 800bd34:	2802      	cmp	r0, #2
 800bd36:	f47f af20 	bne.w	800bb7a <__ssvfiscanf_r+0x4e>
 800bd3a:	e7cf      	b.n	800bcdc <__ssvfiscanf_r+0x1b0>
 800bd3c:	220a      	movs	r2, #10
 800bd3e:	e7dd      	b.n	800bcfc <__ssvfiscanf_r+0x1d0>
 800bd40:	2300      	movs	r3, #0
 800bd42:	9342      	str	r3, [sp, #264]	; 0x108
 800bd44:	2303      	movs	r3, #3
 800bd46:	e7de      	b.n	800bd06 <__ssvfiscanf_r+0x1da>
 800bd48:	2308      	movs	r3, #8
 800bd4a:	9342      	str	r3, [sp, #264]	; 0x108
 800bd4c:	2304      	movs	r3, #4
 800bd4e:	e7da      	b.n	800bd06 <__ssvfiscanf_r+0x1da>
 800bd50:	4629      	mov	r1, r5
 800bd52:	4640      	mov	r0, r8
 800bd54:	f000 fd9c 	bl	800c890 <__sccl>
 800bd58:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd5e:	9341      	str	r3, [sp, #260]	; 0x104
 800bd60:	4605      	mov	r5, r0
 800bd62:	2301      	movs	r3, #1
 800bd64:	e7cf      	b.n	800bd06 <__ssvfiscanf_r+0x1da>
 800bd66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd6c:	9341      	str	r3, [sp, #260]	; 0x104
 800bd6e:	2300      	movs	r3, #0
 800bd70:	e7c9      	b.n	800bd06 <__ssvfiscanf_r+0x1da>
 800bd72:	2302      	movs	r3, #2
 800bd74:	e7c7      	b.n	800bd06 <__ssvfiscanf_r+0x1da>
 800bd76:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bd78:	06c3      	lsls	r3, r0, #27
 800bd7a:	f53f aefe 	bmi.w	800bb7a <__ssvfiscanf_r+0x4e>
 800bd7e:	9b00      	ldr	r3, [sp, #0]
 800bd80:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd82:	1d19      	adds	r1, r3, #4
 800bd84:	9100      	str	r1, [sp, #0]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f010 0f01 	tst.w	r0, #1
 800bd8c:	bf14      	ite	ne
 800bd8e:	801a      	strhne	r2, [r3, #0]
 800bd90:	601a      	streq	r2, [r3, #0]
 800bd92:	e6f2      	b.n	800bb7a <__ssvfiscanf_r+0x4e>
 800bd94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd96:	4621      	mov	r1, r4
 800bd98:	4630      	mov	r0, r6
 800bd9a:	4798      	blx	r3
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d0b6      	beq.n	800bd0e <__ssvfiscanf_r+0x1e2>
 800bda0:	e79c      	b.n	800bcdc <__ssvfiscanf_r+0x1b0>
 800bda2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bda4:	3201      	adds	r2, #1
 800bda6:	9245      	str	r2, [sp, #276]	; 0x114
 800bda8:	6862      	ldr	r2, [r4, #4]
 800bdaa:	3a01      	subs	r2, #1
 800bdac:	2a00      	cmp	r2, #0
 800bdae:	6062      	str	r2, [r4, #4]
 800bdb0:	dd02      	ble.n	800bdb8 <__ssvfiscanf_r+0x28c>
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	e7ad      	b.n	800bd14 <__ssvfiscanf_r+0x1e8>
 800bdb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bdba:	4621      	mov	r1, r4
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	4798      	blx	r3
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d0a7      	beq.n	800bd14 <__ssvfiscanf_r+0x1e8>
 800bdc4:	e78a      	b.n	800bcdc <__ssvfiscanf_r+0x1b0>
 800bdc6:	2b04      	cmp	r3, #4
 800bdc8:	dc0e      	bgt.n	800bde8 <__ssvfiscanf_r+0x2bc>
 800bdca:	466b      	mov	r3, sp
 800bdcc:	4622      	mov	r2, r4
 800bdce:	a941      	add	r1, sp, #260	; 0x104
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	f000 fba5 	bl	800c520 <_scanf_i>
 800bdd6:	e7ab      	b.n	800bd30 <__ssvfiscanf_r+0x204>
 800bdd8:	0800ba79 	.word	0x0800ba79
 800bddc:	0800baf3 	.word	0x0800baf3
 800bde0:	0800d199 	.word	0x0800d199
 800bde4:	0800d56a 	.word	0x0800d56a
 800bde8:	4b0b      	ldr	r3, [pc, #44]	; (800be18 <__ssvfiscanf_r+0x2ec>)
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	f43f aec5 	beq.w	800bb7a <__ssvfiscanf_r+0x4e>
 800bdf0:	466b      	mov	r3, sp
 800bdf2:	4622      	mov	r2, r4
 800bdf4:	a941      	add	r1, sp, #260	; 0x104
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f7fb fef6 	bl	8007be8 <_scanf_float>
 800bdfc:	e798      	b.n	800bd30 <__ssvfiscanf_r+0x204>
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f013 0f40 	tst.w	r3, #64	; 0x40
 800be04:	bf18      	it	ne
 800be06:	f04f 30ff 	movne.w	r0, #4294967295
 800be0a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800be0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be12:	9844      	ldr	r0, [sp, #272]	; 0x110
 800be14:	e7f9      	b.n	800be0a <__ssvfiscanf_r+0x2de>
 800be16:	bf00      	nop
 800be18:	08007be9 	.word	0x08007be9

0800be1c <__sfputc_r>:
 800be1c:	6893      	ldr	r3, [r2, #8]
 800be1e:	3b01      	subs	r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	b410      	push	{r4}
 800be24:	6093      	str	r3, [r2, #8]
 800be26:	da08      	bge.n	800be3a <__sfputc_r+0x1e>
 800be28:	6994      	ldr	r4, [r2, #24]
 800be2a:	42a3      	cmp	r3, r4
 800be2c:	db01      	blt.n	800be32 <__sfputc_r+0x16>
 800be2e:	290a      	cmp	r1, #10
 800be30:	d103      	bne.n	800be3a <__sfputc_r+0x1e>
 800be32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be36:	f7fd b9af 	b.w	8009198 <__swbuf_r>
 800be3a:	6813      	ldr	r3, [r2, #0]
 800be3c:	1c58      	adds	r0, r3, #1
 800be3e:	6010      	str	r0, [r2, #0]
 800be40:	7019      	strb	r1, [r3, #0]
 800be42:	4608      	mov	r0, r1
 800be44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <__sfputs_r>:
 800be4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4c:	4606      	mov	r6, r0
 800be4e:	460f      	mov	r7, r1
 800be50:	4614      	mov	r4, r2
 800be52:	18d5      	adds	r5, r2, r3
 800be54:	42ac      	cmp	r4, r5
 800be56:	d101      	bne.n	800be5c <__sfputs_r+0x12>
 800be58:	2000      	movs	r0, #0
 800be5a:	e007      	b.n	800be6c <__sfputs_r+0x22>
 800be5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be60:	463a      	mov	r2, r7
 800be62:	4630      	mov	r0, r6
 800be64:	f7ff ffda 	bl	800be1c <__sfputc_r>
 800be68:	1c43      	adds	r3, r0, #1
 800be6a:	d1f3      	bne.n	800be54 <__sfputs_r+0xa>
 800be6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be70 <_vfiprintf_r>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	460d      	mov	r5, r1
 800be76:	b09d      	sub	sp, #116	; 0x74
 800be78:	4614      	mov	r4, r2
 800be7a:	4698      	mov	r8, r3
 800be7c:	4606      	mov	r6, r0
 800be7e:	b118      	cbz	r0, 800be88 <_vfiprintf_r+0x18>
 800be80:	6983      	ldr	r3, [r0, #24]
 800be82:	b90b      	cbnz	r3, 800be88 <_vfiprintf_r+0x18>
 800be84:	f7fe fa12 	bl	800a2ac <__sinit>
 800be88:	4b89      	ldr	r3, [pc, #548]	; (800c0b0 <_vfiprintf_r+0x240>)
 800be8a:	429d      	cmp	r5, r3
 800be8c:	d11b      	bne.n	800bec6 <_vfiprintf_r+0x56>
 800be8e:	6875      	ldr	r5, [r6, #4]
 800be90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be92:	07d9      	lsls	r1, r3, #31
 800be94:	d405      	bmi.n	800bea2 <_vfiprintf_r+0x32>
 800be96:	89ab      	ldrh	r3, [r5, #12]
 800be98:	059a      	lsls	r2, r3, #22
 800be9a:	d402      	bmi.n	800bea2 <_vfiprintf_r+0x32>
 800be9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be9e:	f7fe fe34 	bl	800ab0a <__retarget_lock_acquire_recursive>
 800bea2:	89ab      	ldrh	r3, [r5, #12]
 800bea4:	071b      	lsls	r3, r3, #28
 800bea6:	d501      	bpl.n	800beac <_vfiprintf_r+0x3c>
 800bea8:	692b      	ldr	r3, [r5, #16]
 800beaa:	b9eb      	cbnz	r3, 800bee8 <_vfiprintf_r+0x78>
 800beac:	4629      	mov	r1, r5
 800beae:	4630      	mov	r0, r6
 800beb0:	f7fd f9d6 	bl	8009260 <__swsetup_r>
 800beb4:	b1c0      	cbz	r0, 800bee8 <_vfiprintf_r+0x78>
 800beb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beb8:	07dc      	lsls	r4, r3, #31
 800beba:	d50e      	bpl.n	800beda <_vfiprintf_r+0x6a>
 800bebc:	f04f 30ff 	mov.w	r0, #4294967295
 800bec0:	b01d      	add	sp, #116	; 0x74
 800bec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec6:	4b7b      	ldr	r3, [pc, #492]	; (800c0b4 <_vfiprintf_r+0x244>)
 800bec8:	429d      	cmp	r5, r3
 800beca:	d101      	bne.n	800bed0 <_vfiprintf_r+0x60>
 800becc:	68b5      	ldr	r5, [r6, #8]
 800bece:	e7df      	b.n	800be90 <_vfiprintf_r+0x20>
 800bed0:	4b79      	ldr	r3, [pc, #484]	; (800c0b8 <_vfiprintf_r+0x248>)
 800bed2:	429d      	cmp	r5, r3
 800bed4:	bf08      	it	eq
 800bed6:	68f5      	ldreq	r5, [r6, #12]
 800bed8:	e7da      	b.n	800be90 <_vfiprintf_r+0x20>
 800beda:	89ab      	ldrh	r3, [r5, #12]
 800bedc:	0598      	lsls	r0, r3, #22
 800bede:	d4ed      	bmi.n	800bebc <_vfiprintf_r+0x4c>
 800bee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bee2:	f7fe fe13 	bl	800ab0c <__retarget_lock_release_recursive>
 800bee6:	e7e9      	b.n	800bebc <_vfiprintf_r+0x4c>
 800bee8:	2300      	movs	r3, #0
 800beea:	9309      	str	r3, [sp, #36]	; 0x24
 800beec:	2320      	movs	r3, #32
 800beee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bef2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bef6:	2330      	movs	r3, #48	; 0x30
 800bef8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c0bc <_vfiprintf_r+0x24c>
 800befc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf00:	f04f 0901 	mov.w	r9, #1
 800bf04:	4623      	mov	r3, r4
 800bf06:	469a      	mov	sl, r3
 800bf08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf0c:	b10a      	cbz	r2, 800bf12 <_vfiprintf_r+0xa2>
 800bf0e:	2a25      	cmp	r2, #37	; 0x25
 800bf10:	d1f9      	bne.n	800bf06 <_vfiprintf_r+0x96>
 800bf12:	ebba 0b04 	subs.w	fp, sl, r4
 800bf16:	d00b      	beq.n	800bf30 <_vfiprintf_r+0xc0>
 800bf18:	465b      	mov	r3, fp
 800bf1a:	4622      	mov	r2, r4
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f7ff ff93 	bl	800be4a <__sfputs_r>
 800bf24:	3001      	adds	r0, #1
 800bf26:	f000 80aa 	beq.w	800c07e <_vfiprintf_r+0x20e>
 800bf2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf2c:	445a      	add	r2, fp
 800bf2e:	9209      	str	r2, [sp, #36]	; 0x24
 800bf30:	f89a 3000 	ldrb.w	r3, [sl]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 80a2 	beq.w	800c07e <_vfiprintf_r+0x20e>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf44:	f10a 0a01 	add.w	sl, sl, #1
 800bf48:	9304      	str	r3, [sp, #16]
 800bf4a:	9307      	str	r3, [sp, #28]
 800bf4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf50:	931a      	str	r3, [sp, #104]	; 0x68
 800bf52:	4654      	mov	r4, sl
 800bf54:	2205      	movs	r2, #5
 800bf56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf5a:	4858      	ldr	r0, [pc, #352]	; (800c0bc <_vfiprintf_r+0x24c>)
 800bf5c:	f7f4 f960 	bl	8000220 <memchr>
 800bf60:	9a04      	ldr	r2, [sp, #16]
 800bf62:	b9d8      	cbnz	r0, 800bf9c <_vfiprintf_r+0x12c>
 800bf64:	06d1      	lsls	r1, r2, #27
 800bf66:	bf44      	itt	mi
 800bf68:	2320      	movmi	r3, #32
 800bf6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf6e:	0713      	lsls	r3, r2, #28
 800bf70:	bf44      	itt	mi
 800bf72:	232b      	movmi	r3, #43	; 0x2b
 800bf74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf78:	f89a 3000 	ldrb.w	r3, [sl]
 800bf7c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf7e:	d015      	beq.n	800bfac <_vfiprintf_r+0x13c>
 800bf80:	9a07      	ldr	r2, [sp, #28]
 800bf82:	4654      	mov	r4, sl
 800bf84:	2000      	movs	r0, #0
 800bf86:	f04f 0c0a 	mov.w	ip, #10
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf90:	3b30      	subs	r3, #48	; 0x30
 800bf92:	2b09      	cmp	r3, #9
 800bf94:	d94e      	bls.n	800c034 <_vfiprintf_r+0x1c4>
 800bf96:	b1b0      	cbz	r0, 800bfc6 <_vfiprintf_r+0x156>
 800bf98:	9207      	str	r2, [sp, #28]
 800bf9a:	e014      	b.n	800bfc6 <_vfiprintf_r+0x156>
 800bf9c:	eba0 0308 	sub.w	r3, r0, r8
 800bfa0:	fa09 f303 	lsl.w	r3, r9, r3
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	9304      	str	r3, [sp, #16]
 800bfa8:	46a2      	mov	sl, r4
 800bfaa:	e7d2      	b.n	800bf52 <_vfiprintf_r+0xe2>
 800bfac:	9b03      	ldr	r3, [sp, #12]
 800bfae:	1d19      	adds	r1, r3, #4
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	9103      	str	r1, [sp, #12]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	bfbb      	ittet	lt
 800bfb8:	425b      	neglt	r3, r3
 800bfba:	f042 0202 	orrlt.w	r2, r2, #2
 800bfbe:	9307      	strge	r3, [sp, #28]
 800bfc0:	9307      	strlt	r3, [sp, #28]
 800bfc2:	bfb8      	it	lt
 800bfc4:	9204      	strlt	r2, [sp, #16]
 800bfc6:	7823      	ldrb	r3, [r4, #0]
 800bfc8:	2b2e      	cmp	r3, #46	; 0x2e
 800bfca:	d10c      	bne.n	800bfe6 <_vfiprintf_r+0x176>
 800bfcc:	7863      	ldrb	r3, [r4, #1]
 800bfce:	2b2a      	cmp	r3, #42	; 0x2a
 800bfd0:	d135      	bne.n	800c03e <_vfiprintf_r+0x1ce>
 800bfd2:	9b03      	ldr	r3, [sp, #12]
 800bfd4:	1d1a      	adds	r2, r3, #4
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	9203      	str	r2, [sp, #12]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	bfb8      	it	lt
 800bfde:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfe2:	3402      	adds	r4, #2
 800bfe4:	9305      	str	r3, [sp, #20]
 800bfe6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c0cc <_vfiprintf_r+0x25c>
 800bfea:	7821      	ldrb	r1, [r4, #0]
 800bfec:	2203      	movs	r2, #3
 800bfee:	4650      	mov	r0, sl
 800bff0:	f7f4 f916 	bl	8000220 <memchr>
 800bff4:	b140      	cbz	r0, 800c008 <_vfiprintf_r+0x198>
 800bff6:	2340      	movs	r3, #64	; 0x40
 800bff8:	eba0 000a 	sub.w	r0, r0, sl
 800bffc:	fa03 f000 	lsl.w	r0, r3, r0
 800c000:	9b04      	ldr	r3, [sp, #16]
 800c002:	4303      	orrs	r3, r0
 800c004:	3401      	adds	r4, #1
 800c006:	9304      	str	r3, [sp, #16]
 800c008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c00c:	482c      	ldr	r0, [pc, #176]	; (800c0c0 <_vfiprintf_r+0x250>)
 800c00e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c012:	2206      	movs	r2, #6
 800c014:	f7f4 f904 	bl	8000220 <memchr>
 800c018:	2800      	cmp	r0, #0
 800c01a:	d03f      	beq.n	800c09c <_vfiprintf_r+0x22c>
 800c01c:	4b29      	ldr	r3, [pc, #164]	; (800c0c4 <_vfiprintf_r+0x254>)
 800c01e:	bb1b      	cbnz	r3, 800c068 <_vfiprintf_r+0x1f8>
 800c020:	9b03      	ldr	r3, [sp, #12]
 800c022:	3307      	adds	r3, #7
 800c024:	f023 0307 	bic.w	r3, r3, #7
 800c028:	3308      	adds	r3, #8
 800c02a:	9303      	str	r3, [sp, #12]
 800c02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c02e:	443b      	add	r3, r7
 800c030:	9309      	str	r3, [sp, #36]	; 0x24
 800c032:	e767      	b.n	800bf04 <_vfiprintf_r+0x94>
 800c034:	fb0c 3202 	mla	r2, ip, r2, r3
 800c038:	460c      	mov	r4, r1
 800c03a:	2001      	movs	r0, #1
 800c03c:	e7a5      	b.n	800bf8a <_vfiprintf_r+0x11a>
 800c03e:	2300      	movs	r3, #0
 800c040:	3401      	adds	r4, #1
 800c042:	9305      	str	r3, [sp, #20]
 800c044:	4619      	mov	r1, r3
 800c046:	f04f 0c0a 	mov.w	ip, #10
 800c04a:	4620      	mov	r0, r4
 800c04c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c050:	3a30      	subs	r2, #48	; 0x30
 800c052:	2a09      	cmp	r2, #9
 800c054:	d903      	bls.n	800c05e <_vfiprintf_r+0x1ee>
 800c056:	2b00      	cmp	r3, #0
 800c058:	d0c5      	beq.n	800bfe6 <_vfiprintf_r+0x176>
 800c05a:	9105      	str	r1, [sp, #20]
 800c05c:	e7c3      	b.n	800bfe6 <_vfiprintf_r+0x176>
 800c05e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c062:	4604      	mov	r4, r0
 800c064:	2301      	movs	r3, #1
 800c066:	e7f0      	b.n	800c04a <_vfiprintf_r+0x1da>
 800c068:	ab03      	add	r3, sp, #12
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	462a      	mov	r2, r5
 800c06e:	4b16      	ldr	r3, [pc, #88]	; (800c0c8 <_vfiprintf_r+0x258>)
 800c070:	a904      	add	r1, sp, #16
 800c072:	4630      	mov	r0, r6
 800c074:	f7fb f9ee 	bl	8007454 <_printf_float>
 800c078:	4607      	mov	r7, r0
 800c07a:	1c78      	adds	r0, r7, #1
 800c07c:	d1d6      	bne.n	800c02c <_vfiprintf_r+0x1bc>
 800c07e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c080:	07d9      	lsls	r1, r3, #31
 800c082:	d405      	bmi.n	800c090 <_vfiprintf_r+0x220>
 800c084:	89ab      	ldrh	r3, [r5, #12]
 800c086:	059a      	lsls	r2, r3, #22
 800c088:	d402      	bmi.n	800c090 <_vfiprintf_r+0x220>
 800c08a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c08c:	f7fe fd3e 	bl	800ab0c <__retarget_lock_release_recursive>
 800c090:	89ab      	ldrh	r3, [r5, #12]
 800c092:	065b      	lsls	r3, r3, #25
 800c094:	f53f af12 	bmi.w	800bebc <_vfiprintf_r+0x4c>
 800c098:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c09a:	e711      	b.n	800bec0 <_vfiprintf_r+0x50>
 800c09c:	ab03      	add	r3, sp, #12
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	462a      	mov	r2, r5
 800c0a2:	4b09      	ldr	r3, [pc, #36]	; (800c0c8 <_vfiprintf_r+0x258>)
 800c0a4:	a904      	add	r1, sp, #16
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f7fb fc78 	bl	800799c <_printf_i>
 800c0ac:	e7e4      	b.n	800c078 <_vfiprintf_r+0x208>
 800c0ae:	bf00      	nop
 800c0b0:	0800d34c 	.word	0x0800d34c
 800c0b4:	0800d36c 	.word	0x0800d36c
 800c0b8:	0800d32c 	.word	0x0800d32c
 800c0bc:	0800d564 	.word	0x0800d564
 800c0c0:	0800d56e 	.word	0x0800d56e
 800c0c4:	08007455 	.word	0x08007455
 800c0c8:	0800be4b 	.word	0x0800be4b
 800c0cc:	0800d56a 	.word	0x0800d56a

0800c0d0 <__svfiscanf_r>:
 800c0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d4:	461d      	mov	r5, r3
 800c0d6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c0d8:	07df      	lsls	r7, r3, #31
 800c0da:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c0de:	4606      	mov	r6, r0
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	4692      	mov	sl, r2
 800c0e4:	d405      	bmi.n	800c0f2 <__svfiscanf_r+0x22>
 800c0e6:	898b      	ldrh	r3, [r1, #12]
 800c0e8:	0598      	lsls	r0, r3, #22
 800c0ea:	d402      	bmi.n	800c0f2 <__svfiscanf_r+0x22>
 800c0ec:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800c0ee:	f7fe fd0c 	bl	800ab0a <__retarget_lock_acquire_recursive>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800c0f8:	4ba6      	ldr	r3, [pc, #664]	; (800c394 <__svfiscanf_r+0x2c4>)
 800c0fa:	93a0      	str	r3, [sp, #640]	; 0x280
 800c0fc:	f10d 0804 	add.w	r8, sp, #4
 800c100:	4ba5      	ldr	r3, [pc, #660]	; (800c398 <__svfiscanf_r+0x2c8>)
 800c102:	4fa6      	ldr	r7, [pc, #664]	; (800c39c <__svfiscanf_r+0x2cc>)
 800c104:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c3a0 <__svfiscanf_r+0x2d0>
 800c108:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c10c:	93a1      	str	r3, [sp, #644]	; 0x284
 800c10e:	9500      	str	r5, [sp, #0]
 800c110:	f89a 3000 	ldrb.w	r3, [sl]
 800c114:	2b00      	cmp	r3, #0
 800c116:	f000 8173 	beq.w	800c400 <__svfiscanf_r+0x330>
 800c11a:	5dd9      	ldrb	r1, [r3, r7]
 800c11c:	f011 0108 	ands.w	r1, r1, #8
 800c120:	f10a 0501 	add.w	r5, sl, #1
 800c124:	d019      	beq.n	800c15a <__svfiscanf_r+0x8a>
 800c126:	6863      	ldr	r3, [r4, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	dd0f      	ble.n	800c14c <__svfiscanf_r+0x7c>
 800c12c:	6823      	ldr	r3, [r4, #0]
 800c12e:	781a      	ldrb	r2, [r3, #0]
 800c130:	5cba      	ldrb	r2, [r7, r2]
 800c132:	0711      	lsls	r1, r2, #28
 800c134:	d401      	bmi.n	800c13a <__svfiscanf_r+0x6a>
 800c136:	46aa      	mov	sl, r5
 800c138:	e7ea      	b.n	800c110 <__svfiscanf_r+0x40>
 800c13a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c13c:	3201      	adds	r2, #1
 800c13e:	9245      	str	r2, [sp, #276]	; 0x114
 800c140:	6862      	ldr	r2, [r4, #4]
 800c142:	3301      	adds	r3, #1
 800c144:	3a01      	subs	r2, #1
 800c146:	6062      	str	r2, [r4, #4]
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	e7ec      	b.n	800c126 <__svfiscanf_r+0x56>
 800c14c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c14e:	4621      	mov	r1, r4
 800c150:	4630      	mov	r0, r6
 800c152:	4798      	blx	r3
 800c154:	2800      	cmp	r0, #0
 800c156:	d0e9      	beq.n	800c12c <__svfiscanf_r+0x5c>
 800c158:	e7ed      	b.n	800c136 <__svfiscanf_r+0x66>
 800c15a:	2b25      	cmp	r3, #37	; 0x25
 800c15c:	d012      	beq.n	800c184 <__svfiscanf_r+0xb4>
 800c15e:	469a      	mov	sl, r3
 800c160:	6863      	ldr	r3, [r4, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	f340 8095 	ble.w	800c292 <__svfiscanf_r+0x1c2>
 800c168:	6822      	ldr	r2, [r4, #0]
 800c16a:	7813      	ldrb	r3, [r2, #0]
 800c16c:	4553      	cmp	r3, sl
 800c16e:	f040 8147 	bne.w	800c400 <__svfiscanf_r+0x330>
 800c172:	6863      	ldr	r3, [r4, #4]
 800c174:	3b01      	subs	r3, #1
 800c176:	6063      	str	r3, [r4, #4]
 800c178:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c17a:	3201      	adds	r2, #1
 800c17c:	3301      	adds	r3, #1
 800c17e:	6022      	str	r2, [r4, #0]
 800c180:	9345      	str	r3, [sp, #276]	; 0x114
 800c182:	e7d8      	b.n	800c136 <__svfiscanf_r+0x66>
 800c184:	9141      	str	r1, [sp, #260]	; 0x104
 800c186:	9143      	str	r1, [sp, #268]	; 0x10c
 800c188:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800c18c:	2b2a      	cmp	r3, #42	; 0x2a
 800c18e:	bf02      	ittt	eq
 800c190:	2310      	moveq	r3, #16
 800c192:	9341      	streq	r3, [sp, #260]	; 0x104
 800c194:	f10a 0502 	addeq.w	r5, sl, #2
 800c198:	220a      	movs	r2, #10
 800c19a:	46aa      	mov	sl, r5
 800c19c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c1a0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c1a4:	2b09      	cmp	r3, #9
 800c1a6:	d91e      	bls.n	800c1e6 <__svfiscanf_r+0x116>
 800c1a8:	487d      	ldr	r0, [pc, #500]	; (800c3a0 <__svfiscanf_r+0x2d0>)
 800c1aa:	2203      	movs	r2, #3
 800c1ac:	f7f4 f838 	bl	8000220 <memchr>
 800c1b0:	b140      	cbz	r0, 800c1c4 <__svfiscanf_r+0xf4>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	eba0 0009 	sub.w	r0, r0, r9
 800c1b8:	fa03 f000 	lsl.w	r0, r3, r0
 800c1bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1be:	4318      	orrs	r0, r3
 800c1c0:	9041      	str	r0, [sp, #260]	; 0x104
 800c1c2:	4655      	mov	r5, sl
 800c1c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c1c8:	2b78      	cmp	r3, #120	; 0x78
 800c1ca:	d807      	bhi.n	800c1dc <__svfiscanf_r+0x10c>
 800c1cc:	2b57      	cmp	r3, #87	; 0x57
 800c1ce:	d811      	bhi.n	800c1f4 <__svfiscanf_r+0x124>
 800c1d0:	2b25      	cmp	r3, #37	; 0x25
 800c1d2:	d0c4      	beq.n	800c15e <__svfiscanf_r+0x8e>
 800c1d4:	d858      	bhi.n	800c288 <__svfiscanf_r+0x1b8>
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	f000 80c8 	beq.w	800c36c <__svfiscanf_r+0x29c>
 800c1dc:	2303      	movs	r3, #3
 800c1de:	9347      	str	r3, [sp, #284]	; 0x11c
 800c1e0:	230a      	movs	r3, #10
 800c1e2:	9342      	str	r3, [sp, #264]	; 0x108
 800c1e4:	e07c      	b.n	800c2e0 <__svfiscanf_r+0x210>
 800c1e6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c1e8:	fb02 1103 	mla	r1, r2, r3, r1
 800c1ec:	3930      	subs	r1, #48	; 0x30
 800c1ee:	9143      	str	r1, [sp, #268]	; 0x10c
 800c1f0:	4655      	mov	r5, sl
 800c1f2:	e7d2      	b.n	800c19a <__svfiscanf_r+0xca>
 800c1f4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c1f8:	2a20      	cmp	r2, #32
 800c1fa:	d8ef      	bhi.n	800c1dc <__svfiscanf_r+0x10c>
 800c1fc:	a101      	add	r1, pc, #4	; (adr r1, 800c204 <__svfiscanf_r+0x134>)
 800c1fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c202:	bf00      	nop
 800c204:	0800c2cb 	.word	0x0800c2cb
 800c208:	0800c1dd 	.word	0x0800c1dd
 800c20c:	0800c1dd 	.word	0x0800c1dd
 800c210:	0800c329 	.word	0x0800c329
 800c214:	0800c1dd 	.word	0x0800c1dd
 800c218:	0800c1dd 	.word	0x0800c1dd
 800c21c:	0800c1dd 	.word	0x0800c1dd
 800c220:	0800c1dd 	.word	0x0800c1dd
 800c224:	0800c1dd 	.word	0x0800c1dd
 800c228:	0800c1dd 	.word	0x0800c1dd
 800c22c:	0800c1dd 	.word	0x0800c1dd
 800c230:	0800c33f 	.word	0x0800c33f
 800c234:	0800c315 	.word	0x0800c315
 800c238:	0800c28f 	.word	0x0800c28f
 800c23c:	0800c28f 	.word	0x0800c28f
 800c240:	0800c28f 	.word	0x0800c28f
 800c244:	0800c1dd 	.word	0x0800c1dd
 800c248:	0800c319 	.word	0x0800c319
 800c24c:	0800c1dd 	.word	0x0800c1dd
 800c250:	0800c1dd 	.word	0x0800c1dd
 800c254:	0800c1dd 	.word	0x0800c1dd
 800c258:	0800c1dd 	.word	0x0800c1dd
 800c25c:	0800c34f 	.word	0x0800c34f
 800c260:	0800c321 	.word	0x0800c321
 800c264:	0800c2c3 	.word	0x0800c2c3
 800c268:	0800c1dd 	.word	0x0800c1dd
 800c26c:	0800c1dd 	.word	0x0800c1dd
 800c270:	0800c34b 	.word	0x0800c34b
 800c274:	0800c1dd 	.word	0x0800c1dd
 800c278:	0800c315 	.word	0x0800c315
 800c27c:	0800c1dd 	.word	0x0800c1dd
 800c280:	0800c1dd 	.word	0x0800c1dd
 800c284:	0800c2cb 	.word	0x0800c2cb
 800c288:	3b45      	subs	r3, #69	; 0x45
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	d8a6      	bhi.n	800c1dc <__svfiscanf_r+0x10c>
 800c28e:	2305      	movs	r3, #5
 800c290:	e025      	b.n	800c2de <__svfiscanf_r+0x20e>
 800c292:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c294:	4621      	mov	r1, r4
 800c296:	4630      	mov	r0, r6
 800c298:	4798      	blx	r3
 800c29a:	2800      	cmp	r0, #0
 800c29c:	f43f af64 	beq.w	800c168 <__svfiscanf_r+0x98>
 800c2a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2a2:	07da      	lsls	r2, r3, #31
 800c2a4:	f140 80a4 	bpl.w	800c3f0 <__svfiscanf_r+0x320>
 800c2a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d067      	beq.n	800c37e <__svfiscanf_r+0x2ae>
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c2b4:	bf18      	it	ne
 800c2b6:	f04f 30ff 	movne.w	r0, #4294967295
 800c2ba:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c2c4:	f042 0220 	orr.w	r2, r2, #32
 800c2c8:	9241      	str	r2, [sp, #260]	; 0x104
 800c2ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c2cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2d0:	9241      	str	r2, [sp, #260]	; 0x104
 800c2d2:	2210      	movs	r2, #16
 800c2d4:	2b6f      	cmp	r3, #111	; 0x6f
 800c2d6:	9242      	str	r2, [sp, #264]	; 0x108
 800c2d8:	bf34      	ite	cc
 800c2da:	2303      	movcc	r3, #3
 800c2dc:	2304      	movcs	r3, #4
 800c2de:	9347      	str	r3, [sp, #284]	; 0x11c
 800c2e0:	6863      	ldr	r3, [r4, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	dd4e      	ble.n	800c384 <__svfiscanf_r+0x2b4>
 800c2e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c2e8:	065b      	lsls	r3, r3, #25
 800c2ea:	d404      	bmi.n	800c2f6 <__svfiscanf_r+0x226>
 800c2ec:	6823      	ldr	r3, [r4, #0]
 800c2ee:	781a      	ldrb	r2, [r3, #0]
 800c2f0:	5cba      	ldrb	r2, [r7, r2]
 800c2f2:	0710      	lsls	r0, r2, #28
 800c2f4:	d456      	bmi.n	800c3a4 <__svfiscanf_r+0x2d4>
 800c2f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	dc65      	bgt.n	800c3c8 <__svfiscanf_r+0x2f8>
 800c2fc:	466b      	mov	r3, sp
 800c2fe:	4622      	mov	r2, r4
 800c300:	a941      	add	r1, sp, #260	; 0x104
 800c302:	4630      	mov	r0, r6
 800c304:	f000 f8b2 	bl	800c46c <_scanf_chars>
 800c308:	2801      	cmp	r0, #1
 800c30a:	d079      	beq.n	800c400 <__svfiscanf_r+0x330>
 800c30c:	2802      	cmp	r0, #2
 800c30e:	f47f af12 	bne.w	800c136 <__svfiscanf_r+0x66>
 800c312:	e7c5      	b.n	800c2a0 <__svfiscanf_r+0x1d0>
 800c314:	220a      	movs	r2, #10
 800c316:	e7dd      	b.n	800c2d4 <__svfiscanf_r+0x204>
 800c318:	2300      	movs	r3, #0
 800c31a:	9342      	str	r3, [sp, #264]	; 0x108
 800c31c:	2303      	movs	r3, #3
 800c31e:	e7de      	b.n	800c2de <__svfiscanf_r+0x20e>
 800c320:	2308      	movs	r3, #8
 800c322:	9342      	str	r3, [sp, #264]	; 0x108
 800c324:	2304      	movs	r3, #4
 800c326:	e7da      	b.n	800c2de <__svfiscanf_r+0x20e>
 800c328:	4629      	mov	r1, r5
 800c32a:	4640      	mov	r0, r8
 800c32c:	f000 fab0 	bl	800c890 <__sccl>
 800c330:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c336:	9341      	str	r3, [sp, #260]	; 0x104
 800c338:	4605      	mov	r5, r0
 800c33a:	2301      	movs	r3, #1
 800c33c:	e7cf      	b.n	800c2de <__svfiscanf_r+0x20e>
 800c33e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c344:	9341      	str	r3, [sp, #260]	; 0x104
 800c346:	2300      	movs	r3, #0
 800c348:	e7c9      	b.n	800c2de <__svfiscanf_r+0x20e>
 800c34a:	2302      	movs	r3, #2
 800c34c:	e7c7      	b.n	800c2de <__svfiscanf_r+0x20e>
 800c34e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c350:	06c3      	lsls	r3, r0, #27
 800c352:	f53f aef0 	bmi.w	800c136 <__svfiscanf_r+0x66>
 800c356:	9b00      	ldr	r3, [sp, #0]
 800c358:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c35a:	1d19      	adds	r1, r3, #4
 800c35c:	9100      	str	r1, [sp, #0]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f010 0f01 	tst.w	r0, #1
 800c364:	bf14      	ite	ne
 800c366:	801a      	strhne	r2, [r3, #0]
 800c368:	601a      	streq	r2, [r3, #0]
 800c36a:	e6e4      	b.n	800c136 <__svfiscanf_r+0x66>
 800c36c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c36e:	07d8      	lsls	r0, r3, #31
 800c370:	d405      	bmi.n	800c37e <__svfiscanf_r+0x2ae>
 800c372:	89a3      	ldrh	r3, [r4, #12]
 800c374:	0599      	lsls	r1, r3, #22
 800c376:	d402      	bmi.n	800c37e <__svfiscanf_r+0x2ae>
 800c378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c37a:	f7fe fbc7 	bl	800ab0c <__retarget_lock_release_recursive>
 800c37e:	f04f 30ff 	mov.w	r0, #4294967295
 800c382:	e79a      	b.n	800c2ba <__svfiscanf_r+0x1ea>
 800c384:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c386:	4621      	mov	r1, r4
 800c388:	4630      	mov	r0, r6
 800c38a:	4798      	blx	r3
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d0aa      	beq.n	800c2e6 <__svfiscanf_r+0x216>
 800c390:	e786      	b.n	800c2a0 <__svfiscanf_r+0x1d0>
 800c392:	bf00      	nop
 800c394:	0800ca85 	.word	0x0800ca85
 800c398:	0800c749 	.word	0x0800c749
 800c39c:	0800d199 	.word	0x0800d199
 800c3a0:	0800d56a 	.word	0x0800d56a
 800c3a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c3a6:	3201      	adds	r2, #1
 800c3a8:	9245      	str	r2, [sp, #276]	; 0x114
 800c3aa:	6862      	ldr	r2, [r4, #4]
 800c3ac:	3a01      	subs	r2, #1
 800c3ae:	2a00      	cmp	r2, #0
 800c3b0:	6062      	str	r2, [r4, #4]
 800c3b2:	dd02      	ble.n	800c3ba <__svfiscanf_r+0x2ea>
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	6023      	str	r3, [r4, #0]
 800c3b8:	e798      	b.n	800c2ec <__svfiscanf_r+0x21c>
 800c3ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c3bc:	4621      	mov	r1, r4
 800c3be:	4630      	mov	r0, r6
 800c3c0:	4798      	blx	r3
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d092      	beq.n	800c2ec <__svfiscanf_r+0x21c>
 800c3c6:	e76b      	b.n	800c2a0 <__svfiscanf_r+0x1d0>
 800c3c8:	2b04      	cmp	r3, #4
 800c3ca:	dc06      	bgt.n	800c3da <__svfiscanf_r+0x30a>
 800c3cc:	466b      	mov	r3, sp
 800c3ce:	4622      	mov	r2, r4
 800c3d0:	a941      	add	r1, sp, #260	; 0x104
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f000 f8a4 	bl	800c520 <_scanf_i>
 800c3d8:	e796      	b.n	800c308 <__svfiscanf_r+0x238>
 800c3da:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <__svfiscanf_r+0x348>)
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f43f aeaa 	beq.w	800c136 <__svfiscanf_r+0x66>
 800c3e2:	466b      	mov	r3, sp
 800c3e4:	4622      	mov	r2, r4
 800c3e6:	a941      	add	r1, sp, #260	; 0x104
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	f7fb fbfd 	bl	8007be8 <_scanf_float>
 800c3ee:	e78b      	b.n	800c308 <__svfiscanf_r+0x238>
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	0599      	lsls	r1, r3, #22
 800c3f4:	f53f af58 	bmi.w	800c2a8 <__svfiscanf_r+0x1d8>
 800c3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3fa:	f7fe fb87 	bl	800ab0c <__retarget_lock_release_recursive>
 800c3fe:	e753      	b.n	800c2a8 <__svfiscanf_r+0x1d8>
 800c400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c402:	07da      	lsls	r2, r3, #31
 800c404:	d405      	bmi.n	800c412 <__svfiscanf_r+0x342>
 800c406:	89a3      	ldrh	r3, [r4, #12]
 800c408:	059b      	lsls	r3, r3, #22
 800c40a:	d402      	bmi.n	800c412 <__svfiscanf_r+0x342>
 800c40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c40e:	f7fe fb7d 	bl	800ab0c <__retarget_lock_release_recursive>
 800c412:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c414:	e751      	b.n	800c2ba <__svfiscanf_r+0x1ea>
 800c416:	bf00      	nop
 800c418:	08007be9 	.word	0x08007be9

0800c41c <_vfiscanf_r>:
 800c41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c41e:	460c      	mov	r4, r1
 800c420:	4605      	mov	r5, r0
 800c422:	b138      	cbz	r0, 800c434 <_vfiscanf_r+0x18>
 800c424:	6981      	ldr	r1, [r0, #24]
 800c426:	b929      	cbnz	r1, 800c434 <_vfiscanf_r+0x18>
 800c428:	e9cd 2300 	strd	r2, r3, [sp]
 800c42c:	f7fd ff3e 	bl	800a2ac <__sinit>
 800c430:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c434:	490a      	ldr	r1, [pc, #40]	; (800c460 <_vfiscanf_r+0x44>)
 800c436:	428c      	cmp	r4, r1
 800c438:	d107      	bne.n	800c44a <_vfiscanf_r+0x2e>
 800c43a:	686c      	ldr	r4, [r5, #4]
 800c43c:	4621      	mov	r1, r4
 800c43e:	4628      	mov	r0, r5
 800c440:	b003      	add	sp, #12
 800c442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c446:	f7ff be43 	b.w	800c0d0 <__svfiscanf_r>
 800c44a:	4906      	ldr	r1, [pc, #24]	; (800c464 <_vfiscanf_r+0x48>)
 800c44c:	428c      	cmp	r4, r1
 800c44e:	d101      	bne.n	800c454 <_vfiscanf_r+0x38>
 800c450:	68ac      	ldr	r4, [r5, #8]
 800c452:	e7f3      	b.n	800c43c <_vfiscanf_r+0x20>
 800c454:	4904      	ldr	r1, [pc, #16]	; (800c468 <_vfiscanf_r+0x4c>)
 800c456:	428c      	cmp	r4, r1
 800c458:	bf08      	it	eq
 800c45a:	68ec      	ldreq	r4, [r5, #12]
 800c45c:	e7ee      	b.n	800c43c <_vfiscanf_r+0x20>
 800c45e:	bf00      	nop
 800c460:	0800d34c 	.word	0x0800d34c
 800c464:	0800d36c 	.word	0x0800d36c
 800c468:	0800d32c 	.word	0x0800d32c

0800c46c <_scanf_chars>:
 800c46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c470:	4615      	mov	r5, r2
 800c472:	688a      	ldr	r2, [r1, #8]
 800c474:	4680      	mov	r8, r0
 800c476:	460c      	mov	r4, r1
 800c478:	b932      	cbnz	r2, 800c488 <_scanf_chars+0x1c>
 800c47a:	698a      	ldr	r2, [r1, #24]
 800c47c:	2a00      	cmp	r2, #0
 800c47e:	bf0c      	ite	eq
 800c480:	2201      	moveq	r2, #1
 800c482:	f04f 32ff 	movne.w	r2, #4294967295
 800c486:	608a      	str	r2, [r1, #8]
 800c488:	6822      	ldr	r2, [r4, #0]
 800c48a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c51c <_scanf_chars+0xb0>
 800c48e:	06d1      	lsls	r1, r2, #27
 800c490:	bf5f      	itttt	pl
 800c492:	681a      	ldrpl	r2, [r3, #0]
 800c494:	1d11      	addpl	r1, r2, #4
 800c496:	6019      	strpl	r1, [r3, #0]
 800c498:	6816      	ldrpl	r6, [r2, #0]
 800c49a:	2700      	movs	r7, #0
 800c49c:	69a0      	ldr	r0, [r4, #24]
 800c49e:	b188      	cbz	r0, 800c4c4 <_scanf_chars+0x58>
 800c4a0:	2801      	cmp	r0, #1
 800c4a2:	d107      	bne.n	800c4b4 <_scanf_chars+0x48>
 800c4a4:	682a      	ldr	r2, [r5, #0]
 800c4a6:	7811      	ldrb	r1, [r2, #0]
 800c4a8:	6962      	ldr	r2, [r4, #20]
 800c4aa:	5c52      	ldrb	r2, [r2, r1]
 800c4ac:	b952      	cbnz	r2, 800c4c4 <_scanf_chars+0x58>
 800c4ae:	2f00      	cmp	r7, #0
 800c4b0:	d031      	beq.n	800c516 <_scanf_chars+0xaa>
 800c4b2:	e022      	b.n	800c4fa <_scanf_chars+0x8e>
 800c4b4:	2802      	cmp	r0, #2
 800c4b6:	d120      	bne.n	800c4fa <_scanf_chars+0x8e>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c4c0:	071b      	lsls	r3, r3, #28
 800c4c2:	d41a      	bmi.n	800c4fa <_scanf_chars+0x8e>
 800c4c4:	6823      	ldr	r3, [r4, #0]
 800c4c6:	06da      	lsls	r2, r3, #27
 800c4c8:	bf5e      	ittt	pl
 800c4ca:	682b      	ldrpl	r3, [r5, #0]
 800c4cc:	781b      	ldrbpl	r3, [r3, #0]
 800c4ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c4d2:	682a      	ldr	r2, [r5, #0]
 800c4d4:	686b      	ldr	r3, [r5, #4]
 800c4d6:	3201      	adds	r2, #1
 800c4d8:	602a      	str	r2, [r5, #0]
 800c4da:	68a2      	ldr	r2, [r4, #8]
 800c4dc:	3b01      	subs	r3, #1
 800c4de:	3a01      	subs	r2, #1
 800c4e0:	606b      	str	r3, [r5, #4]
 800c4e2:	3701      	adds	r7, #1
 800c4e4:	60a2      	str	r2, [r4, #8]
 800c4e6:	b142      	cbz	r2, 800c4fa <_scanf_chars+0x8e>
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	dcd7      	bgt.n	800c49c <_scanf_chars+0x30>
 800c4ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	4640      	mov	r0, r8
 800c4f4:	4798      	blx	r3
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d0d0      	beq.n	800c49c <_scanf_chars+0x30>
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	f013 0310 	ands.w	r3, r3, #16
 800c500:	d105      	bne.n	800c50e <_scanf_chars+0xa2>
 800c502:	68e2      	ldr	r2, [r4, #12]
 800c504:	3201      	adds	r2, #1
 800c506:	60e2      	str	r2, [r4, #12]
 800c508:	69a2      	ldr	r2, [r4, #24]
 800c50a:	b102      	cbz	r2, 800c50e <_scanf_chars+0xa2>
 800c50c:	7033      	strb	r3, [r6, #0]
 800c50e:	6923      	ldr	r3, [r4, #16]
 800c510:	443b      	add	r3, r7
 800c512:	6123      	str	r3, [r4, #16]
 800c514:	2000      	movs	r0, #0
 800c516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c51a:	bf00      	nop
 800c51c:	0800d199 	.word	0x0800d199

0800c520 <_scanf_i>:
 800c520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c524:	4698      	mov	r8, r3
 800c526:	4b76      	ldr	r3, [pc, #472]	; (800c700 <_scanf_i+0x1e0>)
 800c528:	460c      	mov	r4, r1
 800c52a:	4682      	mov	sl, r0
 800c52c:	4616      	mov	r6, r2
 800c52e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c532:	b087      	sub	sp, #28
 800c534:	ab03      	add	r3, sp, #12
 800c536:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c53a:	4b72      	ldr	r3, [pc, #456]	; (800c704 <_scanf_i+0x1e4>)
 800c53c:	69a1      	ldr	r1, [r4, #24]
 800c53e:	4a72      	ldr	r2, [pc, #456]	; (800c708 <_scanf_i+0x1e8>)
 800c540:	2903      	cmp	r1, #3
 800c542:	bf18      	it	ne
 800c544:	461a      	movne	r2, r3
 800c546:	68a3      	ldr	r3, [r4, #8]
 800c548:	9201      	str	r2, [sp, #4]
 800c54a:	1e5a      	subs	r2, r3, #1
 800c54c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c550:	bf88      	it	hi
 800c552:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c556:	4627      	mov	r7, r4
 800c558:	bf82      	ittt	hi
 800c55a:	eb03 0905 	addhi.w	r9, r3, r5
 800c55e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c562:	60a3      	strhi	r3, [r4, #8]
 800c564:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c568:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c56c:	bf98      	it	ls
 800c56e:	f04f 0900 	movls.w	r9, #0
 800c572:	6023      	str	r3, [r4, #0]
 800c574:	463d      	mov	r5, r7
 800c576:	f04f 0b00 	mov.w	fp, #0
 800c57a:	6831      	ldr	r1, [r6, #0]
 800c57c:	ab03      	add	r3, sp, #12
 800c57e:	7809      	ldrb	r1, [r1, #0]
 800c580:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c584:	2202      	movs	r2, #2
 800c586:	f7f3 fe4b 	bl	8000220 <memchr>
 800c58a:	b328      	cbz	r0, 800c5d8 <_scanf_i+0xb8>
 800c58c:	f1bb 0f01 	cmp.w	fp, #1
 800c590:	d159      	bne.n	800c646 <_scanf_i+0x126>
 800c592:	6862      	ldr	r2, [r4, #4]
 800c594:	b92a      	cbnz	r2, 800c5a2 <_scanf_i+0x82>
 800c596:	6822      	ldr	r2, [r4, #0]
 800c598:	2308      	movs	r3, #8
 800c59a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c59e:	6063      	str	r3, [r4, #4]
 800c5a0:	6022      	str	r2, [r4, #0]
 800c5a2:	6822      	ldr	r2, [r4, #0]
 800c5a4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c5a8:	6022      	str	r2, [r4, #0]
 800c5aa:	68a2      	ldr	r2, [r4, #8]
 800c5ac:	1e51      	subs	r1, r2, #1
 800c5ae:	60a1      	str	r1, [r4, #8]
 800c5b0:	b192      	cbz	r2, 800c5d8 <_scanf_i+0xb8>
 800c5b2:	6832      	ldr	r2, [r6, #0]
 800c5b4:	1c51      	adds	r1, r2, #1
 800c5b6:	6031      	str	r1, [r6, #0]
 800c5b8:	7812      	ldrb	r2, [r2, #0]
 800c5ba:	f805 2b01 	strb.w	r2, [r5], #1
 800c5be:	6872      	ldr	r2, [r6, #4]
 800c5c0:	3a01      	subs	r2, #1
 800c5c2:	2a00      	cmp	r2, #0
 800c5c4:	6072      	str	r2, [r6, #4]
 800c5c6:	dc07      	bgt.n	800c5d8 <_scanf_i+0xb8>
 800c5c8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c5cc:	4631      	mov	r1, r6
 800c5ce:	4650      	mov	r0, sl
 800c5d0:	4790      	blx	r2
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	f040 8085 	bne.w	800c6e2 <_scanf_i+0x1c2>
 800c5d8:	f10b 0b01 	add.w	fp, fp, #1
 800c5dc:	f1bb 0f03 	cmp.w	fp, #3
 800c5e0:	d1cb      	bne.n	800c57a <_scanf_i+0x5a>
 800c5e2:	6863      	ldr	r3, [r4, #4]
 800c5e4:	b90b      	cbnz	r3, 800c5ea <_scanf_i+0xca>
 800c5e6:	230a      	movs	r3, #10
 800c5e8:	6063      	str	r3, [r4, #4]
 800c5ea:	6863      	ldr	r3, [r4, #4]
 800c5ec:	4947      	ldr	r1, [pc, #284]	; (800c70c <_scanf_i+0x1ec>)
 800c5ee:	6960      	ldr	r0, [r4, #20]
 800c5f0:	1ac9      	subs	r1, r1, r3
 800c5f2:	f000 f94d 	bl	800c890 <__sccl>
 800c5f6:	f04f 0b00 	mov.w	fp, #0
 800c5fa:	68a3      	ldr	r3, [r4, #8]
 800c5fc:	6822      	ldr	r2, [r4, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d03d      	beq.n	800c67e <_scanf_i+0x15e>
 800c602:	6831      	ldr	r1, [r6, #0]
 800c604:	6960      	ldr	r0, [r4, #20]
 800c606:	f891 c000 	ldrb.w	ip, [r1]
 800c60a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c60e:	2800      	cmp	r0, #0
 800c610:	d035      	beq.n	800c67e <_scanf_i+0x15e>
 800c612:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c616:	d124      	bne.n	800c662 <_scanf_i+0x142>
 800c618:	0510      	lsls	r0, r2, #20
 800c61a:	d522      	bpl.n	800c662 <_scanf_i+0x142>
 800c61c:	f10b 0b01 	add.w	fp, fp, #1
 800c620:	f1b9 0f00 	cmp.w	r9, #0
 800c624:	d003      	beq.n	800c62e <_scanf_i+0x10e>
 800c626:	3301      	adds	r3, #1
 800c628:	f109 39ff 	add.w	r9, r9, #4294967295
 800c62c:	60a3      	str	r3, [r4, #8]
 800c62e:	6873      	ldr	r3, [r6, #4]
 800c630:	3b01      	subs	r3, #1
 800c632:	2b00      	cmp	r3, #0
 800c634:	6073      	str	r3, [r6, #4]
 800c636:	dd1b      	ble.n	800c670 <_scanf_i+0x150>
 800c638:	6833      	ldr	r3, [r6, #0]
 800c63a:	3301      	adds	r3, #1
 800c63c:	6033      	str	r3, [r6, #0]
 800c63e:	68a3      	ldr	r3, [r4, #8]
 800c640:	3b01      	subs	r3, #1
 800c642:	60a3      	str	r3, [r4, #8]
 800c644:	e7d9      	b.n	800c5fa <_scanf_i+0xda>
 800c646:	f1bb 0f02 	cmp.w	fp, #2
 800c64a:	d1ae      	bne.n	800c5aa <_scanf_i+0x8a>
 800c64c:	6822      	ldr	r2, [r4, #0]
 800c64e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c652:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c656:	d1bf      	bne.n	800c5d8 <_scanf_i+0xb8>
 800c658:	2310      	movs	r3, #16
 800c65a:	6063      	str	r3, [r4, #4]
 800c65c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c660:	e7a2      	b.n	800c5a8 <_scanf_i+0x88>
 800c662:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c666:	6022      	str	r2, [r4, #0]
 800c668:	780b      	ldrb	r3, [r1, #0]
 800c66a:	f805 3b01 	strb.w	r3, [r5], #1
 800c66e:	e7de      	b.n	800c62e <_scanf_i+0x10e>
 800c670:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c674:	4631      	mov	r1, r6
 800c676:	4650      	mov	r0, sl
 800c678:	4798      	blx	r3
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d0df      	beq.n	800c63e <_scanf_i+0x11e>
 800c67e:	6823      	ldr	r3, [r4, #0]
 800c680:	05db      	lsls	r3, r3, #23
 800c682:	d50d      	bpl.n	800c6a0 <_scanf_i+0x180>
 800c684:	42bd      	cmp	r5, r7
 800c686:	d909      	bls.n	800c69c <_scanf_i+0x17c>
 800c688:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c68c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c690:	4632      	mov	r2, r6
 800c692:	4650      	mov	r0, sl
 800c694:	4798      	blx	r3
 800c696:	f105 39ff 	add.w	r9, r5, #4294967295
 800c69a:	464d      	mov	r5, r9
 800c69c:	42bd      	cmp	r5, r7
 800c69e:	d02d      	beq.n	800c6fc <_scanf_i+0x1dc>
 800c6a0:	6822      	ldr	r2, [r4, #0]
 800c6a2:	f012 0210 	ands.w	r2, r2, #16
 800c6a6:	d113      	bne.n	800c6d0 <_scanf_i+0x1b0>
 800c6a8:	702a      	strb	r2, [r5, #0]
 800c6aa:	6863      	ldr	r3, [r4, #4]
 800c6ac:	9e01      	ldr	r6, [sp, #4]
 800c6ae:	4639      	mov	r1, r7
 800c6b0:	4650      	mov	r0, sl
 800c6b2:	47b0      	blx	r6
 800c6b4:	6821      	ldr	r1, [r4, #0]
 800c6b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c6ba:	f011 0f20 	tst.w	r1, #32
 800c6be:	d013      	beq.n	800c6e8 <_scanf_i+0x1c8>
 800c6c0:	1d1a      	adds	r2, r3, #4
 800c6c2:	f8c8 2000 	str.w	r2, [r8]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6018      	str	r0, [r3, #0]
 800c6ca:	68e3      	ldr	r3, [r4, #12]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	60e3      	str	r3, [r4, #12]
 800c6d0:	1bed      	subs	r5, r5, r7
 800c6d2:	44ab      	add	fp, r5
 800c6d4:	6925      	ldr	r5, [r4, #16]
 800c6d6:	445d      	add	r5, fp
 800c6d8:	6125      	str	r5, [r4, #16]
 800c6da:	2000      	movs	r0, #0
 800c6dc:	b007      	add	sp, #28
 800c6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e2:	f04f 0b00 	mov.w	fp, #0
 800c6e6:	e7ca      	b.n	800c67e <_scanf_i+0x15e>
 800c6e8:	1d1a      	adds	r2, r3, #4
 800c6ea:	f8c8 2000 	str.w	r2, [r8]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f011 0f01 	tst.w	r1, #1
 800c6f4:	bf14      	ite	ne
 800c6f6:	8018      	strhne	r0, [r3, #0]
 800c6f8:	6018      	streq	r0, [r3, #0]
 800c6fa:	e7e6      	b.n	800c6ca <_scanf_i+0x1aa>
 800c6fc:	2001      	movs	r0, #1
 800c6fe:	e7ed      	b.n	800c6dc <_scanf_i+0x1bc>
 800c700:	0800d0dc 	.word	0x0800d0dc
 800c704:	0800ca0d 	.word	0x0800ca0d
 800c708:	08009195 	.word	0x08009195
 800c70c:	0800d58e 	.word	0x0800d58e

0800c710 <_read_r>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	4d07      	ldr	r5, [pc, #28]	; (800c730 <_read_r+0x20>)
 800c714:	4604      	mov	r4, r0
 800c716:	4608      	mov	r0, r1
 800c718:	4611      	mov	r1, r2
 800c71a:	2200      	movs	r2, #0
 800c71c:	602a      	str	r2, [r5, #0]
 800c71e:	461a      	mov	r2, r3
 800c720:	f7f5 fa14 	bl	8001b4c <_read>
 800c724:	1c43      	adds	r3, r0, #1
 800c726:	d102      	bne.n	800c72e <_read_r+0x1e>
 800c728:	682b      	ldr	r3, [r5, #0]
 800c72a:	b103      	cbz	r3, 800c72e <_read_r+0x1e>
 800c72c:	6023      	str	r3, [r4, #0]
 800c72e:	bd38      	pop	{r3, r4, r5, pc}
 800c730:	20000408 	.word	0x20000408

0800c734 <lflush>:
 800c734:	8983      	ldrh	r3, [r0, #12]
 800c736:	f003 0309 	and.w	r3, r3, #9
 800c73a:	2b09      	cmp	r3, #9
 800c73c:	d101      	bne.n	800c742 <lflush+0xe>
 800c73e:	f7fd bd4b 	b.w	800a1d8 <fflush>
 800c742:	2000      	movs	r0, #0
 800c744:	4770      	bx	lr
	...

0800c748 <__srefill_r>:
 800c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74a:	460c      	mov	r4, r1
 800c74c:	4605      	mov	r5, r0
 800c74e:	b118      	cbz	r0, 800c758 <__srefill_r+0x10>
 800c750:	6983      	ldr	r3, [r0, #24]
 800c752:	b90b      	cbnz	r3, 800c758 <__srefill_r+0x10>
 800c754:	f7fd fdaa 	bl	800a2ac <__sinit>
 800c758:	4b3b      	ldr	r3, [pc, #236]	; (800c848 <__srefill_r+0x100>)
 800c75a:	429c      	cmp	r4, r3
 800c75c:	d10a      	bne.n	800c774 <__srefill_r+0x2c>
 800c75e:	686c      	ldr	r4, [r5, #4]
 800c760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c764:	2300      	movs	r3, #0
 800c766:	6063      	str	r3, [r4, #4]
 800c768:	89a3      	ldrh	r3, [r4, #12]
 800c76a:	069e      	lsls	r6, r3, #26
 800c76c:	d50c      	bpl.n	800c788 <__srefill_r+0x40>
 800c76e:	f04f 30ff 	mov.w	r0, #4294967295
 800c772:	e066      	b.n	800c842 <__srefill_r+0xfa>
 800c774:	4b35      	ldr	r3, [pc, #212]	; (800c84c <__srefill_r+0x104>)
 800c776:	429c      	cmp	r4, r3
 800c778:	d101      	bne.n	800c77e <__srefill_r+0x36>
 800c77a:	68ac      	ldr	r4, [r5, #8]
 800c77c:	e7f0      	b.n	800c760 <__srefill_r+0x18>
 800c77e:	4b34      	ldr	r3, [pc, #208]	; (800c850 <__srefill_r+0x108>)
 800c780:	429c      	cmp	r4, r3
 800c782:	bf08      	it	eq
 800c784:	68ec      	ldreq	r4, [r5, #12]
 800c786:	e7eb      	b.n	800c760 <__srefill_r+0x18>
 800c788:	0758      	lsls	r0, r3, #29
 800c78a:	d448      	bmi.n	800c81e <__srefill_r+0xd6>
 800c78c:	06d9      	lsls	r1, r3, #27
 800c78e:	d405      	bmi.n	800c79c <__srefill_r+0x54>
 800c790:	2309      	movs	r3, #9
 800c792:	602b      	str	r3, [r5, #0]
 800c794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c798:	81a3      	strh	r3, [r4, #12]
 800c79a:	e7e8      	b.n	800c76e <__srefill_r+0x26>
 800c79c:	071a      	lsls	r2, r3, #28
 800c79e:	d50b      	bpl.n	800c7b8 <__srefill_r+0x70>
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f7fd fcdc 	bl	800a160 <_fflush_r>
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d1e0      	bne.n	800c76e <__srefill_r+0x26>
 800c7ac:	89a3      	ldrh	r3, [r4, #12]
 800c7ae:	60a0      	str	r0, [r4, #8]
 800c7b0:	f023 0308 	bic.w	r3, r3, #8
 800c7b4:	81a3      	strh	r3, [r4, #12]
 800c7b6:	61a0      	str	r0, [r4, #24]
 800c7b8:	89a3      	ldrh	r3, [r4, #12]
 800c7ba:	f043 0304 	orr.w	r3, r3, #4
 800c7be:	81a3      	strh	r3, [r4, #12]
 800c7c0:	6923      	ldr	r3, [r4, #16]
 800c7c2:	b91b      	cbnz	r3, 800c7cc <__srefill_r+0x84>
 800c7c4:	4621      	mov	r1, r4
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	f7fe f9da 	bl	800ab80 <__smakebuf_r>
 800c7cc:	89a6      	ldrh	r6, [r4, #12]
 800c7ce:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800c7d2:	07b3      	lsls	r3, r6, #30
 800c7d4:	d00f      	beq.n	800c7f6 <__srefill_r+0xae>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	81a3      	strh	r3, [r4, #12]
 800c7da:	4b1e      	ldr	r3, [pc, #120]	; (800c854 <__srefill_r+0x10c>)
 800c7dc:	491e      	ldr	r1, [pc, #120]	; (800c858 <__srefill_r+0x110>)
 800c7de:	6818      	ldr	r0, [r3, #0]
 800c7e0:	f006 0609 	and.w	r6, r6, #9
 800c7e4:	f7fd fde0 	bl	800a3a8 <_fwalk>
 800c7e8:	2e09      	cmp	r6, #9
 800c7ea:	81a7      	strh	r7, [r4, #12]
 800c7ec:	d103      	bne.n	800c7f6 <__srefill_r+0xae>
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	f7fd fc2f 	bl	800a054 <__sflush_r>
 800c7f6:	6922      	ldr	r2, [r4, #16]
 800c7f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c7fa:	6963      	ldr	r3, [r4, #20]
 800c7fc:	6a21      	ldr	r1, [r4, #32]
 800c7fe:	6022      	str	r2, [r4, #0]
 800c800:	4628      	mov	r0, r5
 800c802:	47b0      	blx	r6
 800c804:	2800      	cmp	r0, #0
 800c806:	6060      	str	r0, [r4, #4]
 800c808:	dc1c      	bgt.n	800c844 <__srefill_r+0xfc>
 800c80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80e:	bf17      	itett	ne
 800c810:	2200      	movne	r2, #0
 800c812:	f043 0320 	orreq.w	r3, r3, #32
 800c816:	6062      	strne	r2, [r4, #4]
 800c818:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800c81c:	e7bc      	b.n	800c798 <__srefill_r+0x50>
 800c81e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c820:	2900      	cmp	r1, #0
 800c822:	d0cd      	beq.n	800c7c0 <__srefill_r+0x78>
 800c824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c828:	4299      	cmp	r1, r3
 800c82a:	d002      	beq.n	800c832 <__srefill_r+0xea>
 800c82c:	4628      	mov	r0, r5
 800c82e:	f7fe fee7 	bl	800b600 <_free_r>
 800c832:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c834:	6063      	str	r3, [r4, #4]
 800c836:	2000      	movs	r0, #0
 800c838:	6360      	str	r0, [r4, #52]	; 0x34
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d0c0      	beq.n	800c7c0 <__srefill_r+0x78>
 800c83e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c840:	6023      	str	r3, [r4, #0]
 800c842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c844:	2000      	movs	r0, #0
 800c846:	e7fc      	b.n	800c842 <__srefill_r+0xfa>
 800c848:	0800d34c 	.word	0x0800d34c
 800c84c:	0800d36c 	.word	0x0800d36c
 800c850:	0800d32c 	.word	0x0800d32c
 800c854:	0800d108 	.word	0x0800d108
 800c858:	0800c735 	.word	0x0800c735
 800c85c:	00000000 	.word	0x00000000

0800c860 <nan>:
 800c860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c868 <nan+0x8>
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	00000000 	.word	0x00000000
 800c86c:	7ff80000 	.word	0x7ff80000

0800c870 <_sbrk_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d06      	ldr	r5, [pc, #24]	; (800c88c <_sbrk_r+0x1c>)
 800c874:	2300      	movs	r3, #0
 800c876:	4604      	mov	r4, r0
 800c878:	4608      	mov	r0, r1
 800c87a:	602b      	str	r3, [r5, #0]
 800c87c:	f7f5 f9d4 	bl	8001c28 <_sbrk>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_sbrk_r+0x1a>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	b103      	cbz	r3, 800c88a <_sbrk_r+0x1a>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	20000408 	.word	0x20000408

0800c890 <__sccl>:
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	780b      	ldrb	r3, [r1, #0]
 800c894:	4604      	mov	r4, r0
 800c896:	2b5e      	cmp	r3, #94	; 0x5e
 800c898:	bf0b      	itete	eq
 800c89a:	784b      	ldrbeq	r3, [r1, #1]
 800c89c:	1c48      	addne	r0, r1, #1
 800c89e:	1c88      	addeq	r0, r1, #2
 800c8a0:	2200      	movne	r2, #0
 800c8a2:	bf08      	it	eq
 800c8a4:	2201      	moveq	r2, #1
 800c8a6:	1e61      	subs	r1, r4, #1
 800c8a8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c8ac:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c8b0:	42a9      	cmp	r1, r5
 800c8b2:	d1fb      	bne.n	800c8ac <__sccl+0x1c>
 800c8b4:	b90b      	cbnz	r3, 800c8ba <__sccl+0x2a>
 800c8b6:	3801      	subs	r0, #1
 800c8b8:	bd70      	pop	{r4, r5, r6, pc}
 800c8ba:	f082 0201 	eor.w	r2, r2, #1
 800c8be:	54e2      	strb	r2, [r4, r3]
 800c8c0:	4605      	mov	r5, r0
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c8c8:	292d      	cmp	r1, #45	; 0x2d
 800c8ca:	d006      	beq.n	800c8da <__sccl+0x4a>
 800c8cc:	295d      	cmp	r1, #93	; 0x5d
 800c8ce:	d0f3      	beq.n	800c8b8 <__sccl+0x28>
 800c8d0:	b909      	cbnz	r1, 800c8d6 <__sccl+0x46>
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	e7f0      	b.n	800c8b8 <__sccl+0x28>
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	e7f1      	b.n	800c8be <__sccl+0x2e>
 800c8da:	786e      	ldrb	r6, [r5, #1]
 800c8dc:	2e5d      	cmp	r6, #93	; 0x5d
 800c8de:	d0fa      	beq.n	800c8d6 <__sccl+0x46>
 800c8e0:	42b3      	cmp	r3, r6
 800c8e2:	dcf8      	bgt.n	800c8d6 <__sccl+0x46>
 800c8e4:	3502      	adds	r5, #2
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	3101      	adds	r1, #1
 800c8ea:	428e      	cmp	r6, r1
 800c8ec:	5462      	strb	r2, [r4, r1]
 800c8ee:	dcfb      	bgt.n	800c8e8 <__sccl+0x58>
 800c8f0:	1af1      	subs	r1, r6, r3
 800c8f2:	3901      	subs	r1, #1
 800c8f4:	1c58      	adds	r0, r3, #1
 800c8f6:	42b3      	cmp	r3, r6
 800c8f8:	bfa8      	it	ge
 800c8fa:	2100      	movge	r1, #0
 800c8fc:	1843      	adds	r3, r0, r1
 800c8fe:	e7e0      	b.n	800c8c2 <__sccl+0x32>

0800c900 <strncmp>:
 800c900:	b510      	push	{r4, lr}
 800c902:	b17a      	cbz	r2, 800c924 <strncmp+0x24>
 800c904:	4603      	mov	r3, r0
 800c906:	3901      	subs	r1, #1
 800c908:	1884      	adds	r4, r0, r2
 800c90a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c90e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c912:	4290      	cmp	r0, r2
 800c914:	d101      	bne.n	800c91a <strncmp+0x1a>
 800c916:	42a3      	cmp	r3, r4
 800c918:	d101      	bne.n	800c91e <strncmp+0x1e>
 800c91a:	1a80      	subs	r0, r0, r2
 800c91c:	bd10      	pop	{r4, pc}
 800c91e:	2800      	cmp	r0, #0
 800c920:	d1f3      	bne.n	800c90a <strncmp+0xa>
 800c922:	e7fa      	b.n	800c91a <strncmp+0x1a>
 800c924:	4610      	mov	r0, r2
 800c926:	e7f9      	b.n	800c91c <strncmp+0x1c>

0800c928 <_strtoul_l.constprop.0>:
 800c928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c92c:	4f36      	ldr	r7, [pc, #216]	; (800ca08 <_strtoul_l.constprop.0+0xe0>)
 800c92e:	4686      	mov	lr, r0
 800c930:	460d      	mov	r5, r1
 800c932:	4628      	mov	r0, r5
 800c934:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c938:	5de6      	ldrb	r6, [r4, r7]
 800c93a:	f016 0608 	ands.w	r6, r6, #8
 800c93e:	d1f8      	bne.n	800c932 <_strtoul_l.constprop.0+0xa>
 800c940:	2c2d      	cmp	r4, #45	; 0x2d
 800c942:	d12f      	bne.n	800c9a4 <_strtoul_l.constprop.0+0x7c>
 800c944:	782c      	ldrb	r4, [r5, #0]
 800c946:	2601      	movs	r6, #1
 800c948:	1c85      	adds	r5, r0, #2
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d057      	beq.n	800c9fe <_strtoul_l.constprop.0+0xd6>
 800c94e:	2b10      	cmp	r3, #16
 800c950:	d109      	bne.n	800c966 <_strtoul_l.constprop.0+0x3e>
 800c952:	2c30      	cmp	r4, #48	; 0x30
 800c954:	d107      	bne.n	800c966 <_strtoul_l.constprop.0+0x3e>
 800c956:	7828      	ldrb	r0, [r5, #0]
 800c958:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c95c:	2858      	cmp	r0, #88	; 0x58
 800c95e:	d149      	bne.n	800c9f4 <_strtoul_l.constprop.0+0xcc>
 800c960:	786c      	ldrb	r4, [r5, #1]
 800c962:	2310      	movs	r3, #16
 800c964:	3502      	adds	r5, #2
 800c966:	f04f 38ff 	mov.w	r8, #4294967295
 800c96a:	2700      	movs	r7, #0
 800c96c:	fbb8 f8f3 	udiv	r8, r8, r3
 800c970:	fb03 f908 	mul.w	r9, r3, r8
 800c974:	ea6f 0909 	mvn.w	r9, r9
 800c978:	4638      	mov	r0, r7
 800c97a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c97e:	f1bc 0f09 	cmp.w	ip, #9
 800c982:	d814      	bhi.n	800c9ae <_strtoul_l.constprop.0+0x86>
 800c984:	4664      	mov	r4, ip
 800c986:	42a3      	cmp	r3, r4
 800c988:	dd22      	ble.n	800c9d0 <_strtoul_l.constprop.0+0xa8>
 800c98a:	2f00      	cmp	r7, #0
 800c98c:	db1d      	blt.n	800c9ca <_strtoul_l.constprop.0+0xa2>
 800c98e:	4580      	cmp	r8, r0
 800c990:	d31b      	bcc.n	800c9ca <_strtoul_l.constprop.0+0xa2>
 800c992:	d101      	bne.n	800c998 <_strtoul_l.constprop.0+0x70>
 800c994:	45a1      	cmp	r9, r4
 800c996:	db18      	blt.n	800c9ca <_strtoul_l.constprop.0+0xa2>
 800c998:	fb00 4003 	mla	r0, r0, r3, r4
 800c99c:	2701      	movs	r7, #1
 800c99e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9a2:	e7ea      	b.n	800c97a <_strtoul_l.constprop.0+0x52>
 800c9a4:	2c2b      	cmp	r4, #43	; 0x2b
 800c9a6:	bf04      	itt	eq
 800c9a8:	782c      	ldrbeq	r4, [r5, #0]
 800c9aa:	1c85      	addeq	r5, r0, #2
 800c9ac:	e7cd      	b.n	800c94a <_strtoul_l.constprop.0+0x22>
 800c9ae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c9b2:	f1bc 0f19 	cmp.w	ip, #25
 800c9b6:	d801      	bhi.n	800c9bc <_strtoul_l.constprop.0+0x94>
 800c9b8:	3c37      	subs	r4, #55	; 0x37
 800c9ba:	e7e4      	b.n	800c986 <_strtoul_l.constprop.0+0x5e>
 800c9bc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c9c0:	f1bc 0f19 	cmp.w	ip, #25
 800c9c4:	d804      	bhi.n	800c9d0 <_strtoul_l.constprop.0+0xa8>
 800c9c6:	3c57      	subs	r4, #87	; 0x57
 800c9c8:	e7dd      	b.n	800c986 <_strtoul_l.constprop.0+0x5e>
 800c9ca:	f04f 37ff 	mov.w	r7, #4294967295
 800c9ce:	e7e6      	b.n	800c99e <_strtoul_l.constprop.0+0x76>
 800c9d0:	2f00      	cmp	r7, #0
 800c9d2:	da07      	bge.n	800c9e4 <_strtoul_l.constprop.0+0xbc>
 800c9d4:	2322      	movs	r3, #34	; 0x22
 800c9d6:	f8ce 3000 	str.w	r3, [lr]
 800c9da:	f04f 30ff 	mov.w	r0, #4294967295
 800c9de:	b932      	cbnz	r2, 800c9ee <_strtoul_l.constprop.0+0xc6>
 800c9e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9e4:	b106      	cbz	r6, 800c9e8 <_strtoul_l.constprop.0+0xc0>
 800c9e6:	4240      	negs	r0, r0
 800c9e8:	2a00      	cmp	r2, #0
 800c9ea:	d0f9      	beq.n	800c9e0 <_strtoul_l.constprop.0+0xb8>
 800c9ec:	b107      	cbz	r7, 800c9f0 <_strtoul_l.constprop.0+0xc8>
 800c9ee:	1e69      	subs	r1, r5, #1
 800c9f0:	6011      	str	r1, [r2, #0]
 800c9f2:	e7f5      	b.n	800c9e0 <_strtoul_l.constprop.0+0xb8>
 800c9f4:	2430      	movs	r4, #48	; 0x30
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1b5      	bne.n	800c966 <_strtoul_l.constprop.0+0x3e>
 800c9fa:	2308      	movs	r3, #8
 800c9fc:	e7b3      	b.n	800c966 <_strtoul_l.constprop.0+0x3e>
 800c9fe:	2c30      	cmp	r4, #48	; 0x30
 800ca00:	d0a9      	beq.n	800c956 <_strtoul_l.constprop.0+0x2e>
 800ca02:	230a      	movs	r3, #10
 800ca04:	e7af      	b.n	800c966 <_strtoul_l.constprop.0+0x3e>
 800ca06:	bf00      	nop
 800ca08:	0800d199 	.word	0x0800d199

0800ca0c <_strtoul_r>:
 800ca0c:	f7ff bf8c 	b.w	800c928 <_strtoul_l.constprop.0>

0800ca10 <__submore>:
 800ca10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca14:	460c      	mov	r4, r1
 800ca16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ca18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca1c:	4299      	cmp	r1, r3
 800ca1e:	d11d      	bne.n	800ca5c <__submore+0x4c>
 800ca20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ca24:	f7fe fe58 	bl	800b6d8 <_malloc_r>
 800ca28:	b918      	cbnz	r0, 800ca32 <__submore+0x22>
 800ca2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca36:	63a3      	str	r3, [r4, #56]	; 0x38
 800ca38:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ca3c:	6360      	str	r0, [r4, #52]	; 0x34
 800ca3e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ca42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ca46:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ca4a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ca4e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ca52:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ca56:	6020      	str	r0, [r4, #0]
 800ca58:	2000      	movs	r0, #0
 800ca5a:	e7e8      	b.n	800ca2e <__submore+0x1e>
 800ca5c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ca5e:	0077      	lsls	r7, r6, #1
 800ca60:	463a      	mov	r2, r7
 800ca62:	f000 f92d 	bl	800ccc0 <_realloc_r>
 800ca66:	4605      	mov	r5, r0
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d0de      	beq.n	800ca2a <__submore+0x1a>
 800ca6c:	eb00 0806 	add.w	r8, r0, r6
 800ca70:	4601      	mov	r1, r0
 800ca72:	4632      	mov	r2, r6
 800ca74:	4640      	mov	r0, r8
 800ca76:	f7fe f8dd 	bl	800ac34 <memcpy>
 800ca7a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ca7e:	f8c4 8000 	str.w	r8, [r4]
 800ca82:	e7e9      	b.n	800ca58 <__submore+0x48>

0800ca84 <_ungetc_r>:
 800ca84:	b570      	push	{r4, r5, r6, lr}
 800ca86:	4614      	mov	r4, r2
 800ca88:	1c4a      	adds	r2, r1, #1
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	460d      	mov	r5, r1
 800ca8e:	d103      	bne.n	800ca98 <_ungetc_r+0x14>
 800ca90:	f04f 35ff 	mov.w	r5, #4294967295
 800ca94:	4628      	mov	r0, r5
 800ca96:	bd70      	pop	{r4, r5, r6, pc}
 800ca98:	b118      	cbz	r0, 800caa2 <_ungetc_r+0x1e>
 800ca9a:	6983      	ldr	r3, [r0, #24]
 800ca9c:	b90b      	cbnz	r3, 800caa2 <_ungetc_r+0x1e>
 800ca9e:	f7fd fc05 	bl	800a2ac <__sinit>
 800caa2:	4b41      	ldr	r3, [pc, #260]	; (800cba8 <_ungetc_r+0x124>)
 800caa4:	429c      	cmp	r4, r3
 800caa6:	d11d      	bne.n	800cae4 <_ungetc_r+0x60>
 800caa8:	6874      	ldr	r4, [r6, #4]
 800caaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800caac:	07db      	lsls	r3, r3, #31
 800caae:	d405      	bmi.n	800cabc <_ungetc_r+0x38>
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	0598      	lsls	r0, r3, #22
 800cab4:	d402      	bmi.n	800cabc <_ungetc_r+0x38>
 800cab6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cab8:	f7fe f827 	bl	800ab0a <__retarget_lock_acquire_recursive>
 800cabc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cac0:	f023 0320 	bic.w	r3, r3, #32
 800cac4:	0759      	lsls	r1, r3, #29
 800cac6:	81a3      	strh	r3, [r4, #12]
 800cac8:	b29a      	uxth	r2, r3
 800caca:	d42d      	bmi.n	800cb28 <_ungetc_r+0xa4>
 800cacc:	06d3      	lsls	r3, r2, #27
 800cace:	d413      	bmi.n	800caf8 <_ungetc_r+0x74>
 800cad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cad2:	07dd      	lsls	r5, r3, #31
 800cad4:	d4dc      	bmi.n	800ca90 <_ungetc_r+0xc>
 800cad6:	f412 7f00 	tst.w	r2, #512	; 0x200
 800cada:	d1d9      	bne.n	800ca90 <_ungetc_r+0xc>
 800cadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cade:	f7fe f815 	bl	800ab0c <__retarget_lock_release_recursive>
 800cae2:	e7d5      	b.n	800ca90 <_ungetc_r+0xc>
 800cae4:	4b31      	ldr	r3, [pc, #196]	; (800cbac <_ungetc_r+0x128>)
 800cae6:	429c      	cmp	r4, r3
 800cae8:	d101      	bne.n	800caee <_ungetc_r+0x6a>
 800caea:	68b4      	ldr	r4, [r6, #8]
 800caec:	e7dd      	b.n	800caaa <_ungetc_r+0x26>
 800caee:	4b30      	ldr	r3, [pc, #192]	; (800cbb0 <_ungetc_r+0x12c>)
 800caf0:	429c      	cmp	r4, r3
 800caf2:	bf08      	it	eq
 800caf4:	68f4      	ldreq	r4, [r6, #12]
 800caf6:	e7d8      	b.n	800caaa <_ungetc_r+0x26>
 800caf8:	0710      	lsls	r0, r2, #28
 800cafa:	d511      	bpl.n	800cb20 <_ungetc_r+0x9c>
 800cafc:	4621      	mov	r1, r4
 800cafe:	4630      	mov	r0, r6
 800cb00:	f7fd fb2e 	bl	800a160 <_fflush_r>
 800cb04:	b130      	cbz	r0, 800cb14 <_ungetc_r+0x90>
 800cb06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb08:	07d9      	lsls	r1, r3, #31
 800cb0a:	d4c1      	bmi.n	800ca90 <_ungetc_r+0xc>
 800cb0c:	89a3      	ldrh	r3, [r4, #12]
 800cb0e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800cb12:	e7e2      	b.n	800cada <_ungetc_r+0x56>
 800cb14:	89a3      	ldrh	r3, [r4, #12]
 800cb16:	60a0      	str	r0, [r4, #8]
 800cb18:	f023 0308 	bic.w	r3, r3, #8
 800cb1c:	81a3      	strh	r3, [r4, #12]
 800cb1e:	61a0      	str	r0, [r4, #24]
 800cb20:	89a3      	ldrh	r3, [r4, #12]
 800cb22:	f043 0304 	orr.w	r3, r3, #4
 800cb26:	81a3      	strh	r3, [r4, #12]
 800cb28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb2a:	6862      	ldr	r2, [r4, #4]
 800cb2c:	b2ed      	uxtb	r5, r5
 800cb2e:	b1d3      	cbz	r3, 800cb66 <_ungetc_r+0xe2>
 800cb30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cb32:	4293      	cmp	r3, r2
 800cb34:	dc05      	bgt.n	800cb42 <_ungetc_r+0xbe>
 800cb36:	4621      	mov	r1, r4
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7ff ff69 	bl	800ca10 <__submore>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d1e1      	bne.n	800cb06 <_ungetc_r+0x82>
 800cb42:	6823      	ldr	r3, [r4, #0]
 800cb44:	1e5a      	subs	r2, r3, #1
 800cb46:	6022      	str	r2, [r4, #0]
 800cb48:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cb4c:	6863      	ldr	r3, [r4, #4]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	6063      	str	r3, [r4, #4]
 800cb52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb54:	07da      	lsls	r2, r3, #31
 800cb56:	d49d      	bmi.n	800ca94 <_ungetc_r+0x10>
 800cb58:	89a3      	ldrh	r3, [r4, #12]
 800cb5a:	059b      	lsls	r3, r3, #22
 800cb5c:	d49a      	bmi.n	800ca94 <_ungetc_r+0x10>
 800cb5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb60:	f7fd ffd4 	bl	800ab0c <__retarget_lock_release_recursive>
 800cb64:	e796      	b.n	800ca94 <_ungetc_r+0x10>
 800cb66:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800cb68:	6920      	ldr	r0, [r4, #16]
 800cb6a:	6823      	ldr	r3, [r4, #0]
 800cb6c:	f001 0101 	and.w	r1, r1, #1
 800cb70:	b160      	cbz	r0, 800cb8c <_ungetc_r+0x108>
 800cb72:	4298      	cmp	r0, r3
 800cb74:	d20a      	bcs.n	800cb8c <_ungetc_r+0x108>
 800cb76:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800cb7a:	42a8      	cmp	r0, r5
 800cb7c:	d106      	bne.n	800cb8c <_ungetc_r+0x108>
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	3201      	adds	r2, #1
 800cb82:	6023      	str	r3, [r4, #0]
 800cb84:	6062      	str	r2, [r4, #4]
 800cb86:	2900      	cmp	r1, #0
 800cb88:	d184      	bne.n	800ca94 <_ungetc_r+0x10>
 800cb8a:	e7e5      	b.n	800cb58 <_ungetc_r+0xd4>
 800cb8c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cb90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb94:	6363      	str	r3, [r4, #52]	; 0x34
 800cb96:	2303      	movs	r3, #3
 800cb98:	63a3      	str	r3, [r4, #56]	; 0x38
 800cb9a:	4623      	mov	r3, r4
 800cb9c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cba0:	6023      	str	r3, [r4, #0]
 800cba2:	2301      	movs	r3, #1
 800cba4:	6063      	str	r3, [r4, #4]
 800cba6:	e7ee      	b.n	800cb86 <_ungetc_r+0x102>
 800cba8:	0800d34c 	.word	0x0800d34c
 800cbac:	0800d36c 	.word	0x0800d36c
 800cbb0:	0800d32c 	.word	0x0800d32c

0800cbb4 <__ascii_wctomb>:
 800cbb4:	b149      	cbz	r1, 800cbca <__ascii_wctomb+0x16>
 800cbb6:	2aff      	cmp	r2, #255	; 0xff
 800cbb8:	bf85      	ittet	hi
 800cbba:	238a      	movhi	r3, #138	; 0x8a
 800cbbc:	6003      	strhi	r3, [r0, #0]
 800cbbe:	700a      	strbls	r2, [r1, #0]
 800cbc0:	f04f 30ff 	movhi.w	r0, #4294967295
 800cbc4:	bf98      	it	ls
 800cbc6:	2001      	movls	r0, #1
 800cbc8:	4770      	bx	lr
 800cbca:	4608      	mov	r0, r1
 800cbcc:	4770      	bx	lr
	...

0800cbd0 <__assert_func>:
 800cbd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbd2:	4614      	mov	r4, r2
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	4b09      	ldr	r3, [pc, #36]	; (800cbfc <__assert_func+0x2c>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4605      	mov	r5, r0
 800cbdc:	68d8      	ldr	r0, [r3, #12]
 800cbde:	b14c      	cbz	r4, 800cbf4 <__assert_func+0x24>
 800cbe0:	4b07      	ldr	r3, [pc, #28]	; (800cc00 <__assert_func+0x30>)
 800cbe2:	9100      	str	r1, [sp, #0]
 800cbe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbe8:	4906      	ldr	r1, [pc, #24]	; (800cc04 <__assert_func+0x34>)
 800cbea:	462b      	mov	r3, r5
 800cbec:	f000 f80e 	bl	800cc0c <fiprintf>
 800cbf0:	f000 f895 	bl	800cd1e <abort>
 800cbf4:	4b04      	ldr	r3, [pc, #16]	; (800cc08 <__assert_func+0x38>)
 800cbf6:	461c      	mov	r4, r3
 800cbf8:	e7f3      	b.n	800cbe2 <__assert_func+0x12>
 800cbfa:	bf00      	nop
 800cbfc:	2000000c 	.word	0x2000000c
 800cc00:	0800d590 	.word	0x0800d590
 800cc04:	0800d59d 	.word	0x0800d59d
 800cc08:	0800d5cb 	.word	0x0800d5cb

0800cc0c <fiprintf>:
 800cc0c:	b40e      	push	{r1, r2, r3}
 800cc0e:	b503      	push	{r0, r1, lr}
 800cc10:	4601      	mov	r1, r0
 800cc12:	ab03      	add	r3, sp, #12
 800cc14:	4805      	ldr	r0, [pc, #20]	; (800cc2c <fiprintf+0x20>)
 800cc16:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc1a:	6800      	ldr	r0, [r0, #0]
 800cc1c:	9301      	str	r3, [sp, #4]
 800cc1e:	f7ff f927 	bl	800be70 <_vfiprintf_r>
 800cc22:	b002      	add	sp, #8
 800cc24:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc28:	b003      	add	sp, #12
 800cc2a:	4770      	bx	lr
 800cc2c:	2000000c 	.word	0x2000000c

0800cc30 <_fstat_r>:
 800cc30:	b538      	push	{r3, r4, r5, lr}
 800cc32:	4d07      	ldr	r5, [pc, #28]	; (800cc50 <_fstat_r+0x20>)
 800cc34:	2300      	movs	r3, #0
 800cc36:	4604      	mov	r4, r0
 800cc38:	4608      	mov	r0, r1
 800cc3a:	4611      	mov	r1, r2
 800cc3c:	602b      	str	r3, [r5, #0]
 800cc3e:	f7f4 ffca 	bl	8001bd6 <_fstat>
 800cc42:	1c43      	adds	r3, r0, #1
 800cc44:	d102      	bne.n	800cc4c <_fstat_r+0x1c>
 800cc46:	682b      	ldr	r3, [r5, #0]
 800cc48:	b103      	cbz	r3, 800cc4c <_fstat_r+0x1c>
 800cc4a:	6023      	str	r3, [r4, #0]
 800cc4c:	bd38      	pop	{r3, r4, r5, pc}
 800cc4e:	bf00      	nop
 800cc50:	20000408 	.word	0x20000408

0800cc54 <_isatty_r>:
 800cc54:	b538      	push	{r3, r4, r5, lr}
 800cc56:	4d06      	ldr	r5, [pc, #24]	; (800cc70 <_isatty_r+0x1c>)
 800cc58:	2300      	movs	r3, #0
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	4608      	mov	r0, r1
 800cc5e:	602b      	str	r3, [r5, #0]
 800cc60:	f7f4 ffc9 	bl	8001bf6 <_isatty>
 800cc64:	1c43      	adds	r3, r0, #1
 800cc66:	d102      	bne.n	800cc6e <_isatty_r+0x1a>
 800cc68:	682b      	ldr	r3, [r5, #0]
 800cc6a:	b103      	cbz	r3, 800cc6e <_isatty_r+0x1a>
 800cc6c:	6023      	str	r3, [r4, #0]
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
 800cc70:	20000408 	.word	0x20000408

0800cc74 <memmove>:
 800cc74:	4288      	cmp	r0, r1
 800cc76:	b510      	push	{r4, lr}
 800cc78:	eb01 0402 	add.w	r4, r1, r2
 800cc7c:	d902      	bls.n	800cc84 <memmove+0x10>
 800cc7e:	4284      	cmp	r4, r0
 800cc80:	4623      	mov	r3, r4
 800cc82:	d807      	bhi.n	800cc94 <memmove+0x20>
 800cc84:	1e43      	subs	r3, r0, #1
 800cc86:	42a1      	cmp	r1, r4
 800cc88:	d008      	beq.n	800cc9c <memmove+0x28>
 800cc8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc92:	e7f8      	b.n	800cc86 <memmove+0x12>
 800cc94:	4402      	add	r2, r0
 800cc96:	4601      	mov	r1, r0
 800cc98:	428a      	cmp	r2, r1
 800cc9a:	d100      	bne.n	800cc9e <memmove+0x2a>
 800cc9c:	bd10      	pop	{r4, pc}
 800cc9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cca6:	e7f7      	b.n	800cc98 <memmove+0x24>

0800cca8 <__malloc_lock>:
 800cca8:	4801      	ldr	r0, [pc, #4]	; (800ccb0 <__malloc_lock+0x8>)
 800ccaa:	f7fd bf2e 	b.w	800ab0a <__retarget_lock_acquire_recursive>
 800ccae:	bf00      	nop
 800ccb0:	200003fc 	.word	0x200003fc

0800ccb4 <__malloc_unlock>:
 800ccb4:	4801      	ldr	r0, [pc, #4]	; (800ccbc <__malloc_unlock+0x8>)
 800ccb6:	f7fd bf29 	b.w	800ab0c <__retarget_lock_release_recursive>
 800ccba:	bf00      	nop
 800ccbc:	200003fc 	.word	0x200003fc

0800ccc0 <_realloc_r>:
 800ccc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc4:	4680      	mov	r8, r0
 800ccc6:	4614      	mov	r4, r2
 800ccc8:	460e      	mov	r6, r1
 800ccca:	b921      	cbnz	r1, 800ccd6 <_realloc_r+0x16>
 800cccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	f7fe bd01 	b.w	800b6d8 <_malloc_r>
 800ccd6:	b92a      	cbnz	r2, 800cce4 <_realloc_r+0x24>
 800ccd8:	f7fe fc92 	bl	800b600 <_free_r>
 800ccdc:	4625      	mov	r5, r4
 800ccde:	4628      	mov	r0, r5
 800cce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cce4:	f000 f822 	bl	800cd2c <_malloc_usable_size_r>
 800cce8:	4284      	cmp	r4, r0
 800ccea:	4607      	mov	r7, r0
 800ccec:	d802      	bhi.n	800ccf4 <_realloc_r+0x34>
 800ccee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccf2:	d812      	bhi.n	800cd1a <_realloc_r+0x5a>
 800ccf4:	4621      	mov	r1, r4
 800ccf6:	4640      	mov	r0, r8
 800ccf8:	f7fe fcee 	bl	800b6d8 <_malloc_r>
 800ccfc:	4605      	mov	r5, r0
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d0ed      	beq.n	800ccde <_realloc_r+0x1e>
 800cd02:	42bc      	cmp	r4, r7
 800cd04:	4622      	mov	r2, r4
 800cd06:	4631      	mov	r1, r6
 800cd08:	bf28      	it	cs
 800cd0a:	463a      	movcs	r2, r7
 800cd0c:	f7fd ff92 	bl	800ac34 <memcpy>
 800cd10:	4631      	mov	r1, r6
 800cd12:	4640      	mov	r0, r8
 800cd14:	f7fe fc74 	bl	800b600 <_free_r>
 800cd18:	e7e1      	b.n	800ccde <_realloc_r+0x1e>
 800cd1a:	4635      	mov	r5, r6
 800cd1c:	e7df      	b.n	800ccde <_realloc_r+0x1e>

0800cd1e <abort>:
 800cd1e:	b508      	push	{r3, lr}
 800cd20:	2006      	movs	r0, #6
 800cd22:	f000 f833 	bl	800cd8c <raise>
 800cd26:	2001      	movs	r0, #1
 800cd28:	f7f4 ff06 	bl	8001b38 <_exit>

0800cd2c <_malloc_usable_size_r>:
 800cd2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd30:	1f18      	subs	r0, r3, #4
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	bfbc      	itt	lt
 800cd36:	580b      	ldrlt	r3, [r1, r0]
 800cd38:	18c0      	addlt	r0, r0, r3
 800cd3a:	4770      	bx	lr

0800cd3c <_raise_r>:
 800cd3c:	291f      	cmp	r1, #31
 800cd3e:	b538      	push	{r3, r4, r5, lr}
 800cd40:	4604      	mov	r4, r0
 800cd42:	460d      	mov	r5, r1
 800cd44:	d904      	bls.n	800cd50 <_raise_r+0x14>
 800cd46:	2316      	movs	r3, #22
 800cd48:	6003      	str	r3, [r0, #0]
 800cd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4e:	bd38      	pop	{r3, r4, r5, pc}
 800cd50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd52:	b112      	cbz	r2, 800cd5a <_raise_r+0x1e>
 800cd54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd58:	b94b      	cbnz	r3, 800cd6e <_raise_r+0x32>
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f000 f830 	bl	800cdc0 <_getpid_r>
 800cd60:	462a      	mov	r2, r5
 800cd62:	4601      	mov	r1, r0
 800cd64:	4620      	mov	r0, r4
 800cd66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd6a:	f000 b817 	b.w	800cd9c <_kill_r>
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d00a      	beq.n	800cd88 <_raise_r+0x4c>
 800cd72:	1c59      	adds	r1, r3, #1
 800cd74:	d103      	bne.n	800cd7e <_raise_r+0x42>
 800cd76:	2316      	movs	r3, #22
 800cd78:	6003      	str	r3, [r0, #0]
 800cd7a:	2001      	movs	r0, #1
 800cd7c:	e7e7      	b.n	800cd4e <_raise_r+0x12>
 800cd7e:	2400      	movs	r4, #0
 800cd80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd84:	4628      	mov	r0, r5
 800cd86:	4798      	blx	r3
 800cd88:	2000      	movs	r0, #0
 800cd8a:	e7e0      	b.n	800cd4e <_raise_r+0x12>

0800cd8c <raise>:
 800cd8c:	4b02      	ldr	r3, [pc, #8]	; (800cd98 <raise+0xc>)
 800cd8e:	4601      	mov	r1, r0
 800cd90:	6818      	ldr	r0, [r3, #0]
 800cd92:	f7ff bfd3 	b.w	800cd3c <_raise_r>
 800cd96:	bf00      	nop
 800cd98:	2000000c 	.word	0x2000000c

0800cd9c <_kill_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4d07      	ldr	r5, [pc, #28]	; (800cdbc <_kill_r+0x20>)
 800cda0:	2300      	movs	r3, #0
 800cda2:	4604      	mov	r4, r0
 800cda4:	4608      	mov	r0, r1
 800cda6:	4611      	mov	r1, r2
 800cda8:	602b      	str	r3, [r5, #0]
 800cdaa:	f7f4 feb5 	bl	8001b18 <_kill>
 800cdae:	1c43      	adds	r3, r0, #1
 800cdb0:	d102      	bne.n	800cdb8 <_kill_r+0x1c>
 800cdb2:	682b      	ldr	r3, [r5, #0]
 800cdb4:	b103      	cbz	r3, 800cdb8 <_kill_r+0x1c>
 800cdb6:	6023      	str	r3, [r4, #0]
 800cdb8:	bd38      	pop	{r3, r4, r5, pc}
 800cdba:	bf00      	nop
 800cdbc:	20000408 	.word	0x20000408

0800cdc0 <_getpid_r>:
 800cdc0:	f7f4 bea2 	b.w	8001b08 <_getpid>

0800cdc4 <_init>:
 800cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc6:	bf00      	nop
 800cdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdca:	bc08      	pop	{r3}
 800cdcc:	469e      	mov	lr, r3
 800cdce:	4770      	bx	lr

0800cdd0 <_fini>:
 800cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd2:	bf00      	nop
 800cdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd6:	bc08      	pop	{r3}
 800cdd8:	469e      	mov	lr, r3
 800cdda:	4770      	bx	lr
