
MyFirstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000884  0800db98  0800db98  0001db98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e41c  0800e41c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e41c  0800e41c  0001e41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e424  0800e424  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e424  0800e424  0001e424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e428  0800e428  0001e428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e42c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001e0  0800e60c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800e60c  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ce3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246a  00000000  00000000  00030ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00033360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00034170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fcf  00000000  00000000  00034eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f64  00000000  00000000  00057e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf76d  00000000  00000000  00069de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139550  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005510  00000000  00000000  001395a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800db7c 	.word	0x0800db7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800db7c 	.word	0x0800db7c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_I2C1_Init>:
static const uint8_t HIGH_TH_REG = 0x3;

/* ----------------------------------FUNCTIONS--------------------------------*/

extern void MX_I2C1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2C1_Init+0x50>)
 800103e:	4a13      	ldr	r2, [pc, #76]	; (800108c <MX_I2C1_Init+0x54>)
 8001040:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_I2C1_Init+0x50>)
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <MX_I2C1_Init+0x58>)
 8001046:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_I2C1_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_I2C1_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_I2C1_Init+0x50>)
 8001056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800105a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <MX_I2C1_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_I2C1_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <MX_I2C1_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_I2C1_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_I2C1_Init+0x50>)
 8001076:	f001 fd79 	bl	8002b6c <HAL_I2C_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001080:	f000 fae6 	bl	8001650 <Error_Handler>
  }
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200001fc 	.word	0x200001fc
 800108c:	40005400 	.word	0x40005400
 8001090:	000186a0 	.word	0x000186a0

08001094 <I2C_read_temp_sensor>:

extern int16_t I2C_read_temp_sensor()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af02      	add	r7, sp, #8

	  *buf=0;
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <I2C_read_temp_sensor+0xc4>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]

	  if (HAL_I2C_Master_Transmit(&hi2c1, SENS_ADDR, buf, 1, HAL_MAX_DELAY) != HAL_OK)
 80010a0:	2390      	movs	r3, #144	; 0x90
 80010a2:	b299      	uxth	r1, r3
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	4a2a      	ldr	r2, [pc, #168]	; (8001158 <I2C_read_temp_sensor+0xc4>)
 80010ae:	482b      	ldr	r0, [pc, #172]	; (800115c <I2C_read_temp_sensor+0xc8>)
 80010b0:	f001 fea0 	bl	8002df4 <HAL_I2C_Master_Transmit>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <I2C_read_temp_sensor+0x30>
	  {
		  printf("\r\nNo sensor connected!\r\n");
 80010ba:	4829      	ldr	r0, [pc, #164]	; (8001160 <I2C_read_temp_sensor+0xcc>)
 80010bc:	f007 ff08 	bl	8008ed0 <puts>
		  Error_Handler();
 80010c0:	f000 fac6 	bl	8001650 <Error_Handler>
	  }

	  if (HAL_I2C_Master_Receive(&hi2c1, SENS_ADDR, buf, 2, HAL_MAX_DELAY) != HAL_OK)
 80010c4:	2390      	movs	r3, #144	; 0x90
 80010c6:	b299      	uxth	r1, r3
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2302      	movs	r3, #2
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <I2C_read_temp_sensor+0xc4>)
 80010d2:	4822      	ldr	r0, [pc, #136]	; (800115c <I2C_read_temp_sensor+0xc8>)
 80010d4:	f001 ff8c 	bl	8002ff0 <HAL_I2C_Master_Receive>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <I2C_read_temp_sensor+0x54>
	  {
		  printf("\r\nNo data from sensor received!\r\n");
 80010de:	4821      	ldr	r0, [pc, #132]	; (8001164 <I2C_read_temp_sensor+0xd0>)
 80010e0:	f007 fef6 	bl	8008ed0 <puts>
		  Error_Handler();
 80010e4:	f000 fab4 	bl	8001650 <Error_Handler>
	  }

	  val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <I2C_read_temp_sensor+0xc4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <I2C_read_temp_sensor+0xc4>)
 80010f2:	785b      	ldrb	r3, [r3, #1]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <I2C_read_temp_sensor+0xd4>)
 8001100:	801a      	strh	r2, [r3, #0]

	  if ( val > 0x7FF ) {
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <I2C_read_temp_sensor+0xd4>)
 8001104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800110c:	db09      	blt.n	8001122 <I2C_read_temp_sensor+0x8e>
        val |= 0xF000;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <I2C_read_temp_sensor+0xd4>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001118:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800111c:	b21a      	sxth	r2, r3
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <I2C_read_temp_sensor+0xd4>)
 8001120:	801a      	strh	r2, [r3, #0]
      }

	  val=val*0.0625;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <I2C_read_temp_sensor+0xd4>)
 8001124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fa1b 	bl	8000564 <__aeabi_i2d>
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <I2C_read_temp_sensor+0xd8>)
 8001134:	f7ff fa80 	bl	8000638 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fd2a 	bl	8000b98 <__aeabi_d2iz>
 8001144:	4603      	mov	r3, r0
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <I2C_read_temp_sensor+0xd4>)
 800114a:	801a      	strh	r2, [r3, #0]

	  return val;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <I2C_read_temp_sensor+0xd4>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200002b0 	.word	0x200002b0
 800115c:	200001fc 	.word	0x200001fc
 8001160:	0800db98 	.word	0x0800db98
 8001164:	0800dbb0 	.word	0x0800dbb0
 8001168:	200002bc 	.word	0x200002bc
 800116c:	3fb00000 	.word	0x3fb00000

08001170 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1,0xFFFF);
 8001178:	1d39      	adds	r1, r7, #4
 800117a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117e:	2201      	movs	r2, #1
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <__io_putchar+0x20>)
 8001182:	f005 ff0b 	bl	8006f9c <HAL_UART_Transmit>

  return ch;
 8001186:	687b      	ldr	r3, [r7, #4]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200003c0 	.word	0x200003c0

08001194 <__io_getchar>:


GETCHAR_PROTOTYPE
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]

  __HAL_UART_CLEAR_OREFLAG(&huart2);
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <__io_getchar+0x38>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <__io_getchar+0x38>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]

  HAL_UART_Receive (&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80011b4:	1df9      	adds	r1, r7, #7
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2201      	movs	r2, #1
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <__io_getchar+0x38>)
 80011be:	f005 ff7f 	bl	80070c0 <HAL_UART_Receive>
//  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);

  return ch;
 80011c2:	79fb      	ldrb	r3, [r7, #7]

}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200003c0 	.word	0x200003c0

080011d0 <main>:

/* ----------------------------------MAIN ROUTINE------------------------*/

int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08e      	sub	sp, #56	; 0x38
 80011d4:	af02      	add	r7, sp, #8

  char input[20]="\0"; // cleaning the CLI input string
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	f107 0318 	add.w	r3, r7, #24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
  char cmd[5]="\0";    // and commands
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	2300      	movs	r3, #0
 80011ee:	743b      	strb	r3, [r7, #16]
  unsigned int addr;
  unsigned int val;
  int16_t temp;
  int i=0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  setvbuf(stdin, NULL, _IONBF, 0);
 80011f4:	4b58      	ldr	r3, [pc, #352]	; (8001358 <main+0x188>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6858      	ldr	r0, [r3, #4]
 80011fa:	2300      	movs	r3, #0
 80011fc:	2202      	movs	r2, #2
 80011fe:	2100      	movs	r1, #0
 8001200:	f007 fe86 	bl	8008f10 <setvbuf>

  /* Initialize all configured peripherals */

  HAL_Init();
 8001204:	f000 fe10 	bl	8001e28 <HAL_Init>
  SystemClock_Config();
 8001208:	f000 f8c4 	bl	8001394 <SystemClock_Config>
  MX_GPIO_Init();
 800120c:	f000 f9ea 	bl	80015e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001210:	f000 f9c0 	bl	8001594 <MX_DMA_Init>
  MX_I2C1_Init();
 8001214:	f7ff ff10 	bl	8001038 <MX_I2C1_Init>
  MX_I2S1_Init();
 8001218:	f000 f92c 	bl	8001474 <MX_I2S1_Init>
  MX_SPI2_Init();
 800121c:	f000 f958 	bl	80014d0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001220:	f000 f98e 	bl	8001540 <MX_USART2_UART_Init>

  write_register (0x4002040c,0x5100);
 8001224:	f44f 41a2 	mov.w	r1, #20736	; 0x5100
 8001228:	484c      	ldr	r0, [pc, #304]	; (800135c <main+0x18c>)
 800122a:	f000 fa2f 	bl	800168c <write_register>

  /* Print greeting notification  */

  help_menu();
 800122e:	f000 fa3b 	bl	80016a8 <help_menu>

 // main CLI loop
  while (1)
  {

	  	 printf("\rST32F446>>");
 8001232:	484b      	ldr	r0, [pc, #300]	; (8001360 <main+0x190>)
 8001234:	f007 fdc6 	bl	8008dc4 <iprintf>

	  	 scanf("%[^\r]", input);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4849      	ldr	r0, [pc, #292]	; (8001364 <main+0x194>)
 8001240:	f007 fe4e 	bl	8008ee0 <iscanf>

		 sscanf(input,"%s %x %x",cmd,&addr,&val);
 8001244:	f107 0108 	add.w	r1, r7, #8
 8001248:	f107 020c 	add.w	r2, r7, #12
 800124c:	f107 0014 	add.w	r0, r7, #20
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	460b      	mov	r3, r1
 8001256:	4944      	ldr	r1, [pc, #272]	; (8001368 <main+0x198>)
 8001258:	f007 ff46 	bl	80090e8 <siscanf>


	  	 if (strstr(cmd,"rd")) {         // reading from a register
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4942      	ldr	r1, [pc, #264]	; (800136c <main+0x19c>)
 8001262:	4618      	mov	r0, r3
 8001264:	f007 ffb1 	bl	80091ca <strstr>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <main+0xa8>
	  		read_register(addr);
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f9f9 	bl	8001668 <read_register>
 8001276:	e060      	b.n	800133a <main+0x16a>

	  	 }

	  	 else if (strstr(cmd,"dump")) {    // writing to a register
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	493c      	ldr	r1, [pc, #240]	; (8001370 <main+0x1a0>)
 800127e:	4618      	mov	r0, r3
 8001280:	f007 ffa3 	bl	80091ca <strstr>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d011      	beq.n	80012ae <main+0xde>

	  		 for (i=0; i<val; i++) {
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800128e:	e009      	b.n	80012a4 <main+0xd4>
	  			read_register(addr);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f9e8 	bl	8001668 <read_register>
	  			addr=addr+4;
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	3304      	adds	r3, #4
 800129c:	60bb      	str	r3, [r7, #8]
	  		 for (i=0; i<val; i++) {
 800129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a0:	3301      	adds	r3, #1
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d3f1      	bcc.n	8001290 <main+0xc0>
 80012ac:	e045      	b.n	800133a <main+0x16a>
	  		 }

	  	 }

	  	 else if (strstr(cmd,"wr")) {    // registers' dump
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4930      	ldr	r1, [pc, #192]	; (8001374 <main+0x1a4>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f007 ff88 	bl	80091ca <strstr>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d009      	beq.n	80012d4 <main+0x104>
	  		write_register(addr,val);
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f9e0 	bl	800168c <write_register>
	  		printf("\r\n");
 80012cc:	482a      	ldr	r0, [pc, #168]	; (8001378 <main+0x1a8>)
 80012ce:	f007 fdff 	bl	8008ed0 <puts>
 80012d2:	e032      	b.n	800133a <main+0x16a>

	  	 }

	  	 else if (strstr(cmd,"quit")) {    // writing to a register
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4928      	ldr	r1, [pc, #160]	; (800137c <main+0x1ac>)
 80012da:	4618      	mov	r0, r3
 80012dc:	f007 ff75 	bl	80091ca <strstr>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <main+0x124>
	  		printf("\r\n<<<<<<<Goodbye from ST32F4466RTE MCU UART terminal>>>>>\r\n");
 80012e6:	4826      	ldr	r0, [pc, #152]	; (8001380 <main+0x1b0>)
 80012e8:	f007 fdf2 	bl	8008ed0 <puts>
	  		printf("\r\n");
 80012ec:	4822      	ldr	r0, [pc, #136]	; (8001378 <main+0x1a8>)
 80012ee:	f007 fdef 	bl	8008ed0 <puts>
	  		break;
 80012f2:	e02b      	b.n	800134c <main+0x17c>
	  	 }

	  	 else if (strstr(cmd,"temp")) {     // help menu of commands
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4922      	ldr	r1, [pc, #136]	; (8001384 <main+0x1b4>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f007 ff65 	bl	80091ca <strstr>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00a      	beq.n	800131c <main+0x14c>

	  		temp = I2C_read_temp_sensor();
 8001306:	f7ff fec5 	bl	8001094 <I2C_read_temp_sensor>
 800130a:	4603      	mov	r3, r0
 800130c:	857b      	strh	r3, [r7, #42]	; 0x2a
	  		printf("\r\nTemperature is: %d\r\n",temp);
 800130e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001312:	4619      	mov	r1, r3
 8001314:	481c      	ldr	r0, [pc, #112]	; (8001388 <main+0x1b8>)
 8001316:	f007 fd55 	bl	8008dc4 <iprintf>
 800131a:	e00e      	b.n	800133a <main+0x16a>

	  	 }

	  	 else if (strstr(cmd,"help")) {     // help menu of commands
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	491a      	ldr	r1, [pc, #104]	; (800138c <main+0x1bc>)
 8001322:	4618      	mov	r0, r3
 8001324:	f007 ff51 	bl	80091ca <strstr>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <main+0x164>

	  		help_menu();
 800132e:	f000 f9bb 	bl	80016a8 <help_menu>
 8001332:	e002      	b.n	800133a <main+0x16a>

	  	 }

	  	 else {

	  		 printf("\runknown command, please type again...\r\n");
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <main+0x1c0>)
 8001336:	f007 fdcb 	bl	8008ed0 <puts>


	  	 	  }

	  	 setvbuf(stdin, NULL, _IONBF, 0);
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <main+0x188>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6858      	ldr	r0, [r3, #4]
 8001340:	2300      	movs	r3, #0
 8001342:	2202      	movs	r2, #2
 8001344:	2100      	movs	r1, #0
 8001346:	f007 fde3 	bl	8008f10 <setvbuf>
	  	 printf("\rST32F446>>");
 800134a:	e772      	b.n	8001232 <main+0x62>
 800134c:	2300      	movs	r3, #0


  	  }  // end of while loop

} // end of main code
 800134e:	4618      	mov	r0, r3
 8001350:	3730      	adds	r7, #48	; 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000000c 	.word	0x2000000c
 800135c:	4002040c 	.word	0x4002040c
 8001360:	0800dbd4 	.word	0x0800dbd4
 8001364:	0800dbe0 	.word	0x0800dbe0
 8001368:	0800dbe8 	.word	0x0800dbe8
 800136c:	0800dbf4 	.word	0x0800dbf4
 8001370:	0800dbf8 	.word	0x0800dbf8
 8001374:	0800dc00 	.word	0x0800dc00
 8001378:	0800dc04 	.word	0x0800dc04
 800137c:	0800dc08 	.word	0x0800dc08
 8001380:	0800dc10 	.word	0x0800dc10
 8001384:	0800dc4c 	.word	0x0800dc4c
 8001388:	0800dc54 	.word	0x0800dc54
 800138c:	0800dc6c 	.word	0x0800dc6c
 8001390:	0800dc74 	.word	0x0800dc74

08001394 <SystemClock_Config>:
/* =========================================================================================
 * */
/* ----------------------------------AUX functions------------------------*/

void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b094      	sub	sp, #80	; 0x50
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	2234      	movs	r2, #52	; 0x34
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f006 fe8c 	bl	80080c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 80013b8:	4b2c      	ldr	r3, [pc, #176]	; (800146c <SystemClock_Config+0xd8>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c0:	4a2a      	ldr	r2, [pc, #168]	; (800146c <SystemClock_Config+0xd8>)
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <SystemClock_Config+0xd8>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <SystemClock_Config+0xd8>)
 80013ce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013d2:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <SystemClock_Config+0xd8>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	4a23      	ldr	r2, [pc, #140]	; (800146c <SystemClock_Config+0xd8>)
 80013de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e2:	6413      	str	r3, [r2, #64]	; 0x40
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <SystemClock_Config+0xd8>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <SystemClock_Config+0xdc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013fc:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <SystemClock_Config+0xdc>)
 80013fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <SystemClock_Config+0xdc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	683b      	ldr	r3, [r7, #0]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001410:	2302      	movs	r3, #2
 8001412:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001418:	2310      	movs	r3, #16
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001420:	2300      	movs	r3, #0
 8001422:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4618      	mov	r0, r3
 800142a:	f005 fa43 	bl	80068b4 <HAL_RCC_OscConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001434:	f000 f90c 	bl	8001650 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001438:	230f      	movs	r3, #15
 800143a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f004 f9f8 	bl	8005848 <HAL_RCC_ClockConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800145e:	f000 f8f7 	bl	8001650 <Error_Handler>
  }
}
 8001462:	bf00      	nop
 8001464:	3750      	adds	r7, #80	; 0x50
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40007000 	.word	0x40007000

08001474 <MX_I2S1_Init>:

static void MX_I2S1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  hi2s1.Instance = SPI1;
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_I2S1_Init+0x54>)
 800147a:	4a14      	ldr	r2, [pc, #80]	; (80014cc <MX_I2S1_Init+0x58>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_I2S1_Init+0x54>)
 8001480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001484:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_I2S1_Init+0x54>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_I2S1_Init+0x54>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <MX_I2S1_Init+0x54>)
 8001494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001498:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_I2S1_Init+0x54>)
 800149c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80014a0:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_I2S1_Init+0x54>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MX_I2S1_Init+0x54>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_I2S1_Init+0x54>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_I2S1_Init+0x54>)
 80014b6:	f003 ffc9 	bl	800544c <HAL_I2S_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 80014c0:	f000 f8c6 	bl	8001650 <Error_Handler>
  }

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200002c0 	.word	0x200002c0
 80014cc:	40013000 	.word	0x40013000

080014d0 <MX_SPI2_Init>:


static void MX_SPI2_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_SPI2_Init+0x68>)
 80014d6:	4a19      	ldr	r2, [pc, #100]	; (800153c <MX_SPI2_Init+0x6c>)
 80014d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_SPI2_Init+0x68>)
 80014dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_SPI2_Init+0x68>)
 80014e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014e8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <MX_SPI2_Init+0x68>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_SPI2_Init+0x68>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <MX_SPI2_Init+0x68>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_SPI2_Init+0x68>)
 80014fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001502:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_SPI2_Init+0x68>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_SPI2_Init+0x68>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_SPI2_Init+0x68>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_SPI2_Init+0x68>)
 8001518:	2200      	movs	r2, #0
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_SPI2_Init+0x68>)
 800151e:	220a      	movs	r2, #10
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_SPI2_Init+0x68>)
 8001524:	f005 fc64 	bl	8006df0 <HAL_SPI_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800152e:	f000 f88f 	bl	8001650 <Error_Handler>
  }

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000308 	.word	0x20000308
 800153c:	40003800 	.word	0x40003800

08001540 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_USART2_UART_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_USART2_UART_Init+0x4c>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART2_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART2_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001578:	f005 fcc3 	bl	8006f02 <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001582:	f000 f865 	bl	8001650 <Error_Handler>
  }

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200003c0 	.word	0x200003c0
 8001590:	40004400 	.word	0x40004400

08001594 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_DMA_Init+0x4c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <MX_DMA_Init+0x4c>)
 80015a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <MX_DMA_Init+0x4c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	200b      	movs	r0, #11
 80015bc:	f000 fd81 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015c0:	200b      	movs	r0, #11
 80015c2:	f000 fd9a 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	200e      	movs	r0, #14
 80015cc:	f000 fd79 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80015d0:	200e      	movs	r0, #14
 80015d2:	f000 fd92 	bl	80020fa <HAL_NVIC_EnableIRQ>

}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_GPIO_Init+0x68>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a16      	ldr	r2, [pc, #88]	; (800164c <MX_GPIO_Init+0x68>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_GPIO_Init+0x68>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_GPIO_Init+0x68>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a0f      	ldr	r2, [pc, #60]	; (800164c <MX_GPIO_Init+0x68>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <MX_GPIO_Init+0x68>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_GPIO_Init+0x68>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <MX_GPIO_Init+0x68>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_GPIO_Init+0x68>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <Error_Handler>:


void Error_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop

  __disable_irq();
  	 printf ("An error occured! Will break now...");
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <Error_Handler+0x14>)
 800165a:	f007 fbb3 	bl	8008dc4 <iprintf>

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	0800dc9c 	.word	0x0800dc9c

08001668 <read_register>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void read_register(unsigned int addr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	 unsigned int  data;
	 // reading a register command

	 data = READ_REG(*((unsigned int *)addr));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]
	 printf("\r\nRegister 0x%x, value : 0x%x \r\n",addr,data);
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4803      	ldr	r0, [pc, #12]	; (8001688 <read_register+0x20>)
 800167c:	f007 fba2 	bl	8008dc4 <iprintf>

}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	0800dcc0 	.word	0x0800dcc0

0800168c <write_register>:

void write_register(unsigned int addr, unsigned int val)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]

	*((unsigned int *)addr)=((unsigned int *)val);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	601a      	str	r2, [r3, #0]


}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <help_menu>:

void help_menu(void)

{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	  printf("\r<<<<<<<Hello from ST32F4466RTE MCU UART terminal>>>>>\r\n");
 80016ac:	4811      	ldr	r0, [pc, #68]	; (80016f4 <help_menu+0x4c>)
 80016ae:	f007 fc0f 	bl	8008ed0 <puts>
	  printf("\r\n");
 80016b2:	4811      	ldr	r0, [pc, #68]	; (80016f8 <help_menu+0x50>)
 80016b4:	f007 fc0c 	bl	8008ed0 <puts>
	  printf("\r<<<<<<CLI supported commands >>>>>\r\n");
 80016b8:	4810      	ldr	r0, [pc, #64]	; (80016fc <help_menu+0x54>)
 80016ba:	f007 fc09 	bl	8008ed0 <puts>
	  printf("\r===============================================================================================\r\n");
 80016be:	4810      	ldr	r0, [pc, #64]	; (8001700 <help_menu+0x58>)
 80016c0:	f007 fc06 	bl	8008ed0 <puts>
	  printf("\rhelp                  : list of supported commands\r\n");
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <help_menu+0x5c>)
 80016c6:	f007 fc03 	bl	8008ed0 <puts>
	  printf("rd <xxxx>             : read a register address <xxxx>\r\n");
 80016ca:	480f      	ldr	r0, [pc, #60]	; (8001708 <help_menu+0x60>)
 80016cc:	f007 fc00 	bl	8008ed0 <puts>
	  printf("dump <xxxx> <yyyy>    : register dump from address <xxxx> # of addresses <yyyy> (32 bit each)\r\n");
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <help_menu+0x64>)
 80016d2:	f007 fbfd 	bl	8008ed0 <puts>
	  printf("wr <xxxx> <yyyy>      : write to a register <xxxx> value <yyyy>\r\n");
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <help_menu+0x68>)
 80016d8:	f007 fbfa 	bl	8008ed0 <puts>
	  printf("temp                  : read temperature sensor value\r\n");
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <help_menu+0x6c>)
 80016de:	f007 fbf7 	bl	8008ed0 <puts>
	  printf("quit                  : Exit Command Line terminal \r\n");
 80016e2:	480d      	ldr	r0, [pc, #52]	; (8001718 <help_menu+0x70>)
 80016e4:	f007 fbf4 	bl	8008ed0 <puts>
	  printf("\r===============================================================================================\r\n");
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <help_menu+0x58>)
 80016ea:	f007 fbf1 	bl	8008ed0 <puts>
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	0800dce4 	.word	0x0800dce4
 80016f8:	0800dc04 	.word	0x0800dc04
 80016fc:	0800dd1c 	.word	0x0800dd1c
 8001700:	0800dd44 	.word	0x0800dd44
 8001704:	0800dda8 	.word	0x0800dda8
 8001708:	0800dde0 	.word	0x0800dde0
 800170c:	0800de18 	.word	0x0800de18
 8001710:	0800de78 	.word	0x0800de78
 8001714:	0800debc 	.word	0x0800debc
 8001718:	0800def4 	.word	0x0800def4

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_MspInit+0x4c>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <HAL_MspInit+0x4c>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_MspInit+0x4c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_MspInit+0x4c>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_MspInit+0x4c>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_MspInit+0x4c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800

0800176c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a38      	ldr	r2, [pc, #224]	; (800186c <HAL_I2C_MspInit+0x100>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d169      	bne.n	8001862 <HAL_I2C_MspInit+0xf6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b37      	ldr	r3, [pc, #220]	; (8001870 <HAL_I2C_MspInit+0x104>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a36      	ldr	r2, [pc, #216]	; (8001870 <HAL_I2C_MspInit+0x104>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_I2C_MspInit+0x104>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017aa:	23c0      	movs	r3, #192	; 0xc0
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ae:	2312      	movs	r3, #18
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ba:	2304      	movs	r3, #4
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	482b      	ldr	r0, [pc, #172]	; (8001874 <HAL_I2C_MspInit+0x108>)
 80017c6:	f001 f83d 	bl	8002844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b28      	ldr	r3, [pc, #160]	; (8001870 <HAL_I2C_MspInit+0x104>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a27      	ldr	r2, [pc, #156]	; (8001870 <HAL_I2C_MspInit+0x104>)
 80017d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b25      	ldr	r3, [pc, #148]	; (8001870 <HAL_I2C_MspInit+0x104>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 80017e8:	4a24      	ldr	r2, [pc, #144]	; (800187c <HAL_I2C_MspInit+0x110>)
 80017ea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 80017ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 8001802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001806:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 800180a:	2200      	movs	r2, #0
 800180c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001826:	4814      	ldr	r0, [pc, #80]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 8001828:	f000 fc82 	bl	8002130 <HAL_DMA_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001832:	f7ff ff0d 	bl	8001650 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 800183a:	639a      	str	r2, [r3, #56]	; 0x38
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_I2C_MspInit+0x10c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	201f      	movs	r0, #31
 8001848:	f000 fc3b 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800184c:	201f      	movs	r0, #31
 800184e:	f000 fc54 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2020      	movs	r0, #32
 8001858:	f000 fc33 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800185c:	2020      	movs	r0, #32
 800185e:	f000 fc4c 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	; 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40005400 	.word	0x40005400
 8001870:	40023800 	.word	0x40023800
 8001874:	40020400 	.word	0x40020400
 8001878:	20000250 	.word	0x20000250
 800187c:	40026010 	.word	0x40026010

08001880 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0a2      	sub	sp, #136	; 0x88
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001898:	f107 0318 	add.w	r3, r7, #24
 800189c:	225c      	movs	r2, #92	; 0x5c
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f006 fc0d 	bl	80080c0 <memset>
  if(hi2s->Instance==SPI1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a37      	ldr	r2, [pc, #220]	; (8001988 <HAL_I2S_MspInit+0x108>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d167      	bne.n	8001980 <HAL_I2S_MspInit+0x100>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80018b4:	23c0      	movs	r3, #192	; 0xc0
 80018b6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 80018bc:	2310      	movs	r3, #16
 80018be:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80018c0:	2302      	movs	r3, #2
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 80018cc:	2300      	movs	r3, #0
 80018ce:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018d0:	f107 0318 	add.w	r3, r7, #24
 80018d4:	4618      	mov	r0, r3
 80018d6:	f004 f8d1 	bl	8005a7c <HAL_RCCEx_PeriphCLKConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 80018e0:	f7ff feb6 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <HAL_I2S_MspInit+0x10c>)
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	4a27      	ldr	r2, [pc, #156]	; (800198c <HAL_I2S_MspInit+0x10c>)
 80018ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f2:	6453      	str	r3, [r2, #68]	; 0x44
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <HAL_I2S_MspInit+0x10c>)
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_I2S_MspInit+0x10c>)
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	4a20      	ldr	r2, [pc, #128]	; (800198c <HAL_I2S_MspInit+0x10c>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6313      	str	r3, [r2, #48]	; 0x30
 8001910:	4b1e      	ldr	r3, [pc, #120]	; (800198c <HAL_I2S_MspInit+0x10c>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_I2S_MspInit+0x10c>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <HAL_I2S_MspInit+0x10c>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6313      	str	r3, [r2, #48]	; 0x30
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_I2S_MspInit+0x10c>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001938:	23b0      	movs	r3, #176	; 0xb0
 800193a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800194a:	2305      	movs	r3, #5
 800194c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001954:	4619      	mov	r1, r3
 8001956:	480e      	ldr	r0, [pc, #56]	; (8001990 <HAL_I2S_MspInit+0x110>)
 8001958:	f000 ff74 	bl	8002844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800195c:	2310      	movs	r3, #16
 800195e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800196e:	2305      	movs	r3, #5
 8001970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001974:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001978:	4619      	mov	r1, r3
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <HAL_I2S_MspInit+0x114>)
 800197c:	f000 ff62 	bl	8002844 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001980:	bf00      	nop
 8001982:	3788      	adds	r7, #136	; 0x88
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40013000 	.word	0x40013000
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000
 8001994:	40020800 	.word	0x40020800

08001998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a3f      	ldr	r2, [pc, #252]	; (8001ab4 <HAL_SPI_MspInit+0x11c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d177      	bne.n	8001aaa <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b3e      	ldr	r3, [pc, #248]	; (8001ab8 <HAL_SPI_MspInit+0x120>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a3d      	ldr	r2, [pc, #244]	; (8001ab8 <HAL_SPI_MspInit+0x120>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_SPI_MspInit+0x120>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <HAL_SPI_MspInit+0x120>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a36      	ldr	r2, [pc, #216]	; (8001ab8 <HAL_SPI_MspInit+0x120>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <HAL_SPI_MspInit+0x120>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_SPI_MspInit+0x120>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a2f      	ldr	r2, [pc, #188]	; (8001ab8 <HAL_SPI_MspInit+0x120>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_SPI_MspInit+0x120>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4824      	ldr	r0, [pc, #144]	; (8001abc <HAL_SPI_MspInit+0x124>)
 8001a2a:	f000 ff0b 	bl	8002844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a40:	2305      	movs	r3, #5
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	481d      	ldr	r0, [pc, #116]	; (8001ac0 <HAL_SPI_MspInit+0x128>)
 8001a4c:	f000 fefa 	bl	8002844 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001a52:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <HAL_SPI_MspInit+0x130>)
 8001a54:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a6e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001a90:	f000 fb4e 	bl	8002130 <HAL_DMA_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8001a9a:	f7ff fdd9 	bl	8001650 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001aa2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_SPI_MspInit+0x12c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	; 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40003800 	.word	0x40003800
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	20000360 	.word	0x20000360
 8001ac8:	40026058 	.word	0x40026058

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_UART_MspInit+0x94>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d133      	bne.n	8001b56 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b26:	230c      	movs	r3, #12
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b36:	2307      	movs	r3, #7
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4809      	ldr	r0, [pc, #36]	; (8001b68 <HAL_UART_MspInit+0x9c>)
 8001b42:	f000 fe7f 	bl	8002844 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2101      	movs	r1, #1
 8001b4a:	2026      	movs	r0, #38	; 0x26
 8001b4c:	f000 fab9 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b50:	2026      	movs	r0, #38	; 0x26
 8001b52:	f000 fad2 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40004400 	.word	0x40004400
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <NMI_Handler+0x4>

08001b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <MemManage_Handler+0x4>

08001b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f000 f988 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <DMA1_Stream0_IRQHandler+0x10>)
 8001bc6:	f000 fbf3 	bl	80023b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000250 	.word	0x20000250

08001bd4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <DMA1_Stream3_IRQHandler+0x10>)
 8001bda:	f000 fbe9 	bl	80023b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000360 	.word	0x20000360

08001be8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <I2C1_EV_IRQHandler+0x10>)
 8001bee:	f001 fc25 	bl	800343c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200001fc 	.word	0x200001fc

08001bfc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <I2C1_ER_IRQHandler+0x10>)
 8001c02:	f001 fd8c 	bl	800371e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200001fc 	.word	0x200001fc

08001c10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

  HAL_UART_IRQHandler(&huart2);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <USART2_IRQHandler+0x10>)
 8001c16:	f005 faf5 	bl	8007204 <HAL_UART_IRQHandler>

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200003c0 	.word	0x200003c0

08001c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return 1;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_kill>:

int _kill(int pid, int sig)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c3e:	f006 fa15 	bl	800806c <__errno>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2216      	movs	r2, #22
 8001c46:	601a      	str	r2, [r3, #0]
  return -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_exit>:

void _exit (int status)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ffe7 	bl	8001c34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c66:	e7fe      	b.n	8001c66 <_exit+0x12>

08001c68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e00a      	b.n	8001c90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c7a:	f7ff fa8b 	bl	8001194 <__io_getchar>
 8001c7e:	4601      	mov	r1, r0
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	60ba      	str	r2, [r7, #8]
 8001c86:	b2ca      	uxtb	r2, r1
 8001c88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dbf0      	blt.n	8001c7a <_read+0x12>
  }

  return len;
 8001c98:	687b      	ldr	r3, [r7, #4]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e009      	b.n	8001cc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	60ba      	str	r2, [r7, #8]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fa57 	bl	8001170 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	dbf1      	blt.n	8001cb4 <_write+0x12>
  }
  return len;
 8001cd0:	687b      	ldr	r3, [r7, #4]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <_close>:

int _close(int file)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d02:	605a      	str	r2, [r3, #4]
  return 0;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_isatty>:

int _isatty(int file)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <_sbrk+0x5c>)
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <_sbrk+0x60>)
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <_sbrk+0x64>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	; (8001dac <_sbrk+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d207      	bcs.n	8001d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d74:	f006 f97a 	bl	800806c <__errno>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	e009      	b.n	8001d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <_sbrk+0x64>)
 8001d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20020000 	.word	0x20020000
 8001da4:	00000400 	.word	0x00000400
 8001da8:	20000404 	.word	0x20000404
 8001dac:	20000420 	.word	0x20000420

08001db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <SystemInit+0x20>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <SystemInit+0x20>)
 8001dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dd8:	480d      	ldr	r0, [pc, #52]	; (8001e10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dda:	490e      	ldr	r1, [pc, #56]	; (8001e14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ddc:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de0:	e002      	b.n	8001de8 <LoopCopyDataInit>

08001de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de6:	3304      	adds	r3, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dec:	d3f9      	bcc.n	8001de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dee:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001df0:	4c0b      	ldr	r4, [pc, #44]	; (8001e20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df4:	e001      	b.n	8001dfa <LoopFillZerobss>

08001df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df8:	3204      	adds	r2, #4

08001dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dfc:	d3fb      	bcc.n	8001df6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dfe:	f7ff ffd7 	bl	8001db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e02:	f006 f939 	bl	8008078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e06:	f7ff f9e3 	bl	80011d0 <main>
  bx  lr    
 8001e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e18:	0800e42c 	.word	0x0800e42c
  ldr r2, =_sbss
 8001e1c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e20:	2000041c 	.word	0x2000041c

08001e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <HAL_Init+0x40>)
 8001e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <HAL_Init+0x40>)
 8001e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_Init+0x40>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f92b 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	200f      	movs	r0, #15
 8001e58:	f000 f808 	bl	8001e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff fc5e 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_InitTick+0x54>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_InitTick+0x58>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f943 	bl	8002116 <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f000 f90b 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <HAL_InitTick+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	20000408 	.word	0x20000408

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000408 	.word	0x20000408

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7ff ff8e 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff29 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff3e 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff8e 	bl	8002000 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5d 	bl	8001fac <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff31 	bl	8001f70 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff feda 	bl	8001ef4 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e099      	b.n	8002280 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800216c:	e00f      	b.n	800218e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800216e:	f7ff fec1 	bl	8001ef4 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b05      	cmp	r3, #5
 800217a:	d908      	bls.n	800218e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2203      	movs	r2, #3
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e078      	b.n	8002280 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e8      	bne.n	800216e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	4b38      	ldr	r3, [pc, #224]	; (8002288 <HAL_DMA_Init+0x158>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d107      	bne.n	80021f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	4313      	orrs	r3, r2
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f023 0307 	bic.w	r3, r3, #7
 800220e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	2b04      	cmp	r3, #4
 8002220:	d117      	bne.n	8002252 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00e      	beq.n	8002252 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fa89 	bl	800274c <DMA_CheckFifoParam>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2240      	movs	r2, #64	; 0x40
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800224e:	2301      	movs	r3, #1
 8002250:	e016      	b.n	8002280 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fa40 	bl	80026e0 <DMA_CalcBaseAndBitshift>
 8002260:	4603      	mov	r3, r0
 8002262:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	223f      	movs	r2, #63	; 0x3f
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	f010803f 	.word	0xf010803f

0800228c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800229a:	f7ff fe2b 	bl	8001ef4 <HAL_GetTick>
 800229e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d008      	beq.n	80022be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e052      	b.n	8002364 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0216 	bic.w	r2, r2, #22
 80022cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d103      	bne.n	80022ee <HAL_DMA_Abort+0x62>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0208 	bic.w	r2, r2, #8
 80022fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0201 	bic.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800230e:	e013      	b.n	8002338 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002310:	f7ff fdf0 	bl	8001ef4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b05      	cmp	r3, #5
 800231c:	d90c      	bls.n	8002338 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2203      	movs	r2, #3
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e015      	b.n	8002364 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1e4      	bne.n	8002310 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	223f      	movs	r2, #63	; 0x3f
 800234c:	409a      	lsls	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d004      	beq.n	800238a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e00c      	b.n	80023a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2205      	movs	r2, #5
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023bc:	4b8e      	ldr	r3, [pc, #568]	; (80025f8 <HAL_DMA_IRQHandler+0x248>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a8e      	ldr	r2, [pc, #568]	; (80025fc <HAL_DMA_IRQHandler+0x24c>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0a9b      	lsrs	r3, r3, #10
 80023c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2208      	movs	r2, #8
 80023dc:	409a      	lsls	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d01a      	beq.n	800241c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d013      	beq.n	800241c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0204 	bic.w	r2, r2, #4
 8002402:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	2208      	movs	r2, #8
 800240a:	409a      	lsls	r2, r3
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	2201      	movs	r2, #1
 8002422:	409a      	lsls	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4013      	ands	r3, r2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d012      	beq.n	8002452 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	2201      	movs	r2, #1
 8002440:	409a      	lsls	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	f043 0202 	orr.w	r2, r3, #2
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	2204      	movs	r2, #4
 8002458:	409a      	lsls	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d012      	beq.n	8002488 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00b      	beq.n	8002488 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	2204      	movs	r2, #4
 8002476:	409a      	lsls	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	f043 0204 	orr.w	r2, r3, #4
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	2210      	movs	r2, #16
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d043      	beq.n	8002520 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d03c      	beq.n	8002520 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	2210      	movs	r2, #16
 80024ac:	409a      	lsls	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d018      	beq.n	80024f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d108      	bne.n	80024e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d024      	beq.n	8002520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
 80024de:	e01f      	b.n	8002520 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01b      	beq.n	8002520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	4798      	blx	r3
 80024f0:	e016      	b.n	8002520 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d107      	bne.n	8002510 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0208 	bic.w	r2, r2, #8
 800250e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002524:	2220      	movs	r2, #32
 8002526:	409a      	lsls	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 808f 	beq.w	8002650 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8087 	beq.w	8002650 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	2220      	movs	r2, #32
 8002548:	409a      	lsls	r2, r3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b05      	cmp	r3, #5
 8002558:	d136      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0216 	bic.w	r2, r2, #22
 8002568:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002578:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d103      	bne.n	800258a <HAL_DMA_IRQHandler+0x1da>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0208 	bic.w	r2, r2, #8
 8002598:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	223f      	movs	r2, #63	; 0x3f
 80025a0:	409a      	lsls	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d07e      	beq.n	80026bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
        }
        return;
 80025c6:	e079      	b.n	80026bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01d      	beq.n	8002612 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10d      	bne.n	8002600 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d031      	beq.n	8002650 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
 80025f4:	e02c      	b.n	8002650 <HAL_DMA_IRQHandler+0x2a0>
 80025f6:	bf00      	nop
 80025f8:	20000000 	.word	0x20000000
 80025fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d023      	beq.n	8002650 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
 8002610:	e01e      	b.n	8002650 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10f      	bne.n	8002640 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0210 	bic.w	r2, r2, #16
 800262e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	2b00      	cmp	r3, #0
 8002656:	d032      	beq.n	80026be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d022      	beq.n	80026aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2205      	movs	r2, #5
 8002668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	3301      	adds	r3, #1
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	429a      	cmp	r2, r3
 8002686:	d307      	bcc.n	8002698 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f2      	bne.n	800267c <HAL_DMA_IRQHandler+0x2cc>
 8002696:	e000      	b.n	800269a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002698:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4798      	blx	r3
 80026ba:	e000      	b.n	80026be <HAL_DMA_IRQHandler+0x30e>
        return;
 80026bc:	bf00      	nop
    }
  }
}
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d2:	b2db      	uxtb	r3, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3b10      	subs	r3, #16
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <DMA_CalcBaseAndBitshift+0x64>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026fa:	4a13      	ldr	r2, [pc, #76]	; (8002748 <DMA_CalcBaseAndBitshift+0x68>)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d909      	bls.n	8002722 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002716:	f023 0303 	bic.w	r3, r3, #3
 800271a:	1d1a      	adds	r2, r3, #4
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	659a      	str	r2, [r3, #88]	; 0x58
 8002720:	e007      	b.n	8002732 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	aaaaaaab 	.word	0xaaaaaaab
 8002748:	0800df50 	.word	0x0800df50

0800274c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11f      	bne.n	80027a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d856      	bhi.n	800281a <DMA_CheckFifoParam+0xce>
 800276c:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <DMA_CheckFifoParam+0x28>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	08002785 	.word	0x08002785
 8002778:	08002797 	.word	0x08002797
 800277c:	08002785 	.word	0x08002785
 8002780:	0800281b 	.word	0x0800281b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d046      	beq.n	800281e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002794:	e043      	b.n	800281e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800279e:	d140      	bne.n	8002822 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a4:	e03d      	b.n	8002822 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ae:	d121      	bne.n	80027f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d837      	bhi.n	8002826 <DMA_CheckFifoParam+0xda>
 80027b6:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <DMA_CheckFifoParam+0x70>)
 80027b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027bc:	080027cd 	.word	0x080027cd
 80027c0:	080027d3 	.word	0x080027d3
 80027c4:	080027cd 	.word	0x080027cd
 80027c8:	080027e5 	.word	0x080027e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      break;
 80027d0:	e030      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d025      	beq.n	800282a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e2:	e022      	b.n	800282a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027ec:	d11f      	bne.n	800282e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027f2:	e01c      	b.n	800282e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d903      	bls.n	8002802 <DMA_CheckFifoParam+0xb6>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d003      	beq.n	8002808 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002800:	e018      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
      break;
 8002806:	e015      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00e      	beq.n	8002832 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      break;
 8002818:	e00b      	b.n	8002832 <DMA_CheckFifoParam+0xe6>
      break;
 800281a:	bf00      	nop
 800281c:	e00a      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      break;
 800281e:	bf00      	nop
 8002820:	e008      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      break;
 8002822:	bf00      	nop
 8002824:	e006      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      break;
 8002826:	bf00      	nop
 8002828:	e004      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      break;
 800282a:	bf00      	nop
 800282c:	e002      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      break;   
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <DMA_CheckFifoParam+0xe8>
      break;
 8002832:	bf00      	nop
    }
  } 
  
  return status; 
 8002834:	7bfb      	ldrb	r3, [r7, #15]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop

08002844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	e165      	b.n	8002b2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002860:	2201      	movs	r2, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	f040 8154 	bne.w	8002b26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d005      	beq.n	8002896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002892:	2b02      	cmp	r3, #2
 8002894:	d130      	bne.n	80028f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028cc:	2201      	movs	r2, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 0201 	and.w	r2, r3, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b03      	cmp	r3, #3
 8002902:	d017      	beq.n	8002934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d123      	bne.n	8002988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	08da      	lsrs	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3208      	adds	r2, #8
 8002948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	220f      	movs	r2, #15
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	08da      	lsrs	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3208      	adds	r2, #8
 8002982:	69b9      	ldr	r1, [r7, #24]
 8002984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0203 	and.w	r2, r3, #3
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80ae 	beq.w	8002b26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4b5d      	ldr	r3, [pc, #372]	; (8002b44 <HAL_GPIO_Init+0x300>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	4a5c      	ldr	r2, [pc, #368]	; (8002b44 <HAL_GPIO_Init+0x300>)
 80029d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
 80029da:	4b5a      	ldr	r3, [pc, #360]	; (8002b44 <HAL_GPIO_Init+0x300>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e6:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_GPIO_Init+0x304>)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3302      	adds	r3, #2
 80029ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	220f      	movs	r2, #15
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4f      	ldr	r2, [pc, #316]	; (8002b4c <HAL_GPIO_Init+0x308>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d025      	beq.n	8002a5e <HAL_GPIO_Init+0x21a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4e      	ldr	r2, [pc, #312]	; (8002b50 <HAL_GPIO_Init+0x30c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01f      	beq.n	8002a5a <HAL_GPIO_Init+0x216>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4d      	ldr	r2, [pc, #308]	; (8002b54 <HAL_GPIO_Init+0x310>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d019      	beq.n	8002a56 <HAL_GPIO_Init+0x212>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4c      	ldr	r2, [pc, #304]	; (8002b58 <HAL_GPIO_Init+0x314>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_GPIO_Init+0x20e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4b      	ldr	r2, [pc, #300]	; (8002b5c <HAL_GPIO_Init+0x318>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00d      	beq.n	8002a4e <HAL_GPIO_Init+0x20a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4a      	ldr	r2, [pc, #296]	; (8002b60 <HAL_GPIO_Init+0x31c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d007      	beq.n	8002a4a <HAL_GPIO_Init+0x206>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a49      	ldr	r2, [pc, #292]	; (8002b64 <HAL_GPIO_Init+0x320>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_GPIO_Init+0x202>
 8002a42:	2306      	movs	r3, #6
 8002a44:	e00c      	b.n	8002a60 <HAL_GPIO_Init+0x21c>
 8002a46:	2307      	movs	r3, #7
 8002a48:	e00a      	b.n	8002a60 <HAL_GPIO_Init+0x21c>
 8002a4a:	2305      	movs	r3, #5
 8002a4c:	e008      	b.n	8002a60 <HAL_GPIO_Init+0x21c>
 8002a4e:	2304      	movs	r3, #4
 8002a50:	e006      	b.n	8002a60 <HAL_GPIO_Init+0x21c>
 8002a52:	2303      	movs	r3, #3
 8002a54:	e004      	b.n	8002a60 <HAL_GPIO_Init+0x21c>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e002      	b.n	8002a60 <HAL_GPIO_Init+0x21c>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_GPIO_Init+0x21c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	f002 0203 	and.w	r2, r2, #3
 8002a66:	0092      	lsls	r2, r2, #2
 8002a68:	4093      	lsls	r3, r2
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a70:	4935      	ldr	r1, [pc, #212]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	3302      	adds	r3, #2
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7e:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <HAL_GPIO_Init+0x324>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa2:	4a31      	ldr	r2, [pc, #196]	; (8002b68 <HAL_GPIO_Init+0x324>)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_GPIO_Init+0x324>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002acc:	4a26      	ldr	r2, [pc, #152]	; (8002b68 <HAL_GPIO_Init+0x324>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ad2:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <HAL_GPIO_Init+0x324>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af6:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <HAL_GPIO_Init+0x324>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_GPIO_Init+0x324>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b20:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <HAL_GPIO_Init+0x324>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	61fb      	str	r3, [r7, #28]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b0f      	cmp	r3, #15
 8002b30:	f67f ae96 	bls.w	8002860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40013800 	.word	0x40013800
 8002b4c:	40020000 	.word	0x40020000
 8002b50:	40020400 	.word	0x40020400
 8002b54:	40020800 	.word	0x40020800
 8002b58:	40020c00 	.word	0x40020c00
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40021400 	.word	0x40021400
 8002b64:	40021800 	.word	0x40021800
 8002b68:	40013c00 	.word	0x40013c00

08002b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e12b      	b.n	8002dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe fdea 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2224      	movs	r2, #36	; 0x24
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bd0:	f002 ff2c 	bl	8005a2c <HAL_RCC_GetPCLK1Freq>
 8002bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a81      	ldr	r2, [pc, #516]	; (8002de0 <HAL_I2C_Init+0x274>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d807      	bhi.n	8002bf0 <HAL_I2C_Init+0x84>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4a80      	ldr	r2, [pc, #512]	; (8002de4 <HAL_I2C_Init+0x278>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	bf94      	ite	ls
 8002be8:	2301      	movls	r3, #1
 8002bea:	2300      	movhi	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e006      	b.n	8002bfe <HAL_I2C_Init+0x92>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a7d      	ldr	r2, [pc, #500]	; (8002de8 <HAL_I2C_Init+0x27c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bf94      	ite	ls
 8002bf8:	2301      	movls	r3, #1
 8002bfa:	2300      	movhi	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0e7      	b.n	8002dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4a78      	ldr	r2, [pc, #480]	; (8002dec <HAL_I2C_Init+0x280>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	0c9b      	lsrs	r3, r3, #18
 8002c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a6a      	ldr	r2, [pc, #424]	; (8002de0 <HAL_I2C_Init+0x274>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d802      	bhi.n	8002c40 <HAL_I2C_Init+0xd4>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	e009      	b.n	8002c54 <HAL_I2C_Init+0xe8>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	4a69      	ldr	r2, [pc, #420]	; (8002df0 <HAL_I2C_Init+0x284>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	3301      	adds	r3, #1
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	495c      	ldr	r1, [pc, #368]	; (8002de0 <HAL_I2C_Init+0x274>)
 8002c70:	428b      	cmp	r3, r1
 8002c72:	d819      	bhi.n	8002ca8 <HAL_I2C_Init+0x13c>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1e59      	subs	r1, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c82:	1c59      	adds	r1, r3, #1
 8002c84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c88:	400b      	ands	r3, r1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_I2C_Init+0x138>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1e59      	subs	r1, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca2:	e051      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	e04f      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d111      	bne.n	8002cd4 <HAL_I2C_Init+0x168>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1e58      	subs	r0, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6859      	ldr	r1, [r3, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	440b      	add	r3, r1
 8002cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e012      	b.n	8002cfa <HAL_I2C_Init+0x18e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1e58      	subs	r0, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	0099      	lsls	r1, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Init+0x196>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e022      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10e      	bne.n	8002d28 <HAL_I2C_Init+0x1bc>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e58      	subs	r0, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	440b      	add	r3, r1
 8002d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d26:	e00f      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e58      	subs	r0, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	0099      	lsls	r1, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	6809      	ldr	r1, [r1, #0]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6911      	ldr	r1, [r2, #16]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68d2      	ldr	r2, [r2, #12]
 8002d82:	4311      	orrs	r1, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	000186a0 	.word	0x000186a0
 8002de4:	001e847f 	.word	0x001e847f
 8002de8:	003d08ff 	.word	0x003d08ff
 8002dec:	431bde83 	.word	0x431bde83
 8002df0:	10624dd3 	.word	0x10624dd3

08002df4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	460b      	mov	r3, r1
 8002e02:	817b      	strh	r3, [r7, #10]
 8002e04:	4613      	mov	r3, r2
 8002e06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e08:	f7ff f874 	bl	8001ef4 <HAL_GetTick>
 8002e0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	f040 80e0 	bne.w	8002fdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2319      	movs	r3, #25
 8002e22:	2201      	movs	r2, #1
 8002e24:	4970      	ldr	r1, [pc, #448]	; (8002fe8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f002 f8e6 	bl	8004ff8 <I2C_WaitOnFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
 8002e34:	e0d3      	b.n	8002fde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_I2C_Master_Transmit+0x50>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e0cc      	b.n	8002fde <HAL_I2C_Master_Transmit+0x1ea>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d007      	beq.n	8002e6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0201 	orr.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2221      	movs	r2, #33	; 0x21
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2210      	movs	r2, #16
 8002e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	893a      	ldrh	r2, [r7, #8]
 8002e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4a50      	ldr	r2, [pc, #320]	; (8002fec <HAL_I2C_Master_Transmit+0x1f8>)
 8002eaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002eac:	8979      	ldrh	r1, [r7, #10]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	6a3a      	ldr	r2, [r7, #32]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f001 fea8 	bl	8004c08 <I2C_MasterRequestWrite>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e08d      	b.n	8002fde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ed8:	e066      	b.n	8002fa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	6a39      	ldr	r1, [r7, #32]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f002 f960 	bl	80051a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d107      	bne.n	8002f02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e06b      	b.n	8002fde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d11b      	bne.n	8002f7c <HAL_I2C_Master_Transmit+0x188>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d017      	beq.n	8002f7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	6a39      	ldr	r1, [r7, #32]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f002 f950 	bl	8005226 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d107      	bne.n	8002fa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e01a      	b.n	8002fde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d194      	bne.n	8002eda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e000      	b.n	8002fde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fdc:	2302      	movs	r3, #2
  }
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	00100002 	.word	0x00100002
 8002fec:	ffff0000 	.word	0xffff0000

08002ff0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08c      	sub	sp, #48	; 0x30
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	817b      	strh	r3, [r7, #10]
 8003000:	4613      	mov	r3, r2
 8003002:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003004:	f7fe ff76 	bl	8001ef4 <HAL_GetTick>
 8003008:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b20      	cmp	r3, #32
 8003014:	f040 820b 	bne.w	800342e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2319      	movs	r3, #25
 800301e:	2201      	movs	r2, #1
 8003020:	497c      	ldr	r1, [pc, #496]	; (8003214 <HAL_I2C_Master_Receive+0x224>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f001 ffe8 	bl	8004ff8 <I2C_WaitOnFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	e1fe      	b.n	8003430 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_I2C_Master_Receive+0x50>
 800303c:	2302      	movs	r3, #2
 800303e:	e1f7      	b.n	8003430 <HAL_I2C_Master_Receive+0x440>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d007      	beq.n	8003066 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0201 	orr.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003074:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2222      	movs	r2, #34	; 0x22
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2210      	movs	r2, #16
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	893a      	ldrh	r2, [r7, #8]
 8003096:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a5c      	ldr	r2, [pc, #368]	; (8003218 <HAL_I2C_Master_Receive+0x228>)
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030a8:	8979      	ldrh	r1, [r7, #10]
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f001 fe2c 	bl	8004d0c <I2C_MasterRequestRead>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e1b8      	b.n	8003430 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d113      	bne.n	80030ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	623b      	str	r3, [r7, #32]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	623b      	str	r3, [r7, #32]
 80030da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e18c      	b.n	8003408 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d11b      	bne.n	800312e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e16c      	b.n	8003408 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003132:	2b02      	cmp	r3, #2
 8003134:	d11b      	bne.n	800316e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003144:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	e14c      	b.n	8003408 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800317c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003194:	e138      	b.n	8003408 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	2b03      	cmp	r3, #3
 800319c:	f200 80f1 	bhi.w	8003382 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d123      	bne.n	80031f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f002 f8ad 	bl	800530c <I2C_WaitOnRXNEFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e139      	b.n	8003430 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031ee:	e10b      	b.n	8003408 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d14e      	bne.n	8003296 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	2200      	movs	r2, #0
 8003200:	4906      	ldr	r1, [pc, #24]	; (800321c <HAL_I2C_Master_Receive+0x22c>)
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f001 fef8 	bl	8004ff8 <I2C_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e10e      	b.n	8003430 <HAL_I2C_Master_Receive+0x440>
 8003212:	bf00      	nop
 8003214:	00100002 	.word	0x00100002
 8003218:	ffff0000 	.word	0xffff0000
 800321c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003294:	e0b8      	b.n	8003408 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	2200      	movs	r2, #0
 800329e:	4966      	ldr	r1, [pc, #408]	; (8003438 <HAL_I2C_Master_Receive+0x448>)
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f001 fea9 	bl	8004ff8 <I2C_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0bf      	b.n	8003430 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	2200      	movs	r2, #0
 80032fa:	494f      	ldr	r1, [pc, #316]	; (8003438 <HAL_I2C_Master_Receive+0x448>)
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f001 fe7b 	bl	8004ff8 <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e091      	b.n	8003430 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003380:	e042      	b.n	8003408 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f001 ffc0 	bl	800530c <I2C_WaitOnRXNEFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e04c      	b.n	8003430 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d118      	bne.n	8003408 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	2b00      	cmp	r3, #0
 800340e:	f47f aec2 	bne.w	8003196 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800342e:	2302      	movs	r3, #2
  }
}
 8003430:	4618      	mov	r0, r3
 8003432:	3728      	adds	r7, #40	; 0x28
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	00010004 	.word	0x00010004

0800343c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800345c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003464:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b10      	cmp	r3, #16
 800346a:	d003      	beq.n	8003474 <HAL_I2C_EV_IRQHandler+0x38>
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	f040 80c1 	bne.w	80035f6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <HAL_I2C_EV_IRQHandler+0x6e>
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003494:	d003      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x62>
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800349c:	d101      	bne.n	80034a2 <HAL_I2C_EV_IRQHandler+0x66>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <HAL_I2C_EV_IRQHandler+0x68>
 80034a2:	2300      	movs	r3, #0
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	f000 8132 	beq.w	800370e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00c      	beq.n	80034ce <HAL_I2C_EV_IRQHandler+0x92>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	0a5b      	lsrs	r3, r3, #9
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d006      	beq.n	80034ce <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f001 ffa8 	bl	8005416 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fd83 	bl	8003fd2 <I2C_Master_SB>
 80034cc:	e092      	b.n	80035f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	08db      	lsrs	r3, r3, #3
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0xb2>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	0a5b      	lsrs	r3, r3, #9
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fdf9 	bl	80040de <I2C_Master_ADD10>
 80034ec:	e082      	b.n	80035f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_I2C_EV_IRQHandler+0xd2>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	0a5b      	lsrs	r3, r3, #9
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fe13 	bl	8004132 <I2C_Master_ADDR>
 800350c:	e072      	b.n	80035f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d03b      	beq.n	8003592 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003528:	f000 80f3 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	09db      	lsrs	r3, r3, #7
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00f      	beq.n	8003558 <HAL_I2C_EV_IRQHandler+0x11c>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	0a9b      	lsrs	r3, r3, #10
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d009      	beq.n	8003558 <HAL_I2C_EV_IRQHandler+0x11c>
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d103      	bne.n	8003558 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f9f3 	bl	800393c <I2C_MasterTransmit_TXE>
 8003556:	e04d      	b.n	80035f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80d6 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	0a5b      	lsrs	r3, r3, #9
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80cf 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003574:	7bbb      	ldrb	r3, [r7, #14]
 8003576:	2b21      	cmp	r3, #33	; 0x21
 8003578:	d103      	bne.n	8003582 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa7a 	bl	8003a74 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003580:	e0c7      	b.n	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	f040 80c4 	bne.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fae8 	bl	8003b60 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003590:	e0bf      	b.n	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a0:	f000 80b7 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00f      	beq.n	80035d0 <HAL_I2C_EV_IRQHandler+0x194>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	0a9b      	lsrs	r3, r3, #10
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d009      	beq.n	80035d0 <HAL_I2C_EV_IRQHandler+0x194>
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	089b      	lsrs	r3, r3, #2
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fb5d 	bl	8003c88 <I2C_MasterReceive_RXNE>
 80035ce:	e011      	b.n	80035f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 809a 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	0a5b      	lsrs	r3, r3, #9
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8093 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fc06 	bl	8003dfe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f2:	e08e      	b.n	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
 80035f4:	e08d      	b.n	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d004      	beq.n	8003608 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e007      	b.n	8003618 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d012      	beq.n	800364a <HAL_I2C_EV_IRQHandler+0x20e>
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	0a5b      	lsrs	r3, r3, #9
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00c      	beq.n	800364a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003640:	69b9      	ldr	r1, [r7, #24]
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 ffc4 	bl	80045d0 <I2C_Slave_ADDR>
 8003648:	e066      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_I2C_EV_IRQHandler+0x22e>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	0a5b      	lsrs	r3, r3, #9
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fffe 	bl	8004664 <I2C_Slave_STOPF>
 8003668:	e056      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800366a:	7bbb      	ldrb	r3, [r7, #14]
 800366c:	2b21      	cmp	r3, #33	; 0x21
 800366e:	d002      	beq.n	8003676 <HAL_I2C_EV_IRQHandler+0x23a>
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	2b29      	cmp	r3, #41	; 0x29
 8003674:	d125      	bne.n	80036c2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	09db      	lsrs	r3, r3, #7
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00f      	beq.n	80036a2 <HAL_I2C_EV_IRQHandler+0x266>
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	0a9b      	lsrs	r3, r3, #10
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_I2C_EV_IRQHandler+0x266>
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d103      	bne.n	80036a2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 feda 	bl	8004454 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036a0:	e039      	b.n	8003716 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	089b      	lsrs	r3, r3, #2
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d033      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x2da>
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	0a5b      	lsrs	r3, r3, #9
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d02d      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 ff07 	bl	80044ce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c0:	e029      	b.n	8003716 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	099b      	lsrs	r3, r3, #6
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00f      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x2b2>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	0a9b      	lsrs	r3, r3, #10
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x2b2>
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	089b      	lsrs	r3, r3, #2
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 ff12 	bl	8004510 <I2C_SlaveReceive_RXNE>
 80036ec:	e014      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00e      	beq.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	0a5b      	lsrs	r3, r3, #9
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 ff40 	bl	800458c <I2C_SlaveReceive_BTF>
 800370c:	e004      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800370e:	bf00      	nop
 8003710:	e002      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003716:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b08a      	sub	sp, #40	; 0x28
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003740:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00e      	beq.n	800376c <HAL_I2C_ER_IRQHandler+0x4e>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800376a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	0a5b      	lsrs	r3, r3, #9
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00e      	beq.n	8003796 <HAL_I2C_ER_IRQHandler+0x78>
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	f043 0302 	orr.w	r3, r3, #2
 800378a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003794:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	0a9b      	lsrs	r3, r3, #10
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d03f      	beq.n	8003822 <HAL_I2C_ER_IRQHandler+0x104>
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d039      	beq.n	8003822 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80037ae:	7efb      	ldrb	r3, [r7, #27]
 80037b0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80037c8:	7ebb      	ldrb	r3, [r7, #26]
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d112      	bne.n	80037f4 <HAL_I2C_ER_IRQHandler+0xd6>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10f      	bne.n	80037f4 <HAL_I2C_ER_IRQHandler+0xd6>
 80037d4:	7cfb      	ldrb	r3, [r7, #19]
 80037d6:	2b21      	cmp	r3, #33	; 0x21
 80037d8:	d008      	beq.n	80037ec <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b29      	cmp	r3, #41	; 0x29
 80037de:	d005      	beq.n	80037ec <HAL_I2C_ER_IRQHandler+0xce>
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	2b28      	cmp	r3, #40	; 0x28
 80037e4:	d106      	bne.n	80037f4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b21      	cmp	r3, #33	; 0x21
 80037ea:	d103      	bne.n	80037f4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f001 f869 	bl	80048c4 <I2C_Slave_AF>
 80037f2:	e016      	b.n	8003822 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037fc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003806:	7efb      	ldrb	r3, [r7, #27]
 8003808:	2b10      	cmp	r3, #16
 800380a:	d002      	beq.n	8003812 <HAL_I2C_ER_IRQHandler+0xf4>
 800380c:	7efb      	ldrb	r3, [r7, #27]
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	d107      	bne.n	8003822 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003820:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	0adb      	lsrs	r3, r3, #11
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00e      	beq.n	800384c <HAL_I2C_ER_IRQHandler+0x12e>
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	f043 0308 	orr.w	r3, r3, #8
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800384a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f001 f8a0 	bl	80049a4 <I2C_ITError>
  }
}
 8003864:	bf00      	nop
 8003866:	3728      	adds	r7, #40	; 0x28
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	70fb      	strb	r3, [r7, #3]
 80038c8:	4613      	mov	r3, r2
 80038ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003952:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d150      	bne.n	8003a04 <I2C_MasterTransmit_TXE+0xc8>
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b21      	cmp	r3, #33	; 0x21
 8003966:	d14d      	bne.n	8003a04 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b08      	cmp	r3, #8
 800396c:	d01d      	beq.n	80039aa <I2C_MasterTransmit_TXE+0x6e>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b20      	cmp	r3, #32
 8003972:	d01a      	beq.n	80039aa <I2C_MasterTransmit_TXE+0x6e>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800397a:	d016      	beq.n	80039aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800398a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2211      	movs	r2, #17
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ff62 	bl	800386c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039a8:	e060      	b.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d107      	bne.n	80039f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ff7d 	bl	80038ec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039f2:	e03b      	b.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff35 	bl	800386c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a02:	e033      	b.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b21      	cmp	r3, #33	; 0x21
 8003a08:	d005      	beq.n	8003a16 <I2C_MasterTransmit_TXE+0xda>
 8003a0a:	7bbb      	ldrb	r3, [r7, #14]
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d12d      	bne.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b22      	cmp	r3, #34	; 0x22
 8003a14:	d12a      	bne.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d108      	bne.n	8003a32 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003a30:	e01c      	b.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d103      	bne.n	8003a46 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f88e 	bl	8003b60 <I2C_MemoryTransmit_TXE_BTF>
}
 8003a44:	e012      	b.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a6a:	e7ff      	b.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b21      	cmp	r3, #33	; 0x21
 8003a8c:	d164      	bne.n	8003b58 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d012      	beq.n	8003abe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003abc:	e04c      	b.n	8003b58 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d01d      	beq.n	8003b00 <I2C_MasterTransmit_BTF+0x8c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d01a      	beq.n	8003b00 <I2C_MasterTransmit_BTF+0x8c>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ad0:	d016      	beq.n	8003b00 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ae0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2211      	movs	r2, #17
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff feb7 	bl	800386c <HAL_I2C_MasterTxCpltCallback>
}
 8003afe:	e02b      	b.n	8003b58 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b0e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d107      	bne.n	8003b4a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff fed2 	bl	80038ec <HAL_I2C_MemTxCpltCallback>
}
 8003b48:	e006      	b.n	8003b58 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fe8a 	bl	800386c <HAL_I2C_MasterTxCpltCallback>
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d11d      	bne.n	8003bb4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10b      	bne.n	8003b98 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b90:	1c9a      	adds	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003b96:	e073      	b.n	8003c80 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	121b      	asrs	r3, r3, #8
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bb2:	e065      	b.n	8003c80 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d10b      	bne.n	8003bd4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bd2:	e055      	b.n	8003c80 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d151      	bne.n	8003c80 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b22      	cmp	r3, #34	; 0x22
 8003be0:	d10d      	bne.n	8003bfe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bfc:	e040      	b.n	8003c80 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d015      	beq.n	8003c34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	2b21      	cmp	r3, #33	; 0x21
 8003c0c:	d112      	bne.n	8003c34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c32:	e025      	b.n	8003c80 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d120      	bne.n	8003c80 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b21      	cmp	r3, #33	; 0x21
 8003c42:	d11d      	bne.n	8003c80 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c52:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff fe36 	bl	80038ec <HAL_I2C_MemTxCpltCallback>
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b22      	cmp	r3, #34	; 0x22
 8003c9a:	f040 80ac 	bne.w	8003df6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d921      	bls.n	8003cf0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	f040 808c 	bne.w	8003df6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cec:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003cee:	e082      	b.n	8003df6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d075      	beq.n	8003de4 <I2C_MasterReceive_RXNE+0x15c>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d002      	beq.n	8003d04 <I2C_MasterReceive_RXNE+0x7c>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d16f      	bne.n	8003de4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f001 facf 	bl	80052a8 <I2C_WaitOnSTOPRequestThroughIT>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d142      	bne.n	8003d96 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d2e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d10a      	bne.n	8003d80 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff fdc1 	bl	8003900 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d7e:	e03a      	b.n	8003df6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2212      	movs	r2, #18
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fd76 	bl	8003880 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d94:	e02f      	b.n	8003df6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003da4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff fd99 	bl	8003914 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003de2:	e008      	b.n	8003df6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df2:	605a      	str	r2, [r3, #4]
}
 8003df4:	e7ff      	b.n	8003df6 <I2C_MasterReceive_RXNE+0x16e>
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d11b      	bne.n	8003e4e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e24:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e4c:	e0bd      	b.n	8003fca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d129      	bne.n	8003eac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e66:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d00a      	beq.n	8003e84 <I2C_MasterReceive_BTF+0x86>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d007      	beq.n	8003e84 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e82:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003eaa:	e08e      	b.n	8003fca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d176      	bne.n	8003fa4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d002      	beq.n	8003ec2 <I2C_MasterReceive_BTF+0xc4>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b10      	cmp	r3, #16
 8003ec0:	d108      	bne.n	8003ed4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e019      	b.n	8003f08 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d002      	beq.n	8003ee0 <I2C_MasterReceive_BTF+0xe2>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d108      	bne.n	8003ef2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e00a      	b.n	8003f08 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d007      	beq.n	8003f08 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f06:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f62:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b40      	cmp	r3, #64	; 0x40
 8003f76:	d10a      	bne.n	8003f8e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff fcba 	bl	8003900 <HAL_I2C_MemRxCpltCallback>
}
 8003f8c:	e01d      	b.n	8003fca <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2212      	movs	r2, #18
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fc6f 	bl	8003880 <HAL_I2C_MasterRxCpltCallback>
}
 8003fa2:	e012      	b.n	8003fca <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	d117      	bne.n	8004016 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ffe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004000:	e067      	b.n	80040d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	b2da      	uxtb	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	611a      	str	r2, [r3, #16]
}
 8004014:	e05d      	b.n	80040d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800401e:	d133      	bne.n	8004088 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b21      	cmp	r3, #33	; 0x21
 800402a:	d109      	bne.n	8004040 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800403c:	611a      	str	r2, [r3, #16]
 800403e:	e008      	b.n	8004052 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	b2da      	uxtb	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <I2C_Master_SB+0x92>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d108      	bne.n	8004076 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	2b00      	cmp	r3, #0
 800406a:	d032      	beq.n	80040d2 <I2C_Master_SB+0x100>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d02d      	beq.n	80040d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004084:	605a      	str	r2, [r3, #4]
}
 8004086:	e024      	b.n	80040d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10e      	bne.n	80040ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	b29b      	uxth	r3, r3
 8004096:	11db      	asrs	r3, r3, #7
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f003 0306 	and.w	r3, r3, #6
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	f063 030f 	orn	r3, r3, #15
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]
}
 80040ac:	e011      	b.n	80040d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10d      	bne.n	80040d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	11db      	asrs	r3, r3, #7
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f003 0306 	and.w	r3, r3, #6
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f063 030e 	orn	r3, r3, #14
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	611a      	str	r2, [r3, #16]
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <I2C_Master_ADD10+0x26>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d108      	bne.n	8004116 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00c      	beq.n	8004126 <I2C_Master_ADD10+0x48>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004124:	605a      	str	r2, [r3, #4]
  }
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004132:	b480      	push	{r7}
 8004134:	b091      	sub	sp, #68	; 0x44
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004140:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b22      	cmp	r3, #34	; 0x22
 800415a:	f040 8169 	bne.w	8004430 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <I2C_Master_ADDR+0x54>
 8004166:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d10b      	bne.n	8004186 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416e:	2300      	movs	r3, #0
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	633b      	str	r3, [r7, #48]	; 0x30
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	e160      	b.n	8004448 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418a:	2b00      	cmp	r3, #0
 800418c:	d11d      	bne.n	80041ca <I2C_Master_ADDR+0x98>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004196:	d118      	bne.n	80041ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004198:	2300      	movs	r3, #0
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	651a      	str	r2, [r3, #80]	; 0x50
 80041c8:	e13e      	b.n	8004448 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d113      	bne.n	80041fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d4:	2300      	movs	r3, #0
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e115      	b.n	8004428 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	f040 808a 	bne.w	800431c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800420e:	d137      	bne.n	8004280 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422e:	d113      	bne.n	8004258 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004240:	2300      	movs	r3, #0
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	e0e7      	b.n	8004428 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004258:	2300      	movs	r3, #0
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	623b      	str	r3, [r7, #32]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e0d3      	b.n	8004428 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004282:	2b08      	cmp	r3, #8
 8004284:	d02e      	beq.n	80042e4 <I2C_Master_ADDR+0x1b2>
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	2b20      	cmp	r3, #32
 800428a:	d02b      	beq.n	80042e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800428c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428e:	2b12      	cmp	r3, #18
 8004290:	d102      	bne.n	8004298 <I2C_Master_ADDR+0x166>
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	2b01      	cmp	r3, #1
 8004296:	d125      	bne.n	80042e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429a:	2b04      	cmp	r3, #4
 800429c:	d00e      	beq.n	80042bc <I2C_Master_ADDR+0x18a>
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d00b      	beq.n	80042bc <I2C_Master_ADDR+0x18a>
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	2b10      	cmp	r3, #16
 80042a8:	d008      	beq.n	80042bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e007      	b.n	80042cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	e0a1      	b.n	8004428 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f4:	2300      	movs	r3, #0
 80042f6:	61bb      	str	r3, [r7, #24]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	61bb      	str	r3, [r7, #24]
 8004308:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	e085      	b.n	8004428 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d14d      	bne.n	80043c2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	2b04      	cmp	r3, #4
 800432a:	d016      	beq.n	800435a <I2C_Master_ADDR+0x228>
 800432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432e:	2b02      	cmp	r3, #2
 8004330:	d013      	beq.n	800435a <I2C_Master_ADDR+0x228>
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	2b10      	cmp	r3, #16
 8004336:	d010      	beq.n	800435a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004346:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e007      	b.n	800436a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004368:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004378:	d117      	bne.n	80043aa <I2C_Master_ADDR+0x278>
 800437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004380:	d00b      	beq.n	800439a <I2C_Master_ADDR+0x268>
 8004382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004384:	2b01      	cmp	r3, #1
 8004386:	d008      	beq.n	800439a <I2C_Master_ADDR+0x268>
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	2b08      	cmp	r3, #8
 800438c:	d005      	beq.n	800439a <I2C_Master_ADDR+0x268>
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	2b10      	cmp	r3, #16
 8004392:	d002      	beq.n	800439a <I2C_Master_ADDR+0x268>
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	2b20      	cmp	r3, #32
 8004398:	d107      	bne.n	80043aa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	e032      	b.n	8004428 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043d0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e0:	d117      	bne.n	8004412 <I2C_Master_ADDR+0x2e0>
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043e8:	d00b      	beq.n	8004402 <I2C_Master_ADDR+0x2d0>
 80043ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d008      	beq.n	8004402 <I2C_Master_ADDR+0x2d0>
 80043f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d005      	beq.n	8004402 <I2C_Master_ADDR+0x2d0>
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d002      	beq.n	8004402 <I2C_Master_ADDR+0x2d0>
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d107      	bne.n	8004412 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004410:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800442e:	e00b      	b.n	8004448 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
}
 8004446:	e7ff      	b.n	8004448 <I2C_Master_ADDR+0x316>
 8004448:	bf00      	nop
 800444a:	3744      	adds	r7, #68	; 0x44
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004462:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d02b      	beq.n	80044c6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	781a      	ldrb	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d114      	bne.n	80044c6 <I2C_SlaveTransmit_TXE+0x72>
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b29      	cmp	r3, #41	; 0x29
 80044a0:	d111      	bne.n	80044c6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2221      	movs	r2, #33	; 0x21
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2228      	movs	r2, #40	; 0x28
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff f9e7 	bl	8003894 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d011      	beq.n	8004504 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d02c      	beq.n	8004584 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d114      	bne.n	8004584 <I2C_SlaveReceive_RXNE+0x74>
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	2b2a      	cmp	r3, #42	; 0x2a
 800455e:	d111      	bne.n	8004584 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800456e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2222      	movs	r2, #34	; 0x22
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2228      	movs	r2, #40	; 0x28
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff f992 	bl	80038a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d012      	beq.n	80045c4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045ea:	2b28      	cmp	r3, #40	; 0x28
 80045ec:	d127      	bne.n	800463e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	089b      	lsrs	r3, r3, #2
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	09db      	lsrs	r3, r3, #7
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	81bb      	strh	r3, [r7, #12]
 8004620:	e002      	b.n	8004628 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004630:	89ba      	ldrh	r2, [r7, #12]
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	4619      	mov	r1, r3
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff f940 	bl	80038bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800463c:	e00e      	b.n	800465c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463e:	2300      	movs	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004672:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004682:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004684:	2300      	movs	r3, #0
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c0:	d172      	bne.n	80047a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	2b22      	cmp	r3, #34	; 0x22
 80046c6:	d002      	beq.n	80046ce <I2C_Slave_STOPF+0x6a>
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b2a      	cmp	r3, #42	; 0x2a
 80046cc:	d135      	bne.n	800473a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f043 0204 	orr.w	r2, r3, #4
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004700:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	4618      	mov	r0, r3
 8004708:	f7fd ffdc 	bl	80026c4 <HAL_DMA_GetState>
 800470c:	4603      	mov	r3, r0
 800470e:	2b01      	cmp	r3, #1
 8004710:	d049      	beq.n	80047a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	4a69      	ldr	r2, [pc, #420]	; (80048bc <I2C_Slave_STOPF+0x258>)
 8004718:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	4618      	mov	r0, r3
 8004720:	f7fd fe24 	bl	800236c <HAL_DMA_Abort_IT>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d03d      	beq.n	80047a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004734:	4610      	mov	r0, r2
 8004736:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004738:	e035      	b.n	80047a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	b29a      	uxth	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f043 0204 	orr.w	r2, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	4618      	mov	r0, r3
 8004774:	f7fd ffa6 	bl	80026c4 <HAL_DMA_GetState>
 8004778:	4603      	mov	r3, r0
 800477a:	2b01      	cmp	r3, #1
 800477c:	d014      	beq.n	80047a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004782:	4a4e      	ldr	r2, [pc, #312]	; (80048bc <I2C_Slave_STOPF+0x258>)
 8004784:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd fdee 	bl	800236c <HAL_DMA_Abort_IT>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047a0:	4610      	mov	r0, r2
 80047a2:	4798      	blx	r3
 80047a4:	e000      	b.n	80047a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d03e      	beq.n	8004830 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d112      	bne.n	80047e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d112      	bne.n	800481a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	f043 0204 	orr.w	r2, r3, #4
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f8b3 	bl	80049a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800483e:	e039      	b.n	80048b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b2a      	cmp	r3, #42	; 0x2a
 8004844:	d109      	bne.n	800485a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2228      	movs	r2, #40	; 0x28
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff f827 	bl	80038a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b28      	cmp	r3, #40	; 0x28
 8004864:	d111      	bne.n	800488a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <I2C_Slave_STOPF+0x25c>)
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff f828 	bl	80038d8 <HAL_I2C_ListenCpltCallback>
}
 8004888:	e014      	b.n	80048b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	2b22      	cmp	r3, #34	; 0x22
 8004890:	d002      	beq.n	8004898 <I2C_Slave_STOPF+0x234>
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b22      	cmp	r3, #34	; 0x22
 8004896:	d10d      	bne.n	80048b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fe fffa 	bl	80038a8 <HAL_I2C_SlaveRxCpltCallback>
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	08004ea9 	.word	0x08004ea9
 80048c0:	ffff0000 	.word	0xffff0000

080048c4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d002      	beq.n	80048e6 <I2C_Slave_AF+0x22>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d129      	bne.n	800493a <I2C_Slave_AF+0x76>
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b28      	cmp	r3, #40	; 0x28
 80048ea:	d126      	bne.n	800493a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a2c      	ldr	r2, [pc, #176]	; (80049a0 <I2C_Slave_AF+0xdc>)
 80048f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004900:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800490a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fe ffd0 	bl	80038d8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004938:	e02e      	b.n	8004998 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	2b21      	cmp	r3, #33	; 0x21
 800493e:	d126      	bne.n	800498e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <I2C_Slave_AF+0xdc>)
 8004944:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2221      	movs	r2, #33	; 0x21
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800496a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004974:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004984:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fe ff84 	bl	8003894 <HAL_I2C_SlaveTxCpltCallback>
}
 800498c:	e004      	b.n	8004998 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004996:	615a      	str	r2, [r3, #20]
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	ffff0000 	.word	0xffff0000

080049a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049bc:	7bbb      	ldrb	r3, [r7, #14]
 80049be:	2b10      	cmp	r3, #16
 80049c0:	d002      	beq.n	80049c8 <I2C_ITError+0x24>
 80049c2:	7bbb      	ldrb	r3, [r7, #14]
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d10a      	bne.n	80049de <I2C_ITError+0x3a>
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b22      	cmp	r3, #34	; 0x22
 80049cc:	d107      	bne.n	80049de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049e4:	2b28      	cmp	r3, #40	; 0x28
 80049e6:	d107      	bne.n	80049f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2228      	movs	r2, #40	; 0x28
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049f6:	e015      	b.n	8004a24 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a06:	d00a      	beq.n	8004a1e <I2C_ITError+0x7a>
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b60      	cmp	r3, #96	; 0x60
 8004a0c:	d007      	beq.n	8004a1e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a32:	d162      	bne.n	8004afa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a42:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d020      	beq.n	8004a94 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a56:	4a6a      	ldr	r2, [pc, #424]	; (8004c00 <I2C_ITError+0x25c>)
 8004a58:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fd fc84 	bl	800236c <HAL_DMA_Abort_IT>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 8089 	beq.w	8004b7e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0201 	bic.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4798      	blx	r3
 8004a92:	e074      	b.n	8004b7e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	4a59      	ldr	r2, [pc, #356]	; (8004c00 <I2C_ITError+0x25c>)
 8004a9a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fd fc63 	bl	800236c <HAL_DMA_Abort_IT>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d068      	beq.n	8004b7e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	d10b      	bne.n	8004ad2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0201 	bic.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004af4:	4610      	mov	r0, r2
 8004af6:	4798      	blx	r3
 8004af8:	e041      	b.n	8004b7e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b60      	cmp	r3, #96	; 0x60
 8004b04:	d125      	bne.n	8004b52 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d10b      	bne.n	8004b3a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fe feec 	bl	8003928 <HAL_I2C_AbortCpltCallback>
 8004b50:	e015      	b.n	8004b7e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d10b      	bne.n	8004b78 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7fe fecb 	bl	8003914 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10e      	bne.n	8004bac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d113      	bne.n	8004bf8 <I2C_ITError+0x254>
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	2b28      	cmp	r3, #40	; 0x28
 8004bd4:	d110      	bne.n	8004bf8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <I2C_ITError+0x260>)
 8004bda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fe fe70 	bl	80038d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	08004ea9 	.word	0x08004ea9
 8004c04:	ffff0000 	.word	0xffff0000

08004c08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	460b      	mov	r3, r1
 8004c16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d006      	beq.n	8004c32 <I2C_MasterRequestWrite+0x2a>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d003      	beq.n	8004c32 <I2C_MasterRequestWrite+0x2a>
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c30:	d108      	bne.n	8004c44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e00b      	b.n	8004c5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	2b12      	cmp	r3, #18
 8004c4a:	d107      	bne.n	8004c5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f9c5 	bl	8004ff8 <I2C_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c82:	d103      	bne.n	8004c8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e035      	b.n	8004cfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c98:	d108      	bne.n	8004cac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c9a:	897b      	ldrh	r3, [r7, #10]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ca8:	611a      	str	r2, [r3, #16]
 8004caa:	e01b      	b.n	8004ce4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cac:	897b      	ldrh	r3, [r7, #10]
 8004cae:	11db      	asrs	r3, r3, #7
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f003 0306 	and.w	r3, r3, #6
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f063 030f 	orn	r3, r3, #15
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	490e      	ldr	r1, [pc, #56]	; (8004d04 <I2C_MasterRequestWrite+0xfc>)
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f9eb 	bl	80050a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e010      	b.n	8004cfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cda:	897b      	ldrh	r3, [r7, #10]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4907      	ldr	r1, [pc, #28]	; (8004d08 <I2C_MasterRequestWrite+0x100>)
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 f9db 	bl	80050a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	00010008 	.word	0x00010008
 8004d08:	00010002 	.word	0x00010002

08004d0c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d30:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d006      	beq.n	8004d46 <I2C_MasterRequestRead+0x3a>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d003      	beq.n	8004d46 <I2C_MasterRequestRead+0x3a>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d44:	d108      	bne.n	8004d58 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e00b      	b.n	8004d70 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	2b11      	cmp	r3, #17
 8004d5e:	d107      	bne.n	8004d70 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f93b 	bl	8004ff8 <I2C_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00d      	beq.n	8004da4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d96:	d103      	bne.n	8004da0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e079      	b.n	8004e98 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dac:	d108      	bne.n	8004dc0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004dae:	897b      	ldrh	r3, [r7, #10]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	611a      	str	r2, [r3, #16]
 8004dbe:	e05f      	b.n	8004e80 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dc0:	897b      	ldrh	r3, [r7, #10]
 8004dc2:	11db      	asrs	r3, r3, #7
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f003 0306 	and.w	r3, r3, #6
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f063 030f 	orn	r3, r3, #15
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4930      	ldr	r1, [pc, #192]	; (8004ea0 <I2C_MasterRequestRead+0x194>)
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f961 	bl	80050a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e054      	b.n	8004e98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dee:	897b      	ldrh	r3, [r7, #10]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4929      	ldr	r1, [pc, #164]	; (8004ea4 <I2C_MasterRequestRead+0x198>)
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f951 	bl	80050a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e044      	b.n	8004e98 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e32:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f8d9 	bl	8004ff8 <I2C_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00d      	beq.n	8004e68 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5a:	d103      	bne.n	8004e64 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e62:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e017      	b.n	8004e98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e68:	897b      	ldrh	r3, [r7, #10]
 8004e6a:	11db      	asrs	r3, r3, #7
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 0306 	and.w	r3, r3, #6
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f063 030e 	orn	r3, r3, #14
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	4907      	ldr	r1, [pc, #28]	; (8004ea4 <I2C_MasterRequestRead+0x198>)
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f90d 	bl	80050a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	00010008 	.word	0x00010008
 8004ea4:	00010002 	.word	0x00010002

08004ea8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ec2:	4b4b      	ldr	r3, [pc, #300]	; (8004ff0 <I2C_DMAAbort+0x148>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	08db      	lsrs	r3, r3, #3
 8004ec8:	4a4a      	ldr	r2, [pc, #296]	; (8004ff4 <I2C_DMAAbort+0x14c>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	0a1a      	lsrs	r2, r3, #8
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	00da      	lsls	r2, r3, #3
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f043 0220 	orr.w	r2, r3, #32
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004eee:	e00a      	b.n	8004f06 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f04:	d0ea      	beq.n	8004edc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f12:	2200      	movs	r2, #0
 8004f14:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	2200      	movs	r2, #0
 8004f24:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f34:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	2200      	movs	r2, #0
 8004f4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	2200      	movs	r2, #0
 8004f5a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0201 	bic.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b60      	cmp	r3, #96	; 0x60
 8004f76:	d10e      	bne.n	8004f96 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f8e:	6978      	ldr	r0, [r7, #20]
 8004f90:	f7fe fcca 	bl	8003928 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f94:	e027      	b.n	8004fe6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f9c:	2b28      	cmp	r3, #40	; 0x28
 8004f9e:	d117      	bne.n	8004fd0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fbe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2228      	movs	r2, #40	; 0x28
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fce:	e007      	b.n	8004fe0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004fe0:	6978      	ldr	r0, [r7, #20]
 8004fe2:	f7fe fc97 	bl	8003914 <HAL_I2C_ErrorCallback>
}
 8004fe6:	bf00      	nop
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000000 	.word	0x20000000
 8004ff4:	14f8b589 	.word	0x14f8b589

08004ff8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005008:	e025      	b.n	8005056 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d021      	beq.n	8005056 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005012:	f7fc ff6f 	bl	8001ef4 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d302      	bcc.n	8005028 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d116      	bne.n	8005056 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e023      	b.n	800509e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10d      	bne.n	800507c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	43da      	mvns	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4013      	ands	r3, r2
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	bf0c      	ite	eq
 8005072:	2301      	moveq	r3, #1
 8005074:	2300      	movne	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	e00c      	b.n	8005096 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	43da      	mvns	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4013      	ands	r3, r2
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	bf0c      	ite	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	2300      	movne	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	429a      	cmp	r2, r3
 800509a:	d0b6      	beq.n	800500a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050b4:	e051      	b.n	800515a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c4:	d123      	bne.n	800510e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f043 0204 	orr.w	r2, r3, #4
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e046      	b.n	800519c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d021      	beq.n	800515a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005116:	f7fc feed 	bl	8001ef4 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	429a      	cmp	r2, r3
 8005124:	d302      	bcc.n	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d116      	bne.n	800515a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f043 0220 	orr.w	r2, r3, #32
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e020      	b.n	800519c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	0c1b      	lsrs	r3, r3, #16
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	d10c      	bne.n	800517e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	43da      	mvns	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4013      	ands	r3, r2
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf14      	ite	ne
 8005176:	2301      	movne	r3, #1
 8005178:	2300      	moveq	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	e00b      	b.n	8005196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	43da      	mvns	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	4013      	ands	r3, r2
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	bf14      	ite	ne
 8005190:	2301      	movne	r3, #1
 8005192:	2300      	moveq	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d18d      	bne.n	80050b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051b0:	e02d      	b.n	800520e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f900 	bl	80053b8 <I2C_IsAcknowledgeFailed>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e02d      	b.n	800521e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d021      	beq.n	800520e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ca:	f7fc fe93 	bl	8001ef4 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d302      	bcc.n	80051e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d116      	bne.n	800520e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f043 0220 	orr.w	r2, r3, #32
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e007      	b.n	800521e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005218:	2b80      	cmp	r3, #128	; 0x80
 800521a:	d1ca      	bne.n	80051b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005232:	e02d      	b.n	8005290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f8bf 	bl	80053b8 <I2C_IsAcknowledgeFailed>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e02d      	b.n	80052a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d021      	beq.n	8005290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524c:	f7fc fe52 	bl	8001ef4 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	429a      	cmp	r2, r3
 800525a:	d302      	bcc.n	8005262 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d116      	bne.n	8005290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	f043 0220 	orr.w	r2, r3, #32
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e007      	b.n	80052a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b04      	cmp	r3, #4
 800529c:	d1ca      	bne.n	8005234 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052b4:	4b13      	ldr	r3, [pc, #76]	; (8005304 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	08db      	lsrs	r3, r3, #3
 80052ba:	4a13      	ldr	r2, [pc, #76]	; (8005308 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	0a1a      	lsrs	r2, r3, #8
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d107      	bne.n	80052e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f043 0220 	orr.w	r2, r3, #32
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e008      	b.n	80052f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f4:	d0e9      	beq.n	80052ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	20000000 	.word	0x20000000
 8005308:	14f8b589 	.word	0x14f8b589

0800530c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005318:	e042      	b.n	80053a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b10      	cmp	r3, #16
 8005326:	d119      	bne.n	800535c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0210 	mvn.w	r2, #16
 8005330:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e029      	b.n	80053b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535c:	f7fc fdca 	bl	8001ef4 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	429a      	cmp	r2, r3
 800536a:	d302      	bcc.n	8005372 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d116      	bne.n	80053a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e007      	b.n	80053b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	d1b5      	bne.n	800531a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ce:	d11b      	bne.n	8005408 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	f043 0204 	orr.w	r2, r3, #4
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005426:	d103      	bne.n	8005430 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800542e:	e007      	b.n	8005440 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005438:	d102      	bne.n	8005440 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2208      	movs	r2, #8
 800543e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e0e1      	b.n	8005622 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d109      	bne.n	800547e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a6d      	ldr	r2, [pc, #436]	; (800562c <HAL_I2S_Init+0x1e0>)
 8005476:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fc fa01 	bl	8001880 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2202      	movs	r2, #2
 8005482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005494:	f023 030f 	bic.w	r3, r3, #15
 8005498:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2202      	movs	r2, #2
 80054a0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d06f      	beq.n	800558a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80054b2:	2310      	movs	r3, #16
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	e001      	b.n	80054bc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80054b8:	2320      	movs	r3, #32
 80054ba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d802      	bhi.n	80054ca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a58      	ldr	r2, [pc, #352]	; (8005630 <HAL_I2S_Init+0x1e4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d004      	beq.n	80054de <HAL_I2S_Init+0x92>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a56      	ldr	r2, [pc, #344]	; (8005634 <HAL_I2S_Init+0x1e8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d104      	bne.n	80054e8 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80054de:	2001      	movs	r0, #1
 80054e0:	f000 fdf6 	bl	80060d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	e003      	b.n	80054f0 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80054e8:	2002      	movs	r0, #2
 80054ea:	f000 fdf1 	bl	80060d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80054ee:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f8:	d125      	bne.n	8005546 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d010      	beq.n	8005524 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	fbb2 f2f3 	udiv	r2, r2, r3
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	461a      	mov	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	fbb2 f3f3 	udiv	r3, r2, r3
 800551e:	3305      	adds	r3, #5
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e01f      	b.n	8005564 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	fbb2 f2f3 	udiv	r2, r2, r3
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	461a      	mov	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	3305      	adds	r3, #5
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	e00e      	b.n	8005564 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	fbb2 f2f3 	udiv	r2, r2, r3
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	461a      	mov	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	3305      	adds	r3, #5
 8005562:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4a34      	ldr	r2, [pc, #208]	; (8005638 <HAL_I2S_Init+0x1ec>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	08db      	lsrs	r3, r3, #3
 800556e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	085b      	lsrs	r3, r3, #1
 8005580:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	e003      	b.n	8005592 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800558a:	2302      	movs	r3, #2
 800558c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d902      	bls.n	800559e <HAL_I2S_Init+0x152>
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2bff      	cmp	r3, #255	; 0xff
 800559c:	d907      	bls.n	80055ae <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	f043 0210 	orr.w	r2, r3, #16
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e039      	b.n	8005622 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	ea42 0103 	orr.w	r1, r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	430a      	orrs	r2, r1
 80055c0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80055cc:	f023 030f 	bic.w	r3, r3, #15
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6851      	ldr	r1, [r2, #4]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6892      	ldr	r2, [r2, #8]
 80055d8:	4311      	orrs	r1, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	68d2      	ldr	r2, [r2, #12]
 80055de:	4311      	orrs	r1, r2
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6992      	ldr	r2, [r2, #24]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055f0:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b30      	cmp	r3, #48	; 0x30
 80055f8:	d003      	beq.n	8005602 <HAL_I2S_Init+0x1b6>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2bb0      	cmp	r3, #176	; 0xb0
 8005600:	d107      	bne.n	8005612 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005610:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	08005733 	.word	0x08005733
 8005630:	40003800 	.word	0x40003800
 8005634:	40003c00 	.word	0x40003c00
 8005638:	cccccccd 	.word	0xcccccccd

0800563c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	881a      	ldrh	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	1c9a      	adds	r2, r3, #2
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10e      	bne.n	80056cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff ffb8 	bl	800563c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	b292      	uxth	r2, r2
 80056e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	1c9a      	adds	r2, r3, #2
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10e      	bne.n	800572a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800571a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff ff93 	bl	8005650 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b04      	cmp	r3, #4
 800574c:	d13a      	bne.n	80057c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d109      	bne.n	800576c <I2S_IRQHandler+0x3a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d102      	bne.n	800576c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff ffb4 	bl	80056d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d126      	bne.n	80057c4 <I2S_IRQHandler+0x92>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b20      	cmp	r3, #32
 8005782:	d11f      	bne.n	80057c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005792:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	f043 0202 	orr.w	r2, r3, #2
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff ff50 	bl	8005664 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d136      	bne.n	800583e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d109      	bne.n	80057ee <I2S_IRQHandler+0xbc>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	2b80      	cmp	r3, #128	; 0x80
 80057e6:	d102      	bne.n	80057ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff ff45 	bl	8005678 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d122      	bne.n	800583e <I2S_IRQHandler+0x10c>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b20      	cmp	r3, #32
 8005804:	d11b      	bne.n	800583e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005814:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	f043 0204 	orr.w	r2, r3, #4
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff ff13 	bl	8005664 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800583e:	bf00      	nop
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0cc      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800585c:	4b68      	ldr	r3, [pc, #416]	; (8005a00 <HAL_RCC_ClockConfig+0x1b8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d90c      	bls.n	8005884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800586a:	4b65      	ldr	r3, [pc, #404]	; (8005a00 <HAL_RCC_ClockConfig+0x1b8>)
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005872:	4b63      	ldr	r3, [pc, #396]	; (8005a00 <HAL_RCC_ClockConfig+0x1b8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d001      	beq.n	8005884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0b8      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d020      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800589c:	4b59      	ldr	r3, [pc, #356]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4a58      	ldr	r2, [pc, #352]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058b4:	4b53      	ldr	r3, [pc, #332]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4a52      	ldr	r2, [pc, #328]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c0:	4b50      	ldr	r3, [pc, #320]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	494d      	ldr	r1, [pc, #308]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d044      	beq.n	8005968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d107      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e6:	4b47      	ldr	r3, [pc, #284]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d119      	bne.n	8005926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e07f      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d003      	beq.n	8005906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005902:	2b03      	cmp	r3, #3
 8005904:	d107      	bne.n	8005916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005906:	4b3f      	ldr	r3, [pc, #252]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e06f      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005916:	4b3b      	ldr	r3, [pc, #236]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e067      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005926:	4b37      	ldr	r3, [pc, #220]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f023 0203 	bic.w	r2, r3, #3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4934      	ldr	r1, [pc, #208]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 8005934:	4313      	orrs	r3, r2
 8005936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005938:	f7fc fadc 	bl	8001ef4 <HAL_GetTick>
 800593c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800593e:	e00a      	b.n	8005956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005940:	f7fc fad8 	bl	8001ef4 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	f241 3288 	movw	r2, #5000	; 0x1388
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e04f      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005956:	4b2b      	ldr	r3, [pc, #172]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 020c 	and.w	r2, r3, #12
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	429a      	cmp	r2, r3
 8005966:	d1eb      	bne.n	8005940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005968:	4b25      	ldr	r3, [pc, #148]	; (8005a00 <HAL_RCC_ClockConfig+0x1b8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d20c      	bcs.n	8005990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005976:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <HAL_RCC_ClockConfig+0x1b8>)
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800597e:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <HAL_RCC_ClockConfig+0x1b8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d001      	beq.n	8005990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e032      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800599c:	4b19      	ldr	r3, [pc, #100]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4916      	ldr	r1, [pc, #88]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ba:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	490e      	ldr	r1, [pc, #56]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059ce:	f000 fdc7 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 80059d2:	4602      	mov	r2, r0
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	091b      	lsrs	r3, r3, #4
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	490a      	ldr	r1, [pc, #40]	; (8005a08 <HAL_RCC_ClockConfig+0x1c0>)
 80059e0:	5ccb      	ldrb	r3, [r1, r3]
 80059e2:	fa22 f303 	lsr.w	r3, r2, r3
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <HAL_RCC_ClockConfig+0x1c4>)
 80059e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059ea:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <HAL_RCC_ClockConfig+0x1c8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fc fa3c 	bl	8001e6c <HAL_InitTick>

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40023c00 	.word	0x40023c00
 8005a04:	40023800 	.word	0x40023800
 8005a08:	0800df38 	.word	0x0800df38
 8005a0c:	20000000 	.word	0x20000000
 8005a10:	20000004 	.word	0x20000004

08005a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a18:	4b03      	ldr	r3, [pc, #12]	; (8005a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20000000 	.word	0x20000000

08005a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a30:	f7ff fff0 	bl	8005a14 <HAL_RCC_GetHCLKFreq>
 8005a34:	4602      	mov	r2, r0
 8005a36:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	0a9b      	lsrs	r3, r3, #10
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	4903      	ldr	r1, [pc, #12]	; (8005a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a42:	5ccb      	ldrb	r3, [r1, r3]
 8005a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	0800df48 	.word	0x0800df48

08005a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a58:	f7ff ffdc 	bl	8005a14 <HAL_RCC_GetHCLKFreq>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	0b5b      	lsrs	r3, r3, #13
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	4903      	ldr	r1, [pc, #12]	; (8005a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a6a:	5ccb      	ldrb	r3, [r1, r3]
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40023800 	.word	0x40023800
 8005a78:	0800df48 	.word	0x0800df48

08005a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08c      	sub	sp, #48	; 0x30
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005ab4:	4b6f      	ldr	r3, [pc, #444]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aba:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	496c      	ldr	r1, [pc, #432]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005ae2:	4b64      	ldr	r3, [pc, #400]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af0:	4960      	ldr	r1, [pc, #384]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005b00:	2301      	movs	r3, #1
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d017      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b10:	4b58      	ldr	r3, [pc, #352]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1e:	4955      	ldr	r1, [pc, #340]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b2e:	d101      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005b30:	2301      	movs	r3, #1
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d017      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b4c:	4b49      	ldr	r3, [pc, #292]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5a:	4946      	ldr	r1, [pc, #280]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b6a:	d101      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 808a 	beq.w	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	4b39      	ldr	r3, [pc, #228]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	4a38      	ldr	r2, [pc, #224]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b98:	6413      	str	r3, [r2, #64]	; 0x40
 8005b9a:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ba6:	4b34      	ldr	r3, [pc, #208]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a33      	ldr	r2, [pc, #204]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bb2:	f7fc f99f 	bl	8001ef4 <HAL_GetTick>
 8005bb6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005bba:	f7fc f99b 	bl	8001ef4 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e278      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bcc:	4b2a      	ldr	r3, [pc, #168]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0f0      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bd8:	4b26      	ldr	r3, [pc, #152]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d02f      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d028      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bf6:	4b1f      	ldr	r3, [pc, #124]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfe:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c00:	4b1e      	ldr	r3, [pc, #120]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c06:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c0c:	4a19      	ldr	r2, [pc, #100]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c12:	4b18      	ldr	r3, [pc, #96]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d114      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c1e:	f7fc f969 	bl	8001ef4 <HAL_GetTick>
 8005c22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c24:	e00a      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c26:	f7fc f965 	bl	8001ef4 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e240      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0ee      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c54:	d114      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005c56:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c6a:	4902      	ldr	r1, [pc, #8]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	608b      	str	r3, [r1, #8]
 8005c70:	e00c      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005c72:	bf00      	nop
 8005c74:	40023800 	.word	0x40023800
 8005c78:	40007000 	.word	0x40007000
 8005c7c:	42470e40 	.word	0x42470e40
 8005c80:	4b4a      	ldr	r3, [pc, #296]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4a49      	ldr	r2, [pc, #292]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c8a:	6093      	str	r3, [r2, #8]
 8005c8c:	4b47      	ldr	r3, [pc, #284]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c98:	4944      	ldr	r1, [pc, #272]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005cb0:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005cb2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005cc0:	4b3a      	ldr	r3, [pc, #232]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cce:	4937      	ldr	r1, [pc, #220]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ce2:	4b32      	ldr	r3, [pc, #200]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf0:	492e      	ldr	r1, [pc, #184]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d011      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d04:	4b29      	ldr	r3, [pc, #164]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d0a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	4926      	ldr	r1, [pc, #152]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d22:	d101      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005d24:	2301      	movs	r3, #1
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005d34:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	491a      	ldr	r1, [pc, #104]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d011      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005d56:	4b15      	ldr	r3, [pc, #84]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d5c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d64:	4911      	ldr	r1, [pc, #68]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d74:	d101      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005d76:	2301      	movs	r3, #1
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d005      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d88:	f040 80ff 	bne.w	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d92:	f7fc f8af 	bl	8001ef4 <HAL_GetTick>
 8005d96:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d98:	e00e      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d9a:	f7fc f8ab 	bl	8001ef4 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d907      	bls.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e188      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005dac:	40023800 	.word	0x40023800
 8005db0:	424711e0 	.word	0x424711e0
 8005db4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005db8:	4b7e      	ldr	r3, [pc, #504]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1ea      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d009      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d028      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d124      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005dec:	4b71      	ldr	r3, [pc, #452]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df2:	0c1b      	lsrs	r3, r3, #16
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	3301      	adds	r3, #1
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005dfe:	4b6d      	ldr	r3, [pc, #436]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e04:	0e1b      	lsrs	r3, r3, #24
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	019b      	lsls	r3, r3, #6
 8005e16:	431a      	orrs	r2, r3
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	041b      	lsls	r3, r3, #16
 8005e20:	431a      	orrs	r2, r3
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	061b      	lsls	r3, r3, #24
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	071b      	lsls	r3, r3, #28
 8005e2e:	4961      	ldr	r1, [pc, #388]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d004      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e4a:	d00a      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d035      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e60:	d130      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005e62:	4b54      	ldr	r3, [pc, #336]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e68:	0c1b      	lsrs	r3, r3, #16
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	3301      	adds	r3, #1
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e74:	4b4f      	ldr	r3, [pc, #316]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e7a:	0f1b      	lsrs	r3, r3, #28
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	019b      	lsls	r3, r3, #6
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	085b      	lsrs	r3, r3, #1
 8005e92:	3b01      	subs	r3, #1
 8005e94:	041b      	lsls	r3, r3, #16
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	061b      	lsls	r3, r3, #24
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	071b      	lsls	r3, r3, #28
 8005ea4:	4943      	ldr	r1, [pc, #268]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005eac:	4b41      	ldr	r3, [pc, #260]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eb2:	f023 021f 	bic.w	r2, r3, #31
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	493d      	ldr	r1, [pc, #244]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d029      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed8:	d124      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005eda:	4b36      	ldr	r3, [pc, #216]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005eec:	4b31      	ldr	r3, [pc, #196]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef2:	0f1b      	lsrs	r3, r3, #28
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	019b      	lsls	r3, r3, #6
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	041b      	lsls	r3, r3, #16
 8005f10:	431a      	orrs	r2, r3
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	061b      	lsls	r3, r3, #24
 8005f16:	431a      	orrs	r2, r3
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	071b      	lsls	r3, r3, #28
 8005f1c:	4925      	ldr	r1, [pc, #148]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d016      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	019b      	lsls	r3, r3, #6
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	3b01      	subs	r3, #1
 8005f44:	041b      	lsls	r3, r3, #16
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	061b      	lsls	r3, r3, #24
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	071b      	lsls	r3, r3, #28
 8005f56:	4917      	ldr	r1, [pc, #92]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f5e:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f64:	f7fb ffc6 	bl	8001ef4 <HAL_GetTick>
 8005f68:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f6c:	f7fb ffc2 	bl	8001ef4 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e09f      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f0      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	f040 8095 	bne.w	80060bc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f92:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f98:	f7fb ffac 	bl	8001ef4 <HAL_GetTick>
 8005f9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f9e:	e00f      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005fa0:	f7fb ffa8 	bl	8001ef4 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d908      	bls.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e085      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005fb2:	bf00      	nop
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	42470068 	.word	0x42470068
 8005fbc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fc0:	4b41      	ldr	r3, [pc, #260]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fcc:	d0e8      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d009      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d02b      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d127      	bne.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005ff6:	4b34      	ldr	r3, [pc, #208]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	3301      	adds	r3, #1
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	019b      	lsls	r3, r3, #6
 8006012:	431a      	orrs	r2, r3
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	3b01      	subs	r3, #1
 800601a:	041b      	lsls	r3, r3, #16
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	061b      	lsls	r3, r3, #24
 8006024:	4928      	ldr	r1, [pc, #160]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800602c:	4b26      	ldr	r3, [pc, #152]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800602e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006032:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	3b01      	subs	r3, #1
 800603c:	021b      	lsls	r3, r3, #8
 800603e:	4922      	ldr	r1, [pc, #136]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d01d      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800605a:	d118      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800605c:	4b1a      	ldr	r3, [pc, #104]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006062:	0e1b      	lsrs	r3, r3, #24
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	019b      	lsls	r3, r3, #6
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	085b      	lsrs	r3, r3, #1
 800607c:	3b01      	subs	r3, #1
 800607e:	041b      	lsls	r3, r3, #16
 8006080:	431a      	orrs	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	061b      	lsls	r3, r3, #24
 8006086:	4910      	ldr	r1, [pc, #64]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800608e:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006090:	2201      	movs	r2, #1
 8006092:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006094:	f7fb ff2e 	bl	8001ef4 <HAL_GetTick>
 8006098:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800609a:	e008      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800609c:	f7fb ff2a 	bl	8001ef4 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d901      	bls.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e007      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80060ae:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ba:	d1ef      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3730      	adds	r7, #48	; 0x30
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	40023800 	.word	0x40023800
 80060cc:	42470070 	.word	0x42470070

080060d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b089      	sub	sp, #36	; 0x24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	2b07      	cmp	r3, #7
 80060f6:	f200 8224 	bhi.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006303 	.word	0x08006303
 8006104:	0800642d 	.word	0x0800642d
 8006108:	08006543 	.word	0x08006543
 800610c:	08006121 	.word	0x08006121
 8006110:	08006543 	.word	0x08006543
 8006114:	08006543 	.word	0x08006543
 8006118:	08006543 	.word	0x08006543
 800611c:	08006121 	.word	0x08006121
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8006120:	4ba8      	ldr	r3, [pc, #672]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006126:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006136:	f000 80d6 	beq.w	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006140:	f200 80dd 	bhi.w	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800614a:	f000 809f 	beq.w	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006154:	f200 80d3 	bhi.w	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800615e:	d05b      	beq.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006166:	f200 80ca 	bhi.w	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006170:	f000 80b6 	beq.w	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800617a:	f200 80c0 	bhi.w	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006184:	f000 8082 	beq.w	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800618e:	f200 80b6 	bhi.w	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800619e:	d03b      	beq.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 80061a0:	e0ad      	b.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80061a2:	4b88      	ldr	r3, [pc, #544]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d109      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80061ae:	4b85      	ldr	r3, [pc, #532]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061b8:	4a83      	ldr	r2, [pc, #524]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80061ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	e008      	b.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80061c2:	4b80      	ldr	r3, [pc, #512]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061cc:	4a7f      	ldr	r2, [pc, #508]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80061ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d2:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80061d4:	4b7b      	ldr	r3, [pc, #492]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	0e1b      	lsrs	r3, r3, #24
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80061e2:	4b78      	ldr	r3, [pc, #480]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80061e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e8:	099b      	lsrs	r3, r3, #6
 80061ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	fb03 f202 	mul.w	r2, r3, r2
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fa:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80061fc:	4b71      	ldr	r3, [pc, #452]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80061fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006202:	0a1b      	lsrs	r3, r3, #8
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	3301      	adds	r3, #1
 800620a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	61fb      	str	r3, [r7, #28]
          break;
 8006216:	e073      	b.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006218:	4b6a      	ldr	r3, [pc, #424]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d109      	bne.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006224:	4b67      	ldr	r3, [pc, #412]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800622a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800622e:	4a66      	ldr	r2, [pc, #408]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	e008      	b.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8006238:	4b62      	ldr	r3, [pc, #392]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800623a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800623e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006242:	4a62      	ldr	r2, [pc, #392]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006244:	fbb2 f3f3 	udiv	r3, r2, r3
 8006248:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800624a:	4b5e      	ldr	r3, [pc, #376]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800624c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006250:	0e1b      	lsrs	r3, r3, #24
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8006258:	4b5a      	ldr	r3, [pc, #360]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800625a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800625e:	099b      	lsrs	r3, r3, #6
 8006260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	fb03 f202 	mul.w	r2, r3, r2
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006270:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8006272:	4b54      	ldr	r3, [pc, #336]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006278:	f003 031f 	and.w	r3, r3, #31
 800627c:	3301      	adds	r3, #1
 800627e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	fbb2 f3f3 	udiv	r3, r2, r3
 8006288:	61fb      	str	r3, [r7, #28]
          break;
 800628a:	e039      	b.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800628c:	4b4d      	ldr	r3, [pc, #308]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d108      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006298:	4b4a      	ldr	r3, [pc, #296]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062a0:	4a49      	ldr	r2, [pc, #292]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80062a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a6:	61bb      	str	r3, [r7, #24]
 80062a8:	e007      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80062aa:	4b46      	ldr	r3, [pc, #280]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062b2:	4a46      	ldr	r2, [pc, #280]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80062b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b8:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80062ba:	4b42      	ldr	r3, [pc, #264]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	0f1b      	lsrs	r3, r3, #28
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80062c6:	4b3f      	ldr	r3, [pc, #252]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	099b      	lsrs	r3, r3, #6
 80062cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	fb03 f202 	mul.w	r2, r3, r2
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062dc:	61fb      	str	r3, [r7, #28]
          break;
 80062de:	e00f      	b.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80062e0:	4b3b      	ldr	r3, [pc, #236]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80062e2:	61fb      	str	r3, [r7, #28]
          break;
 80062e4:	e00c      	b.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80062e6:	4b37      	ldr	r3, [pc, #220]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80062f2:	4b35      	ldr	r3, [pc, #212]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80062f4:	61fb      	str	r3, [r7, #28]
          break;
 80062f6:	e003      	b.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80062f8:	4b34      	ldr	r3, [pc, #208]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80062fa:	61fb      	str	r3, [r7, #28]
          break;
 80062fc:	e000      	b.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80062fe:	bf00      	nop
        }
      }
      break;
 8006300:	e11f      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8006302:	4b30      	ldr	r3, [pc, #192]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006308:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8006314:	d079      	beq.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800631c:	f200 8082 	bhi.w	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006326:	d03c      	beq.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800632e:	d879      	bhi.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d006      	beq.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800633c:	d172      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800633e:	4b24      	ldr	r3, [pc, #144]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006340:	61fb      	str	r3, [r7, #28]
          break;
 8006342:	e072      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006344:	4b1f      	ldr	r3, [pc, #124]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006350:	d109      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006352:	4b1c      	ldr	r3, [pc, #112]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800635c:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800635e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	e008      	b.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006366:	4b17      	ldr	r3, [pc, #92]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800636c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006370:	4a15      	ldr	r2, [pc, #84]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006372:	fbb2 f3f3 	udiv	r3, r2, r3
 8006376:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006378:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800637a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800637e:	099b      	lsrs	r3, r3, #6
 8006380:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	fb02 f303 	mul.w	r3, r2, r3
 800638a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800638c:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800638e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006392:	0f1b      	lsrs	r3, r3, #28
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	fbb2 f3f3 	udiv	r3, r2, r3
 800639e:	61fb      	str	r3, [r7, #28]
          break;
 80063a0:	e043      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80063a2:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ae:	d111      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80063b0:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063b8:	4a04      	ldr	r2, [pc, #16]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80063ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	e010      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80063c2:	bf00      	nop
 80063c4:	40023800 	.word	0x40023800
 80063c8:	00f42400 	.word	0x00f42400
 80063cc:	017d7840 	.word	0x017d7840
 80063d0:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80063d4:	4b5e      	ldr	r3, [pc, #376]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063dc:	4a5d      	ldr	r2, [pc, #372]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80063de:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e2:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80063e4:	4b5a      	ldr	r3, [pc, #360]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	099b      	lsrs	r3, r3, #6
 80063ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	fb02 f303 	mul.w	r3, r2, r3
 80063f4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80063f6:	4b56      	ldr	r3, [pc, #344]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	0f1b      	lsrs	r3, r3, #28
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	fbb2 f3f3 	udiv	r3, r2, r3
 8006406:	61fb      	str	r3, [r7, #28]
          break;
 8006408:	e00f      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800640a:	4b51      	ldr	r3, [pc, #324]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006416:	d102      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8006418:	4b4f      	ldr	r3, [pc, #316]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800641a:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800641c:	e005      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 800641e:	4b4d      	ldr	r3, [pc, #308]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006420:	61fb      	str	r3, [r7, #28]
          break;
 8006422:	e002      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	61fb      	str	r3, [r7, #28]
          break;
 8006428:	bf00      	nop
        }
      }
      break;
 800642a:	e08a      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 800642c:	4b48      	ldr	r3, [pc, #288]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800642e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006432:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800643e:	d06f      	beq.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006446:	d878      	bhi.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800644e:	d03c      	beq.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006456:	d870      	bhi.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d006      	beq.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006464:	d169      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006466:	4b3d      	ldr	r3, [pc, #244]	; (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8006468:	61fb      	str	r3, [r7, #28]
          break;
 800646a:	e069      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800646c:	4b38      	ldr	r3, [pc, #224]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006478:	d109      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800647a:	4b35      	ldr	r3, [pc, #212]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800647c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006484:	4a34      	ldr	r2, [pc, #208]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8006486:	fbb2 f3f3 	udiv	r3, r2, r3
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	e008      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800648e:	4b30      	ldr	r3, [pc, #192]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8006490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006498:	4a2e      	ldr	r2, [pc, #184]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80064a0:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80064a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a6:	099b      	lsrs	r3, r3, #6
 80064a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80064b4:	4b26      	ldr	r3, [pc, #152]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80064b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ba:	0f1b      	lsrs	r3, r3, #28
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c6:	61fb      	str	r3, [r7, #28]
          break;
 80064c8:	e03a      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80064ca:	4b21      	ldr	r3, [pc, #132]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064d6:	d108      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064e0:	4a1d      	ldr	r2, [pc, #116]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80064e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	e007      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064ea:	4b19      	ldr	r3, [pc, #100]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064f2:	4a18      	ldr	r2, [pc, #96]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80064fa:	4b15      	ldr	r3, [pc, #84]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	099b      	lsrs	r3, r3, #6
 8006500:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	fb02 f303 	mul.w	r3, r2, r3
 800650a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800650c:	4b10      	ldr	r3, [pc, #64]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	0f1b      	lsrs	r3, r3, #28
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	61fb      	str	r3, [r7, #28]
          break;
 800651e:	e00f      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800652c:	d102      	bne.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 800652e:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8006530:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8006532:	e005      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8006534:	4b07      	ldr	r3, [pc, #28]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006536:	61fb      	str	r3, [r7, #28]
          break;
 8006538:	e002      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	61fb      	str	r3, [r7, #28]
          break;
 800653e:	bf00      	nop
        }
      }
      break;
 8006540:	bf00      	nop
    }
  }
  return frequency;
 8006542:	69fb      	ldr	r3, [r7, #28]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3724      	adds	r7, #36	; 0x24
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	40023800 	.word	0x40023800
 8006554:	00f42400 	.word	0x00f42400
 8006558:	017d7840 	.word	0x017d7840
 800655c:	00bb8000 	.word	0x00bb8000

08006560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006564:	b0a6      	sub	sp, #152	; 0x98
 8006566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006586:	4bc8      	ldr	r3, [pc, #800]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f003 030c 	and.w	r3, r3, #12
 800658e:	2b0c      	cmp	r3, #12
 8006590:	f200 817e 	bhi.w	8006890 <HAL_RCC_GetSysClockFreq+0x330>
 8006594:	a201      	add	r2, pc, #4	; (adr r2, 800659c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659a:	bf00      	nop
 800659c:	080065d1 	.word	0x080065d1
 80065a0:	08006891 	.word	0x08006891
 80065a4:	08006891 	.word	0x08006891
 80065a8:	08006891 	.word	0x08006891
 80065ac:	080065d9 	.word	0x080065d9
 80065b0:	08006891 	.word	0x08006891
 80065b4:	08006891 	.word	0x08006891
 80065b8:	08006891 	.word	0x08006891
 80065bc:	080065e1 	.word	0x080065e1
 80065c0:	08006891 	.word	0x08006891
 80065c4:	08006891 	.word	0x08006891
 80065c8:	08006891 	.word	0x08006891
 80065cc:	0800674b 	.word	0x0800674b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065d0:	4bb6      	ldr	r3, [pc, #728]	; (80068ac <HAL_RCC_GetSysClockFreq+0x34c>)
 80065d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80065d6:	e15f      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065d8:	4bb5      	ldr	r3, [pc, #724]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x350>)
 80065da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80065de:	e15b      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065e0:	4bb1      	ldr	r3, [pc, #708]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065ec:	4bae      	ldr	r3, [pc, #696]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d031      	beq.n	800665c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065f8:	4bab      	ldr	r3, [pc, #684]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	099b      	lsrs	r3, r3, #6
 80065fe:	2200      	movs	r2, #0
 8006600:	66bb      	str	r3, [r7, #104]	; 0x68
 8006602:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660a:	663b      	str	r3, [r7, #96]	; 0x60
 800660c:	2300      	movs	r3, #0
 800660e:	667b      	str	r3, [r7, #100]	; 0x64
 8006610:	4ba7      	ldr	r3, [pc, #668]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8006612:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006616:	462a      	mov	r2, r5
 8006618:	fb03 f202 	mul.w	r2, r3, r2
 800661c:	2300      	movs	r3, #0
 800661e:	4621      	mov	r1, r4
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	4413      	add	r3, r2
 8006626:	4aa2      	ldr	r2, [pc, #648]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8006628:	4621      	mov	r1, r4
 800662a:	fba1 1202 	umull	r1, r2, r1, r2
 800662e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006630:	460a      	mov	r2, r1
 8006632:	67ba      	str	r2, [r7, #120]	; 0x78
 8006634:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006636:	4413      	add	r3, r2
 8006638:	67fb      	str	r3, [r7, #124]	; 0x7c
 800663a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800663e:	2200      	movs	r2, #0
 8006640:	65bb      	str	r3, [r7, #88]	; 0x58
 8006642:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006644:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006648:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800664c:	f7fa fb3c 	bl	8000cc8 <__aeabi_uldivmod>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4613      	mov	r3, r2
 8006656:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800665a:	e064      	b.n	8006726 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800665c:	4b92      	ldr	r3, [pc, #584]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x348>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	099b      	lsrs	r3, r3, #6
 8006662:	2200      	movs	r2, #0
 8006664:	653b      	str	r3, [r7, #80]	; 0x50
 8006666:	657a      	str	r2, [r7, #84]	; 0x54
 8006668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800666a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006670:	2300      	movs	r3, #0
 8006672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006674:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8006678:	4622      	mov	r2, r4
 800667a:	462b      	mov	r3, r5
 800667c:	f04f 0000 	mov.w	r0, #0
 8006680:	f04f 0100 	mov.w	r1, #0
 8006684:	0159      	lsls	r1, r3, #5
 8006686:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800668a:	0150      	lsls	r0, r2, #5
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4621      	mov	r1, r4
 8006692:	1a51      	subs	r1, r2, r1
 8006694:	6139      	str	r1, [r7, #16]
 8006696:	4629      	mov	r1, r5
 8006698:	eb63 0301 	sbc.w	r3, r3, r1
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	f04f 0200 	mov.w	r2, #0
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066aa:	4659      	mov	r1, fp
 80066ac:	018b      	lsls	r3, r1, #6
 80066ae:	4651      	mov	r1, sl
 80066b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066b4:	4651      	mov	r1, sl
 80066b6:	018a      	lsls	r2, r1, #6
 80066b8:	4651      	mov	r1, sl
 80066ba:	ebb2 0801 	subs.w	r8, r2, r1
 80066be:	4659      	mov	r1, fp
 80066c0:	eb63 0901 	sbc.w	r9, r3, r1
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066d8:	4690      	mov	r8, r2
 80066da:	4699      	mov	r9, r3
 80066dc:	4623      	mov	r3, r4
 80066de:	eb18 0303 	adds.w	r3, r8, r3
 80066e2:	60bb      	str	r3, [r7, #8]
 80066e4:	462b      	mov	r3, r5
 80066e6:	eb49 0303 	adc.w	r3, r9, r3
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066f8:	4629      	mov	r1, r5
 80066fa:	028b      	lsls	r3, r1, #10
 80066fc:	4621      	mov	r1, r4
 80066fe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006702:	4621      	mov	r1, r4
 8006704:	028a      	lsls	r2, r1, #10
 8006706:	4610      	mov	r0, r2
 8006708:	4619      	mov	r1, r3
 800670a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800670e:	2200      	movs	r2, #0
 8006710:	643b      	str	r3, [r7, #64]	; 0x40
 8006712:	647a      	str	r2, [r7, #68]	; 0x44
 8006714:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006718:	f7fa fad6 	bl	8000cc8 <__aeabi_uldivmod>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4613      	mov	r3, r2
 8006722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006726:	4b60      	ldr	r3, [pc, #384]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	0c1b      	lsrs	r3, r3, #16
 800672c:	f003 0303 	and.w	r3, r3, #3
 8006730:	3301      	adds	r3, #1
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8006738:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800673c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006748:	e0a6      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800674a:	4b57      	ldr	r3, [pc, #348]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x348>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006756:	4b54      	ldr	r3, [pc, #336]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d02a      	beq.n	80067b8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006762:	4b51      	ldr	r3, [pc, #324]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	099b      	lsrs	r3, r3, #6
 8006768:	2200      	movs	r2, #0
 800676a:	63bb      	str	r3, [r7, #56]	; 0x38
 800676c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006774:	2100      	movs	r1, #0
 8006776:	4b4e      	ldr	r3, [pc, #312]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8006778:	fb03 f201 	mul.w	r2, r3, r1
 800677c:	2300      	movs	r3, #0
 800677e:	fb00 f303 	mul.w	r3, r0, r3
 8006782:	4413      	add	r3, r2
 8006784:	4a4a      	ldr	r2, [pc, #296]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8006786:	fba0 1202 	umull	r1, r2, r0, r2
 800678a:	677a      	str	r2, [r7, #116]	; 0x74
 800678c:	460a      	mov	r2, r1
 800678e:	673a      	str	r2, [r7, #112]	; 0x70
 8006790:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006792:	4413      	add	r3, r2
 8006794:	677b      	str	r3, [r7, #116]	; 0x74
 8006796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800679a:	2200      	movs	r2, #0
 800679c:	633b      	str	r3, [r7, #48]	; 0x30
 800679e:	637a      	str	r2, [r7, #52]	; 0x34
 80067a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80067a4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80067a8:	f7fa fa8e 	bl	8000cc8 <__aeabi_uldivmod>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4613      	mov	r3, r2
 80067b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067b6:	e05b      	b.n	8006870 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067b8:	4b3b      	ldr	r3, [pc, #236]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	099b      	lsrs	r3, r3, #6
 80067be:	2200      	movs	r2, #0
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80067c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ca:	623b      	str	r3, [r7, #32]
 80067cc:	2300      	movs	r3, #0
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
 80067d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067d4:	4642      	mov	r2, r8
 80067d6:	464b      	mov	r3, r9
 80067d8:	f04f 0000 	mov.w	r0, #0
 80067dc:	f04f 0100 	mov.w	r1, #0
 80067e0:	0159      	lsls	r1, r3, #5
 80067e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067e6:	0150      	lsls	r0, r2, #5
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4641      	mov	r1, r8
 80067ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80067f2:	4649      	mov	r1, r9
 80067f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006804:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006808:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800680c:	ebb2 040a 	subs.w	r4, r2, sl
 8006810:	eb63 050b 	sbc.w	r5, r3, fp
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	f04f 0300 	mov.w	r3, #0
 800681c:	00eb      	lsls	r3, r5, #3
 800681e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006822:	00e2      	lsls	r2, r4, #3
 8006824:	4614      	mov	r4, r2
 8006826:	461d      	mov	r5, r3
 8006828:	4643      	mov	r3, r8
 800682a:	18e3      	adds	r3, r4, r3
 800682c:	603b      	str	r3, [r7, #0]
 800682e:	464b      	mov	r3, r9
 8006830:	eb45 0303 	adc.w	r3, r5, r3
 8006834:	607b      	str	r3, [r7, #4]
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006842:	4629      	mov	r1, r5
 8006844:	028b      	lsls	r3, r1, #10
 8006846:	4621      	mov	r1, r4
 8006848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800684c:	4621      	mov	r1, r4
 800684e:	028a      	lsls	r2, r1, #10
 8006850:	4610      	mov	r0, r2
 8006852:	4619      	mov	r1, r3
 8006854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006858:	2200      	movs	r2, #0
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	61fa      	str	r2, [r7, #28]
 800685e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006862:	f7fa fa31 	bl	8000cc8 <__aeabi_uldivmod>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4613      	mov	r3, r2
 800686c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006870:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	0f1b      	lsrs	r3, r3, #28
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800687e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006882:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006886:	fbb2 f3f3 	udiv	r3, r2, r3
 800688a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800688e:	e003      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006890:	4b06      	ldr	r3, [pc, #24]	; (80068ac <HAL_RCC_GetSysClockFreq+0x34c>)
 8006892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006896:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800689c:	4618      	mov	r0, r3
 800689e:	3798      	adds	r7, #152	; 0x98
 80068a0:	46bd      	mov	sp, r7
 80068a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068a6:	bf00      	nop
 80068a8:	40023800 	.word	0x40023800
 80068ac:	00f42400 	.word	0x00f42400
 80068b0:	017d7840 	.word	0x017d7840

080068b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e28d      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 8083 	beq.w	80069da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068d4:	4b94      	ldr	r3, [pc, #592]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 030c 	and.w	r3, r3, #12
 80068dc:	2b04      	cmp	r3, #4
 80068de:	d019      	beq.n	8006914 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068e0:	4b91      	ldr	r3, [pc, #580]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d106      	bne.n	80068fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068ec:	4b8e      	ldr	r3, [pc, #568]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068f8:	d00c      	beq.n	8006914 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068fa:	4b8b      	ldr	r3, [pc, #556]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006902:	2b0c      	cmp	r3, #12
 8006904:	d112      	bne.n	800692c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006906:	4b88      	ldr	r3, [pc, #544]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006912:	d10b      	bne.n	800692c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006914:	4b84      	ldr	r3, [pc, #528]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d05b      	beq.n	80069d8 <HAL_RCC_OscConfig+0x124>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d157      	bne.n	80069d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e25a      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006934:	d106      	bne.n	8006944 <HAL_RCC_OscConfig+0x90>
 8006936:	4b7c      	ldr	r3, [pc, #496]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a7b      	ldr	r2, [pc, #492]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 800693c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	e01d      	b.n	8006980 <HAL_RCC_OscConfig+0xcc>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800694c:	d10c      	bne.n	8006968 <HAL_RCC_OscConfig+0xb4>
 800694e:	4b76      	ldr	r3, [pc, #472]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a75      	ldr	r2, [pc, #468]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	4b73      	ldr	r3, [pc, #460]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a72      	ldr	r2, [pc, #456]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	e00b      	b.n	8006980 <HAL_RCC_OscConfig+0xcc>
 8006968:	4b6f      	ldr	r3, [pc, #444]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a6e      	ldr	r2, [pc, #440]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 800696e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	4b6c      	ldr	r3, [pc, #432]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a6b      	ldr	r2, [pc, #428]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 800697a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800697e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d013      	beq.n	80069b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fb fab4 	bl	8001ef4 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006990:	f7fb fab0 	bl	8001ef4 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b64      	cmp	r3, #100	; 0x64
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e21f      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069a2:	4b61      	ldr	r3, [pc, #388]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0f0      	beq.n	8006990 <HAL_RCC_OscConfig+0xdc>
 80069ae:	e014      	b.n	80069da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b0:	f7fb faa0 	bl	8001ef4 <HAL_GetTick>
 80069b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069b8:	f7fb fa9c 	bl	8001ef4 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b64      	cmp	r3, #100	; 0x64
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e20b      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ca:	4b57      	ldr	r3, [pc, #348]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f0      	bne.n	80069b8 <HAL_RCC_OscConfig+0x104>
 80069d6:	e000      	b.n	80069da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d06f      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069e6:	4b50      	ldr	r3, [pc, #320]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 030c 	and.w	r3, r3, #12
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d017      	beq.n	8006a22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069f2:	4b4d      	ldr	r3, [pc, #308]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d105      	bne.n	8006a0a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069fe:	4b4a      	ldr	r3, [pc, #296]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00b      	beq.n	8006a22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a0a:	4b47      	ldr	r3, [pc, #284]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a12:	2b0c      	cmp	r3, #12
 8006a14:	d11c      	bne.n	8006a50 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a16:	4b44      	ldr	r3, [pc, #272]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d116      	bne.n	8006a50 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a22:	4b41      	ldr	r3, [pc, #260]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d005      	beq.n	8006a3a <HAL_RCC_OscConfig+0x186>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d001      	beq.n	8006a3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e1d3      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a3a:	4b3b      	ldr	r3, [pc, #236]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	4937      	ldr	r1, [pc, #220]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a4e:	e03a      	b.n	8006ac6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d020      	beq.n	8006a9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a58:	4b34      	ldr	r3, [pc, #208]	; (8006b2c <HAL_RCC_OscConfig+0x278>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a5e:	f7fb fa49 	bl	8001ef4 <HAL_GetTick>
 8006a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a64:	e008      	b.n	8006a78 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a66:	f7fb fa45 	bl	8001ef4 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e1b4      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a78:	4b2b      	ldr	r3, [pc, #172]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0f0      	beq.n	8006a66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a84:	4b28      	ldr	r3, [pc, #160]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	4925      	ldr	r1, [pc, #148]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	600b      	str	r3, [r1, #0]
 8006a98:	e015      	b.n	8006ac6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a9a:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <HAL_RCC_OscConfig+0x278>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa0:	f7fb fa28 	bl	8001ef4 <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aa8:	f7fb fa24 	bl	8001ef4 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e193      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1f0      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d036      	beq.n	8006b40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d016      	beq.n	8006b08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ada:	4b15      	ldr	r3, [pc, #84]	; (8006b30 <HAL_RCC_OscConfig+0x27c>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae0:	f7fb fa08 	bl	8001ef4 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ae8:	f7fb fa04 	bl	8001ef4 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e173      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006afa:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <HAL_RCC_OscConfig+0x274>)
 8006afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f0      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x234>
 8006b06:	e01b      	b.n	8006b40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b08:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <HAL_RCC_OscConfig+0x27c>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0e:	f7fb f9f1 	bl	8001ef4 <HAL_GetTick>
 8006b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b14:	e00e      	b.n	8006b34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b16:	f7fb f9ed 	bl	8001ef4 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d907      	bls.n	8006b34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e15c      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	42470000 	.word	0x42470000
 8006b30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b34:	4b8a      	ldr	r3, [pc, #552]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1ea      	bne.n	8006b16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 8097 	beq.w	8006c7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b52:	4b83      	ldr	r3, [pc, #524]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10f      	bne.n	8006b7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	4b7f      	ldr	r3, [pc, #508]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	4a7e      	ldr	r2, [pc, #504]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b6e:	4b7c      	ldr	r3, [pc, #496]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b76:	60bb      	str	r3, [r7, #8]
 8006b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b7e:	4b79      	ldr	r3, [pc, #484]	; (8006d64 <HAL_RCC_OscConfig+0x4b0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d118      	bne.n	8006bbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b8a:	4b76      	ldr	r3, [pc, #472]	; (8006d64 <HAL_RCC_OscConfig+0x4b0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a75      	ldr	r2, [pc, #468]	; (8006d64 <HAL_RCC_OscConfig+0x4b0>)
 8006b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b96:	f7fb f9ad 	bl	8001ef4 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b9e:	f7fb f9a9 	bl	8001ef4 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e118      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb0:	4b6c      	ldr	r3, [pc, #432]	; (8006d64 <HAL_RCC_OscConfig+0x4b0>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0f0      	beq.n	8006b9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d106      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x31e>
 8006bc4:	4b66      	ldr	r3, [pc, #408]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc8:	4a65      	ldr	r2, [pc, #404]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	6713      	str	r3, [r2, #112]	; 0x70
 8006bd0:	e01c      	b.n	8006c0c <HAL_RCC_OscConfig+0x358>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	2b05      	cmp	r3, #5
 8006bd8:	d10c      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x340>
 8006bda:	4b61      	ldr	r3, [pc, #388]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bde:	4a60      	ldr	r2, [pc, #384]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006be0:	f043 0304 	orr.w	r3, r3, #4
 8006be4:	6713      	str	r3, [r2, #112]	; 0x70
 8006be6:	4b5e      	ldr	r3, [pc, #376]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	4a5d      	ldr	r2, [pc, #372]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006bec:	f043 0301 	orr.w	r3, r3, #1
 8006bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf2:	e00b      	b.n	8006c0c <HAL_RCC_OscConfig+0x358>
 8006bf4:	4b5a      	ldr	r3, [pc, #360]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf8:	4a59      	ldr	r2, [pc, #356]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006bfa:	f023 0301 	bic.w	r3, r3, #1
 8006bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8006c00:	4b57      	ldr	r3, [pc, #348]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c04:	4a56      	ldr	r2, [pc, #344]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006c06:	f023 0304 	bic.w	r3, r3, #4
 8006c0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d015      	beq.n	8006c40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c14:	f7fb f96e 	bl	8001ef4 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c1a:	e00a      	b.n	8006c32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c1c:	f7fb f96a 	bl	8001ef4 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e0d7      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c32:	4b4b      	ldr	r3, [pc, #300]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0ee      	beq.n	8006c1c <HAL_RCC_OscConfig+0x368>
 8006c3e:	e014      	b.n	8006c6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c40:	f7fb f958 	bl	8001ef4 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c46:	e00a      	b.n	8006c5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c48:	f7fb f954 	bl	8001ef4 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e0c1      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c5e:	4b40      	ldr	r3, [pc, #256]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1ee      	bne.n	8006c48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d105      	bne.n	8006c7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c70:	4b3b      	ldr	r3, [pc, #236]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c74:	4a3a      	ldr	r2, [pc, #232]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80ad 	beq.w	8006de0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c86:	4b36      	ldr	r3, [pc, #216]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f003 030c 	and.w	r3, r3, #12
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d060      	beq.n	8006d54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d145      	bne.n	8006d26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c9a:	4b33      	ldr	r3, [pc, #204]	; (8006d68 <HAL_RCC_OscConfig+0x4b4>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca0:	f7fb f928 	bl	8001ef4 <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ca8:	f7fb f924 	bl	8001ef4 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e093      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cba:	4b29      	ldr	r3, [pc, #164]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1f0      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69da      	ldr	r2, [r3, #28]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	019b      	lsls	r3, r3, #6
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	085b      	lsrs	r3, r3, #1
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	041b      	lsls	r3, r3, #16
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	061b      	lsls	r3, r3, #24
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	071b      	lsls	r3, r3, #28
 8006cf2:	491b      	ldr	r1, [pc, #108]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <HAL_RCC_OscConfig+0x4b4>)
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfe:	f7fb f8f9 	bl	8001ef4 <HAL_GetTick>
 8006d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d04:	e008      	b.n	8006d18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d06:	f7fb f8f5 	bl	8001ef4 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e064      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d18:	4b11      	ldr	r3, [pc, #68]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0f0      	beq.n	8006d06 <HAL_RCC_OscConfig+0x452>
 8006d24:	e05c      	b.n	8006de0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d26:	4b10      	ldr	r3, [pc, #64]	; (8006d68 <HAL_RCC_OscConfig+0x4b4>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2c:	f7fb f8e2 	bl	8001ef4 <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d34:	f7fb f8de 	bl	8001ef4 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e04d      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d46:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <HAL_RCC_OscConfig+0x4ac>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1f0      	bne.n	8006d34 <HAL_RCC_OscConfig+0x480>
 8006d52:	e045      	b.n	8006de0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d107      	bne.n	8006d6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e040      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
 8006d60:	40023800 	.word	0x40023800
 8006d64:	40007000 	.word	0x40007000
 8006d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d6c:	4b1f      	ldr	r3, [pc, #124]	; (8006dec <HAL_RCC_OscConfig+0x538>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d030      	beq.n	8006ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d129      	bne.n	8006ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d122      	bne.n	8006ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d119      	bne.n	8006ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	085b      	lsrs	r3, r3, #1
 8006db4:	3b01      	subs	r3, #1
 8006db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d10f      	bne.n	8006ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d107      	bne.n	8006ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d001      	beq.n	8006de0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	40023800 	.word	0x40023800

08006df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e07b      	b.n	8006efa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d108      	bne.n	8006e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e12:	d009      	beq.n	8006e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	61da      	str	r2, [r3, #28]
 8006e1a:	e005      	b.n	8006e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fa fda8 	bl	8001998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eac:	ea42 0103 	orr.w	r1, r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	0c1b      	lsrs	r3, r3, #16
 8006ec6:	f003 0104 	and.w	r1, r3, #4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	f003 0210 	and.w	r2, r3, #16
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69da      	ldr	r2, [r3, #28]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e03f      	b.n	8006f94 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d106      	bne.n	8006f2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7fa fdcf 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2224      	movs	r2, #36	; 0x24
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fe1c 	bl	8007b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691a      	ldr	r2, [r3, #16]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	695a      	ldr	r2, [r3, #20]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d17c      	bne.n	80070b6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_UART_Transmit+0x2c>
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e075      	b.n	80070b8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_UART_Transmit+0x3e>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e06e      	b.n	80070b8 <HAL_UART_Transmit+0x11c>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2221      	movs	r2, #33	; 0x21
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ff0:	f7fa ff80 	bl	8001ef4 <HAL_GetTick>
 8006ff4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	88fa      	ldrh	r2, [r7, #6]
 8006ffa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	88fa      	ldrh	r2, [r7, #6]
 8007000:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800700a:	d108      	bne.n	800701e <HAL_UART_Transmit+0x82>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007014:	2300      	movs	r3, #0
 8007016:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	e003      	b.n	8007026 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007022:	2300      	movs	r3, #0
 8007024:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800702e:	e02a      	b.n	8007086 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2200      	movs	r2, #0
 8007038:	2180      	movs	r1, #128	; 0x80
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fb9a 	bl	8007774 <UART_WaitOnFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e036      	b.n	80070b8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800705e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	3302      	adds	r3, #2
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	e007      	b.n	8007078 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	781a      	ldrb	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	3301      	adds	r3, #1
 8007076:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800708a:	b29b      	uxth	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1cf      	bne.n	8007030 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2200      	movs	r2, #0
 8007098:	2140      	movs	r1, #64	; 0x40
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fb6a 	bl	8007774 <UART_WaitOnFlagUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e006      	b.n	80070b8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2220      	movs	r2, #32
 80070ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e000      	b.n	80070b8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070b6:	2302      	movs	r3, #2
  }
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3720      	adds	r7, #32
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08a      	sub	sp, #40	; 0x28
 80070c4:	af02      	add	r7, sp, #8
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	4613      	mov	r3, r2
 80070ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b20      	cmp	r3, #32
 80070de:	f040 808c 	bne.w	80071fa <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <HAL_UART_Receive+0x2e>
 80070e8:	88fb      	ldrh	r3, [r7, #6]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e084      	b.n	80071fc <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_UART_Receive+0x40>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e07d      	b.n	80071fc <HAL_UART_Receive+0x13c>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2222      	movs	r2, #34	; 0x22
 8007112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800711c:	f7fa feea 	bl	8001ef4 <HAL_GetTick>
 8007120:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	88fa      	ldrh	r2, [r7, #6]
 8007126:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	88fa      	ldrh	r2, [r7, #6]
 800712c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007136:	d108      	bne.n	800714a <HAL_UART_Receive+0x8a>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007140:	2300      	movs	r3, #0
 8007142:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	61bb      	str	r3, [r7, #24]
 8007148:	e003      	b.n	8007152 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800714e:	2300      	movs	r3, #0
 8007150:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800715a:	e043      	b.n	80071e4 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2200      	movs	r2, #0
 8007164:	2120      	movs	r1, #32
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 fb04 	bl	8007774 <UART_WaitOnFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e042      	b.n	80071fc <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10c      	bne.n	8007196 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007188:	b29a      	uxth	r2, r3
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	3302      	adds	r3, #2
 8007192:	61bb      	str	r3, [r7, #24]
 8007194:	e01f      	b.n	80071d6 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800719e:	d007      	beq.n	80071b0 <HAL_UART_Receive+0xf0>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <HAL_UART_Receive+0xfe>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	701a      	strb	r2, [r3, #0]
 80071bc:	e008      	b.n	80071d0 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	3301      	adds	r3, #1
 80071d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1b6      	bne.n	800715c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e000      	b.n	80071fc <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80071fa:	2302      	movs	r3, #2
  }
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3720      	adds	r7, #32
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b0ba      	sub	sp, #232	; 0xe8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800722a:	2300      	movs	r3, #0
 800722c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007230:	2300      	movs	r3, #0
 8007232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10f      	bne.n	800726a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800724a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <HAL_UART_IRQHandler+0x66>
 8007256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725a:	f003 0320 	and.w	r3, r3, #32
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fbd3 	bl	8007a0e <UART_Receive_IT>
      return;
 8007268:	e256      	b.n	8007718 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800726a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 80de 	beq.w	8007430 <HAL_UART_IRQHandler+0x22c>
 8007274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d106      	bne.n	800728e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007284:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 80d1 	beq.w	8007430 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800728e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00b      	beq.n	80072b2 <HAL_UART_IRQHandler+0xae>
 800729a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	f043 0201 	orr.w	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00b      	beq.n	80072d6 <HAL_UART_IRQHandler+0xd2>
 80072be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	f043 0202 	orr.w	r2, r3, #2
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00b      	beq.n	80072fa <HAL_UART_IRQHandler+0xf6>
 80072e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f043 0204 	orr.w	r2, r3, #4
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d011      	beq.n	800732a <HAL_UART_IRQHandler+0x126>
 8007306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d105      	bne.n	800731e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f043 0208 	orr.w	r2, r3, #8
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 81ed 	beq.w	800770e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_UART_IRQHandler+0x14e>
 8007340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fb5e 	bl	8007a0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735c:	2b40      	cmp	r3, #64	; 0x40
 800735e:	bf0c      	ite	eq
 8007360:	2301      	moveq	r3, #1
 8007362:	2300      	movne	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d103      	bne.n	800737e <HAL_UART_IRQHandler+0x17a>
 8007376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800737a:	2b00      	cmp	r3, #0
 800737c:	d04f      	beq.n	800741e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa66 	bl	8007850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738e:	2b40      	cmp	r3, #64	; 0x40
 8007390:	d141      	bne.n	8007416 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3314      	adds	r3, #20
 8007398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3314      	adds	r3, #20
 80073ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1d9      	bne.n	8007392 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d013      	beq.n	800740e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	4a7d      	ldr	r2, [pc, #500]	; (80075e0 <HAL_UART_IRQHandler+0x3dc>)
 80073ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fa ffba 	bl	800236c <HAL_DMA_Abort_IT>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d016      	beq.n	800742c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007408:	4610      	mov	r0, r2
 800740a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740c:	e00e      	b.n	800742c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f99a 	bl	8007748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007414:	e00a      	b.n	800742c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f996 	bl	8007748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741c:	e006      	b.n	800742c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f992 	bl	8007748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800742a:	e170      	b.n	800770e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800742c:	bf00      	nop
    return;
 800742e:	e16e      	b.n	800770e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007434:	2b01      	cmp	r3, #1
 8007436:	f040 814a 	bne.w	80076ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800743a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800743e:	f003 0310 	and.w	r3, r3, #16
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 8143 	beq.w	80076ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800744c:	f003 0310 	and.w	r3, r3, #16
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 813c 	beq.w	80076ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007456:	2300      	movs	r3, #0
 8007458:	60bb      	str	r3, [r7, #8]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60bb      	str	r3, [r7, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	60bb      	str	r3, [r7, #8]
 800746a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007476:	2b40      	cmp	r3, #64	; 0x40
 8007478:	f040 80b4 	bne.w	80075e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007488:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 8140 	beq.w	8007712 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800749a:	429a      	cmp	r2, r3
 800749c:	f080 8139 	bcs.w	8007712 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b2:	f000 8088 	beq.w	80075c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	330c      	adds	r3, #12
 80074bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	330c      	adds	r3, #12
 80074de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80074e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074f2:	e841 2300 	strex	r3, r2, [r1]
 80074f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1d9      	bne.n	80074b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3314      	adds	r3, #20
 8007508:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007514:	f023 0301 	bic.w	r3, r3, #1
 8007518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3314      	adds	r3, #20
 8007522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007526:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800752a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800752e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e1      	bne.n	8007502 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3314      	adds	r3, #20
 8007544:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800754e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3314      	adds	r3, #20
 800755e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007562:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007564:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007568:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e3      	bne.n	800753e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	330c      	adds	r3, #12
 800758a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007596:	f023 0310 	bic.w	r3, r3, #16
 800759a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	330c      	adds	r3, #12
 80075a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80075aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e3      	bne.n	8007584 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fa fe63 	bl	800228c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f8c0 	bl	800775c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075dc:	e099      	b.n	8007712 <HAL_UART_IRQHandler+0x50e>
 80075de:	bf00      	nop
 80075e0:	08007917 	.word	0x08007917
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 808b 	beq.w	8007716 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 8086 	beq.w	8007716 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	330c      	adds	r3, #12
 8007610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	330c      	adds	r3, #12
 800762a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800762e:	647a      	str	r2, [r7, #68]	; 0x44
 8007630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800763c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e3      	bne.n	800760a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3314      	adds	r3, #20
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	623b      	str	r3, [r7, #32]
   return(result);
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3314      	adds	r3, #20
 8007662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007666:	633a      	str	r2, [r7, #48]	; 0x30
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800766c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e3      	bne.n	8007642 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2220      	movs	r2, #32
 800767e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	330c      	adds	r3, #12
 800768e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	60fb      	str	r3, [r7, #12]
   return(result);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f023 0310 	bic.w	r3, r3, #16
 800769e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	330c      	adds	r3, #12
 80076a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80076ac:	61fa      	str	r2, [r7, #28]
 80076ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	69b9      	ldr	r1, [r7, #24]
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	e841 2300 	strex	r3, r2, [r1]
 80076b8:	617b      	str	r3, [r7, #20]
   return(result);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e3      	bne.n	8007688 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f848 	bl	800775c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076cc:	e023      	b.n	8007716 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d009      	beq.n	80076ee <HAL_UART_IRQHandler+0x4ea>
 80076da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f929 	bl	800793e <UART_Transmit_IT>
    return;
 80076ec:	e014      	b.n	8007718 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00e      	beq.n	8007718 <HAL_UART_IRQHandler+0x514>
 80076fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	d008      	beq.n	8007718 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f969 	bl	80079de <UART_EndTransmit_IT>
    return;
 800770c:	e004      	b.n	8007718 <HAL_UART_IRQHandler+0x514>
    return;
 800770e:	bf00      	nop
 8007710:	e002      	b.n	8007718 <HAL_UART_IRQHandler+0x514>
      return;
 8007712:	bf00      	nop
 8007714:	e000      	b.n	8007718 <HAL_UART_IRQHandler+0x514>
      return;
 8007716:	bf00      	nop
  }
}
 8007718:	37e8      	adds	r7, #232	; 0xe8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop

08007720 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b090      	sub	sp, #64	; 0x40
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	4613      	mov	r3, r2
 8007782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007784:	e050      	b.n	8007828 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778c:	d04c      	beq.n	8007828 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800778e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007790:	2b00      	cmp	r3, #0
 8007792:	d007      	beq.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007794:	f7fa fbae 	bl	8001ef4 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d241      	bcs.n	8007828 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	330c      	adds	r3, #12
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	330c      	adds	r3, #12
 80077c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077c4:	637a      	str	r2, [r7, #52]	; 0x34
 80077c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e5      	bne.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3314      	adds	r3, #20
 80077de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	613b      	str	r3, [r7, #16]
   return(result);
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f023 0301 	bic.w	r3, r3, #1
 80077ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3314      	adds	r3, #20
 80077f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077f8:	623a      	str	r2, [r7, #32]
 80077fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	69f9      	ldr	r1, [r7, #28]
 80077fe:	6a3a      	ldr	r2, [r7, #32]
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	61bb      	str	r3, [r7, #24]
   return(result);
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e5      	bne.n	80077d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e00f      	b.n	8007848 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	4013      	ands	r3, r2
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	429a      	cmp	r2, r3
 8007836:	bf0c      	ite	eq
 8007838:	2301      	moveq	r3, #1
 800783a:	2300      	movne	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	461a      	mov	r2, r3
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	429a      	cmp	r2, r3
 8007844:	d09f      	beq.n	8007786 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3740      	adds	r7, #64	; 0x40
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007850:	b480      	push	{r7}
 8007852:	b095      	sub	sp, #84	; 0x54
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800786e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	330c      	adds	r3, #12
 8007876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007878:	643a      	str	r2, [r7, #64]	; 0x40
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800787e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e5      	bne.n	8007858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3314      	adds	r3, #20
 8007892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	61fb      	str	r3, [r7, #28]
   return(result);
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f023 0301 	bic.w	r3, r3, #1
 80078a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3314      	adds	r3, #20
 80078aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e5      	bne.n	800788c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d119      	bne.n	80078fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	330c      	adds	r3, #12
 80078ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f023 0310 	bic.w	r3, r3, #16
 80078de:	647b      	str	r3, [r7, #68]	; 0x44
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078e8:	61ba      	str	r2, [r7, #24]
 80078ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6979      	ldr	r1, [r7, #20]
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	613b      	str	r3, [r7, #16]
   return(result);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e5      	bne.n	80078c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	631a      	str	r2, [r3, #48]	; 0x30
}
 800790a:	bf00      	nop
 800790c:	3754      	adds	r7, #84	; 0x54
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff ff09 	bl	8007748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800793e:	b480      	push	{r7}
 8007940:	b085      	sub	sp, #20
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b21      	cmp	r3, #33	; 0x21
 8007950:	d13e      	bne.n	80079d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795a:	d114      	bne.n	8007986 <UART_Transmit_IT+0x48>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d110      	bne.n	8007986 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007978:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	1c9a      	adds	r2, r3, #2
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	621a      	str	r2, [r3, #32]
 8007984:	e008      	b.n	8007998 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	1c59      	adds	r1, r3, #1
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6211      	str	r1, [r2, #32]
 8007990:	781a      	ldrb	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	4619      	mov	r1, r3
 80079a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10f      	bne.n	80079cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e000      	b.n	80079d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b082      	sub	sp, #8
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff fe8e 	bl	8007720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b08c      	sub	sp, #48	; 0x30
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b22      	cmp	r3, #34	; 0x22
 8007a20:	f040 80ab 	bne.w	8007b7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2c:	d117      	bne.n	8007a5e <UART_Receive_IT+0x50>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d113      	bne.n	8007a5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a56:	1c9a      	adds	r2, r3, #2
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8007a5c:	e026      	b.n	8007aac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a70:	d007      	beq.n	8007a82 <UART_Receive_IT+0x74>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <UART_Receive_IT+0x82>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	e008      	b.n	8007aa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d15a      	bne.n	8007b76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0220 	bic.w	r2, r2, #32
 8007ace:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	695a      	ldr	r2, [r3, #20]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0201 	bic.w	r2, r2, #1
 8007aee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d135      	bne.n	8007b6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	613b      	str	r3, [r7, #16]
   return(result);
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f023 0310 	bic.w	r3, r3, #16
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	330c      	adds	r3, #12
 8007b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b26:	623a      	str	r2, [r7, #32]
 8007b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	69f9      	ldr	r1, [r7, #28]
 8007b2c:	6a3a      	ldr	r2, [r7, #32]
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e5      	bne.n	8007b06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b10      	cmp	r3, #16
 8007b46:	d10a      	bne.n	8007b5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff fdf9 	bl	800775c <HAL_UARTEx_RxEventCallback>
 8007b6a:	e002      	b.n	8007b72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7ff fde1 	bl	8007734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	e002      	b.n	8007b7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e000      	b.n	8007b7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b7a:	2302      	movs	r3, #2
  }
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3730      	adds	r7, #48	; 0x30
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b88:	b0c0      	sub	sp, #256	; 0x100
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba0:	68d9      	ldr	r1, [r3, #12]
 8007ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	ea40 0301 	orr.w	r3, r0, r1
 8007bac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bdc:	f021 010c 	bic.w	r1, r1, #12
 8007be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bea:	430b      	orrs	r3, r1
 8007bec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bfe:	6999      	ldr	r1, [r3, #24]
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	ea40 0301 	orr.w	r3, r0, r1
 8007c0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b8f      	ldr	r3, [pc, #572]	; (8007e50 <UART_SetConfig+0x2cc>)
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d005      	beq.n	8007c24 <UART_SetConfig+0xa0>
 8007c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	4b8d      	ldr	r3, [pc, #564]	; (8007e54 <UART_SetConfig+0x2d0>)
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d104      	bne.n	8007c2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c24:	f7fd ff16 	bl	8005a54 <HAL_RCC_GetPCLK2Freq>
 8007c28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c2c:	e003      	b.n	8007c36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c2e:	f7fd fefd 	bl	8005a2c <HAL_RCC_GetPCLK1Freq>
 8007c32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c40:	f040 810c 	bne.w	8007e5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c56:	4622      	mov	r2, r4
 8007c58:	462b      	mov	r3, r5
 8007c5a:	1891      	adds	r1, r2, r2
 8007c5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c5e:	415b      	adcs	r3, r3
 8007c60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c66:	4621      	mov	r1, r4
 8007c68:	eb12 0801 	adds.w	r8, r2, r1
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	eb43 0901 	adc.w	r9, r3, r1
 8007c72:	f04f 0200 	mov.w	r2, #0
 8007c76:	f04f 0300 	mov.w	r3, #0
 8007c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c86:	4690      	mov	r8, r2
 8007c88:	4699      	mov	r9, r3
 8007c8a:	4623      	mov	r3, r4
 8007c8c:	eb18 0303 	adds.w	r3, r8, r3
 8007c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c94:	462b      	mov	r3, r5
 8007c96:	eb49 0303 	adc.w	r3, r9, r3
 8007c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007caa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007cae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	18db      	adds	r3, r3, r3
 8007cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8007cb8:	4613      	mov	r3, r2
 8007cba:	eb42 0303 	adc.w	r3, r2, r3
 8007cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8007cc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007cc8:	f7f8 fffe 	bl	8000cc8 <__aeabi_uldivmod>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4b61      	ldr	r3, [pc, #388]	; (8007e58 <UART_SetConfig+0x2d4>)
 8007cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007cd6:	095b      	lsrs	r3, r3, #5
 8007cd8:	011c      	lsls	r4, r3, #4
 8007cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ce4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ce8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007cec:	4642      	mov	r2, r8
 8007cee:	464b      	mov	r3, r9
 8007cf0:	1891      	adds	r1, r2, r2
 8007cf2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007cf4:	415b      	adcs	r3, r3
 8007cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007cfc:	4641      	mov	r1, r8
 8007cfe:	eb12 0a01 	adds.w	sl, r2, r1
 8007d02:	4649      	mov	r1, r9
 8007d04:	eb43 0b01 	adc.w	fp, r3, r1
 8007d08:	f04f 0200 	mov.w	r2, #0
 8007d0c:	f04f 0300 	mov.w	r3, #0
 8007d10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d1c:	4692      	mov	sl, r2
 8007d1e:	469b      	mov	fp, r3
 8007d20:	4643      	mov	r3, r8
 8007d22:	eb1a 0303 	adds.w	r3, sl, r3
 8007d26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	eb4b 0303 	adc.w	r3, fp, r3
 8007d30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	18db      	adds	r3, r3, r3
 8007d4c:	643b      	str	r3, [r7, #64]	; 0x40
 8007d4e:	4613      	mov	r3, r2
 8007d50:	eb42 0303 	adc.w	r3, r2, r3
 8007d54:	647b      	str	r3, [r7, #68]	; 0x44
 8007d56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d5e:	f7f8 ffb3 	bl	8000cc8 <__aeabi_uldivmod>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4611      	mov	r1, r2
 8007d68:	4b3b      	ldr	r3, [pc, #236]	; (8007e58 <UART_SetConfig+0x2d4>)
 8007d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d6e:	095b      	lsrs	r3, r3, #5
 8007d70:	2264      	movs	r2, #100	; 0x64
 8007d72:	fb02 f303 	mul.w	r3, r2, r3
 8007d76:	1acb      	subs	r3, r1, r3
 8007d78:	00db      	lsls	r3, r3, #3
 8007d7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d7e:	4b36      	ldr	r3, [pc, #216]	; (8007e58 <UART_SetConfig+0x2d4>)
 8007d80:	fba3 2302 	umull	r2, r3, r3, r2
 8007d84:	095b      	lsrs	r3, r3, #5
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d8c:	441c      	add	r4, r3
 8007d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d92:	2200      	movs	r2, #0
 8007d94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007da0:	4642      	mov	r2, r8
 8007da2:	464b      	mov	r3, r9
 8007da4:	1891      	adds	r1, r2, r2
 8007da6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007da8:	415b      	adcs	r3, r3
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007db0:	4641      	mov	r1, r8
 8007db2:	1851      	adds	r1, r2, r1
 8007db4:	6339      	str	r1, [r7, #48]	; 0x30
 8007db6:	4649      	mov	r1, r9
 8007db8:	414b      	adcs	r3, r1
 8007dba:	637b      	str	r3, [r7, #52]	; 0x34
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	f04f 0300 	mov.w	r3, #0
 8007dc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007dc8:	4659      	mov	r1, fp
 8007dca:	00cb      	lsls	r3, r1, #3
 8007dcc:	4651      	mov	r1, sl
 8007dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dd2:	4651      	mov	r1, sl
 8007dd4:	00ca      	lsls	r2, r1, #3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	4642      	mov	r2, r8
 8007dde:	189b      	adds	r3, r3, r2
 8007de0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007de4:	464b      	mov	r3, r9
 8007de6:	460a      	mov	r2, r1
 8007de8:	eb42 0303 	adc.w	r3, r2, r3
 8007dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007dfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e04:	460b      	mov	r3, r1
 8007e06:	18db      	adds	r3, r3, r3
 8007e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	eb42 0303 	adc.w	r3, r2, r3
 8007e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e1a:	f7f8 ff55 	bl	8000cc8 <__aeabi_uldivmod>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4b0d      	ldr	r3, [pc, #52]	; (8007e58 <UART_SetConfig+0x2d4>)
 8007e24:	fba3 1302 	umull	r1, r3, r3, r2
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	2164      	movs	r1, #100	; 0x64
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	3332      	adds	r3, #50	; 0x32
 8007e36:	4a08      	ldr	r2, [pc, #32]	; (8007e58 <UART_SetConfig+0x2d4>)
 8007e38:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	f003 0207 	and.w	r2, r3, #7
 8007e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4422      	add	r2, r4
 8007e4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e4c:	e105      	b.n	800805a <UART_SetConfig+0x4d6>
 8007e4e:	bf00      	nop
 8007e50:	40011000 	.word	0x40011000
 8007e54:	40011400 	.word	0x40011400
 8007e58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e6e:	4642      	mov	r2, r8
 8007e70:	464b      	mov	r3, r9
 8007e72:	1891      	adds	r1, r2, r2
 8007e74:	6239      	str	r1, [r7, #32]
 8007e76:	415b      	adcs	r3, r3
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
 8007e7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e7e:	4641      	mov	r1, r8
 8007e80:	1854      	adds	r4, r2, r1
 8007e82:	4649      	mov	r1, r9
 8007e84:	eb43 0501 	adc.w	r5, r3, r1
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	00eb      	lsls	r3, r5, #3
 8007e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e96:	00e2      	lsls	r2, r4, #3
 8007e98:	4614      	mov	r4, r2
 8007e9a:	461d      	mov	r5, r3
 8007e9c:	4643      	mov	r3, r8
 8007e9e:	18e3      	adds	r3, r4, r3
 8007ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ea4:	464b      	mov	r3, r9
 8007ea6:	eb45 0303 	adc.w	r3, r5, r3
 8007eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007eba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007eca:	4629      	mov	r1, r5
 8007ecc:	008b      	lsls	r3, r1, #2
 8007ece:	4621      	mov	r1, r4
 8007ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	008a      	lsls	r2, r1, #2
 8007ed8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007edc:	f7f8 fef4 	bl	8000cc8 <__aeabi_uldivmod>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4b60      	ldr	r3, [pc, #384]	; (8008068 <UART_SetConfig+0x4e4>)
 8007ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8007eea:	095b      	lsrs	r3, r3, #5
 8007eec:	011c      	lsls	r4, r3, #4
 8007eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ef8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007efc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f00:	4642      	mov	r2, r8
 8007f02:	464b      	mov	r3, r9
 8007f04:	1891      	adds	r1, r2, r2
 8007f06:	61b9      	str	r1, [r7, #24]
 8007f08:	415b      	adcs	r3, r3
 8007f0a:	61fb      	str	r3, [r7, #28]
 8007f0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f10:	4641      	mov	r1, r8
 8007f12:	1851      	adds	r1, r2, r1
 8007f14:	6139      	str	r1, [r7, #16]
 8007f16:	4649      	mov	r1, r9
 8007f18:	414b      	adcs	r3, r1
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	f04f 0200 	mov.w	r2, #0
 8007f20:	f04f 0300 	mov.w	r3, #0
 8007f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f28:	4659      	mov	r1, fp
 8007f2a:	00cb      	lsls	r3, r1, #3
 8007f2c:	4651      	mov	r1, sl
 8007f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f32:	4651      	mov	r1, sl
 8007f34:	00ca      	lsls	r2, r1, #3
 8007f36:	4610      	mov	r0, r2
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	189b      	adds	r3, r3, r2
 8007f40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f44:	464b      	mov	r3, r9
 8007f46:	460a      	mov	r2, r1
 8007f48:	eb42 0303 	adc.w	r3, r2, r3
 8007f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f68:	4649      	mov	r1, r9
 8007f6a:	008b      	lsls	r3, r1, #2
 8007f6c:	4641      	mov	r1, r8
 8007f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f72:	4641      	mov	r1, r8
 8007f74:	008a      	lsls	r2, r1, #2
 8007f76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f7a:	f7f8 fea5 	bl	8000cc8 <__aeabi_uldivmod>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4b39      	ldr	r3, [pc, #228]	; (8008068 <UART_SetConfig+0x4e4>)
 8007f84:	fba3 1302 	umull	r1, r3, r3, r2
 8007f88:	095b      	lsrs	r3, r3, #5
 8007f8a:	2164      	movs	r1, #100	; 0x64
 8007f8c:	fb01 f303 	mul.w	r3, r1, r3
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	011b      	lsls	r3, r3, #4
 8007f94:	3332      	adds	r3, #50	; 0x32
 8007f96:	4a34      	ldr	r2, [pc, #208]	; (8008068 <UART_SetConfig+0x4e4>)
 8007f98:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9c:	095b      	lsrs	r3, r3, #5
 8007f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fa2:	441c      	add	r4, r3
 8007fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fa8:	2200      	movs	r2, #0
 8007faa:	673b      	str	r3, [r7, #112]	; 0x70
 8007fac:	677a      	str	r2, [r7, #116]	; 0x74
 8007fae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007fb2:	4642      	mov	r2, r8
 8007fb4:	464b      	mov	r3, r9
 8007fb6:	1891      	adds	r1, r2, r2
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	415b      	adcs	r3, r3
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fc2:	4641      	mov	r1, r8
 8007fc4:	1851      	adds	r1, r2, r1
 8007fc6:	6039      	str	r1, [r7, #0]
 8007fc8:	4649      	mov	r1, r9
 8007fca:	414b      	adcs	r3, r1
 8007fcc:	607b      	str	r3, [r7, #4]
 8007fce:	f04f 0200 	mov.w	r2, #0
 8007fd2:	f04f 0300 	mov.w	r3, #0
 8007fd6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fda:	4659      	mov	r1, fp
 8007fdc:	00cb      	lsls	r3, r1, #3
 8007fde:	4651      	mov	r1, sl
 8007fe0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fe4:	4651      	mov	r1, sl
 8007fe6:	00ca      	lsls	r2, r1, #3
 8007fe8:	4610      	mov	r0, r2
 8007fea:	4619      	mov	r1, r3
 8007fec:	4603      	mov	r3, r0
 8007fee:	4642      	mov	r2, r8
 8007ff0:	189b      	adds	r3, r3, r2
 8007ff2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	460a      	mov	r2, r1
 8007ff8:	eb42 0303 	adc.w	r3, r2, r3
 8007ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	663b      	str	r3, [r7, #96]	; 0x60
 8008008:	667a      	str	r2, [r7, #100]	; 0x64
 800800a:	f04f 0200 	mov.w	r2, #0
 800800e:	f04f 0300 	mov.w	r3, #0
 8008012:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008016:	4649      	mov	r1, r9
 8008018:	008b      	lsls	r3, r1, #2
 800801a:	4641      	mov	r1, r8
 800801c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008020:	4641      	mov	r1, r8
 8008022:	008a      	lsls	r2, r1, #2
 8008024:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008028:	f7f8 fe4e 	bl	8000cc8 <__aeabi_uldivmod>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4b0d      	ldr	r3, [pc, #52]	; (8008068 <UART_SetConfig+0x4e4>)
 8008032:	fba3 1302 	umull	r1, r3, r3, r2
 8008036:	095b      	lsrs	r3, r3, #5
 8008038:	2164      	movs	r1, #100	; 0x64
 800803a:	fb01 f303 	mul.w	r3, r1, r3
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	011b      	lsls	r3, r3, #4
 8008042:	3332      	adds	r3, #50	; 0x32
 8008044:	4a08      	ldr	r2, [pc, #32]	; (8008068 <UART_SetConfig+0x4e4>)
 8008046:	fba2 2303 	umull	r2, r3, r2, r3
 800804a:	095b      	lsrs	r3, r3, #5
 800804c:	f003 020f 	and.w	r2, r3, #15
 8008050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4422      	add	r2, r4
 8008058:	609a      	str	r2, [r3, #8]
}
 800805a:	bf00      	nop
 800805c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008060:	46bd      	mov	sp, r7
 8008062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008066:	bf00      	nop
 8008068:	51eb851f 	.word	0x51eb851f

0800806c <__errno>:
 800806c:	4b01      	ldr	r3, [pc, #4]	; (8008074 <__errno+0x8>)
 800806e:	6818      	ldr	r0, [r3, #0]
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	2000000c 	.word	0x2000000c

08008078 <__libc_init_array>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	4d0d      	ldr	r5, [pc, #52]	; (80080b0 <__libc_init_array+0x38>)
 800807c:	4c0d      	ldr	r4, [pc, #52]	; (80080b4 <__libc_init_array+0x3c>)
 800807e:	1b64      	subs	r4, r4, r5
 8008080:	10a4      	asrs	r4, r4, #2
 8008082:	2600      	movs	r6, #0
 8008084:	42a6      	cmp	r6, r4
 8008086:	d109      	bne.n	800809c <__libc_init_array+0x24>
 8008088:	4d0b      	ldr	r5, [pc, #44]	; (80080b8 <__libc_init_array+0x40>)
 800808a:	4c0c      	ldr	r4, [pc, #48]	; (80080bc <__libc_init_array+0x44>)
 800808c:	f005 fd76 	bl	800db7c <_init>
 8008090:	1b64      	subs	r4, r4, r5
 8008092:	10a4      	asrs	r4, r4, #2
 8008094:	2600      	movs	r6, #0
 8008096:	42a6      	cmp	r6, r4
 8008098:	d105      	bne.n	80080a6 <__libc_init_array+0x2e>
 800809a:	bd70      	pop	{r4, r5, r6, pc}
 800809c:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a0:	4798      	blx	r3
 80080a2:	3601      	adds	r6, #1
 80080a4:	e7ee      	b.n	8008084 <__libc_init_array+0xc>
 80080a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080aa:	4798      	blx	r3
 80080ac:	3601      	adds	r6, #1
 80080ae:	e7f2      	b.n	8008096 <__libc_init_array+0x1e>
 80080b0:	0800e424 	.word	0x0800e424
 80080b4:	0800e424 	.word	0x0800e424
 80080b8:	0800e424 	.word	0x0800e424
 80080bc:	0800e428 	.word	0x0800e428

080080c0 <memset>:
 80080c0:	4402      	add	r2, r0
 80080c2:	4603      	mov	r3, r0
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d100      	bne.n	80080ca <memset+0xa>
 80080c8:	4770      	bx	lr
 80080ca:	f803 1b01 	strb.w	r1, [r3], #1
 80080ce:	e7f9      	b.n	80080c4 <memset+0x4>

080080d0 <__cvt>:
 80080d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080d4:	ec55 4b10 	vmov	r4, r5, d0
 80080d8:	2d00      	cmp	r5, #0
 80080da:	460e      	mov	r6, r1
 80080dc:	4619      	mov	r1, r3
 80080de:	462b      	mov	r3, r5
 80080e0:	bfbb      	ittet	lt
 80080e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080e6:	461d      	movlt	r5, r3
 80080e8:	2300      	movge	r3, #0
 80080ea:	232d      	movlt	r3, #45	; 0x2d
 80080ec:	700b      	strb	r3, [r1, #0]
 80080ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080f4:	4691      	mov	r9, r2
 80080f6:	f023 0820 	bic.w	r8, r3, #32
 80080fa:	bfbc      	itt	lt
 80080fc:	4622      	movlt	r2, r4
 80080fe:	4614      	movlt	r4, r2
 8008100:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008104:	d005      	beq.n	8008112 <__cvt+0x42>
 8008106:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800810a:	d100      	bne.n	800810e <__cvt+0x3e>
 800810c:	3601      	adds	r6, #1
 800810e:	2102      	movs	r1, #2
 8008110:	e000      	b.n	8008114 <__cvt+0x44>
 8008112:	2103      	movs	r1, #3
 8008114:	ab03      	add	r3, sp, #12
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	ab02      	add	r3, sp, #8
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	ec45 4b10 	vmov	d0, r4, r5
 8008120:	4653      	mov	r3, sl
 8008122:	4632      	mov	r2, r6
 8008124:	f002 f884 	bl	800a230 <_dtoa_r>
 8008128:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800812c:	4607      	mov	r7, r0
 800812e:	d102      	bne.n	8008136 <__cvt+0x66>
 8008130:	f019 0f01 	tst.w	r9, #1
 8008134:	d022      	beq.n	800817c <__cvt+0xac>
 8008136:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800813a:	eb07 0906 	add.w	r9, r7, r6
 800813e:	d110      	bne.n	8008162 <__cvt+0x92>
 8008140:	783b      	ldrb	r3, [r7, #0]
 8008142:	2b30      	cmp	r3, #48	; 0x30
 8008144:	d10a      	bne.n	800815c <__cvt+0x8c>
 8008146:	2200      	movs	r2, #0
 8008148:	2300      	movs	r3, #0
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	f7f8 fcdb 	bl	8000b08 <__aeabi_dcmpeq>
 8008152:	b918      	cbnz	r0, 800815c <__cvt+0x8c>
 8008154:	f1c6 0601 	rsb	r6, r6, #1
 8008158:	f8ca 6000 	str.w	r6, [sl]
 800815c:	f8da 3000 	ldr.w	r3, [sl]
 8008160:	4499      	add	r9, r3
 8008162:	2200      	movs	r2, #0
 8008164:	2300      	movs	r3, #0
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f8 fccd 	bl	8000b08 <__aeabi_dcmpeq>
 800816e:	b108      	cbz	r0, 8008174 <__cvt+0xa4>
 8008170:	f8cd 900c 	str.w	r9, [sp, #12]
 8008174:	2230      	movs	r2, #48	; 0x30
 8008176:	9b03      	ldr	r3, [sp, #12]
 8008178:	454b      	cmp	r3, r9
 800817a:	d307      	bcc.n	800818c <__cvt+0xbc>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008180:	1bdb      	subs	r3, r3, r7
 8008182:	4638      	mov	r0, r7
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	b004      	add	sp, #16
 8008188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818c:	1c59      	adds	r1, r3, #1
 800818e:	9103      	str	r1, [sp, #12]
 8008190:	701a      	strb	r2, [r3, #0]
 8008192:	e7f0      	b.n	8008176 <__cvt+0xa6>

08008194 <__exponent>:
 8008194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008196:	4603      	mov	r3, r0
 8008198:	2900      	cmp	r1, #0
 800819a:	bfb8      	it	lt
 800819c:	4249      	neglt	r1, r1
 800819e:	f803 2b02 	strb.w	r2, [r3], #2
 80081a2:	bfb4      	ite	lt
 80081a4:	222d      	movlt	r2, #45	; 0x2d
 80081a6:	222b      	movge	r2, #43	; 0x2b
 80081a8:	2909      	cmp	r1, #9
 80081aa:	7042      	strb	r2, [r0, #1]
 80081ac:	dd2a      	ble.n	8008204 <__exponent+0x70>
 80081ae:	f10d 0407 	add.w	r4, sp, #7
 80081b2:	46a4      	mov	ip, r4
 80081b4:	270a      	movs	r7, #10
 80081b6:	46a6      	mov	lr, r4
 80081b8:	460a      	mov	r2, r1
 80081ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80081be:	fb07 1516 	mls	r5, r7, r6, r1
 80081c2:	3530      	adds	r5, #48	; 0x30
 80081c4:	2a63      	cmp	r2, #99	; 0x63
 80081c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80081ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081ce:	4631      	mov	r1, r6
 80081d0:	dcf1      	bgt.n	80081b6 <__exponent+0x22>
 80081d2:	3130      	adds	r1, #48	; 0x30
 80081d4:	f1ae 0502 	sub.w	r5, lr, #2
 80081d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081dc:	1c44      	adds	r4, r0, #1
 80081de:	4629      	mov	r1, r5
 80081e0:	4561      	cmp	r1, ip
 80081e2:	d30a      	bcc.n	80081fa <__exponent+0x66>
 80081e4:	f10d 0209 	add.w	r2, sp, #9
 80081e8:	eba2 020e 	sub.w	r2, r2, lr
 80081ec:	4565      	cmp	r5, ip
 80081ee:	bf88      	it	hi
 80081f0:	2200      	movhi	r2, #0
 80081f2:	4413      	add	r3, r2
 80081f4:	1a18      	subs	r0, r3, r0
 80081f6:	b003      	add	sp, #12
 80081f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008202:	e7ed      	b.n	80081e0 <__exponent+0x4c>
 8008204:	2330      	movs	r3, #48	; 0x30
 8008206:	3130      	adds	r1, #48	; 0x30
 8008208:	7083      	strb	r3, [r0, #2]
 800820a:	70c1      	strb	r1, [r0, #3]
 800820c:	1d03      	adds	r3, r0, #4
 800820e:	e7f1      	b.n	80081f4 <__exponent+0x60>

08008210 <_printf_float>:
 8008210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008214:	ed2d 8b02 	vpush	{d8}
 8008218:	b08d      	sub	sp, #52	; 0x34
 800821a:	460c      	mov	r4, r1
 800821c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008220:	4616      	mov	r6, r2
 8008222:	461f      	mov	r7, r3
 8008224:	4605      	mov	r5, r0
 8008226:	f003 fb47 	bl	800b8b8 <_localeconv_r>
 800822a:	f8d0 a000 	ldr.w	sl, [r0]
 800822e:	4650      	mov	r0, sl
 8008230:	f7f7 ffee 	bl	8000210 <strlen>
 8008234:	2300      	movs	r3, #0
 8008236:	930a      	str	r3, [sp, #40]	; 0x28
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	9305      	str	r3, [sp, #20]
 800823c:	f8d8 3000 	ldr.w	r3, [r8]
 8008240:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008244:	3307      	adds	r3, #7
 8008246:	f023 0307 	bic.w	r3, r3, #7
 800824a:	f103 0208 	add.w	r2, r3, #8
 800824e:	f8c8 2000 	str.w	r2, [r8]
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800825a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800825e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008262:	9307      	str	r3, [sp, #28]
 8008264:	f8cd 8018 	str.w	r8, [sp, #24]
 8008268:	ee08 0a10 	vmov	s16, r0
 800826c:	4b9f      	ldr	r3, [pc, #636]	; (80084ec <_printf_float+0x2dc>)
 800826e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008272:	f04f 32ff 	mov.w	r2, #4294967295
 8008276:	f7f8 fc79 	bl	8000b6c <__aeabi_dcmpun>
 800827a:	bb88      	cbnz	r0, 80082e0 <_printf_float+0xd0>
 800827c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008280:	4b9a      	ldr	r3, [pc, #616]	; (80084ec <_printf_float+0x2dc>)
 8008282:	f04f 32ff 	mov.w	r2, #4294967295
 8008286:	f7f8 fc53 	bl	8000b30 <__aeabi_dcmple>
 800828a:	bb48      	cbnz	r0, 80082e0 <_printf_float+0xd0>
 800828c:	2200      	movs	r2, #0
 800828e:	2300      	movs	r3, #0
 8008290:	4640      	mov	r0, r8
 8008292:	4649      	mov	r1, r9
 8008294:	f7f8 fc42 	bl	8000b1c <__aeabi_dcmplt>
 8008298:	b110      	cbz	r0, 80082a0 <_printf_float+0x90>
 800829a:	232d      	movs	r3, #45	; 0x2d
 800829c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a0:	4b93      	ldr	r3, [pc, #588]	; (80084f0 <_printf_float+0x2e0>)
 80082a2:	4894      	ldr	r0, [pc, #592]	; (80084f4 <_printf_float+0x2e4>)
 80082a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80082a8:	bf94      	ite	ls
 80082aa:	4698      	movls	r8, r3
 80082ac:	4680      	movhi	r8, r0
 80082ae:	2303      	movs	r3, #3
 80082b0:	6123      	str	r3, [r4, #16]
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	f023 0204 	bic.w	r2, r3, #4
 80082b8:	6022      	str	r2, [r4, #0]
 80082ba:	f04f 0900 	mov.w	r9, #0
 80082be:	9700      	str	r7, [sp, #0]
 80082c0:	4633      	mov	r3, r6
 80082c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80082c4:	4621      	mov	r1, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 f9d8 	bl	800867c <_printf_common>
 80082cc:	3001      	adds	r0, #1
 80082ce:	f040 8090 	bne.w	80083f2 <_printf_float+0x1e2>
 80082d2:	f04f 30ff 	mov.w	r0, #4294967295
 80082d6:	b00d      	add	sp, #52	; 0x34
 80082d8:	ecbd 8b02 	vpop	{d8}
 80082dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e0:	4642      	mov	r2, r8
 80082e2:	464b      	mov	r3, r9
 80082e4:	4640      	mov	r0, r8
 80082e6:	4649      	mov	r1, r9
 80082e8:	f7f8 fc40 	bl	8000b6c <__aeabi_dcmpun>
 80082ec:	b140      	cbz	r0, 8008300 <_printf_float+0xf0>
 80082ee:	464b      	mov	r3, r9
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bfbc      	itt	lt
 80082f4:	232d      	movlt	r3, #45	; 0x2d
 80082f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082fa:	487f      	ldr	r0, [pc, #508]	; (80084f8 <_printf_float+0x2e8>)
 80082fc:	4b7f      	ldr	r3, [pc, #508]	; (80084fc <_printf_float+0x2ec>)
 80082fe:	e7d1      	b.n	80082a4 <_printf_float+0x94>
 8008300:	6863      	ldr	r3, [r4, #4]
 8008302:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008306:	9206      	str	r2, [sp, #24]
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	d13f      	bne.n	800838c <_printf_float+0x17c>
 800830c:	2306      	movs	r3, #6
 800830e:	6063      	str	r3, [r4, #4]
 8008310:	9b05      	ldr	r3, [sp, #20]
 8008312:	6861      	ldr	r1, [r4, #4]
 8008314:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008318:	2300      	movs	r3, #0
 800831a:	9303      	str	r3, [sp, #12]
 800831c:	ab0a      	add	r3, sp, #40	; 0x28
 800831e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008322:	ab09      	add	r3, sp, #36	; 0x24
 8008324:	ec49 8b10 	vmov	d0, r8, r9
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	6022      	str	r2, [r4, #0]
 800832c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008330:	4628      	mov	r0, r5
 8008332:	f7ff fecd 	bl	80080d0 <__cvt>
 8008336:	9b06      	ldr	r3, [sp, #24]
 8008338:	9909      	ldr	r1, [sp, #36]	; 0x24
 800833a:	2b47      	cmp	r3, #71	; 0x47
 800833c:	4680      	mov	r8, r0
 800833e:	d108      	bne.n	8008352 <_printf_float+0x142>
 8008340:	1cc8      	adds	r0, r1, #3
 8008342:	db02      	blt.n	800834a <_printf_float+0x13a>
 8008344:	6863      	ldr	r3, [r4, #4]
 8008346:	4299      	cmp	r1, r3
 8008348:	dd41      	ble.n	80083ce <_printf_float+0x1be>
 800834a:	f1ab 0b02 	sub.w	fp, fp, #2
 800834e:	fa5f fb8b 	uxtb.w	fp, fp
 8008352:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008356:	d820      	bhi.n	800839a <_printf_float+0x18a>
 8008358:	3901      	subs	r1, #1
 800835a:	465a      	mov	r2, fp
 800835c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008360:	9109      	str	r1, [sp, #36]	; 0x24
 8008362:	f7ff ff17 	bl	8008194 <__exponent>
 8008366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008368:	1813      	adds	r3, r2, r0
 800836a:	2a01      	cmp	r2, #1
 800836c:	4681      	mov	r9, r0
 800836e:	6123      	str	r3, [r4, #16]
 8008370:	dc02      	bgt.n	8008378 <_printf_float+0x168>
 8008372:	6822      	ldr	r2, [r4, #0]
 8008374:	07d2      	lsls	r2, r2, #31
 8008376:	d501      	bpl.n	800837c <_printf_float+0x16c>
 8008378:	3301      	adds	r3, #1
 800837a:	6123      	str	r3, [r4, #16]
 800837c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008380:	2b00      	cmp	r3, #0
 8008382:	d09c      	beq.n	80082be <_printf_float+0xae>
 8008384:	232d      	movs	r3, #45	; 0x2d
 8008386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800838a:	e798      	b.n	80082be <_printf_float+0xae>
 800838c:	9a06      	ldr	r2, [sp, #24]
 800838e:	2a47      	cmp	r2, #71	; 0x47
 8008390:	d1be      	bne.n	8008310 <_printf_float+0x100>
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1bc      	bne.n	8008310 <_printf_float+0x100>
 8008396:	2301      	movs	r3, #1
 8008398:	e7b9      	b.n	800830e <_printf_float+0xfe>
 800839a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800839e:	d118      	bne.n	80083d2 <_printf_float+0x1c2>
 80083a0:	2900      	cmp	r1, #0
 80083a2:	6863      	ldr	r3, [r4, #4]
 80083a4:	dd0b      	ble.n	80083be <_printf_float+0x1ae>
 80083a6:	6121      	str	r1, [r4, #16]
 80083a8:	b913      	cbnz	r3, 80083b0 <_printf_float+0x1a0>
 80083aa:	6822      	ldr	r2, [r4, #0]
 80083ac:	07d0      	lsls	r0, r2, #31
 80083ae:	d502      	bpl.n	80083b6 <_printf_float+0x1a6>
 80083b0:	3301      	adds	r3, #1
 80083b2:	440b      	add	r3, r1
 80083b4:	6123      	str	r3, [r4, #16]
 80083b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80083b8:	f04f 0900 	mov.w	r9, #0
 80083bc:	e7de      	b.n	800837c <_printf_float+0x16c>
 80083be:	b913      	cbnz	r3, 80083c6 <_printf_float+0x1b6>
 80083c0:	6822      	ldr	r2, [r4, #0]
 80083c2:	07d2      	lsls	r2, r2, #31
 80083c4:	d501      	bpl.n	80083ca <_printf_float+0x1ba>
 80083c6:	3302      	adds	r3, #2
 80083c8:	e7f4      	b.n	80083b4 <_printf_float+0x1a4>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e7f2      	b.n	80083b4 <_printf_float+0x1a4>
 80083ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d4:	4299      	cmp	r1, r3
 80083d6:	db05      	blt.n	80083e4 <_printf_float+0x1d4>
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	6121      	str	r1, [r4, #16]
 80083dc:	07d8      	lsls	r0, r3, #31
 80083de:	d5ea      	bpl.n	80083b6 <_printf_float+0x1a6>
 80083e0:	1c4b      	adds	r3, r1, #1
 80083e2:	e7e7      	b.n	80083b4 <_printf_float+0x1a4>
 80083e4:	2900      	cmp	r1, #0
 80083e6:	bfd4      	ite	le
 80083e8:	f1c1 0202 	rsble	r2, r1, #2
 80083ec:	2201      	movgt	r2, #1
 80083ee:	4413      	add	r3, r2
 80083f0:	e7e0      	b.n	80083b4 <_printf_float+0x1a4>
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	055a      	lsls	r2, r3, #21
 80083f6:	d407      	bmi.n	8008408 <_printf_float+0x1f8>
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	4642      	mov	r2, r8
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	47b8      	blx	r7
 8008402:	3001      	adds	r0, #1
 8008404:	d12c      	bne.n	8008460 <_printf_float+0x250>
 8008406:	e764      	b.n	80082d2 <_printf_float+0xc2>
 8008408:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800840c:	f240 80e0 	bls.w	80085d0 <_printf_float+0x3c0>
 8008410:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008414:	2200      	movs	r2, #0
 8008416:	2300      	movs	r3, #0
 8008418:	f7f8 fb76 	bl	8000b08 <__aeabi_dcmpeq>
 800841c:	2800      	cmp	r0, #0
 800841e:	d034      	beq.n	800848a <_printf_float+0x27a>
 8008420:	4a37      	ldr	r2, [pc, #220]	; (8008500 <_printf_float+0x2f0>)
 8008422:	2301      	movs	r3, #1
 8008424:	4631      	mov	r1, r6
 8008426:	4628      	mov	r0, r5
 8008428:	47b8      	blx	r7
 800842a:	3001      	adds	r0, #1
 800842c:	f43f af51 	beq.w	80082d2 <_printf_float+0xc2>
 8008430:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008434:	429a      	cmp	r2, r3
 8008436:	db02      	blt.n	800843e <_printf_float+0x22e>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	07d8      	lsls	r0, r3, #31
 800843c:	d510      	bpl.n	8008460 <_printf_float+0x250>
 800843e:	ee18 3a10 	vmov	r3, s16
 8008442:	4652      	mov	r2, sl
 8008444:	4631      	mov	r1, r6
 8008446:	4628      	mov	r0, r5
 8008448:	47b8      	blx	r7
 800844a:	3001      	adds	r0, #1
 800844c:	f43f af41 	beq.w	80082d2 <_printf_float+0xc2>
 8008450:	f04f 0800 	mov.w	r8, #0
 8008454:	f104 091a 	add.w	r9, r4, #26
 8008458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845a:	3b01      	subs	r3, #1
 800845c:	4543      	cmp	r3, r8
 800845e:	dc09      	bgt.n	8008474 <_printf_float+0x264>
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	079b      	lsls	r3, r3, #30
 8008464:	f100 8105 	bmi.w	8008672 <_printf_float+0x462>
 8008468:	68e0      	ldr	r0, [r4, #12]
 800846a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800846c:	4298      	cmp	r0, r3
 800846e:	bfb8      	it	lt
 8008470:	4618      	movlt	r0, r3
 8008472:	e730      	b.n	80082d6 <_printf_float+0xc6>
 8008474:	2301      	movs	r3, #1
 8008476:	464a      	mov	r2, r9
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f af27 	beq.w	80082d2 <_printf_float+0xc2>
 8008484:	f108 0801 	add.w	r8, r8, #1
 8008488:	e7e6      	b.n	8008458 <_printf_float+0x248>
 800848a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848c:	2b00      	cmp	r3, #0
 800848e:	dc39      	bgt.n	8008504 <_printf_float+0x2f4>
 8008490:	4a1b      	ldr	r2, [pc, #108]	; (8008500 <_printf_float+0x2f0>)
 8008492:	2301      	movs	r3, #1
 8008494:	4631      	mov	r1, r6
 8008496:	4628      	mov	r0, r5
 8008498:	47b8      	blx	r7
 800849a:	3001      	adds	r0, #1
 800849c:	f43f af19 	beq.w	80082d2 <_printf_float+0xc2>
 80084a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084a4:	4313      	orrs	r3, r2
 80084a6:	d102      	bne.n	80084ae <_printf_float+0x29e>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	07d9      	lsls	r1, r3, #31
 80084ac:	d5d8      	bpl.n	8008460 <_printf_float+0x250>
 80084ae:	ee18 3a10 	vmov	r3, s16
 80084b2:	4652      	mov	r2, sl
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f af09 	beq.w	80082d2 <_printf_float+0xc2>
 80084c0:	f04f 0900 	mov.w	r9, #0
 80084c4:	f104 0a1a 	add.w	sl, r4, #26
 80084c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ca:	425b      	negs	r3, r3
 80084cc:	454b      	cmp	r3, r9
 80084ce:	dc01      	bgt.n	80084d4 <_printf_float+0x2c4>
 80084d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d2:	e792      	b.n	80083fa <_printf_float+0x1ea>
 80084d4:	2301      	movs	r3, #1
 80084d6:	4652      	mov	r2, sl
 80084d8:	4631      	mov	r1, r6
 80084da:	4628      	mov	r0, r5
 80084dc:	47b8      	blx	r7
 80084de:	3001      	adds	r0, #1
 80084e0:	f43f aef7 	beq.w	80082d2 <_printf_float+0xc2>
 80084e4:	f109 0901 	add.w	r9, r9, #1
 80084e8:	e7ee      	b.n	80084c8 <_printf_float+0x2b8>
 80084ea:	bf00      	nop
 80084ec:	7fefffff 	.word	0x7fefffff
 80084f0:	0800df5c 	.word	0x0800df5c
 80084f4:	0800df60 	.word	0x0800df60
 80084f8:	0800df68 	.word	0x0800df68
 80084fc:	0800df64 	.word	0x0800df64
 8008500:	0800e3c9 	.word	0x0800e3c9
 8008504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008506:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008508:	429a      	cmp	r2, r3
 800850a:	bfa8      	it	ge
 800850c:	461a      	movge	r2, r3
 800850e:	2a00      	cmp	r2, #0
 8008510:	4691      	mov	r9, r2
 8008512:	dc37      	bgt.n	8008584 <_printf_float+0x374>
 8008514:	f04f 0b00 	mov.w	fp, #0
 8008518:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800851c:	f104 021a 	add.w	r2, r4, #26
 8008520:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008522:	9305      	str	r3, [sp, #20]
 8008524:	eba3 0309 	sub.w	r3, r3, r9
 8008528:	455b      	cmp	r3, fp
 800852a:	dc33      	bgt.n	8008594 <_printf_float+0x384>
 800852c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008530:	429a      	cmp	r2, r3
 8008532:	db3b      	blt.n	80085ac <_printf_float+0x39c>
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	07da      	lsls	r2, r3, #31
 8008538:	d438      	bmi.n	80085ac <_printf_float+0x39c>
 800853a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800853c:	9a05      	ldr	r2, [sp, #20]
 800853e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008540:	1a9a      	subs	r2, r3, r2
 8008542:	eba3 0901 	sub.w	r9, r3, r1
 8008546:	4591      	cmp	r9, r2
 8008548:	bfa8      	it	ge
 800854a:	4691      	movge	r9, r2
 800854c:	f1b9 0f00 	cmp.w	r9, #0
 8008550:	dc35      	bgt.n	80085be <_printf_float+0x3ae>
 8008552:	f04f 0800 	mov.w	r8, #0
 8008556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800855a:	f104 0a1a 	add.w	sl, r4, #26
 800855e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008562:	1a9b      	subs	r3, r3, r2
 8008564:	eba3 0309 	sub.w	r3, r3, r9
 8008568:	4543      	cmp	r3, r8
 800856a:	f77f af79 	ble.w	8008460 <_printf_float+0x250>
 800856e:	2301      	movs	r3, #1
 8008570:	4652      	mov	r2, sl
 8008572:	4631      	mov	r1, r6
 8008574:	4628      	mov	r0, r5
 8008576:	47b8      	blx	r7
 8008578:	3001      	adds	r0, #1
 800857a:	f43f aeaa 	beq.w	80082d2 <_printf_float+0xc2>
 800857e:	f108 0801 	add.w	r8, r8, #1
 8008582:	e7ec      	b.n	800855e <_printf_float+0x34e>
 8008584:	4613      	mov	r3, r2
 8008586:	4631      	mov	r1, r6
 8008588:	4642      	mov	r2, r8
 800858a:	4628      	mov	r0, r5
 800858c:	47b8      	blx	r7
 800858e:	3001      	adds	r0, #1
 8008590:	d1c0      	bne.n	8008514 <_printf_float+0x304>
 8008592:	e69e      	b.n	80082d2 <_printf_float+0xc2>
 8008594:	2301      	movs	r3, #1
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	9205      	str	r2, [sp, #20]
 800859c:	47b8      	blx	r7
 800859e:	3001      	adds	r0, #1
 80085a0:	f43f ae97 	beq.w	80082d2 <_printf_float+0xc2>
 80085a4:	9a05      	ldr	r2, [sp, #20]
 80085a6:	f10b 0b01 	add.w	fp, fp, #1
 80085aa:	e7b9      	b.n	8008520 <_printf_float+0x310>
 80085ac:	ee18 3a10 	vmov	r3, s16
 80085b0:	4652      	mov	r2, sl
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	d1be      	bne.n	800853a <_printf_float+0x32a>
 80085bc:	e689      	b.n	80082d2 <_printf_float+0xc2>
 80085be:	9a05      	ldr	r2, [sp, #20]
 80085c0:	464b      	mov	r3, r9
 80085c2:	4442      	add	r2, r8
 80085c4:	4631      	mov	r1, r6
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b8      	blx	r7
 80085ca:	3001      	adds	r0, #1
 80085cc:	d1c1      	bne.n	8008552 <_printf_float+0x342>
 80085ce:	e680      	b.n	80082d2 <_printf_float+0xc2>
 80085d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085d2:	2a01      	cmp	r2, #1
 80085d4:	dc01      	bgt.n	80085da <_printf_float+0x3ca>
 80085d6:	07db      	lsls	r3, r3, #31
 80085d8:	d538      	bpl.n	800864c <_printf_float+0x43c>
 80085da:	2301      	movs	r3, #1
 80085dc:	4642      	mov	r2, r8
 80085de:	4631      	mov	r1, r6
 80085e0:	4628      	mov	r0, r5
 80085e2:	47b8      	blx	r7
 80085e4:	3001      	adds	r0, #1
 80085e6:	f43f ae74 	beq.w	80082d2 <_printf_float+0xc2>
 80085ea:	ee18 3a10 	vmov	r3, s16
 80085ee:	4652      	mov	r2, sl
 80085f0:	4631      	mov	r1, r6
 80085f2:	4628      	mov	r0, r5
 80085f4:	47b8      	blx	r7
 80085f6:	3001      	adds	r0, #1
 80085f8:	f43f ae6b 	beq.w	80082d2 <_printf_float+0xc2>
 80085fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008600:	2200      	movs	r2, #0
 8008602:	2300      	movs	r3, #0
 8008604:	f7f8 fa80 	bl	8000b08 <__aeabi_dcmpeq>
 8008608:	b9d8      	cbnz	r0, 8008642 <_printf_float+0x432>
 800860a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800860c:	f108 0201 	add.w	r2, r8, #1
 8008610:	3b01      	subs	r3, #1
 8008612:	4631      	mov	r1, r6
 8008614:	4628      	mov	r0, r5
 8008616:	47b8      	blx	r7
 8008618:	3001      	adds	r0, #1
 800861a:	d10e      	bne.n	800863a <_printf_float+0x42a>
 800861c:	e659      	b.n	80082d2 <_printf_float+0xc2>
 800861e:	2301      	movs	r3, #1
 8008620:	4652      	mov	r2, sl
 8008622:	4631      	mov	r1, r6
 8008624:	4628      	mov	r0, r5
 8008626:	47b8      	blx	r7
 8008628:	3001      	adds	r0, #1
 800862a:	f43f ae52 	beq.w	80082d2 <_printf_float+0xc2>
 800862e:	f108 0801 	add.w	r8, r8, #1
 8008632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008634:	3b01      	subs	r3, #1
 8008636:	4543      	cmp	r3, r8
 8008638:	dcf1      	bgt.n	800861e <_printf_float+0x40e>
 800863a:	464b      	mov	r3, r9
 800863c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008640:	e6dc      	b.n	80083fc <_printf_float+0x1ec>
 8008642:	f04f 0800 	mov.w	r8, #0
 8008646:	f104 0a1a 	add.w	sl, r4, #26
 800864a:	e7f2      	b.n	8008632 <_printf_float+0x422>
 800864c:	2301      	movs	r3, #1
 800864e:	4642      	mov	r2, r8
 8008650:	e7df      	b.n	8008612 <_printf_float+0x402>
 8008652:	2301      	movs	r3, #1
 8008654:	464a      	mov	r2, r9
 8008656:	4631      	mov	r1, r6
 8008658:	4628      	mov	r0, r5
 800865a:	47b8      	blx	r7
 800865c:	3001      	adds	r0, #1
 800865e:	f43f ae38 	beq.w	80082d2 <_printf_float+0xc2>
 8008662:	f108 0801 	add.w	r8, r8, #1
 8008666:	68e3      	ldr	r3, [r4, #12]
 8008668:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800866a:	1a5b      	subs	r3, r3, r1
 800866c:	4543      	cmp	r3, r8
 800866e:	dcf0      	bgt.n	8008652 <_printf_float+0x442>
 8008670:	e6fa      	b.n	8008468 <_printf_float+0x258>
 8008672:	f04f 0800 	mov.w	r8, #0
 8008676:	f104 0919 	add.w	r9, r4, #25
 800867a:	e7f4      	b.n	8008666 <_printf_float+0x456>

0800867c <_printf_common>:
 800867c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	4616      	mov	r6, r2
 8008682:	4699      	mov	r9, r3
 8008684:	688a      	ldr	r2, [r1, #8]
 8008686:	690b      	ldr	r3, [r1, #16]
 8008688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800868c:	4293      	cmp	r3, r2
 800868e:	bfb8      	it	lt
 8008690:	4613      	movlt	r3, r2
 8008692:	6033      	str	r3, [r6, #0]
 8008694:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008698:	4607      	mov	r7, r0
 800869a:	460c      	mov	r4, r1
 800869c:	b10a      	cbz	r2, 80086a2 <_printf_common+0x26>
 800869e:	3301      	adds	r3, #1
 80086a0:	6033      	str	r3, [r6, #0]
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	0699      	lsls	r1, r3, #26
 80086a6:	bf42      	ittt	mi
 80086a8:	6833      	ldrmi	r3, [r6, #0]
 80086aa:	3302      	addmi	r3, #2
 80086ac:	6033      	strmi	r3, [r6, #0]
 80086ae:	6825      	ldr	r5, [r4, #0]
 80086b0:	f015 0506 	ands.w	r5, r5, #6
 80086b4:	d106      	bne.n	80086c4 <_printf_common+0x48>
 80086b6:	f104 0a19 	add.w	sl, r4, #25
 80086ba:	68e3      	ldr	r3, [r4, #12]
 80086bc:	6832      	ldr	r2, [r6, #0]
 80086be:	1a9b      	subs	r3, r3, r2
 80086c0:	42ab      	cmp	r3, r5
 80086c2:	dc26      	bgt.n	8008712 <_printf_common+0x96>
 80086c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086c8:	1e13      	subs	r3, r2, #0
 80086ca:	6822      	ldr	r2, [r4, #0]
 80086cc:	bf18      	it	ne
 80086ce:	2301      	movne	r3, #1
 80086d0:	0692      	lsls	r2, r2, #26
 80086d2:	d42b      	bmi.n	800872c <_printf_common+0xb0>
 80086d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086d8:	4649      	mov	r1, r9
 80086da:	4638      	mov	r0, r7
 80086dc:	47c0      	blx	r8
 80086de:	3001      	adds	r0, #1
 80086e0:	d01e      	beq.n	8008720 <_printf_common+0xa4>
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	68e5      	ldr	r5, [r4, #12]
 80086e6:	6832      	ldr	r2, [r6, #0]
 80086e8:	f003 0306 	and.w	r3, r3, #6
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	bf08      	it	eq
 80086f0:	1aad      	subeq	r5, r5, r2
 80086f2:	68a3      	ldr	r3, [r4, #8]
 80086f4:	6922      	ldr	r2, [r4, #16]
 80086f6:	bf0c      	ite	eq
 80086f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086fc:	2500      	movne	r5, #0
 80086fe:	4293      	cmp	r3, r2
 8008700:	bfc4      	itt	gt
 8008702:	1a9b      	subgt	r3, r3, r2
 8008704:	18ed      	addgt	r5, r5, r3
 8008706:	2600      	movs	r6, #0
 8008708:	341a      	adds	r4, #26
 800870a:	42b5      	cmp	r5, r6
 800870c:	d11a      	bne.n	8008744 <_printf_common+0xc8>
 800870e:	2000      	movs	r0, #0
 8008710:	e008      	b.n	8008724 <_printf_common+0xa8>
 8008712:	2301      	movs	r3, #1
 8008714:	4652      	mov	r2, sl
 8008716:	4649      	mov	r1, r9
 8008718:	4638      	mov	r0, r7
 800871a:	47c0      	blx	r8
 800871c:	3001      	adds	r0, #1
 800871e:	d103      	bne.n	8008728 <_printf_common+0xac>
 8008720:	f04f 30ff 	mov.w	r0, #4294967295
 8008724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008728:	3501      	adds	r5, #1
 800872a:	e7c6      	b.n	80086ba <_printf_common+0x3e>
 800872c:	18e1      	adds	r1, r4, r3
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	2030      	movs	r0, #48	; 0x30
 8008732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008736:	4422      	add	r2, r4
 8008738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800873c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008740:	3302      	adds	r3, #2
 8008742:	e7c7      	b.n	80086d4 <_printf_common+0x58>
 8008744:	2301      	movs	r3, #1
 8008746:	4622      	mov	r2, r4
 8008748:	4649      	mov	r1, r9
 800874a:	4638      	mov	r0, r7
 800874c:	47c0      	blx	r8
 800874e:	3001      	adds	r0, #1
 8008750:	d0e6      	beq.n	8008720 <_printf_common+0xa4>
 8008752:	3601      	adds	r6, #1
 8008754:	e7d9      	b.n	800870a <_printf_common+0x8e>
	...

08008758 <_printf_i>:
 8008758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800875c:	7e0f      	ldrb	r7, [r1, #24]
 800875e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008760:	2f78      	cmp	r7, #120	; 0x78
 8008762:	4691      	mov	r9, r2
 8008764:	4680      	mov	r8, r0
 8008766:	460c      	mov	r4, r1
 8008768:	469a      	mov	sl, r3
 800876a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800876e:	d807      	bhi.n	8008780 <_printf_i+0x28>
 8008770:	2f62      	cmp	r7, #98	; 0x62
 8008772:	d80a      	bhi.n	800878a <_printf_i+0x32>
 8008774:	2f00      	cmp	r7, #0
 8008776:	f000 80d8 	beq.w	800892a <_printf_i+0x1d2>
 800877a:	2f58      	cmp	r7, #88	; 0x58
 800877c:	f000 80a3 	beq.w	80088c6 <_printf_i+0x16e>
 8008780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008788:	e03a      	b.n	8008800 <_printf_i+0xa8>
 800878a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800878e:	2b15      	cmp	r3, #21
 8008790:	d8f6      	bhi.n	8008780 <_printf_i+0x28>
 8008792:	a101      	add	r1, pc, #4	; (adr r1, 8008798 <_printf_i+0x40>)
 8008794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008798:	080087f1 	.word	0x080087f1
 800879c:	08008805 	.word	0x08008805
 80087a0:	08008781 	.word	0x08008781
 80087a4:	08008781 	.word	0x08008781
 80087a8:	08008781 	.word	0x08008781
 80087ac:	08008781 	.word	0x08008781
 80087b0:	08008805 	.word	0x08008805
 80087b4:	08008781 	.word	0x08008781
 80087b8:	08008781 	.word	0x08008781
 80087bc:	08008781 	.word	0x08008781
 80087c0:	08008781 	.word	0x08008781
 80087c4:	08008911 	.word	0x08008911
 80087c8:	08008835 	.word	0x08008835
 80087cc:	080088f3 	.word	0x080088f3
 80087d0:	08008781 	.word	0x08008781
 80087d4:	08008781 	.word	0x08008781
 80087d8:	08008933 	.word	0x08008933
 80087dc:	08008781 	.word	0x08008781
 80087e0:	08008835 	.word	0x08008835
 80087e4:	08008781 	.word	0x08008781
 80087e8:	08008781 	.word	0x08008781
 80087ec:	080088fb 	.word	0x080088fb
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	1d1a      	adds	r2, r3, #4
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	602a      	str	r2, [r5, #0]
 80087f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008800:	2301      	movs	r3, #1
 8008802:	e0a3      	b.n	800894c <_printf_i+0x1f4>
 8008804:	6820      	ldr	r0, [r4, #0]
 8008806:	6829      	ldr	r1, [r5, #0]
 8008808:	0606      	lsls	r6, r0, #24
 800880a:	f101 0304 	add.w	r3, r1, #4
 800880e:	d50a      	bpl.n	8008826 <_printf_i+0xce>
 8008810:	680e      	ldr	r6, [r1, #0]
 8008812:	602b      	str	r3, [r5, #0]
 8008814:	2e00      	cmp	r6, #0
 8008816:	da03      	bge.n	8008820 <_printf_i+0xc8>
 8008818:	232d      	movs	r3, #45	; 0x2d
 800881a:	4276      	negs	r6, r6
 800881c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008820:	485e      	ldr	r0, [pc, #376]	; (800899c <_printf_i+0x244>)
 8008822:	230a      	movs	r3, #10
 8008824:	e019      	b.n	800885a <_printf_i+0x102>
 8008826:	680e      	ldr	r6, [r1, #0]
 8008828:	602b      	str	r3, [r5, #0]
 800882a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800882e:	bf18      	it	ne
 8008830:	b236      	sxthne	r6, r6
 8008832:	e7ef      	b.n	8008814 <_printf_i+0xbc>
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	6820      	ldr	r0, [r4, #0]
 8008838:	1d19      	adds	r1, r3, #4
 800883a:	6029      	str	r1, [r5, #0]
 800883c:	0601      	lsls	r1, r0, #24
 800883e:	d501      	bpl.n	8008844 <_printf_i+0xec>
 8008840:	681e      	ldr	r6, [r3, #0]
 8008842:	e002      	b.n	800884a <_printf_i+0xf2>
 8008844:	0646      	lsls	r6, r0, #25
 8008846:	d5fb      	bpl.n	8008840 <_printf_i+0xe8>
 8008848:	881e      	ldrh	r6, [r3, #0]
 800884a:	4854      	ldr	r0, [pc, #336]	; (800899c <_printf_i+0x244>)
 800884c:	2f6f      	cmp	r7, #111	; 0x6f
 800884e:	bf0c      	ite	eq
 8008850:	2308      	moveq	r3, #8
 8008852:	230a      	movne	r3, #10
 8008854:	2100      	movs	r1, #0
 8008856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800885a:	6865      	ldr	r5, [r4, #4]
 800885c:	60a5      	str	r5, [r4, #8]
 800885e:	2d00      	cmp	r5, #0
 8008860:	bfa2      	ittt	ge
 8008862:	6821      	ldrge	r1, [r4, #0]
 8008864:	f021 0104 	bicge.w	r1, r1, #4
 8008868:	6021      	strge	r1, [r4, #0]
 800886a:	b90e      	cbnz	r6, 8008870 <_printf_i+0x118>
 800886c:	2d00      	cmp	r5, #0
 800886e:	d04d      	beq.n	800890c <_printf_i+0x1b4>
 8008870:	4615      	mov	r5, r2
 8008872:	fbb6 f1f3 	udiv	r1, r6, r3
 8008876:	fb03 6711 	mls	r7, r3, r1, r6
 800887a:	5dc7      	ldrb	r7, [r0, r7]
 800887c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008880:	4637      	mov	r7, r6
 8008882:	42bb      	cmp	r3, r7
 8008884:	460e      	mov	r6, r1
 8008886:	d9f4      	bls.n	8008872 <_printf_i+0x11a>
 8008888:	2b08      	cmp	r3, #8
 800888a:	d10b      	bne.n	80088a4 <_printf_i+0x14c>
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	07de      	lsls	r6, r3, #31
 8008890:	d508      	bpl.n	80088a4 <_printf_i+0x14c>
 8008892:	6923      	ldr	r3, [r4, #16]
 8008894:	6861      	ldr	r1, [r4, #4]
 8008896:	4299      	cmp	r1, r3
 8008898:	bfde      	ittt	le
 800889a:	2330      	movle	r3, #48	; 0x30
 800889c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088a4:	1b52      	subs	r2, r2, r5
 80088a6:	6122      	str	r2, [r4, #16]
 80088a8:	f8cd a000 	str.w	sl, [sp]
 80088ac:	464b      	mov	r3, r9
 80088ae:	aa03      	add	r2, sp, #12
 80088b0:	4621      	mov	r1, r4
 80088b2:	4640      	mov	r0, r8
 80088b4:	f7ff fee2 	bl	800867c <_printf_common>
 80088b8:	3001      	adds	r0, #1
 80088ba:	d14c      	bne.n	8008956 <_printf_i+0x1fe>
 80088bc:	f04f 30ff 	mov.w	r0, #4294967295
 80088c0:	b004      	add	sp, #16
 80088c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c6:	4835      	ldr	r0, [pc, #212]	; (800899c <_printf_i+0x244>)
 80088c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088cc:	6829      	ldr	r1, [r5, #0]
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80088d4:	6029      	str	r1, [r5, #0]
 80088d6:	061d      	lsls	r5, r3, #24
 80088d8:	d514      	bpl.n	8008904 <_printf_i+0x1ac>
 80088da:	07df      	lsls	r7, r3, #31
 80088dc:	bf44      	itt	mi
 80088de:	f043 0320 	orrmi.w	r3, r3, #32
 80088e2:	6023      	strmi	r3, [r4, #0]
 80088e4:	b91e      	cbnz	r6, 80088ee <_printf_i+0x196>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	f023 0320 	bic.w	r3, r3, #32
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	2310      	movs	r3, #16
 80088f0:	e7b0      	b.n	8008854 <_printf_i+0xfc>
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	f043 0320 	orr.w	r3, r3, #32
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	2378      	movs	r3, #120	; 0x78
 80088fc:	4828      	ldr	r0, [pc, #160]	; (80089a0 <_printf_i+0x248>)
 80088fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008902:	e7e3      	b.n	80088cc <_printf_i+0x174>
 8008904:	0659      	lsls	r1, r3, #25
 8008906:	bf48      	it	mi
 8008908:	b2b6      	uxthmi	r6, r6
 800890a:	e7e6      	b.n	80088da <_printf_i+0x182>
 800890c:	4615      	mov	r5, r2
 800890e:	e7bb      	b.n	8008888 <_printf_i+0x130>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	6826      	ldr	r6, [r4, #0]
 8008914:	6961      	ldr	r1, [r4, #20]
 8008916:	1d18      	adds	r0, r3, #4
 8008918:	6028      	str	r0, [r5, #0]
 800891a:	0635      	lsls	r5, r6, #24
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	d501      	bpl.n	8008924 <_printf_i+0x1cc>
 8008920:	6019      	str	r1, [r3, #0]
 8008922:	e002      	b.n	800892a <_printf_i+0x1d2>
 8008924:	0670      	lsls	r0, r6, #25
 8008926:	d5fb      	bpl.n	8008920 <_printf_i+0x1c8>
 8008928:	8019      	strh	r1, [r3, #0]
 800892a:	2300      	movs	r3, #0
 800892c:	6123      	str	r3, [r4, #16]
 800892e:	4615      	mov	r5, r2
 8008930:	e7ba      	b.n	80088a8 <_printf_i+0x150>
 8008932:	682b      	ldr	r3, [r5, #0]
 8008934:	1d1a      	adds	r2, r3, #4
 8008936:	602a      	str	r2, [r5, #0]
 8008938:	681d      	ldr	r5, [r3, #0]
 800893a:	6862      	ldr	r2, [r4, #4]
 800893c:	2100      	movs	r1, #0
 800893e:	4628      	mov	r0, r5
 8008940:	f7f7 fc6e 	bl	8000220 <memchr>
 8008944:	b108      	cbz	r0, 800894a <_printf_i+0x1f2>
 8008946:	1b40      	subs	r0, r0, r5
 8008948:	6060      	str	r0, [r4, #4]
 800894a:	6863      	ldr	r3, [r4, #4]
 800894c:	6123      	str	r3, [r4, #16]
 800894e:	2300      	movs	r3, #0
 8008950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008954:	e7a8      	b.n	80088a8 <_printf_i+0x150>
 8008956:	6923      	ldr	r3, [r4, #16]
 8008958:	462a      	mov	r2, r5
 800895a:	4649      	mov	r1, r9
 800895c:	4640      	mov	r0, r8
 800895e:	47d0      	blx	sl
 8008960:	3001      	adds	r0, #1
 8008962:	d0ab      	beq.n	80088bc <_printf_i+0x164>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	079b      	lsls	r3, r3, #30
 8008968:	d413      	bmi.n	8008992 <_printf_i+0x23a>
 800896a:	68e0      	ldr	r0, [r4, #12]
 800896c:	9b03      	ldr	r3, [sp, #12]
 800896e:	4298      	cmp	r0, r3
 8008970:	bfb8      	it	lt
 8008972:	4618      	movlt	r0, r3
 8008974:	e7a4      	b.n	80088c0 <_printf_i+0x168>
 8008976:	2301      	movs	r3, #1
 8008978:	4632      	mov	r2, r6
 800897a:	4649      	mov	r1, r9
 800897c:	4640      	mov	r0, r8
 800897e:	47d0      	blx	sl
 8008980:	3001      	adds	r0, #1
 8008982:	d09b      	beq.n	80088bc <_printf_i+0x164>
 8008984:	3501      	adds	r5, #1
 8008986:	68e3      	ldr	r3, [r4, #12]
 8008988:	9903      	ldr	r1, [sp, #12]
 800898a:	1a5b      	subs	r3, r3, r1
 800898c:	42ab      	cmp	r3, r5
 800898e:	dcf2      	bgt.n	8008976 <_printf_i+0x21e>
 8008990:	e7eb      	b.n	800896a <_printf_i+0x212>
 8008992:	2500      	movs	r5, #0
 8008994:	f104 0619 	add.w	r6, r4, #25
 8008998:	e7f5      	b.n	8008986 <_printf_i+0x22e>
 800899a:	bf00      	nop
 800899c:	0800df6c 	.word	0x0800df6c
 80089a0:	0800df7d 	.word	0x0800df7d

080089a4 <_scanf_float>:
 80089a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a8:	b087      	sub	sp, #28
 80089aa:	4617      	mov	r7, r2
 80089ac:	9303      	str	r3, [sp, #12]
 80089ae:	688b      	ldr	r3, [r1, #8]
 80089b0:	1e5a      	subs	r2, r3, #1
 80089b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80089b6:	bf83      	ittte	hi
 80089b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089bc:	195b      	addhi	r3, r3, r5
 80089be:	9302      	strhi	r3, [sp, #8]
 80089c0:	2300      	movls	r3, #0
 80089c2:	bf86      	itte	hi
 80089c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089c8:	608b      	strhi	r3, [r1, #8]
 80089ca:	9302      	strls	r3, [sp, #8]
 80089cc:	680b      	ldr	r3, [r1, #0]
 80089ce:	468b      	mov	fp, r1
 80089d0:	2500      	movs	r5, #0
 80089d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80089d6:	f84b 3b1c 	str.w	r3, [fp], #28
 80089da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089de:	4680      	mov	r8, r0
 80089e0:	460c      	mov	r4, r1
 80089e2:	465e      	mov	r6, fp
 80089e4:	46aa      	mov	sl, r5
 80089e6:	46a9      	mov	r9, r5
 80089e8:	9501      	str	r5, [sp, #4]
 80089ea:	68a2      	ldr	r2, [r4, #8]
 80089ec:	b152      	cbz	r2, 8008a04 <_scanf_float+0x60>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b4e      	cmp	r3, #78	; 0x4e
 80089f4:	d864      	bhi.n	8008ac0 <_scanf_float+0x11c>
 80089f6:	2b40      	cmp	r3, #64	; 0x40
 80089f8:	d83c      	bhi.n	8008a74 <_scanf_float+0xd0>
 80089fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80089fe:	b2c8      	uxtb	r0, r1
 8008a00:	280e      	cmp	r0, #14
 8008a02:	d93a      	bls.n	8008a7a <_scanf_float+0xd6>
 8008a04:	f1b9 0f00 	cmp.w	r9, #0
 8008a08:	d003      	beq.n	8008a12 <_scanf_float+0x6e>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a16:	f1ba 0f01 	cmp.w	sl, #1
 8008a1a:	f200 8113 	bhi.w	8008c44 <_scanf_float+0x2a0>
 8008a1e:	455e      	cmp	r6, fp
 8008a20:	f200 8105 	bhi.w	8008c2e <_scanf_float+0x28a>
 8008a24:	2501      	movs	r5, #1
 8008a26:	4628      	mov	r0, r5
 8008a28:	b007      	add	sp, #28
 8008a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008a32:	2a0d      	cmp	r2, #13
 8008a34:	d8e6      	bhi.n	8008a04 <_scanf_float+0x60>
 8008a36:	a101      	add	r1, pc, #4	; (adr r1, 8008a3c <_scanf_float+0x98>)
 8008a38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a3c:	08008b7b 	.word	0x08008b7b
 8008a40:	08008a05 	.word	0x08008a05
 8008a44:	08008a05 	.word	0x08008a05
 8008a48:	08008a05 	.word	0x08008a05
 8008a4c:	08008bdb 	.word	0x08008bdb
 8008a50:	08008bb3 	.word	0x08008bb3
 8008a54:	08008a05 	.word	0x08008a05
 8008a58:	08008a05 	.word	0x08008a05
 8008a5c:	08008b89 	.word	0x08008b89
 8008a60:	08008a05 	.word	0x08008a05
 8008a64:	08008a05 	.word	0x08008a05
 8008a68:	08008a05 	.word	0x08008a05
 8008a6c:	08008a05 	.word	0x08008a05
 8008a70:	08008b41 	.word	0x08008b41
 8008a74:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a78:	e7db      	b.n	8008a32 <_scanf_float+0x8e>
 8008a7a:	290e      	cmp	r1, #14
 8008a7c:	d8c2      	bhi.n	8008a04 <_scanf_float+0x60>
 8008a7e:	a001      	add	r0, pc, #4	; (adr r0, 8008a84 <_scanf_float+0xe0>)
 8008a80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a84:	08008b33 	.word	0x08008b33
 8008a88:	08008a05 	.word	0x08008a05
 8008a8c:	08008b33 	.word	0x08008b33
 8008a90:	08008bc7 	.word	0x08008bc7
 8008a94:	08008a05 	.word	0x08008a05
 8008a98:	08008ae1 	.word	0x08008ae1
 8008a9c:	08008b1d 	.word	0x08008b1d
 8008aa0:	08008b1d 	.word	0x08008b1d
 8008aa4:	08008b1d 	.word	0x08008b1d
 8008aa8:	08008b1d 	.word	0x08008b1d
 8008aac:	08008b1d 	.word	0x08008b1d
 8008ab0:	08008b1d 	.word	0x08008b1d
 8008ab4:	08008b1d 	.word	0x08008b1d
 8008ab8:	08008b1d 	.word	0x08008b1d
 8008abc:	08008b1d 	.word	0x08008b1d
 8008ac0:	2b6e      	cmp	r3, #110	; 0x6e
 8008ac2:	d809      	bhi.n	8008ad8 <_scanf_float+0x134>
 8008ac4:	2b60      	cmp	r3, #96	; 0x60
 8008ac6:	d8b2      	bhi.n	8008a2e <_scanf_float+0x8a>
 8008ac8:	2b54      	cmp	r3, #84	; 0x54
 8008aca:	d077      	beq.n	8008bbc <_scanf_float+0x218>
 8008acc:	2b59      	cmp	r3, #89	; 0x59
 8008ace:	d199      	bne.n	8008a04 <_scanf_float+0x60>
 8008ad0:	2d07      	cmp	r5, #7
 8008ad2:	d197      	bne.n	8008a04 <_scanf_float+0x60>
 8008ad4:	2508      	movs	r5, #8
 8008ad6:	e029      	b.n	8008b2c <_scanf_float+0x188>
 8008ad8:	2b74      	cmp	r3, #116	; 0x74
 8008ada:	d06f      	beq.n	8008bbc <_scanf_float+0x218>
 8008adc:	2b79      	cmp	r3, #121	; 0x79
 8008ade:	e7f6      	b.n	8008ace <_scanf_float+0x12a>
 8008ae0:	6821      	ldr	r1, [r4, #0]
 8008ae2:	05c8      	lsls	r0, r1, #23
 8008ae4:	d51a      	bpl.n	8008b1c <_scanf_float+0x178>
 8008ae6:	9b02      	ldr	r3, [sp, #8]
 8008ae8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008aec:	6021      	str	r1, [r4, #0]
 8008aee:	f109 0901 	add.w	r9, r9, #1
 8008af2:	b11b      	cbz	r3, 8008afc <_scanf_float+0x158>
 8008af4:	3b01      	subs	r3, #1
 8008af6:	3201      	adds	r2, #1
 8008af8:	9302      	str	r3, [sp, #8]
 8008afa:	60a2      	str	r2, [r4, #8]
 8008afc:	68a3      	ldr	r3, [r4, #8]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	60a3      	str	r3, [r4, #8]
 8008b02:	6923      	ldr	r3, [r4, #16]
 8008b04:	3301      	adds	r3, #1
 8008b06:	6123      	str	r3, [r4, #16]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	607b      	str	r3, [r7, #4]
 8008b10:	f340 8084 	ble.w	8008c1c <_scanf_float+0x278>
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	3301      	adds	r3, #1
 8008b18:	603b      	str	r3, [r7, #0]
 8008b1a:	e766      	b.n	80089ea <_scanf_float+0x46>
 8008b1c:	eb1a 0f05 	cmn.w	sl, r5
 8008b20:	f47f af70 	bne.w	8008a04 <_scanf_float+0x60>
 8008b24:	6822      	ldr	r2, [r4, #0]
 8008b26:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008b2a:	6022      	str	r2, [r4, #0]
 8008b2c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b30:	e7e4      	b.n	8008afc <_scanf_float+0x158>
 8008b32:	6822      	ldr	r2, [r4, #0]
 8008b34:	0610      	lsls	r0, r2, #24
 8008b36:	f57f af65 	bpl.w	8008a04 <_scanf_float+0x60>
 8008b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b3e:	e7f4      	b.n	8008b2a <_scanf_float+0x186>
 8008b40:	f1ba 0f00 	cmp.w	sl, #0
 8008b44:	d10e      	bne.n	8008b64 <_scanf_float+0x1c0>
 8008b46:	f1b9 0f00 	cmp.w	r9, #0
 8008b4a:	d10e      	bne.n	8008b6a <_scanf_float+0x1c6>
 8008b4c:	6822      	ldr	r2, [r4, #0]
 8008b4e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b52:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b56:	d108      	bne.n	8008b6a <_scanf_float+0x1c6>
 8008b58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b5c:	6022      	str	r2, [r4, #0]
 8008b5e:	f04f 0a01 	mov.w	sl, #1
 8008b62:	e7e3      	b.n	8008b2c <_scanf_float+0x188>
 8008b64:	f1ba 0f02 	cmp.w	sl, #2
 8008b68:	d055      	beq.n	8008c16 <_scanf_float+0x272>
 8008b6a:	2d01      	cmp	r5, #1
 8008b6c:	d002      	beq.n	8008b74 <_scanf_float+0x1d0>
 8008b6e:	2d04      	cmp	r5, #4
 8008b70:	f47f af48 	bne.w	8008a04 <_scanf_float+0x60>
 8008b74:	3501      	adds	r5, #1
 8008b76:	b2ed      	uxtb	r5, r5
 8008b78:	e7d8      	b.n	8008b2c <_scanf_float+0x188>
 8008b7a:	f1ba 0f01 	cmp.w	sl, #1
 8008b7e:	f47f af41 	bne.w	8008a04 <_scanf_float+0x60>
 8008b82:	f04f 0a02 	mov.w	sl, #2
 8008b86:	e7d1      	b.n	8008b2c <_scanf_float+0x188>
 8008b88:	b97d      	cbnz	r5, 8008baa <_scanf_float+0x206>
 8008b8a:	f1b9 0f00 	cmp.w	r9, #0
 8008b8e:	f47f af3c 	bne.w	8008a0a <_scanf_float+0x66>
 8008b92:	6822      	ldr	r2, [r4, #0]
 8008b94:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b98:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b9c:	f47f af39 	bne.w	8008a12 <_scanf_float+0x6e>
 8008ba0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ba4:	6022      	str	r2, [r4, #0]
 8008ba6:	2501      	movs	r5, #1
 8008ba8:	e7c0      	b.n	8008b2c <_scanf_float+0x188>
 8008baa:	2d03      	cmp	r5, #3
 8008bac:	d0e2      	beq.n	8008b74 <_scanf_float+0x1d0>
 8008bae:	2d05      	cmp	r5, #5
 8008bb0:	e7de      	b.n	8008b70 <_scanf_float+0x1cc>
 8008bb2:	2d02      	cmp	r5, #2
 8008bb4:	f47f af26 	bne.w	8008a04 <_scanf_float+0x60>
 8008bb8:	2503      	movs	r5, #3
 8008bba:	e7b7      	b.n	8008b2c <_scanf_float+0x188>
 8008bbc:	2d06      	cmp	r5, #6
 8008bbe:	f47f af21 	bne.w	8008a04 <_scanf_float+0x60>
 8008bc2:	2507      	movs	r5, #7
 8008bc4:	e7b2      	b.n	8008b2c <_scanf_float+0x188>
 8008bc6:	6822      	ldr	r2, [r4, #0]
 8008bc8:	0591      	lsls	r1, r2, #22
 8008bca:	f57f af1b 	bpl.w	8008a04 <_scanf_float+0x60>
 8008bce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008bd2:	6022      	str	r2, [r4, #0]
 8008bd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bd8:	e7a8      	b.n	8008b2c <_scanf_float+0x188>
 8008bda:	6822      	ldr	r2, [r4, #0]
 8008bdc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008be0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008be4:	d006      	beq.n	8008bf4 <_scanf_float+0x250>
 8008be6:	0550      	lsls	r0, r2, #21
 8008be8:	f57f af0c 	bpl.w	8008a04 <_scanf_float+0x60>
 8008bec:	f1b9 0f00 	cmp.w	r9, #0
 8008bf0:	f43f af0f 	beq.w	8008a12 <_scanf_float+0x6e>
 8008bf4:	0591      	lsls	r1, r2, #22
 8008bf6:	bf58      	it	pl
 8008bf8:	9901      	ldrpl	r1, [sp, #4]
 8008bfa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008bfe:	bf58      	it	pl
 8008c00:	eba9 0101 	subpl.w	r1, r9, r1
 8008c04:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008c08:	bf58      	it	pl
 8008c0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c0e:	6022      	str	r2, [r4, #0]
 8008c10:	f04f 0900 	mov.w	r9, #0
 8008c14:	e78a      	b.n	8008b2c <_scanf_float+0x188>
 8008c16:	f04f 0a03 	mov.w	sl, #3
 8008c1a:	e787      	b.n	8008b2c <_scanf_float+0x188>
 8008c1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c20:	4639      	mov	r1, r7
 8008c22:	4640      	mov	r0, r8
 8008c24:	4798      	blx	r3
 8008c26:	2800      	cmp	r0, #0
 8008c28:	f43f aedf 	beq.w	80089ea <_scanf_float+0x46>
 8008c2c:	e6ea      	b.n	8008a04 <_scanf_float+0x60>
 8008c2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c36:	463a      	mov	r2, r7
 8008c38:	4640      	mov	r0, r8
 8008c3a:	4798      	blx	r3
 8008c3c:	6923      	ldr	r3, [r4, #16]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	6123      	str	r3, [r4, #16]
 8008c42:	e6ec      	b.n	8008a1e <_scanf_float+0x7a>
 8008c44:	1e6b      	subs	r3, r5, #1
 8008c46:	2b06      	cmp	r3, #6
 8008c48:	d825      	bhi.n	8008c96 <_scanf_float+0x2f2>
 8008c4a:	2d02      	cmp	r5, #2
 8008c4c:	d836      	bhi.n	8008cbc <_scanf_float+0x318>
 8008c4e:	455e      	cmp	r6, fp
 8008c50:	f67f aee8 	bls.w	8008a24 <_scanf_float+0x80>
 8008c54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c5c:	463a      	mov	r2, r7
 8008c5e:	4640      	mov	r0, r8
 8008c60:	4798      	blx	r3
 8008c62:	6923      	ldr	r3, [r4, #16]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	6123      	str	r3, [r4, #16]
 8008c68:	e7f1      	b.n	8008c4e <_scanf_float+0x2aa>
 8008c6a:	9802      	ldr	r0, [sp, #8]
 8008c6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c70:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c74:	9002      	str	r0, [sp, #8]
 8008c76:	463a      	mov	r2, r7
 8008c78:	4640      	mov	r0, r8
 8008c7a:	4798      	blx	r3
 8008c7c:	6923      	ldr	r3, [r4, #16]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	6123      	str	r3, [r4, #16]
 8008c82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c86:	fa5f fa8a 	uxtb.w	sl, sl
 8008c8a:	f1ba 0f02 	cmp.w	sl, #2
 8008c8e:	d1ec      	bne.n	8008c6a <_scanf_float+0x2c6>
 8008c90:	3d03      	subs	r5, #3
 8008c92:	b2ed      	uxtb	r5, r5
 8008c94:	1b76      	subs	r6, r6, r5
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	05da      	lsls	r2, r3, #23
 8008c9a:	d52f      	bpl.n	8008cfc <_scanf_float+0x358>
 8008c9c:	055b      	lsls	r3, r3, #21
 8008c9e:	d510      	bpl.n	8008cc2 <_scanf_float+0x31e>
 8008ca0:	455e      	cmp	r6, fp
 8008ca2:	f67f aebf 	bls.w	8008a24 <_scanf_float+0x80>
 8008ca6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008caa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cae:	463a      	mov	r2, r7
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	4798      	blx	r3
 8008cb4:	6923      	ldr	r3, [r4, #16]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	6123      	str	r3, [r4, #16]
 8008cba:	e7f1      	b.n	8008ca0 <_scanf_float+0x2fc>
 8008cbc:	46aa      	mov	sl, r5
 8008cbe:	9602      	str	r6, [sp, #8]
 8008cc0:	e7df      	b.n	8008c82 <_scanf_float+0x2de>
 8008cc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008cc6:	6923      	ldr	r3, [r4, #16]
 8008cc8:	2965      	cmp	r1, #101	; 0x65
 8008cca:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cce:	f106 35ff 	add.w	r5, r6, #4294967295
 8008cd2:	6123      	str	r3, [r4, #16]
 8008cd4:	d00c      	beq.n	8008cf0 <_scanf_float+0x34c>
 8008cd6:	2945      	cmp	r1, #69	; 0x45
 8008cd8:	d00a      	beq.n	8008cf0 <_scanf_float+0x34c>
 8008cda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cde:	463a      	mov	r2, r7
 8008ce0:	4640      	mov	r0, r8
 8008ce2:	4798      	blx	r3
 8008ce4:	6923      	ldr	r3, [r4, #16]
 8008ce6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	1eb5      	subs	r5, r6, #2
 8008cee:	6123      	str	r3, [r4, #16]
 8008cf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cf4:	463a      	mov	r2, r7
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	4798      	blx	r3
 8008cfa:	462e      	mov	r6, r5
 8008cfc:	6825      	ldr	r5, [r4, #0]
 8008cfe:	f015 0510 	ands.w	r5, r5, #16
 8008d02:	d159      	bne.n	8008db8 <_scanf_float+0x414>
 8008d04:	7035      	strb	r5, [r6, #0]
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d10:	d11b      	bne.n	8008d4a <_scanf_float+0x3a6>
 8008d12:	9b01      	ldr	r3, [sp, #4]
 8008d14:	454b      	cmp	r3, r9
 8008d16:	eba3 0209 	sub.w	r2, r3, r9
 8008d1a:	d123      	bne.n	8008d64 <_scanf_float+0x3c0>
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4659      	mov	r1, fp
 8008d20:	4640      	mov	r0, r8
 8008d22:	f001 f88b 	bl	8009e3c <_strtod_r>
 8008d26:	6822      	ldr	r2, [r4, #0]
 8008d28:	9b03      	ldr	r3, [sp, #12]
 8008d2a:	f012 0f02 	tst.w	r2, #2
 8008d2e:	ec57 6b10 	vmov	r6, r7, d0
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	d021      	beq.n	8008d7a <_scanf_float+0x3d6>
 8008d36:	9903      	ldr	r1, [sp, #12]
 8008d38:	1d1a      	adds	r2, r3, #4
 8008d3a:	600a      	str	r2, [r1, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	e9c3 6700 	strd	r6, r7, [r3]
 8008d42:	68e3      	ldr	r3, [r4, #12]
 8008d44:	3301      	adds	r3, #1
 8008d46:	60e3      	str	r3, [r4, #12]
 8008d48:	e66d      	b.n	8008a26 <_scanf_float+0x82>
 8008d4a:	9b04      	ldr	r3, [sp, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d0e5      	beq.n	8008d1c <_scanf_float+0x378>
 8008d50:	9905      	ldr	r1, [sp, #20]
 8008d52:	230a      	movs	r3, #10
 8008d54:	462a      	mov	r2, r5
 8008d56:	3101      	adds	r1, #1
 8008d58:	4640      	mov	r0, r8
 8008d5a:	f001 f8f7 	bl	8009f4c <_strtol_r>
 8008d5e:	9b04      	ldr	r3, [sp, #16]
 8008d60:	9e05      	ldr	r6, [sp, #20]
 8008d62:	1ac2      	subs	r2, r0, r3
 8008d64:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d68:	429e      	cmp	r6, r3
 8008d6a:	bf28      	it	cs
 8008d6c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008d70:	4912      	ldr	r1, [pc, #72]	; (8008dbc <_scanf_float+0x418>)
 8008d72:	4630      	mov	r0, r6
 8008d74:	f000 f998 	bl	80090a8 <siprintf>
 8008d78:	e7d0      	b.n	8008d1c <_scanf_float+0x378>
 8008d7a:	9903      	ldr	r1, [sp, #12]
 8008d7c:	f012 0f04 	tst.w	r2, #4
 8008d80:	f103 0204 	add.w	r2, r3, #4
 8008d84:	600a      	str	r2, [r1, #0]
 8008d86:	d1d9      	bne.n	8008d3c <_scanf_float+0x398>
 8008d88:	f8d3 8000 	ldr.w	r8, [r3]
 8008d8c:	ee10 2a10 	vmov	r2, s0
 8008d90:	ee10 0a10 	vmov	r0, s0
 8008d94:	463b      	mov	r3, r7
 8008d96:	4639      	mov	r1, r7
 8008d98:	f7f7 fee8 	bl	8000b6c <__aeabi_dcmpun>
 8008d9c:	b128      	cbz	r0, 8008daa <_scanf_float+0x406>
 8008d9e:	4808      	ldr	r0, [pc, #32]	; (8008dc0 <_scanf_float+0x41c>)
 8008da0:	f000 f97c 	bl	800909c <nanf>
 8008da4:	ed88 0a00 	vstr	s0, [r8]
 8008da8:	e7cb      	b.n	8008d42 <_scanf_float+0x39e>
 8008daa:	4630      	mov	r0, r6
 8008dac:	4639      	mov	r1, r7
 8008dae:	f7f7 ff3b 	bl	8000c28 <__aeabi_d2f>
 8008db2:	f8c8 0000 	str.w	r0, [r8]
 8008db6:	e7c4      	b.n	8008d42 <_scanf_float+0x39e>
 8008db8:	2500      	movs	r5, #0
 8008dba:	e634      	b.n	8008a26 <_scanf_float+0x82>
 8008dbc:	0800df8e 	.word	0x0800df8e
 8008dc0:	0800e41b 	.word	0x0800e41b

08008dc4 <iprintf>:
 8008dc4:	b40f      	push	{r0, r1, r2, r3}
 8008dc6:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <iprintf+0x2c>)
 8008dc8:	b513      	push	{r0, r1, r4, lr}
 8008dca:	681c      	ldr	r4, [r3, #0]
 8008dcc:	b124      	cbz	r4, 8008dd8 <iprintf+0x14>
 8008dce:	69a3      	ldr	r3, [r4, #24]
 8008dd0:	b913      	cbnz	r3, 8008dd8 <iprintf+0x14>
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f002 f946 	bl	800b064 <__sinit>
 8008dd8:	ab05      	add	r3, sp, #20
 8008dda:	9a04      	ldr	r2, [sp, #16]
 8008ddc:	68a1      	ldr	r1, [r4, #8]
 8008dde:	9301      	str	r3, [sp, #4]
 8008de0:	4620      	mov	r0, r4
 8008de2:	f003 ff21 	bl	800cc28 <_vfiprintf_r>
 8008de6:	b002      	add	sp, #8
 8008de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dec:	b004      	add	sp, #16
 8008dee:	4770      	bx	lr
 8008df0:	2000000c 	.word	0x2000000c

08008df4 <_puts_r>:
 8008df4:	b570      	push	{r4, r5, r6, lr}
 8008df6:	460e      	mov	r6, r1
 8008df8:	4605      	mov	r5, r0
 8008dfa:	b118      	cbz	r0, 8008e04 <_puts_r+0x10>
 8008dfc:	6983      	ldr	r3, [r0, #24]
 8008dfe:	b90b      	cbnz	r3, 8008e04 <_puts_r+0x10>
 8008e00:	f002 f930 	bl	800b064 <__sinit>
 8008e04:	69ab      	ldr	r3, [r5, #24]
 8008e06:	68ac      	ldr	r4, [r5, #8]
 8008e08:	b913      	cbnz	r3, 8008e10 <_puts_r+0x1c>
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f002 f92a 	bl	800b064 <__sinit>
 8008e10:	4b2c      	ldr	r3, [pc, #176]	; (8008ec4 <_puts_r+0xd0>)
 8008e12:	429c      	cmp	r4, r3
 8008e14:	d120      	bne.n	8008e58 <_puts_r+0x64>
 8008e16:	686c      	ldr	r4, [r5, #4]
 8008e18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e1a:	07db      	lsls	r3, r3, #31
 8008e1c:	d405      	bmi.n	8008e2a <_puts_r+0x36>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	0598      	lsls	r0, r3, #22
 8008e22:	d402      	bmi.n	8008e2a <_puts_r+0x36>
 8008e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e26:	f002 fd4c 	bl	800b8c2 <__retarget_lock_acquire_recursive>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	0719      	lsls	r1, r3, #28
 8008e2e:	d51d      	bpl.n	8008e6c <_puts_r+0x78>
 8008e30:	6923      	ldr	r3, [r4, #16]
 8008e32:	b1db      	cbz	r3, 8008e6c <_puts_r+0x78>
 8008e34:	3e01      	subs	r6, #1
 8008e36:	68a3      	ldr	r3, [r4, #8]
 8008e38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	60a3      	str	r3, [r4, #8]
 8008e40:	bb39      	cbnz	r1, 8008e92 <_puts_r+0x9e>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	da38      	bge.n	8008eb8 <_puts_r+0xc4>
 8008e46:	4622      	mov	r2, r4
 8008e48:	210a      	movs	r1, #10
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f001 f880 	bl	8009f50 <__swbuf_r>
 8008e50:	3001      	adds	r0, #1
 8008e52:	d011      	beq.n	8008e78 <_puts_r+0x84>
 8008e54:	250a      	movs	r5, #10
 8008e56:	e011      	b.n	8008e7c <_puts_r+0x88>
 8008e58:	4b1b      	ldr	r3, [pc, #108]	; (8008ec8 <_puts_r+0xd4>)
 8008e5a:	429c      	cmp	r4, r3
 8008e5c:	d101      	bne.n	8008e62 <_puts_r+0x6e>
 8008e5e:	68ac      	ldr	r4, [r5, #8]
 8008e60:	e7da      	b.n	8008e18 <_puts_r+0x24>
 8008e62:	4b1a      	ldr	r3, [pc, #104]	; (8008ecc <_puts_r+0xd8>)
 8008e64:	429c      	cmp	r4, r3
 8008e66:	bf08      	it	eq
 8008e68:	68ec      	ldreq	r4, [r5, #12]
 8008e6a:	e7d5      	b.n	8008e18 <_puts_r+0x24>
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f001 f8d2 	bl	800a018 <__swsetup_r>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d0dd      	beq.n	8008e34 <_puts_r+0x40>
 8008e78:	f04f 35ff 	mov.w	r5, #4294967295
 8008e7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e7e:	07da      	lsls	r2, r3, #31
 8008e80:	d405      	bmi.n	8008e8e <_puts_r+0x9a>
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	059b      	lsls	r3, r3, #22
 8008e86:	d402      	bmi.n	8008e8e <_puts_r+0x9a>
 8008e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e8a:	f002 fd1b 	bl	800b8c4 <__retarget_lock_release_recursive>
 8008e8e:	4628      	mov	r0, r5
 8008e90:	bd70      	pop	{r4, r5, r6, pc}
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	da04      	bge.n	8008ea0 <_puts_r+0xac>
 8008e96:	69a2      	ldr	r2, [r4, #24]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	dc06      	bgt.n	8008eaa <_puts_r+0xb6>
 8008e9c:	290a      	cmp	r1, #10
 8008e9e:	d004      	beq.n	8008eaa <_puts_r+0xb6>
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	1c5a      	adds	r2, r3, #1
 8008ea4:	6022      	str	r2, [r4, #0]
 8008ea6:	7019      	strb	r1, [r3, #0]
 8008ea8:	e7c5      	b.n	8008e36 <_puts_r+0x42>
 8008eaa:	4622      	mov	r2, r4
 8008eac:	4628      	mov	r0, r5
 8008eae:	f001 f84f 	bl	8009f50 <__swbuf_r>
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	d1bf      	bne.n	8008e36 <_puts_r+0x42>
 8008eb6:	e7df      	b.n	8008e78 <_puts_r+0x84>
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	250a      	movs	r5, #10
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	6022      	str	r2, [r4, #0]
 8008ec0:	701d      	strb	r5, [r3, #0]
 8008ec2:	e7db      	b.n	8008e7c <_puts_r+0x88>
 8008ec4:	0800e19c 	.word	0x0800e19c
 8008ec8:	0800e1bc 	.word	0x0800e1bc
 8008ecc:	0800e17c 	.word	0x0800e17c

08008ed0 <puts>:
 8008ed0:	4b02      	ldr	r3, [pc, #8]	; (8008edc <puts+0xc>)
 8008ed2:	4601      	mov	r1, r0
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	f7ff bf8d 	b.w	8008df4 <_puts_r>
 8008eda:	bf00      	nop
 8008edc:	2000000c 	.word	0x2000000c

08008ee0 <iscanf>:
 8008ee0:	b40f      	push	{r0, r1, r2, r3}
 8008ee2:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <iscanf+0x2c>)
 8008ee4:	b513      	push	{r0, r1, r4, lr}
 8008ee6:	681c      	ldr	r4, [r3, #0]
 8008ee8:	b124      	cbz	r4, 8008ef4 <iscanf+0x14>
 8008eea:	69a3      	ldr	r3, [r4, #24]
 8008eec:	b913      	cbnz	r3, 8008ef4 <iscanf+0x14>
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f002 f8b8 	bl	800b064 <__sinit>
 8008ef4:	ab05      	add	r3, sp, #20
 8008ef6:	9a04      	ldr	r2, [sp, #16]
 8008ef8:	6861      	ldr	r1, [r4, #4]
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	4620      	mov	r0, r4
 8008efe:	f004 f969 	bl	800d1d4 <_vfiscanf_r>
 8008f02:	b002      	add	sp, #8
 8008f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f08:	b004      	add	sp, #16
 8008f0a:	4770      	bx	lr
 8008f0c:	2000000c 	.word	0x2000000c

08008f10 <setvbuf>:
 8008f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f14:	461d      	mov	r5, r3
 8008f16:	4b5d      	ldr	r3, [pc, #372]	; (800908c <setvbuf+0x17c>)
 8008f18:	681f      	ldr	r7, [r3, #0]
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	460e      	mov	r6, r1
 8008f1e:	4690      	mov	r8, r2
 8008f20:	b127      	cbz	r7, 8008f2c <setvbuf+0x1c>
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	b913      	cbnz	r3, 8008f2c <setvbuf+0x1c>
 8008f26:	4638      	mov	r0, r7
 8008f28:	f002 f89c 	bl	800b064 <__sinit>
 8008f2c:	4b58      	ldr	r3, [pc, #352]	; (8009090 <setvbuf+0x180>)
 8008f2e:	429c      	cmp	r4, r3
 8008f30:	d167      	bne.n	8009002 <setvbuf+0xf2>
 8008f32:	687c      	ldr	r4, [r7, #4]
 8008f34:	f1b8 0f02 	cmp.w	r8, #2
 8008f38:	d006      	beq.n	8008f48 <setvbuf+0x38>
 8008f3a:	f1b8 0f01 	cmp.w	r8, #1
 8008f3e:	f200 809f 	bhi.w	8009080 <setvbuf+0x170>
 8008f42:	2d00      	cmp	r5, #0
 8008f44:	f2c0 809c 	blt.w	8009080 <setvbuf+0x170>
 8008f48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f4a:	07db      	lsls	r3, r3, #31
 8008f4c:	d405      	bmi.n	8008f5a <setvbuf+0x4a>
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	0598      	lsls	r0, r3, #22
 8008f52:	d402      	bmi.n	8008f5a <setvbuf+0x4a>
 8008f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f56:	f002 fcb4 	bl	800b8c2 <__retarget_lock_acquire_recursive>
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	f001 ffdb 	bl	800af18 <_fflush_r>
 8008f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f64:	b141      	cbz	r1, 8008f78 <setvbuf+0x68>
 8008f66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f6a:	4299      	cmp	r1, r3
 8008f6c:	d002      	beq.n	8008f74 <setvbuf+0x64>
 8008f6e:	4638      	mov	r0, r7
 8008f70:	f003 fa22 	bl	800c3b8 <_free_r>
 8008f74:	2300      	movs	r3, #0
 8008f76:	6363      	str	r3, [r4, #52]	; 0x34
 8008f78:	2300      	movs	r3, #0
 8008f7a:	61a3      	str	r3, [r4, #24]
 8008f7c:	6063      	str	r3, [r4, #4]
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	0619      	lsls	r1, r3, #24
 8008f82:	d503      	bpl.n	8008f8c <setvbuf+0x7c>
 8008f84:	6921      	ldr	r1, [r4, #16]
 8008f86:	4638      	mov	r0, r7
 8008f88:	f003 fa16 	bl	800c3b8 <_free_r>
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008f92:	f023 0303 	bic.w	r3, r3, #3
 8008f96:	f1b8 0f02 	cmp.w	r8, #2
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	d06c      	beq.n	8009078 <setvbuf+0x168>
 8008f9e:	ab01      	add	r3, sp, #4
 8008fa0:	466a      	mov	r2, sp
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	4638      	mov	r0, r7
 8008fa6:	f002 fca1 	bl	800b8ec <__swhatbuf_r>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	4318      	orrs	r0, r3
 8008fae:	81a0      	strh	r0, [r4, #12]
 8008fb0:	2d00      	cmp	r5, #0
 8008fb2:	d130      	bne.n	8009016 <setvbuf+0x106>
 8008fb4:	9d00      	ldr	r5, [sp, #0]
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f002 fcfe 	bl	800b9b8 <malloc>
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d155      	bne.n	800906e <setvbuf+0x15e>
 8008fc2:	f8dd 9000 	ldr.w	r9, [sp]
 8008fc6:	45a9      	cmp	r9, r5
 8008fc8:	d14a      	bne.n	8009060 <setvbuf+0x150>
 8008fca:	f04f 35ff 	mov.w	r5, #4294967295
 8008fce:	2200      	movs	r2, #0
 8008fd0:	60a2      	str	r2, [r4, #8]
 8008fd2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008fd6:	6022      	str	r2, [r4, #0]
 8008fd8:	6122      	str	r2, [r4, #16]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fe0:	6162      	str	r2, [r4, #20]
 8008fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fe4:	f043 0302 	orr.w	r3, r3, #2
 8008fe8:	07d2      	lsls	r2, r2, #31
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	d405      	bmi.n	8008ffa <setvbuf+0xea>
 8008fee:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008ff2:	d102      	bne.n	8008ffa <setvbuf+0xea>
 8008ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ff6:	f002 fc65 	bl	800b8c4 <__retarget_lock_release_recursive>
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	b003      	add	sp, #12
 8008ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009002:	4b24      	ldr	r3, [pc, #144]	; (8009094 <setvbuf+0x184>)
 8009004:	429c      	cmp	r4, r3
 8009006:	d101      	bne.n	800900c <setvbuf+0xfc>
 8009008:	68bc      	ldr	r4, [r7, #8]
 800900a:	e793      	b.n	8008f34 <setvbuf+0x24>
 800900c:	4b22      	ldr	r3, [pc, #136]	; (8009098 <setvbuf+0x188>)
 800900e:	429c      	cmp	r4, r3
 8009010:	bf08      	it	eq
 8009012:	68fc      	ldreq	r4, [r7, #12]
 8009014:	e78e      	b.n	8008f34 <setvbuf+0x24>
 8009016:	2e00      	cmp	r6, #0
 8009018:	d0cd      	beq.n	8008fb6 <setvbuf+0xa6>
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	b913      	cbnz	r3, 8009024 <setvbuf+0x114>
 800901e:	4638      	mov	r0, r7
 8009020:	f002 f820 	bl	800b064 <__sinit>
 8009024:	f1b8 0f01 	cmp.w	r8, #1
 8009028:	bf08      	it	eq
 800902a:	89a3      	ldrheq	r3, [r4, #12]
 800902c:	6026      	str	r6, [r4, #0]
 800902e:	bf04      	itt	eq
 8009030:	f043 0301 	orreq.w	r3, r3, #1
 8009034:	81a3      	strheq	r3, [r4, #12]
 8009036:	89a2      	ldrh	r2, [r4, #12]
 8009038:	f012 0308 	ands.w	r3, r2, #8
 800903c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009040:	d01c      	beq.n	800907c <setvbuf+0x16c>
 8009042:	07d3      	lsls	r3, r2, #31
 8009044:	bf41      	itttt	mi
 8009046:	2300      	movmi	r3, #0
 8009048:	426d      	negmi	r5, r5
 800904a:	60a3      	strmi	r3, [r4, #8]
 800904c:	61a5      	strmi	r5, [r4, #24]
 800904e:	bf58      	it	pl
 8009050:	60a5      	strpl	r5, [r4, #8]
 8009052:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009054:	f015 0501 	ands.w	r5, r5, #1
 8009058:	d115      	bne.n	8009086 <setvbuf+0x176>
 800905a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800905e:	e7c8      	b.n	8008ff2 <setvbuf+0xe2>
 8009060:	4648      	mov	r0, r9
 8009062:	f002 fca9 	bl	800b9b8 <malloc>
 8009066:	4606      	mov	r6, r0
 8009068:	2800      	cmp	r0, #0
 800906a:	d0ae      	beq.n	8008fca <setvbuf+0xba>
 800906c:	464d      	mov	r5, r9
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	e7d0      	b.n	800901a <setvbuf+0x10a>
 8009078:	2500      	movs	r5, #0
 800907a:	e7a8      	b.n	8008fce <setvbuf+0xbe>
 800907c:	60a3      	str	r3, [r4, #8]
 800907e:	e7e8      	b.n	8009052 <setvbuf+0x142>
 8009080:	f04f 35ff 	mov.w	r5, #4294967295
 8009084:	e7b9      	b.n	8008ffa <setvbuf+0xea>
 8009086:	2500      	movs	r5, #0
 8009088:	e7b7      	b.n	8008ffa <setvbuf+0xea>
 800908a:	bf00      	nop
 800908c:	2000000c 	.word	0x2000000c
 8009090:	0800e19c 	.word	0x0800e19c
 8009094:	0800e1bc 	.word	0x0800e1bc
 8009098:	0800e17c 	.word	0x0800e17c

0800909c <nanf>:
 800909c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80090a4 <nanf+0x8>
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	7fc00000 	.word	0x7fc00000

080090a8 <siprintf>:
 80090a8:	b40e      	push	{r1, r2, r3}
 80090aa:	b500      	push	{lr}
 80090ac:	b09c      	sub	sp, #112	; 0x70
 80090ae:	ab1d      	add	r3, sp, #116	; 0x74
 80090b0:	9002      	str	r0, [sp, #8]
 80090b2:	9006      	str	r0, [sp, #24]
 80090b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090b8:	4809      	ldr	r0, [pc, #36]	; (80090e0 <siprintf+0x38>)
 80090ba:	9107      	str	r1, [sp, #28]
 80090bc:	9104      	str	r1, [sp, #16]
 80090be:	4909      	ldr	r1, [pc, #36]	; (80090e4 <siprintf+0x3c>)
 80090c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c4:	9105      	str	r1, [sp, #20]
 80090c6:	6800      	ldr	r0, [r0, #0]
 80090c8:	9301      	str	r3, [sp, #4]
 80090ca:	a902      	add	r1, sp, #8
 80090cc:	f003 fab0 	bl	800c630 <_svfiprintf_r>
 80090d0:	9b02      	ldr	r3, [sp, #8]
 80090d2:	2200      	movs	r2, #0
 80090d4:	701a      	strb	r2, [r3, #0]
 80090d6:	b01c      	add	sp, #112	; 0x70
 80090d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090dc:	b003      	add	sp, #12
 80090de:	4770      	bx	lr
 80090e0:	2000000c 	.word	0x2000000c
 80090e4:	ffff0208 	.word	0xffff0208

080090e8 <siscanf>:
 80090e8:	b40e      	push	{r1, r2, r3}
 80090ea:	b510      	push	{r4, lr}
 80090ec:	b09f      	sub	sp, #124	; 0x7c
 80090ee:	ac21      	add	r4, sp, #132	; 0x84
 80090f0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80090f4:	f854 2b04 	ldr.w	r2, [r4], #4
 80090f8:	9201      	str	r2, [sp, #4]
 80090fa:	f8ad 101c 	strh.w	r1, [sp, #28]
 80090fe:	9004      	str	r0, [sp, #16]
 8009100:	9008      	str	r0, [sp, #32]
 8009102:	f7f7 f885 	bl	8000210 <strlen>
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <siscanf+0x50>)
 8009108:	9005      	str	r0, [sp, #20]
 800910a:	9009      	str	r0, [sp, #36]	; 0x24
 800910c:	930d      	str	r3, [sp, #52]	; 0x34
 800910e:	480b      	ldr	r0, [pc, #44]	; (800913c <siscanf+0x54>)
 8009110:	9a01      	ldr	r2, [sp, #4]
 8009112:	6800      	ldr	r0, [r0, #0]
 8009114:	9403      	str	r4, [sp, #12]
 8009116:	2300      	movs	r3, #0
 8009118:	9311      	str	r3, [sp, #68]	; 0x44
 800911a:	9316      	str	r3, [sp, #88]	; 0x58
 800911c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009120:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009124:	a904      	add	r1, sp, #16
 8009126:	4623      	mov	r3, r4
 8009128:	f003 fbdc 	bl	800c8e4 <__ssvfiscanf_r>
 800912c:	b01f      	add	sp, #124	; 0x7c
 800912e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009132:	b003      	add	sp, #12
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	08009163 	.word	0x08009163
 800913c:	2000000c 	.word	0x2000000c

08009140 <__sread>:
 8009140:	b510      	push	{r4, lr}
 8009142:	460c      	mov	r4, r1
 8009144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009148:	f004 f9be 	bl	800d4c8 <_read_r>
 800914c:	2800      	cmp	r0, #0
 800914e:	bfab      	itete	ge
 8009150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009152:	89a3      	ldrhlt	r3, [r4, #12]
 8009154:	181b      	addge	r3, r3, r0
 8009156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800915a:	bfac      	ite	ge
 800915c:	6563      	strge	r3, [r4, #84]	; 0x54
 800915e:	81a3      	strhlt	r3, [r4, #12]
 8009160:	bd10      	pop	{r4, pc}

08009162 <__seofread>:
 8009162:	2000      	movs	r0, #0
 8009164:	4770      	bx	lr

08009166 <__swrite>:
 8009166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916a:	461f      	mov	r7, r3
 800916c:	898b      	ldrh	r3, [r1, #12]
 800916e:	05db      	lsls	r3, r3, #23
 8009170:	4605      	mov	r5, r0
 8009172:	460c      	mov	r4, r1
 8009174:	4616      	mov	r6, r2
 8009176:	d505      	bpl.n	8009184 <__swrite+0x1e>
 8009178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800917c:	2302      	movs	r3, #2
 800917e:	2200      	movs	r2, #0
 8009180:	f002 fba2 	bl	800b8c8 <_lseek_r>
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800918a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	4632      	mov	r2, r6
 8009192:	463b      	mov	r3, r7
 8009194:	4628      	mov	r0, r5
 8009196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919a:	f000 bf2b 	b.w	8009ff4 <_write_r>

0800919e <__sseek>:
 800919e:	b510      	push	{r4, lr}
 80091a0:	460c      	mov	r4, r1
 80091a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a6:	f002 fb8f 	bl	800b8c8 <_lseek_r>
 80091aa:	1c43      	adds	r3, r0, #1
 80091ac:	89a3      	ldrh	r3, [r4, #12]
 80091ae:	bf15      	itete	ne
 80091b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80091b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091ba:	81a3      	strheq	r3, [r4, #12]
 80091bc:	bf18      	it	ne
 80091be:	81a3      	strhne	r3, [r4, #12]
 80091c0:	bd10      	pop	{r4, pc}

080091c2 <__sclose>:
 80091c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c6:	f000 bf95 	b.w	800a0f4 <_close_r>

080091ca <strstr>:
 80091ca:	780a      	ldrb	r2, [r1, #0]
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	b96a      	cbnz	r2, 80091ec <strstr+0x22>
 80091d0:	bd70      	pop	{r4, r5, r6, pc}
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d109      	bne.n	80091ea <strstr+0x20>
 80091d6:	460c      	mov	r4, r1
 80091d8:	4605      	mov	r5, r0
 80091da:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0f6      	beq.n	80091d0 <strstr+0x6>
 80091e2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80091e6:	429e      	cmp	r6, r3
 80091e8:	d0f7      	beq.n	80091da <strstr+0x10>
 80091ea:	3001      	adds	r0, #1
 80091ec:	7803      	ldrb	r3, [r0, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1ef      	bne.n	80091d2 <strstr+0x8>
 80091f2:	4618      	mov	r0, r3
 80091f4:	e7ec      	b.n	80091d0 <strstr+0x6>

080091f6 <sulp>:
 80091f6:	b570      	push	{r4, r5, r6, lr}
 80091f8:	4604      	mov	r4, r0
 80091fa:	460d      	mov	r5, r1
 80091fc:	ec45 4b10 	vmov	d0, r4, r5
 8009200:	4616      	mov	r6, r2
 8009202:	f002 ff73 	bl	800c0ec <__ulp>
 8009206:	ec51 0b10 	vmov	r0, r1, d0
 800920a:	b17e      	cbz	r6, 800922c <sulp+0x36>
 800920c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009210:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009214:	2b00      	cmp	r3, #0
 8009216:	dd09      	ble.n	800922c <sulp+0x36>
 8009218:	051b      	lsls	r3, r3, #20
 800921a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800921e:	2400      	movs	r4, #0
 8009220:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009224:	4622      	mov	r2, r4
 8009226:	462b      	mov	r3, r5
 8009228:	f7f7 fa06 	bl	8000638 <__aeabi_dmul>
 800922c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009230 <_strtod_l>:
 8009230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	ed2d 8b02 	vpush	{d8}
 8009238:	b09d      	sub	sp, #116	; 0x74
 800923a:	461f      	mov	r7, r3
 800923c:	2300      	movs	r3, #0
 800923e:	9318      	str	r3, [sp, #96]	; 0x60
 8009240:	4ba2      	ldr	r3, [pc, #648]	; (80094cc <_strtod_l+0x29c>)
 8009242:	9213      	str	r2, [sp, #76]	; 0x4c
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	9305      	str	r3, [sp, #20]
 8009248:	4604      	mov	r4, r0
 800924a:	4618      	mov	r0, r3
 800924c:	4688      	mov	r8, r1
 800924e:	f7f6 ffdf 	bl	8000210 <strlen>
 8009252:	f04f 0a00 	mov.w	sl, #0
 8009256:	4605      	mov	r5, r0
 8009258:	f04f 0b00 	mov.w	fp, #0
 800925c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009262:	781a      	ldrb	r2, [r3, #0]
 8009264:	2a2b      	cmp	r2, #43	; 0x2b
 8009266:	d04e      	beq.n	8009306 <_strtod_l+0xd6>
 8009268:	d83b      	bhi.n	80092e2 <_strtod_l+0xb2>
 800926a:	2a0d      	cmp	r2, #13
 800926c:	d834      	bhi.n	80092d8 <_strtod_l+0xa8>
 800926e:	2a08      	cmp	r2, #8
 8009270:	d834      	bhi.n	80092dc <_strtod_l+0xac>
 8009272:	2a00      	cmp	r2, #0
 8009274:	d03e      	beq.n	80092f4 <_strtod_l+0xc4>
 8009276:	2300      	movs	r3, #0
 8009278:	930a      	str	r3, [sp, #40]	; 0x28
 800927a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800927c:	7833      	ldrb	r3, [r6, #0]
 800927e:	2b30      	cmp	r3, #48	; 0x30
 8009280:	f040 80b0 	bne.w	80093e4 <_strtod_l+0x1b4>
 8009284:	7873      	ldrb	r3, [r6, #1]
 8009286:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800928a:	2b58      	cmp	r3, #88	; 0x58
 800928c:	d168      	bne.n	8009360 <_strtod_l+0x130>
 800928e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009290:	9301      	str	r3, [sp, #4]
 8009292:	ab18      	add	r3, sp, #96	; 0x60
 8009294:	9702      	str	r7, [sp, #8]
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	4a8d      	ldr	r2, [pc, #564]	; (80094d0 <_strtod_l+0x2a0>)
 800929a:	ab19      	add	r3, sp, #100	; 0x64
 800929c:	a917      	add	r1, sp, #92	; 0x5c
 800929e:	4620      	mov	r0, r4
 80092a0:	f002 f802 	bl	800b2a8 <__gethex>
 80092a4:	f010 0707 	ands.w	r7, r0, #7
 80092a8:	4605      	mov	r5, r0
 80092aa:	d005      	beq.n	80092b8 <_strtod_l+0x88>
 80092ac:	2f06      	cmp	r7, #6
 80092ae:	d12c      	bne.n	800930a <_strtod_l+0xda>
 80092b0:	3601      	adds	r6, #1
 80092b2:	2300      	movs	r3, #0
 80092b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80092b6:	930a      	str	r3, [sp, #40]	; 0x28
 80092b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f040 8590 	bne.w	8009de0 <_strtod_l+0xbb0>
 80092c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c2:	b1eb      	cbz	r3, 8009300 <_strtod_l+0xd0>
 80092c4:	4652      	mov	r2, sl
 80092c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80092ca:	ec43 2b10 	vmov	d0, r2, r3
 80092ce:	b01d      	add	sp, #116	; 0x74
 80092d0:	ecbd 8b02 	vpop	{d8}
 80092d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d8:	2a20      	cmp	r2, #32
 80092da:	d1cc      	bne.n	8009276 <_strtod_l+0x46>
 80092dc:	3301      	adds	r3, #1
 80092de:	9317      	str	r3, [sp, #92]	; 0x5c
 80092e0:	e7be      	b.n	8009260 <_strtod_l+0x30>
 80092e2:	2a2d      	cmp	r2, #45	; 0x2d
 80092e4:	d1c7      	bne.n	8009276 <_strtod_l+0x46>
 80092e6:	2201      	movs	r2, #1
 80092e8:	920a      	str	r2, [sp, #40]	; 0x28
 80092ea:	1c5a      	adds	r2, r3, #1
 80092ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80092ee:	785b      	ldrb	r3, [r3, #1]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1c2      	bne.n	800927a <_strtod_l+0x4a>
 80092f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f040 856e 	bne.w	8009ddc <_strtod_l+0xbac>
 8009300:	4652      	mov	r2, sl
 8009302:	465b      	mov	r3, fp
 8009304:	e7e1      	b.n	80092ca <_strtod_l+0x9a>
 8009306:	2200      	movs	r2, #0
 8009308:	e7ee      	b.n	80092e8 <_strtod_l+0xb8>
 800930a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800930c:	b13a      	cbz	r2, 800931e <_strtod_l+0xee>
 800930e:	2135      	movs	r1, #53	; 0x35
 8009310:	a81a      	add	r0, sp, #104	; 0x68
 8009312:	f002 fff6 	bl	800c302 <__copybits>
 8009316:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009318:	4620      	mov	r0, r4
 800931a:	f002 fbb5 	bl	800ba88 <_Bfree>
 800931e:	3f01      	subs	r7, #1
 8009320:	2f04      	cmp	r7, #4
 8009322:	d806      	bhi.n	8009332 <_strtod_l+0x102>
 8009324:	e8df f007 	tbb	[pc, r7]
 8009328:	1714030a 	.word	0x1714030a
 800932c:	0a          	.byte	0x0a
 800932d:	00          	.byte	0x00
 800932e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009332:	0728      	lsls	r0, r5, #28
 8009334:	d5c0      	bpl.n	80092b8 <_strtod_l+0x88>
 8009336:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800933a:	e7bd      	b.n	80092b8 <_strtod_l+0x88>
 800933c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009340:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009342:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009346:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800934a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800934e:	e7f0      	b.n	8009332 <_strtod_l+0x102>
 8009350:	f8df b180 	ldr.w	fp, [pc, #384]	; 80094d4 <_strtod_l+0x2a4>
 8009354:	e7ed      	b.n	8009332 <_strtod_l+0x102>
 8009356:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800935a:	f04f 3aff 	mov.w	sl, #4294967295
 800935e:	e7e8      	b.n	8009332 <_strtod_l+0x102>
 8009360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	9217      	str	r2, [sp, #92]	; 0x5c
 8009366:	785b      	ldrb	r3, [r3, #1]
 8009368:	2b30      	cmp	r3, #48	; 0x30
 800936a:	d0f9      	beq.n	8009360 <_strtod_l+0x130>
 800936c:	2b00      	cmp	r3, #0
 800936e:	d0a3      	beq.n	80092b8 <_strtod_l+0x88>
 8009370:	2301      	movs	r3, #1
 8009372:	f04f 0900 	mov.w	r9, #0
 8009376:	9304      	str	r3, [sp, #16]
 8009378:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800937a:	9308      	str	r3, [sp, #32]
 800937c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009380:	464f      	mov	r7, r9
 8009382:	220a      	movs	r2, #10
 8009384:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009386:	7806      	ldrb	r6, [r0, #0]
 8009388:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800938c:	b2d9      	uxtb	r1, r3
 800938e:	2909      	cmp	r1, #9
 8009390:	d92a      	bls.n	80093e8 <_strtod_l+0x1b8>
 8009392:	9905      	ldr	r1, [sp, #20]
 8009394:	462a      	mov	r2, r5
 8009396:	f004 f98f 	bl	800d6b8 <strncmp>
 800939a:	b398      	cbz	r0, 8009404 <_strtod_l+0x1d4>
 800939c:	2000      	movs	r0, #0
 800939e:	4632      	mov	r2, r6
 80093a0:	463d      	mov	r5, r7
 80093a2:	9005      	str	r0, [sp, #20]
 80093a4:	4603      	mov	r3, r0
 80093a6:	2a65      	cmp	r2, #101	; 0x65
 80093a8:	d001      	beq.n	80093ae <_strtod_l+0x17e>
 80093aa:	2a45      	cmp	r2, #69	; 0x45
 80093ac:	d118      	bne.n	80093e0 <_strtod_l+0x1b0>
 80093ae:	b91d      	cbnz	r5, 80093b8 <_strtod_l+0x188>
 80093b0:	9a04      	ldr	r2, [sp, #16]
 80093b2:	4302      	orrs	r2, r0
 80093b4:	d09e      	beq.n	80092f4 <_strtod_l+0xc4>
 80093b6:	2500      	movs	r5, #0
 80093b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80093bc:	f108 0201 	add.w	r2, r8, #1
 80093c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80093c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80093c6:	2a2b      	cmp	r2, #43	; 0x2b
 80093c8:	d075      	beq.n	80094b6 <_strtod_l+0x286>
 80093ca:	2a2d      	cmp	r2, #45	; 0x2d
 80093cc:	d07b      	beq.n	80094c6 <_strtod_l+0x296>
 80093ce:	f04f 0c00 	mov.w	ip, #0
 80093d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80093d6:	2909      	cmp	r1, #9
 80093d8:	f240 8082 	bls.w	80094e0 <_strtod_l+0x2b0>
 80093dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80093e0:	2600      	movs	r6, #0
 80093e2:	e09d      	b.n	8009520 <_strtod_l+0x2f0>
 80093e4:	2300      	movs	r3, #0
 80093e6:	e7c4      	b.n	8009372 <_strtod_l+0x142>
 80093e8:	2f08      	cmp	r7, #8
 80093ea:	bfd8      	it	le
 80093ec:	9907      	ldrle	r1, [sp, #28]
 80093ee:	f100 0001 	add.w	r0, r0, #1
 80093f2:	bfda      	itte	le
 80093f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80093f8:	9307      	strle	r3, [sp, #28]
 80093fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80093fe:	3701      	adds	r7, #1
 8009400:	9017      	str	r0, [sp, #92]	; 0x5c
 8009402:	e7bf      	b.n	8009384 <_strtod_l+0x154>
 8009404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009406:	195a      	adds	r2, r3, r5
 8009408:	9217      	str	r2, [sp, #92]	; 0x5c
 800940a:	5d5a      	ldrb	r2, [r3, r5]
 800940c:	2f00      	cmp	r7, #0
 800940e:	d037      	beq.n	8009480 <_strtod_l+0x250>
 8009410:	9005      	str	r0, [sp, #20]
 8009412:	463d      	mov	r5, r7
 8009414:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009418:	2b09      	cmp	r3, #9
 800941a:	d912      	bls.n	8009442 <_strtod_l+0x212>
 800941c:	2301      	movs	r3, #1
 800941e:	e7c2      	b.n	80093a6 <_strtod_l+0x176>
 8009420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	9217      	str	r2, [sp, #92]	; 0x5c
 8009426:	785a      	ldrb	r2, [r3, #1]
 8009428:	3001      	adds	r0, #1
 800942a:	2a30      	cmp	r2, #48	; 0x30
 800942c:	d0f8      	beq.n	8009420 <_strtod_l+0x1f0>
 800942e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009432:	2b08      	cmp	r3, #8
 8009434:	f200 84d9 	bhi.w	8009dea <_strtod_l+0xbba>
 8009438:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800943a:	9005      	str	r0, [sp, #20]
 800943c:	2000      	movs	r0, #0
 800943e:	9308      	str	r3, [sp, #32]
 8009440:	4605      	mov	r5, r0
 8009442:	3a30      	subs	r2, #48	; 0x30
 8009444:	f100 0301 	add.w	r3, r0, #1
 8009448:	d014      	beq.n	8009474 <_strtod_l+0x244>
 800944a:	9905      	ldr	r1, [sp, #20]
 800944c:	4419      	add	r1, r3
 800944e:	9105      	str	r1, [sp, #20]
 8009450:	462b      	mov	r3, r5
 8009452:	eb00 0e05 	add.w	lr, r0, r5
 8009456:	210a      	movs	r1, #10
 8009458:	4573      	cmp	r3, lr
 800945a:	d113      	bne.n	8009484 <_strtod_l+0x254>
 800945c:	182b      	adds	r3, r5, r0
 800945e:	2b08      	cmp	r3, #8
 8009460:	f105 0501 	add.w	r5, r5, #1
 8009464:	4405      	add	r5, r0
 8009466:	dc1c      	bgt.n	80094a2 <_strtod_l+0x272>
 8009468:	9907      	ldr	r1, [sp, #28]
 800946a:	230a      	movs	r3, #10
 800946c:	fb03 2301 	mla	r3, r3, r1, r2
 8009470:	9307      	str	r3, [sp, #28]
 8009472:	2300      	movs	r3, #0
 8009474:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009476:	1c51      	adds	r1, r2, #1
 8009478:	9117      	str	r1, [sp, #92]	; 0x5c
 800947a:	7852      	ldrb	r2, [r2, #1]
 800947c:	4618      	mov	r0, r3
 800947e:	e7c9      	b.n	8009414 <_strtod_l+0x1e4>
 8009480:	4638      	mov	r0, r7
 8009482:	e7d2      	b.n	800942a <_strtod_l+0x1fa>
 8009484:	2b08      	cmp	r3, #8
 8009486:	dc04      	bgt.n	8009492 <_strtod_l+0x262>
 8009488:	9e07      	ldr	r6, [sp, #28]
 800948a:	434e      	muls	r6, r1
 800948c:	9607      	str	r6, [sp, #28]
 800948e:	3301      	adds	r3, #1
 8009490:	e7e2      	b.n	8009458 <_strtod_l+0x228>
 8009492:	f103 0c01 	add.w	ip, r3, #1
 8009496:	f1bc 0f10 	cmp.w	ip, #16
 800949a:	bfd8      	it	le
 800949c:	fb01 f909 	mulle.w	r9, r1, r9
 80094a0:	e7f5      	b.n	800948e <_strtod_l+0x25e>
 80094a2:	2d10      	cmp	r5, #16
 80094a4:	bfdc      	itt	le
 80094a6:	230a      	movle	r3, #10
 80094a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80094ac:	e7e1      	b.n	8009472 <_strtod_l+0x242>
 80094ae:	2300      	movs	r3, #0
 80094b0:	9305      	str	r3, [sp, #20]
 80094b2:	2301      	movs	r3, #1
 80094b4:	e77c      	b.n	80093b0 <_strtod_l+0x180>
 80094b6:	f04f 0c00 	mov.w	ip, #0
 80094ba:	f108 0202 	add.w	r2, r8, #2
 80094be:	9217      	str	r2, [sp, #92]	; 0x5c
 80094c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80094c4:	e785      	b.n	80093d2 <_strtod_l+0x1a2>
 80094c6:	f04f 0c01 	mov.w	ip, #1
 80094ca:	e7f6      	b.n	80094ba <_strtod_l+0x28a>
 80094cc:	0800e244 	.word	0x0800e244
 80094d0:	0800df94 	.word	0x0800df94
 80094d4:	7ff00000 	.word	0x7ff00000
 80094d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094da:	1c51      	adds	r1, r2, #1
 80094dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80094de:	7852      	ldrb	r2, [r2, #1]
 80094e0:	2a30      	cmp	r2, #48	; 0x30
 80094e2:	d0f9      	beq.n	80094d8 <_strtod_l+0x2a8>
 80094e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80094e8:	2908      	cmp	r1, #8
 80094ea:	f63f af79 	bhi.w	80093e0 <_strtod_l+0x1b0>
 80094ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80094f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094f4:	9206      	str	r2, [sp, #24]
 80094f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094f8:	1c51      	adds	r1, r2, #1
 80094fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80094fc:	7852      	ldrb	r2, [r2, #1]
 80094fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009502:	2e09      	cmp	r6, #9
 8009504:	d937      	bls.n	8009576 <_strtod_l+0x346>
 8009506:	9e06      	ldr	r6, [sp, #24]
 8009508:	1b89      	subs	r1, r1, r6
 800950a:	2908      	cmp	r1, #8
 800950c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009510:	dc02      	bgt.n	8009518 <_strtod_l+0x2e8>
 8009512:	4576      	cmp	r6, lr
 8009514:	bfa8      	it	ge
 8009516:	4676      	movge	r6, lr
 8009518:	f1bc 0f00 	cmp.w	ip, #0
 800951c:	d000      	beq.n	8009520 <_strtod_l+0x2f0>
 800951e:	4276      	negs	r6, r6
 8009520:	2d00      	cmp	r5, #0
 8009522:	d14d      	bne.n	80095c0 <_strtod_l+0x390>
 8009524:	9904      	ldr	r1, [sp, #16]
 8009526:	4301      	orrs	r1, r0
 8009528:	f47f aec6 	bne.w	80092b8 <_strtod_l+0x88>
 800952c:	2b00      	cmp	r3, #0
 800952e:	f47f aee1 	bne.w	80092f4 <_strtod_l+0xc4>
 8009532:	2a69      	cmp	r2, #105	; 0x69
 8009534:	d027      	beq.n	8009586 <_strtod_l+0x356>
 8009536:	dc24      	bgt.n	8009582 <_strtod_l+0x352>
 8009538:	2a49      	cmp	r2, #73	; 0x49
 800953a:	d024      	beq.n	8009586 <_strtod_l+0x356>
 800953c:	2a4e      	cmp	r2, #78	; 0x4e
 800953e:	f47f aed9 	bne.w	80092f4 <_strtod_l+0xc4>
 8009542:	499f      	ldr	r1, [pc, #636]	; (80097c0 <_strtod_l+0x590>)
 8009544:	a817      	add	r0, sp, #92	; 0x5c
 8009546:	f002 f907 	bl	800b758 <__match>
 800954a:	2800      	cmp	r0, #0
 800954c:	f43f aed2 	beq.w	80092f4 <_strtod_l+0xc4>
 8009550:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	2b28      	cmp	r3, #40	; 0x28
 8009556:	d12d      	bne.n	80095b4 <_strtod_l+0x384>
 8009558:	499a      	ldr	r1, [pc, #616]	; (80097c4 <_strtod_l+0x594>)
 800955a:	aa1a      	add	r2, sp, #104	; 0x68
 800955c:	a817      	add	r0, sp, #92	; 0x5c
 800955e:	f002 f90f 	bl	800b780 <__hexnan>
 8009562:	2805      	cmp	r0, #5
 8009564:	d126      	bne.n	80095b4 <_strtod_l+0x384>
 8009566:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009568:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800956c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009570:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009574:	e6a0      	b.n	80092b8 <_strtod_l+0x88>
 8009576:	210a      	movs	r1, #10
 8009578:	fb01 2e0e 	mla	lr, r1, lr, r2
 800957c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009580:	e7b9      	b.n	80094f6 <_strtod_l+0x2c6>
 8009582:	2a6e      	cmp	r2, #110	; 0x6e
 8009584:	e7db      	b.n	800953e <_strtod_l+0x30e>
 8009586:	4990      	ldr	r1, [pc, #576]	; (80097c8 <_strtod_l+0x598>)
 8009588:	a817      	add	r0, sp, #92	; 0x5c
 800958a:	f002 f8e5 	bl	800b758 <__match>
 800958e:	2800      	cmp	r0, #0
 8009590:	f43f aeb0 	beq.w	80092f4 <_strtod_l+0xc4>
 8009594:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009596:	498d      	ldr	r1, [pc, #564]	; (80097cc <_strtod_l+0x59c>)
 8009598:	3b01      	subs	r3, #1
 800959a:	a817      	add	r0, sp, #92	; 0x5c
 800959c:	9317      	str	r3, [sp, #92]	; 0x5c
 800959e:	f002 f8db 	bl	800b758 <__match>
 80095a2:	b910      	cbnz	r0, 80095aa <_strtod_l+0x37a>
 80095a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095a6:	3301      	adds	r3, #1
 80095a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80095aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 80097dc <_strtod_l+0x5ac>
 80095ae:	f04f 0a00 	mov.w	sl, #0
 80095b2:	e681      	b.n	80092b8 <_strtod_l+0x88>
 80095b4:	4886      	ldr	r0, [pc, #536]	; (80097d0 <_strtod_l+0x5a0>)
 80095b6:	f004 f82f 	bl	800d618 <nan>
 80095ba:	ec5b ab10 	vmov	sl, fp, d0
 80095be:	e67b      	b.n	80092b8 <_strtod_l+0x88>
 80095c0:	9b05      	ldr	r3, [sp, #20]
 80095c2:	9807      	ldr	r0, [sp, #28]
 80095c4:	1af3      	subs	r3, r6, r3
 80095c6:	2f00      	cmp	r7, #0
 80095c8:	bf08      	it	eq
 80095ca:	462f      	moveq	r7, r5
 80095cc:	2d10      	cmp	r5, #16
 80095ce:	9306      	str	r3, [sp, #24]
 80095d0:	46a8      	mov	r8, r5
 80095d2:	bfa8      	it	ge
 80095d4:	f04f 0810 	movge.w	r8, #16
 80095d8:	f7f6 ffb4 	bl	8000544 <__aeabi_ui2d>
 80095dc:	2d09      	cmp	r5, #9
 80095de:	4682      	mov	sl, r0
 80095e0:	468b      	mov	fp, r1
 80095e2:	dd13      	ble.n	800960c <_strtod_l+0x3dc>
 80095e4:	4b7b      	ldr	r3, [pc, #492]	; (80097d4 <_strtod_l+0x5a4>)
 80095e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80095ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80095ee:	f7f7 f823 	bl	8000638 <__aeabi_dmul>
 80095f2:	4682      	mov	sl, r0
 80095f4:	4648      	mov	r0, r9
 80095f6:	468b      	mov	fp, r1
 80095f8:	f7f6 ffa4 	bl	8000544 <__aeabi_ui2d>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4650      	mov	r0, sl
 8009602:	4659      	mov	r1, fp
 8009604:	f7f6 fe62 	bl	80002cc <__adddf3>
 8009608:	4682      	mov	sl, r0
 800960a:	468b      	mov	fp, r1
 800960c:	2d0f      	cmp	r5, #15
 800960e:	dc38      	bgt.n	8009682 <_strtod_l+0x452>
 8009610:	9b06      	ldr	r3, [sp, #24]
 8009612:	2b00      	cmp	r3, #0
 8009614:	f43f ae50 	beq.w	80092b8 <_strtod_l+0x88>
 8009618:	dd24      	ble.n	8009664 <_strtod_l+0x434>
 800961a:	2b16      	cmp	r3, #22
 800961c:	dc0b      	bgt.n	8009636 <_strtod_l+0x406>
 800961e:	496d      	ldr	r1, [pc, #436]	; (80097d4 <_strtod_l+0x5a4>)
 8009620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009628:	4652      	mov	r2, sl
 800962a:	465b      	mov	r3, fp
 800962c:	f7f7 f804 	bl	8000638 <__aeabi_dmul>
 8009630:	4682      	mov	sl, r0
 8009632:	468b      	mov	fp, r1
 8009634:	e640      	b.n	80092b8 <_strtod_l+0x88>
 8009636:	9a06      	ldr	r2, [sp, #24]
 8009638:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800963c:	4293      	cmp	r3, r2
 800963e:	db20      	blt.n	8009682 <_strtod_l+0x452>
 8009640:	4c64      	ldr	r4, [pc, #400]	; (80097d4 <_strtod_l+0x5a4>)
 8009642:	f1c5 050f 	rsb	r5, r5, #15
 8009646:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800964a:	4652      	mov	r2, sl
 800964c:	465b      	mov	r3, fp
 800964e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009652:	f7f6 fff1 	bl	8000638 <__aeabi_dmul>
 8009656:	9b06      	ldr	r3, [sp, #24]
 8009658:	1b5d      	subs	r5, r3, r5
 800965a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800965e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009662:	e7e3      	b.n	800962c <_strtod_l+0x3fc>
 8009664:	9b06      	ldr	r3, [sp, #24]
 8009666:	3316      	adds	r3, #22
 8009668:	db0b      	blt.n	8009682 <_strtod_l+0x452>
 800966a:	9b05      	ldr	r3, [sp, #20]
 800966c:	1b9e      	subs	r6, r3, r6
 800966e:	4b59      	ldr	r3, [pc, #356]	; (80097d4 <_strtod_l+0x5a4>)
 8009670:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009674:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009678:	4650      	mov	r0, sl
 800967a:	4659      	mov	r1, fp
 800967c:	f7f7 f906 	bl	800088c <__aeabi_ddiv>
 8009680:	e7d6      	b.n	8009630 <_strtod_l+0x400>
 8009682:	9b06      	ldr	r3, [sp, #24]
 8009684:	eba5 0808 	sub.w	r8, r5, r8
 8009688:	4498      	add	r8, r3
 800968a:	f1b8 0f00 	cmp.w	r8, #0
 800968e:	dd74      	ble.n	800977a <_strtod_l+0x54a>
 8009690:	f018 030f 	ands.w	r3, r8, #15
 8009694:	d00a      	beq.n	80096ac <_strtod_l+0x47c>
 8009696:	494f      	ldr	r1, [pc, #316]	; (80097d4 <_strtod_l+0x5a4>)
 8009698:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800969c:	4652      	mov	r2, sl
 800969e:	465b      	mov	r3, fp
 80096a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096a4:	f7f6 ffc8 	bl	8000638 <__aeabi_dmul>
 80096a8:	4682      	mov	sl, r0
 80096aa:	468b      	mov	fp, r1
 80096ac:	f038 080f 	bics.w	r8, r8, #15
 80096b0:	d04f      	beq.n	8009752 <_strtod_l+0x522>
 80096b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80096b6:	dd22      	ble.n	80096fe <_strtod_l+0x4ce>
 80096b8:	2500      	movs	r5, #0
 80096ba:	462e      	mov	r6, r5
 80096bc:	9507      	str	r5, [sp, #28]
 80096be:	9505      	str	r5, [sp, #20]
 80096c0:	2322      	movs	r3, #34	; 0x22
 80096c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80097dc <_strtod_l+0x5ac>
 80096c6:	6023      	str	r3, [r4, #0]
 80096c8:	f04f 0a00 	mov.w	sl, #0
 80096cc:	9b07      	ldr	r3, [sp, #28]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f43f adf2 	beq.w	80092b8 <_strtod_l+0x88>
 80096d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096d6:	4620      	mov	r0, r4
 80096d8:	f002 f9d6 	bl	800ba88 <_Bfree>
 80096dc:	9905      	ldr	r1, [sp, #20]
 80096de:	4620      	mov	r0, r4
 80096e0:	f002 f9d2 	bl	800ba88 <_Bfree>
 80096e4:	4631      	mov	r1, r6
 80096e6:	4620      	mov	r0, r4
 80096e8:	f002 f9ce 	bl	800ba88 <_Bfree>
 80096ec:	9907      	ldr	r1, [sp, #28]
 80096ee:	4620      	mov	r0, r4
 80096f0:	f002 f9ca 	bl	800ba88 <_Bfree>
 80096f4:	4629      	mov	r1, r5
 80096f6:	4620      	mov	r0, r4
 80096f8:	f002 f9c6 	bl	800ba88 <_Bfree>
 80096fc:	e5dc      	b.n	80092b8 <_strtod_l+0x88>
 80096fe:	4b36      	ldr	r3, [pc, #216]	; (80097d8 <_strtod_l+0x5a8>)
 8009700:	9304      	str	r3, [sp, #16]
 8009702:	2300      	movs	r3, #0
 8009704:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009708:	4650      	mov	r0, sl
 800970a:	4659      	mov	r1, fp
 800970c:	4699      	mov	r9, r3
 800970e:	f1b8 0f01 	cmp.w	r8, #1
 8009712:	dc21      	bgt.n	8009758 <_strtod_l+0x528>
 8009714:	b10b      	cbz	r3, 800971a <_strtod_l+0x4ea>
 8009716:	4682      	mov	sl, r0
 8009718:	468b      	mov	fp, r1
 800971a:	4b2f      	ldr	r3, [pc, #188]	; (80097d8 <_strtod_l+0x5a8>)
 800971c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009720:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009724:	4652      	mov	r2, sl
 8009726:	465b      	mov	r3, fp
 8009728:	e9d9 0100 	ldrd	r0, r1, [r9]
 800972c:	f7f6 ff84 	bl	8000638 <__aeabi_dmul>
 8009730:	4b2a      	ldr	r3, [pc, #168]	; (80097dc <_strtod_l+0x5ac>)
 8009732:	460a      	mov	r2, r1
 8009734:	400b      	ands	r3, r1
 8009736:	492a      	ldr	r1, [pc, #168]	; (80097e0 <_strtod_l+0x5b0>)
 8009738:	428b      	cmp	r3, r1
 800973a:	4682      	mov	sl, r0
 800973c:	d8bc      	bhi.n	80096b8 <_strtod_l+0x488>
 800973e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009742:	428b      	cmp	r3, r1
 8009744:	bf86      	itte	hi
 8009746:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80097e4 <_strtod_l+0x5b4>
 800974a:	f04f 3aff 	movhi.w	sl, #4294967295
 800974e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009752:	2300      	movs	r3, #0
 8009754:	9304      	str	r3, [sp, #16]
 8009756:	e084      	b.n	8009862 <_strtod_l+0x632>
 8009758:	f018 0f01 	tst.w	r8, #1
 800975c:	d005      	beq.n	800976a <_strtod_l+0x53a>
 800975e:	9b04      	ldr	r3, [sp, #16]
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	f7f6 ff68 	bl	8000638 <__aeabi_dmul>
 8009768:	2301      	movs	r3, #1
 800976a:	9a04      	ldr	r2, [sp, #16]
 800976c:	3208      	adds	r2, #8
 800976e:	f109 0901 	add.w	r9, r9, #1
 8009772:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009776:	9204      	str	r2, [sp, #16]
 8009778:	e7c9      	b.n	800970e <_strtod_l+0x4de>
 800977a:	d0ea      	beq.n	8009752 <_strtod_l+0x522>
 800977c:	f1c8 0800 	rsb	r8, r8, #0
 8009780:	f018 020f 	ands.w	r2, r8, #15
 8009784:	d00a      	beq.n	800979c <_strtod_l+0x56c>
 8009786:	4b13      	ldr	r3, [pc, #76]	; (80097d4 <_strtod_l+0x5a4>)
 8009788:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800978c:	4650      	mov	r0, sl
 800978e:	4659      	mov	r1, fp
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	f7f7 f87a 	bl	800088c <__aeabi_ddiv>
 8009798:	4682      	mov	sl, r0
 800979a:	468b      	mov	fp, r1
 800979c:	ea5f 1828 	movs.w	r8, r8, asr #4
 80097a0:	d0d7      	beq.n	8009752 <_strtod_l+0x522>
 80097a2:	f1b8 0f1f 	cmp.w	r8, #31
 80097a6:	dd1f      	ble.n	80097e8 <_strtod_l+0x5b8>
 80097a8:	2500      	movs	r5, #0
 80097aa:	462e      	mov	r6, r5
 80097ac:	9507      	str	r5, [sp, #28]
 80097ae:	9505      	str	r5, [sp, #20]
 80097b0:	2322      	movs	r3, #34	; 0x22
 80097b2:	f04f 0a00 	mov.w	sl, #0
 80097b6:	f04f 0b00 	mov.w	fp, #0
 80097ba:	6023      	str	r3, [r4, #0]
 80097bc:	e786      	b.n	80096cc <_strtod_l+0x49c>
 80097be:	bf00      	nop
 80097c0:	0800df69 	.word	0x0800df69
 80097c4:	0800dfa8 	.word	0x0800dfa8
 80097c8:	0800df61 	.word	0x0800df61
 80097cc:	0800e0ec 	.word	0x0800e0ec
 80097d0:	0800e41b 	.word	0x0800e41b
 80097d4:	0800e2e0 	.word	0x0800e2e0
 80097d8:	0800e2b8 	.word	0x0800e2b8
 80097dc:	7ff00000 	.word	0x7ff00000
 80097e0:	7ca00000 	.word	0x7ca00000
 80097e4:	7fefffff 	.word	0x7fefffff
 80097e8:	f018 0310 	ands.w	r3, r8, #16
 80097ec:	bf18      	it	ne
 80097ee:	236a      	movne	r3, #106	; 0x6a
 80097f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009ba0 <_strtod_l+0x970>
 80097f4:	9304      	str	r3, [sp, #16]
 80097f6:	4650      	mov	r0, sl
 80097f8:	4659      	mov	r1, fp
 80097fa:	2300      	movs	r3, #0
 80097fc:	f018 0f01 	tst.w	r8, #1
 8009800:	d004      	beq.n	800980c <_strtod_l+0x5dc>
 8009802:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009806:	f7f6 ff17 	bl	8000638 <__aeabi_dmul>
 800980a:	2301      	movs	r3, #1
 800980c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009810:	f109 0908 	add.w	r9, r9, #8
 8009814:	d1f2      	bne.n	80097fc <_strtod_l+0x5cc>
 8009816:	b10b      	cbz	r3, 800981c <_strtod_l+0x5ec>
 8009818:	4682      	mov	sl, r0
 800981a:	468b      	mov	fp, r1
 800981c:	9b04      	ldr	r3, [sp, #16]
 800981e:	b1c3      	cbz	r3, 8009852 <_strtod_l+0x622>
 8009820:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009824:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009828:	2b00      	cmp	r3, #0
 800982a:	4659      	mov	r1, fp
 800982c:	dd11      	ble.n	8009852 <_strtod_l+0x622>
 800982e:	2b1f      	cmp	r3, #31
 8009830:	f340 8124 	ble.w	8009a7c <_strtod_l+0x84c>
 8009834:	2b34      	cmp	r3, #52	; 0x34
 8009836:	bfde      	ittt	le
 8009838:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800983c:	f04f 33ff 	movle.w	r3, #4294967295
 8009840:	fa03 f202 	lslle.w	r2, r3, r2
 8009844:	f04f 0a00 	mov.w	sl, #0
 8009848:	bfcc      	ite	gt
 800984a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800984e:	ea02 0b01 	andle.w	fp, r2, r1
 8009852:	2200      	movs	r2, #0
 8009854:	2300      	movs	r3, #0
 8009856:	4650      	mov	r0, sl
 8009858:	4659      	mov	r1, fp
 800985a:	f7f7 f955 	bl	8000b08 <__aeabi_dcmpeq>
 800985e:	2800      	cmp	r0, #0
 8009860:	d1a2      	bne.n	80097a8 <_strtod_l+0x578>
 8009862:	9b07      	ldr	r3, [sp, #28]
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	9908      	ldr	r1, [sp, #32]
 8009868:	462b      	mov	r3, r5
 800986a:	463a      	mov	r2, r7
 800986c:	4620      	mov	r0, r4
 800986e:	f002 f973 	bl	800bb58 <__s2b>
 8009872:	9007      	str	r0, [sp, #28]
 8009874:	2800      	cmp	r0, #0
 8009876:	f43f af1f 	beq.w	80096b8 <_strtod_l+0x488>
 800987a:	9b05      	ldr	r3, [sp, #20]
 800987c:	1b9e      	subs	r6, r3, r6
 800987e:	9b06      	ldr	r3, [sp, #24]
 8009880:	2b00      	cmp	r3, #0
 8009882:	bfb4      	ite	lt
 8009884:	4633      	movlt	r3, r6
 8009886:	2300      	movge	r3, #0
 8009888:	930c      	str	r3, [sp, #48]	; 0x30
 800988a:	9b06      	ldr	r3, [sp, #24]
 800988c:	2500      	movs	r5, #0
 800988e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009892:	9312      	str	r3, [sp, #72]	; 0x48
 8009894:	462e      	mov	r6, r5
 8009896:	9b07      	ldr	r3, [sp, #28]
 8009898:	4620      	mov	r0, r4
 800989a:	6859      	ldr	r1, [r3, #4]
 800989c:	f002 f8b4 	bl	800ba08 <_Balloc>
 80098a0:	9005      	str	r0, [sp, #20]
 80098a2:	2800      	cmp	r0, #0
 80098a4:	f43f af0c 	beq.w	80096c0 <_strtod_l+0x490>
 80098a8:	9b07      	ldr	r3, [sp, #28]
 80098aa:	691a      	ldr	r2, [r3, #16]
 80098ac:	3202      	adds	r2, #2
 80098ae:	f103 010c 	add.w	r1, r3, #12
 80098b2:	0092      	lsls	r2, r2, #2
 80098b4:	300c      	adds	r0, #12
 80098b6:	f002 f899 	bl	800b9ec <memcpy>
 80098ba:	ec4b ab10 	vmov	d0, sl, fp
 80098be:	aa1a      	add	r2, sp, #104	; 0x68
 80098c0:	a919      	add	r1, sp, #100	; 0x64
 80098c2:	4620      	mov	r0, r4
 80098c4:	f002 fc8e 	bl	800c1e4 <__d2b>
 80098c8:	ec4b ab18 	vmov	d8, sl, fp
 80098cc:	9018      	str	r0, [sp, #96]	; 0x60
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f43f aef6 	beq.w	80096c0 <_strtod_l+0x490>
 80098d4:	2101      	movs	r1, #1
 80098d6:	4620      	mov	r0, r4
 80098d8:	f002 f9d8 	bl	800bc8c <__i2b>
 80098dc:	4606      	mov	r6, r0
 80098de:	2800      	cmp	r0, #0
 80098e0:	f43f aeee 	beq.w	80096c0 <_strtod_l+0x490>
 80098e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098e6:	9904      	ldr	r1, [sp, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bfab      	itete	ge
 80098ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80098ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80098f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80098f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80098f6:	bfac      	ite	ge
 80098f8:	eb03 0902 	addge.w	r9, r3, r2
 80098fc:	1ad7      	sublt	r7, r2, r3
 80098fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009900:	eba3 0801 	sub.w	r8, r3, r1
 8009904:	4490      	add	r8, r2
 8009906:	4ba1      	ldr	r3, [pc, #644]	; (8009b8c <_strtod_l+0x95c>)
 8009908:	f108 38ff 	add.w	r8, r8, #4294967295
 800990c:	4598      	cmp	r8, r3
 800990e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009912:	f280 80c7 	bge.w	8009aa4 <_strtod_l+0x874>
 8009916:	eba3 0308 	sub.w	r3, r3, r8
 800991a:	2b1f      	cmp	r3, #31
 800991c:	eba2 0203 	sub.w	r2, r2, r3
 8009920:	f04f 0101 	mov.w	r1, #1
 8009924:	f300 80b1 	bgt.w	8009a8a <_strtod_l+0x85a>
 8009928:	fa01 f303 	lsl.w	r3, r1, r3
 800992c:	930d      	str	r3, [sp, #52]	; 0x34
 800992e:	2300      	movs	r3, #0
 8009930:	9308      	str	r3, [sp, #32]
 8009932:	eb09 0802 	add.w	r8, r9, r2
 8009936:	9b04      	ldr	r3, [sp, #16]
 8009938:	45c1      	cmp	r9, r8
 800993a:	4417      	add	r7, r2
 800993c:	441f      	add	r7, r3
 800993e:	464b      	mov	r3, r9
 8009940:	bfa8      	it	ge
 8009942:	4643      	movge	r3, r8
 8009944:	42bb      	cmp	r3, r7
 8009946:	bfa8      	it	ge
 8009948:	463b      	movge	r3, r7
 800994a:	2b00      	cmp	r3, #0
 800994c:	bfc2      	ittt	gt
 800994e:	eba8 0803 	subgt.w	r8, r8, r3
 8009952:	1aff      	subgt	r7, r7, r3
 8009954:	eba9 0903 	subgt.w	r9, r9, r3
 8009958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800995a:	2b00      	cmp	r3, #0
 800995c:	dd17      	ble.n	800998e <_strtod_l+0x75e>
 800995e:	4631      	mov	r1, r6
 8009960:	461a      	mov	r2, r3
 8009962:	4620      	mov	r0, r4
 8009964:	f002 fa52 	bl	800be0c <__pow5mult>
 8009968:	4606      	mov	r6, r0
 800996a:	2800      	cmp	r0, #0
 800996c:	f43f aea8 	beq.w	80096c0 <_strtod_l+0x490>
 8009970:	4601      	mov	r1, r0
 8009972:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009974:	4620      	mov	r0, r4
 8009976:	f002 f99f 	bl	800bcb8 <__multiply>
 800997a:	900b      	str	r0, [sp, #44]	; 0x2c
 800997c:	2800      	cmp	r0, #0
 800997e:	f43f ae9f 	beq.w	80096c0 <_strtod_l+0x490>
 8009982:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009984:	4620      	mov	r0, r4
 8009986:	f002 f87f 	bl	800ba88 <_Bfree>
 800998a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800998c:	9318      	str	r3, [sp, #96]	; 0x60
 800998e:	f1b8 0f00 	cmp.w	r8, #0
 8009992:	f300 808c 	bgt.w	8009aae <_strtod_l+0x87e>
 8009996:	9b06      	ldr	r3, [sp, #24]
 8009998:	2b00      	cmp	r3, #0
 800999a:	dd08      	ble.n	80099ae <_strtod_l+0x77e>
 800999c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800999e:	9905      	ldr	r1, [sp, #20]
 80099a0:	4620      	mov	r0, r4
 80099a2:	f002 fa33 	bl	800be0c <__pow5mult>
 80099a6:	9005      	str	r0, [sp, #20]
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f43f ae89 	beq.w	80096c0 <_strtod_l+0x490>
 80099ae:	2f00      	cmp	r7, #0
 80099b0:	dd08      	ble.n	80099c4 <_strtod_l+0x794>
 80099b2:	9905      	ldr	r1, [sp, #20]
 80099b4:	463a      	mov	r2, r7
 80099b6:	4620      	mov	r0, r4
 80099b8:	f002 fa82 	bl	800bec0 <__lshift>
 80099bc:	9005      	str	r0, [sp, #20]
 80099be:	2800      	cmp	r0, #0
 80099c0:	f43f ae7e 	beq.w	80096c0 <_strtod_l+0x490>
 80099c4:	f1b9 0f00 	cmp.w	r9, #0
 80099c8:	dd08      	ble.n	80099dc <_strtod_l+0x7ac>
 80099ca:	4631      	mov	r1, r6
 80099cc:	464a      	mov	r2, r9
 80099ce:	4620      	mov	r0, r4
 80099d0:	f002 fa76 	bl	800bec0 <__lshift>
 80099d4:	4606      	mov	r6, r0
 80099d6:	2800      	cmp	r0, #0
 80099d8:	f43f ae72 	beq.w	80096c0 <_strtod_l+0x490>
 80099dc:	9a05      	ldr	r2, [sp, #20]
 80099de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099e0:	4620      	mov	r0, r4
 80099e2:	f002 faf9 	bl	800bfd8 <__mdiff>
 80099e6:	4605      	mov	r5, r0
 80099e8:	2800      	cmp	r0, #0
 80099ea:	f43f ae69 	beq.w	80096c0 <_strtod_l+0x490>
 80099ee:	68c3      	ldr	r3, [r0, #12]
 80099f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099f2:	2300      	movs	r3, #0
 80099f4:	60c3      	str	r3, [r0, #12]
 80099f6:	4631      	mov	r1, r6
 80099f8:	f002 fad2 	bl	800bfa0 <__mcmp>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	da60      	bge.n	8009ac2 <_strtod_l+0x892>
 8009a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a02:	ea53 030a 	orrs.w	r3, r3, sl
 8009a06:	f040 8082 	bne.w	8009b0e <_strtod_l+0x8de>
 8009a0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d17d      	bne.n	8009b0e <_strtod_l+0x8de>
 8009a12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a16:	0d1b      	lsrs	r3, r3, #20
 8009a18:	051b      	lsls	r3, r3, #20
 8009a1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a1e:	d976      	bls.n	8009b0e <_strtod_l+0x8de>
 8009a20:	696b      	ldr	r3, [r5, #20]
 8009a22:	b913      	cbnz	r3, 8009a2a <_strtod_l+0x7fa>
 8009a24:	692b      	ldr	r3, [r5, #16]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	dd71      	ble.n	8009b0e <_strtod_l+0x8de>
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f002 fa46 	bl	800bec0 <__lshift>
 8009a34:	4631      	mov	r1, r6
 8009a36:	4605      	mov	r5, r0
 8009a38:	f002 fab2 	bl	800bfa0 <__mcmp>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	dd66      	ble.n	8009b0e <_strtod_l+0x8de>
 8009a40:	9904      	ldr	r1, [sp, #16]
 8009a42:	4a53      	ldr	r2, [pc, #332]	; (8009b90 <_strtod_l+0x960>)
 8009a44:	465b      	mov	r3, fp
 8009a46:	2900      	cmp	r1, #0
 8009a48:	f000 8081 	beq.w	8009b4e <_strtod_l+0x91e>
 8009a4c:	ea02 010b 	and.w	r1, r2, fp
 8009a50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009a54:	dc7b      	bgt.n	8009b4e <_strtod_l+0x91e>
 8009a56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009a5a:	f77f aea9 	ble.w	80097b0 <_strtod_l+0x580>
 8009a5e:	4b4d      	ldr	r3, [pc, #308]	; (8009b94 <_strtod_l+0x964>)
 8009a60:	4650      	mov	r0, sl
 8009a62:	4659      	mov	r1, fp
 8009a64:	2200      	movs	r2, #0
 8009a66:	f7f6 fde7 	bl	8000638 <__aeabi_dmul>
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4303      	orrs	r3, r0
 8009a6e:	bf08      	it	eq
 8009a70:	2322      	moveq	r3, #34	; 0x22
 8009a72:	4682      	mov	sl, r0
 8009a74:	468b      	mov	fp, r1
 8009a76:	bf08      	it	eq
 8009a78:	6023      	streq	r3, [r4, #0]
 8009a7a:	e62b      	b.n	80096d4 <_strtod_l+0x4a4>
 8009a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a80:	fa02 f303 	lsl.w	r3, r2, r3
 8009a84:	ea03 0a0a 	and.w	sl, r3, sl
 8009a88:	e6e3      	b.n	8009852 <_strtod_l+0x622>
 8009a8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009a8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009a92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009a96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009a9a:	fa01 f308 	lsl.w	r3, r1, r8
 8009a9e:	9308      	str	r3, [sp, #32]
 8009aa0:	910d      	str	r1, [sp, #52]	; 0x34
 8009aa2:	e746      	b.n	8009932 <_strtod_l+0x702>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	9308      	str	r3, [sp, #32]
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	930d      	str	r3, [sp, #52]	; 0x34
 8009aac:	e741      	b.n	8009932 <_strtod_l+0x702>
 8009aae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f002 fa04 	bl	800bec0 <__lshift>
 8009ab8:	9018      	str	r0, [sp, #96]	; 0x60
 8009aba:	2800      	cmp	r0, #0
 8009abc:	f47f af6b 	bne.w	8009996 <_strtod_l+0x766>
 8009ac0:	e5fe      	b.n	80096c0 <_strtod_l+0x490>
 8009ac2:	465f      	mov	r7, fp
 8009ac4:	d16e      	bne.n	8009ba4 <_strtod_l+0x974>
 8009ac6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ac8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009acc:	b342      	cbz	r2, 8009b20 <_strtod_l+0x8f0>
 8009ace:	4a32      	ldr	r2, [pc, #200]	; (8009b98 <_strtod_l+0x968>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d128      	bne.n	8009b26 <_strtod_l+0x8f6>
 8009ad4:	9b04      	ldr	r3, [sp, #16]
 8009ad6:	4651      	mov	r1, sl
 8009ad8:	b1eb      	cbz	r3, 8009b16 <_strtod_l+0x8e6>
 8009ada:	4b2d      	ldr	r3, [pc, #180]	; (8009b90 <_strtod_l+0x960>)
 8009adc:	403b      	ands	r3, r7
 8009ade:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae6:	d819      	bhi.n	8009b1c <_strtod_l+0x8ec>
 8009ae8:	0d1b      	lsrs	r3, r3, #20
 8009aea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009aee:	fa02 f303 	lsl.w	r3, r2, r3
 8009af2:	4299      	cmp	r1, r3
 8009af4:	d117      	bne.n	8009b26 <_strtod_l+0x8f6>
 8009af6:	4b29      	ldr	r3, [pc, #164]	; (8009b9c <_strtod_l+0x96c>)
 8009af8:	429f      	cmp	r7, r3
 8009afa:	d102      	bne.n	8009b02 <_strtod_l+0x8d2>
 8009afc:	3101      	adds	r1, #1
 8009afe:	f43f addf 	beq.w	80096c0 <_strtod_l+0x490>
 8009b02:	4b23      	ldr	r3, [pc, #140]	; (8009b90 <_strtod_l+0x960>)
 8009b04:	403b      	ands	r3, r7
 8009b06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b0a:	f04f 0a00 	mov.w	sl, #0
 8009b0e:	9b04      	ldr	r3, [sp, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1a4      	bne.n	8009a5e <_strtod_l+0x82e>
 8009b14:	e5de      	b.n	80096d4 <_strtod_l+0x4a4>
 8009b16:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1a:	e7ea      	b.n	8009af2 <_strtod_l+0x8c2>
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	e7e8      	b.n	8009af2 <_strtod_l+0x8c2>
 8009b20:	ea53 030a 	orrs.w	r3, r3, sl
 8009b24:	d08c      	beq.n	8009a40 <_strtod_l+0x810>
 8009b26:	9b08      	ldr	r3, [sp, #32]
 8009b28:	b1db      	cbz	r3, 8009b62 <_strtod_l+0x932>
 8009b2a:	423b      	tst	r3, r7
 8009b2c:	d0ef      	beq.n	8009b0e <_strtod_l+0x8de>
 8009b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b30:	9a04      	ldr	r2, [sp, #16]
 8009b32:	4650      	mov	r0, sl
 8009b34:	4659      	mov	r1, fp
 8009b36:	b1c3      	cbz	r3, 8009b6a <_strtod_l+0x93a>
 8009b38:	f7ff fb5d 	bl	80091f6 <sulp>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	ec51 0b18 	vmov	r0, r1, d8
 8009b44:	f7f6 fbc2 	bl	80002cc <__adddf3>
 8009b48:	4682      	mov	sl, r0
 8009b4a:	468b      	mov	fp, r1
 8009b4c:	e7df      	b.n	8009b0e <_strtod_l+0x8de>
 8009b4e:	4013      	ands	r3, r2
 8009b50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009b58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009b5c:	f04f 3aff 	mov.w	sl, #4294967295
 8009b60:	e7d5      	b.n	8009b0e <_strtod_l+0x8de>
 8009b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b64:	ea13 0f0a 	tst.w	r3, sl
 8009b68:	e7e0      	b.n	8009b2c <_strtod_l+0x8fc>
 8009b6a:	f7ff fb44 	bl	80091f6 <sulp>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	ec51 0b18 	vmov	r0, r1, d8
 8009b76:	f7f6 fba7 	bl	80002c8 <__aeabi_dsub>
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	4682      	mov	sl, r0
 8009b80:	468b      	mov	fp, r1
 8009b82:	f7f6 ffc1 	bl	8000b08 <__aeabi_dcmpeq>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d0c1      	beq.n	8009b0e <_strtod_l+0x8de>
 8009b8a:	e611      	b.n	80097b0 <_strtod_l+0x580>
 8009b8c:	fffffc02 	.word	0xfffffc02
 8009b90:	7ff00000 	.word	0x7ff00000
 8009b94:	39500000 	.word	0x39500000
 8009b98:	000fffff 	.word	0x000fffff
 8009b9c:	7fefffff 	.word	0x7fefffff
 8009ba0:	0800dfc0 	.word	0x0800dfc0
 8009ba4:	4631      	mov	r1, r6
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f002 fb78 	bl	800c29c <__ratio>
 8009bac:	ec59 8b10 	vmov	r8, r9, d0
 8009bb0:	ee10 0a10 	vmov	r0, s0
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bba:	4649      	mov	r1, r9
 8009bbc:	f7f6 ffb8 	bl	8000b30 <__aeabi_dcmple>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d07a      	beq.n	8009cba <_strtod_l+0xa8a>
 8009bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d04a      	beq.n	8009c60 <_strtod_l+0xa30>
 8009bca:	4b95      	ldr	r3, [pc, #596]	; (8009e20 <_strtod_l+0xbf0>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009bd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009e20 <_strtod_l+0xbf0>
 8009bd6:	f04f 0800 	mov.w	r8, #0
 8009bda:	4b92      	ldr	r3, [pc, #584]	; (8009e24 <_strtod_l+0xbf4>)
 8009bdc:	403b      	ands	r3, r7
 8009bde:	930d      	str	r3, [sp, #52]	; 0x34
 8009be0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009be2:	4b91      	ldr	r3, [pc, #580]	; (8009e28 <_strtod_l+0xbf8>)
 8009be4:	429a      	cmp	r2, r3
 8009be6:	f040 80b0 	bne.w	8009d4a <_strtod_l+0xb1a>
 8009bea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009bf2:	ec4b ab10 	vmov	d0, sl, fp
 8009bf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009bfa:	f002 fa77 	bl	800c0ec <__ulp>
 8009bfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c02:	ec53 2b10 	vmov	r2, r3, d0
 8009c06:	f7f6 fd17 	bl	8000638 <__aeabi_dmul>
 8009c0a:	4652      	mov	r2, sl
 8009c0c:	465b      	mov	r3, fp
 8009c0e:	f7f6 fb5d 	bl	80002cc <__adddf3>
 8009c12:	460b      	mov	r3, r1
 8009c14:	4983      	ldr	r1, [pc, #524]	; (8009e24 <_strtod_l+0xbf4>)
 8009c16:	4a85      	ldr	r2, [pc, #532]	; (8009e2c <_strtod_l+0xbfc>)
 8009c18:	4019      	ands	r1, r3
 8009c1a:	4291      	cmp	r1, r2
 8009c1c:	4682      	mov	sl, r0
 8009c1e:	d960      	bls.n	8009ce2 <_strtod_l+0xab2>
 8009c20:	ee18 3a90 	vmov	r3, s17
 8009c24:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d104      	bne.n	8009c36 <_strtod_l+0xa06>
 8009c2c:	ee18 3a10 	vmov	r3, s16
 8009c30:	3301      	adds	r3, #1
 8009c32:	f43f ad45 	beq.w	80096c0 <_strtod_l+0x490>
 8009c36:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009e38 <_strtod_l+0xc08>
 8009c3a:	f04f 3aff 	mov.w	sl, #4294967295
 8009c3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c40:	4620      	mov	r0, r4
 8009c42:	f001 ff21 	bl	800ba88 <_Bfree>
 8009c46:	9905      	ldr	r1, [sp, #20]
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f001 ff1d 	bl	800ba88 <_Bfree>
 8009c4e:	4631      	mov	r1, r6
 8009c50:	4620      	mov	r0, r4
 8009c52:	f001 ff19 	bl	800ba88 <_Bfree>
 8009c56:	4629      	mov	r1, r5
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f001 ff15 	bl	800ba88 <_Bfree>
 8009c5e:	e61a      	b.n	8009896 <_strtod_l+0x666>
 8009c60:	f1ba 0f00 	cmp.w	sl, #0
 8009c64:	d11b      	bne.n	8009c9e <_strtod_l+0xa6e>
 8009c66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c6a:	b9f3      	cbnz	r3, 8009caa <_strtod_l+0xa7a>
 8009c6c:	4b6c      	ldr	r3, [pc, #432]	; (8009e20 <_strtod_l+0xbf0>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	4640      	mov	r0, r8
 8009c72:	4649      	mov	r1, r9
 8009c74:	f7f6 ff52 	bl	8000b1c <__aeabi_dcmplt>
 8009c78:	b9d0      	cbnz	r0, 8009cb0 <_strtod_l+0xa80>
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	4b6c      	ldr	r3, [pc, #432]	; (8009e30 <_strtod_l+0xc00>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	f7f6 fcd9 	bl	8000638 <__aeabi_dmul>
 8009c86:	4680      	mov	r8, r0
 8009c88:	4689      	mov	r9, r1
 8009c8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009c8e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009c92:	9315      	str	r3, [sp, #84]	; 0x54
 8009c94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009c98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c9c:	e79d      	b.n	8009bda <_strtod_l+0x9aa>
 8009c9e:	f1ba 0f01 	cmp.w	sl, #1
 8009ca2:	d102      	bne.n	8009caa <_strtod_l+0xa7a>
 8009ca4:	2f00      	cmp	r7, #0
 8009ca6:	f43f ad83 	beq.w	80097b0 <_strtod_l+0x580>
 8009caa:	4b62      	ldr	r3, [pc, #392]	; (8009e34 <_strtod_l+0xc04>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	e78e      	b.n	8009bce <_strtod_l+0x99e>
 8009cb0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009e30 <_strtod_l+0xc00>
 8009cb4:	f04f 0800 	mov.w	r8, #0
 8009cb8:	e7e7      	b.n	8009c8a <_strtod_l+0xa5a>
 8009cba:	4b5d      	ldr	r3, [pc, #372]	; (8009e30 <_strtod_l+0xc00>)
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f7f6 fcb9 	bl	8000638 <__aeabi_dmul>
 8009cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cc8:	4680      	mov	r8, r0
 8009cca:	4689      	mov	r9, r1
 8009ccc:	b933      	cbnz	r3, 8009cdc <_strtod_l+0xaac>
 8009cce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cd2:	900e      	str	r0, [sp, #56]	; 0x38
 8009cd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009cda:	e7dd      	b.n	8009c98 <_strtod_l+0xa68>
 8009cdc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009ce0:	e7f9      	b.n	8009cd6 <_strtod_l+0xaa6>
 8009ce2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009ce6:	9b04      	ldr	r3, [sp, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1a8      	bne.n	8009c3e <_strtod_l+0xa0e>
 8009cec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009cf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cf2:	0d1b      	lsrs	r3, r3, #20
 8009cf4:	051b      	lsls	r3, r3, #20
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d1a1      	bne.n	8009c3e <_strtod_l+0xa0e>
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	f7f6 fffb 	bl	8000cf8 <__aeabi_d2lz>
 8009d02:	f7f6 fc6b 	bl	80005dc <__aeabi_l2d>
 8009d06:	4602      	mov	r2, r0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	4649      	mov	r1, r9
 8009d0e:	f7f6 fadb 	bl	80002c8 <__aeabi_dsub>
 8009d12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d18:	ea43 030a 	orr.w	r3, r3, sl
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	4680      	mov	r8, r0
 8009d20:	4689      	mov	r9, r1
 8009d22:	d055      	beq.n	8009dd0 <_strtod_l+0xba0>
 8009d24:	a336      	add	r3, pc, #216	; (adr r3, 8009e00 <_strtod_l+0xbd0>)
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f7f6 fef7 	bl	8000b1c <__aeabi_dcmplt>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f47f acd0 	bne.w	80096d4 <_strtod_l+0x4a4>
 8009d34:	a334      	add	r3, pc, #208	; (adr r3, 8009e08 <_strtod_l+0xbd8>)
 8009d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3a:	4640      	mov	r0, r8
 8009d3c:	4649      	mov	r1, r9
 8009d3e:	f7f6 ff0b 	bl	8000b58 <__aeabi_dcmpgt>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	f43f af7b 	beq.w	8009c3e <_strtod_l+0xa0e>
 8009d48:	e4c4      	b.n	80096d4 <_strtod_l+0x4a4>
 8009d4a:	9b04      	ldr	r3, [sp, #16]
 8009d4c:	b333      	cbz	r3, 8009d9c <_strtod_l+0xb6c>
 8009d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009d54:	d822      	bhi.n	8009d9c <_strtod_l+0xb6c>
 8009d56:	a32e      	add	r3, pc, #184	; (adr r3, 8009e10 <_strtod_l+0xbe0>)
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	4640      	mov	r0, r8
 8009d5e:	4649      	mov	r1, r9
 8009d60:	f7f6 fee6 	bl	8000b30 <__aeabi_dcmple>
 8009d64:	b1a0      	cbz	r0, 8009d90 <_strtod_l+0xb60>
 8009d66:	4649      	mov	r1, r9
 8009d68:	4640      	mov	r0, r8
 8009d6a:	f7f6 ff3d 	bl	8000be8 <__aeabi_d2uiz>
 8009d6e:	2801      	cmp	r0, #1
 8009d70:	bf38      	it	cc
 8009d72:	2001      	movcc	r0, #1
 8009d74:	f7f6 fbe6 	bl	8000544 <__aeabi_ui2d>
 8009d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d7a:	4680      	mov	r8, r0
 8009d7c:	4689      	mov	r9, r1
 8009d7e:	bb23      	cbnz	r3, 8009dca <_strtod_l+0xb9a>
 8009d80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d84:	9010      	str	r0, [sp, #64]	; 0x40
 8009d86:	9311      	str	r3, [sp, #68]	; 0x44
 8009d88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d94:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009d98:	1a9b      	subs	r3, r3, r2
 8009d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009da0:	eeb0 0a48 	vmov.f32	s0, s16
 8009da4:	eef0 0a68 	vmov.f32	s1, s17
 8009da8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009dac:	f002 f99e 	bl	800c0ec <__ulp>
 8009db0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009db4:	ec53 2b10 	vmov	r2, r3, d0
 8009db8:	f7f6 fc3e 	bl	8000638 <__aeabi_dmul>
 8009dbc:	ec53 2b18 	vmov	r2, r3, d8
 8009dc0:	f7f6 fa84 	bl	80002cc <__adddf3>
 8009dc4:	4682      	mov	sl, r0
 8009dc6:	468b      	mov	fp, r1
 8009dc8:	e78d      	b.n	8009ce6 <_strtod_l+0xab6>
 8009dca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009dce:	e7db      	b.n	8009d88 <_strtod_l+0xb58>
 8009dd0:	a311      	add	r3, pc, #68	; (adr r3, 8009e18 <_strtod_l+0xbe8>)
 8009dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd6:	f7f6 fea1 	bl	8000b1c <__aeabi_dcmplt>
 8009dda:	e7b2      	b.n	8009d42 <_strtod_l+0xb12>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	930a      	str	r3, [sp, #40]	; 0x28
 8009de0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009de2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	f7ff ba6b 	b.w	80092c0 <_strtod_l+0x90>
 8009dea:	2a65      	cmp	r2, #101	; 0x65
 8009dec:	f43f ab5f 	beq.w	80094ae <_strtod_l+0x27e>
 8009df0:	2a45      	cmp	r2, #69	; 0x45
 8009df2:	f43f ab5c 	beq.w	80094ae <_strtod_l+0x27e>
 8009df6:	2301      	movs	r3, #1
 8009df8:	f7ff bb94 	b.w	8009524 <_strtod_l+0x2f4>
 8009dfc:	f3af 8000 	nop.w
 8009e00:	94a03595 	.word	0x94a03595
 8009e04:	3fdfffff 	.word	0x3fdfffff
 8009e08:	35afe535 	.word	0x35afe535
 8009e0c:	3fe00000 	.word	0x3fe00000
 8009e10:	ffc00000 	.word	0xffc00000
 8009e14:	41dfffff 	.word	0x41dfffff
 8009e18:	94a03595 	.word	0x94a03595
 8009e1c:	3fcfffff 	.word	0x3fcfffff
 8009e20:	3ff00000 	.word	0x3ff00000
 8009e24:	7ff00000 	.word	0x7ff00000
 8009e28:	7fe00000 	.word	0x7fe00000
 8009e2c:	7c9fffff 	.word	0x7c9fffff
 8009e30:	3fe00000 	.word	0x3fe00000
 8009e34:	bff00000 	.word	0xbff00000
 8009e38:	7fefffff 	.word	0x7fefffff

08009e3c <_strtod_r>:
 8009e3c:	4b01      	ldr	r3, [pc, #4]	; (8009e44 <_strtod_r+0x8>)
 8009e3e:	f7ff b9f7 	b.w	8009230 <_strtod_l>
 8009e42:	bf00      	nop
 8009e44:	20000074 	.word	0x20000074

08009e48 <_strtol_l.constprop.0>:
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e4e:	d001      	beq.n	8009e54 <_strtol_l.constprop.0+0xc>
 8009e50:	2b24      	cmp	r3, #36	; 0x24
 8009e52:	d906      	bls.n	8009e62 <_strtol_l.constprop.0+0x1a>
 8009e54:	f7fe f90a 	bl	800806c <__errno>
 8009e58:	2316      	movs	r3, #22
 8009e5a:	6003      	str	r3, [r0, #0]
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009f48 <_strtol_l.constprop.0+0x100>
 8009e66:	460d      	mov	r5, r1
 8009e68:	462e      	mov	r6, r5
 8009e6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009e72:	f017 0708 	ands.w	r7, r7, #8
 8009e76:	d1f7      	bne.n	8009e68 <_strtol_l.constprop.0+0x20>
 8009e78:	2c2d      	cmp	r4, #45	; 0x2d
 8009e7a:	d132      	bne.n	8009ee2 <_strtol_l.constprop.0+0x9a>
 8009e7c:	782c      	ldrb	r4, [r5, #0]
 8009e7e:	2701      	movs	r7, #1
 8009e80:	1cb5      	adds	r5, r6, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d05b      	beq.n	8009f3e <_strtol_l.constprop.0+0xf6>
 8009e86:	2b10      	cmp	r3, #16
 8009e88:	d109      	bne.n	8009e9e <_strtol_l.constprop.0+0x56>
 8009e8a:	2c30      	cmp	r4, #48	; 0x30
 8009e8c:	d107      	bne.n	8009e9e <_strtol_l.constprop.0+0x56>
 8009e8e:	782c      	ldrb	r4, [r5, #0]
 8009e90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009e94:	2c58      	cmp	r4, #88	; 0x58
 8009e96:	d14d      	bne.n	8009f34 <_strtol_l.constprop.0+0xec>
 8009e98:	786c      	ldrb	r4, [r5, #1]
 8009e9a:	2310      	movs	r3, #16
 8009e9c:	3502      	adds	r5, #2
 8009e9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009ea2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ea6:	f04f 0c00 	mov.w	ip, #0
 8009eaa:	fbb8 f9f3 	udiv	r9, r8, r3
 8009eae:	4666      	mov	r6, ip
 8009eb0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009eb4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009eb8:	f1be 0f09 	cmp.w	lr, #9
 8009ebc:	d816      	bhi.n	8009eec <_strtol_l.constprop.0+0xa4>
 8009ebe:	4674      	mov	r4, lr
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	dd24      	ble.n	8009f0e <_strtol_l.constprop.0+0xc6>
 8009ec4:	f1bc 0f00 	cmp.w	ip, #0
 8009ec8:	db1e      	blt.n	8009f08 <_strtol_l.constprop.0+0xc0>
 8009eca:	45b1      	cmp	r9, r6
 8009ecc:	d31c      	bcc.n	8009f08 <_strtol_l.constprop.0+0xc0>
 8009ece:	d101      	bne.n	8009ed4 <_strtol_l.constprop.0+0x8c>
 8009ed0:	45a2      	cmp	sl, r4
 8009ed2:	db19      	blt.n	8009f08 <_strtol_l.constprop.0+0xc0>
 8009ed4:	fb06 4603 	mla	r6, r6, r3, r4
 8009ed8:	f04f 0c01 	mov.w	ip, #1
 8009edc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ee0:	e7e8      	b.n	8009eb4 <_strtol_l.constprop.0+0x6c>
 8009ee2:	2c2b      	cmp	r4, #43	; 0x2b
 8009ee4:	bf04      	itt	eq
 8009ee6:	782c      	ldrbeq	r4, [r5, #0]
 8009ee8:	1cb5      	addeq	r5, r6, #2
 8009eea:	e7ca      	b.n	8009e82 <_strtol_l.constprop.0+0x3a>
 8009eec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009ef0:	f1be 0f19 	cmp.w	lr, #25
 8009ef4:	d801      	bhi.n	8009efa <_strtol_l.constprop.0+0xb2>
 8009ef6:	3c37      	subs	r4, #55	; 0x37
 8009ef8:	e7e2      	b.n	8009ec0 <_strtol_l.constprop.0+0x78>
 8009efa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009efe:	f1be 0f19 	cmp.w	lr, #25
 8009f02:	d804      	bhi.n	8009f0e <_strtol_l.constprop.0+0xc6>
 8009f04:	3c57      	subs	r4, #87	; 0x57
 8009f06:	e7db      	b.n	8009ec0 <_strtol_l.constprop.0+0x78>
 8009f08:	f04f 3cff 	mov.w	ip, #4294967295
 8009f0c:	e7e6      	b.n	8009edc <_strtol_l.constprop.0+0x94>
 8009f0e:	f1bc 0f00 	cmp.w	ip, #0
 8009f12:	da05      	bge.n	8009f20 <_strtol_l.constprop.0+0xd8>
 8009f14:	2322      	movs	r3, #34	; 0x22
 8009f16:	6003      	str	r3, [r0, #0]
 8009f18:	4646      	mov	r6, r8
 8009f1a:	b942      	cbnz	r2, 8009f2e <_strtol_l.constprop.0+0xe6>
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	e79e      	b.n	8009e5e <_strtol_l.constprop.0+0x16>
 8009f20:	b107      	cbz	r7, 8009f24 <_strtol_l.constprop.0+0xdc>
 8009f22:	4276      	negs	r6, r6
 8009f24:	2a00      	cmp	r2, #0
 8009f26:	d0f9      	beq.n	8009f1c <_strtol_l.constprop.0+0xd4>
 8009f28:	f1bc 0f00 	cmp.w	ip, #0
 8009f2c:	d000      	beq.n	8009f30 <_strtol_l.constprop.0+0xe8>
 8009f2e:	1e69      	subs	r1, r5, #1
 8009f30:	6011      	str	r1, [r2, #0]
 8009f32:	e7f3      	b.n	8009f1c <_strtol_l.constprop.0+0xd4>
 8009f34:	2430      	movs	r4, #48	; 0x30
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1b1      	bne.n	8009e9e <_strtol_l.constprop.0+0x56>
 8009f3a:	2308      	movs	r3, #8
 8009f3c:	e7af      	b.n	8009e9e <_strtol_l.constprop.0+0x56>
 8009f3e:	2c30      	cmp	r4, #48	; 0x30
 8009f40:	d0a5      	beq.n	8009e8e <_strtol_l.constprop.0+0x46>
 8009f42:	230a      	movs	r3, #10
 8009f44:	e7ab      	b.n	8009e9e <_strtol_l.constprop.0+0x56>
 8009f46:	bf00      	nop
 8009f48:	0800dfe9 	.word	0x0800dfe9

08009f4c <_strtol_r>:
 8009f4c:	f7ff bf7c 	b.w	8009e48 <_strtol_l.constprop.0>

08009f50 <__swbuf_r>:
 8009f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f52:	460e      	mov	r6, r1
 8009f54:	4614      	mov	r4, r2
 8009f56:	4605      	mov	r5, r0
 8009f58:	b118      	cbz	r0, 8009f62 <__swbuf_r+0x12>
 8009f5a:	6983      	ldr	r3, [r0, #24]
 8009f5c:	b90b      	cbnz	r3, 8009f62 <__swbuf_r+0x12>
 8009f5e:	f001 f881 	bl	800b064 <__sinit>
 8009f62:	4b21      	ldr	r3, [pc, #132]	; (8009fe8 <__swbuf_r+0x98>)
 8009f64:	429c      	cmp	r4, r3
 8009f66:	d12b      	bne.n	8009fc0 <__swbuf_r+0x70>
 8009f68:	686c      	ldr	r4, [r5, #4]
 8009f6a:	69a3      	ldr	r3, [r4, #24]
 8009f6c:	60a3      	str	r3, [r4, #8]
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	071a      	lsls	r2, r3, #28
 8009f72:	d52f      	bpl.n	8009fd4 <__swbuf_r+0x84>
 8009f74:	6923      	ldr	r3, [r4, #16]
 8009f76:	b36b      	cbz	r3, 8009fd4 <__swbuf_r+0x84>
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	6820      	ldr	r0, [r4, #0]
 8009f7c:	1ac0      	subs	r0, r0, r3
 8009f7e:	6963      	ldr	r3, [r4, #20]
 8009f80:	b2f6      	uxtb	r6, r6
 8009f82:	4283      	cmp	r3, r0
 8009f84:	4637      	mov	r7, r6
 8009f86:	dc04      	bgt.n	8009f92 <__swbuf_r+0x42>
 8009f88:	4621      	mov	r1, r4
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f000 ffc4 	bl	800af18 <_fflush_r>
 8009f90:	bb30      	cbnz	r0, 8009fe0 <__swbuf_r+0x90>
 8009f92:	68a3      	ldr	r3, [r4, #8]
 8009f94:	3b01      	subs	r3, #1
 8009f96:	60a3      	str	r3, [r4, #8]
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	1c5a      	adds	r2, r3, #1
 8009f9c:	6022      	str	r2, [r4, #0]
 8009f9e:	701e      	strb	r6, [r3, #0]
 8009fa0:	6963      	ldr	r3, [r4, #20]
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	4283      	cmp	r3, r0
 8009fa6:	d004      	beq.n	8009fb2 <__swbuf_r+0x62>
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	07db      	lsls	r3, r3, #31
 8009fac:	d506      	bpl.n	8009fbc <__swbuf_r+0x6c>
 8009fae:	2e0a      	cmp	r6, #10
 8009fb0:	d104      	bne.n	8009fbc <__swbuf_r+0x6c>
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	f000 ffaf 	bl	800af18 <_fflush_r>
 8009fba:	b988      	cbnz	r0, 8009fe0 <__swbuf_r+0x90>
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fc0:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <__swbuf_r+0x9c>)
 8009fc2:	429c      	cmp	r4, r3
 8009fc4:	d101      	bne.n	8009fca <__swbuf_r+0x7a>
 8009fc6:	68ac      	ldr	r4, [r5, #8]
 8009fc8:	e7cf      	b.n	8009f6a <__swbuf_r+0x1a>
 8009fca:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <__swbuf_r+0xa0>)
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	bf08      	it	eq
 8009fd0:	68ec      	ldreq	r4, [r5, #12]
 8009fd2:	e7ca      	b.n	8009f6a <__swbuf_r+0x1a>
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f000 f81e 	bl	800a018 <__swsetup_r>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d0cb      	beq.n	8009f78 <__swbuf_r+0x28>
 8009fe0:	f04f 37ff 	mov.w	r7, #4294967295
 8009fe4:	e7ea      	b.n	8009fbc <__swbuf_r+0x6c>
 8009fe6:	bf00      	nop
 8009fe8:	0800e19c 	.word	0x0800e19c
 8009fec:	0800e1bc 	.word	0x0800e1bc
 8009ff0:	0800e17c 	.word	0x0800e17c

08009ff4 <_write_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4d07      	ldr	r5, [pc, #28]	; (800a014 <_write_r+0x20>)
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	4608      	mov	r0, r1
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	2200      	movs	r2, #0
 800a000:	602a      	str	r2, [r5, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	f7f7 fe4d 	bl	8001ca2 <_write>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d102      	bne.n	800a012 <_write_r+0x1e>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	b103      	cbz	r3, 800a012 <_write_r+0x1e>
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	20000418 	.word	0x20000418

0800a018 <__swsetup_r>:
 800a018:	4b32      	ldr	r3, [pc, #200]	; (800a0e4 <__swsetup_r+0xcc>)
 800a01a:	b570      	push	{r4, r5, r6, lr}
 800a01c:	681d      	ldr	r5, [r3, #0]
 800a01e:	4606      	mov	r6, r0
 800a020:	460c      	mov	r4, r1
 800a022:	b125      	cbz	r5, 800a02e <__swsetup_r+0x16>
 800a024:	69ab      	ldr	r3, [r5, #24]
 800a026:	b913      	cbnz	r3, 800a02e <__swsetup_r+0x16>
 800a028:	4628      	mov	r0, r5
 800a02a:	f001 f81b 	bl	800b064 <__sinit>
 800a02e:	4b2e      	ldr	r3, [pc, #184]	; (800a0e8 <__swsetup_r+0xd0>)
 800a030:	429c      	cmp	r4, r3
 800a032:	d10f      	bne.n	800a054 <__swsetup_r+0x3c>
 800a034:	686c      	ldr	r4, [r5, #4]
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a03c:	0719      	lsls	r1, r3, #28
 800a03e:	d42c      	bmi.n	800a09a <__swsetup_r+0x82>
 800a040:	06dd      	lsls	r5, r3, #27
 800a042:	d411      	bmi.n	800a068 <__swsetup_r+0x50>
 800a044:	2309      	movs	r3, #9
 800a046:	6033      	str	r3, [r6, #0]
 800a048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a04c:	81a3      	strh	r3, [r4, #12]
 800a04e:	f04f 30ff 	mov.w	r0, #4294967295
 800a052:	e03e      	b.n	800a0d2 <__swsetup_r+0xba>
 800a054:	4b25      	ldr	r3, [pc, #148]	; (800a0ec <__swsetup_r+0xd4>)
 800a056:	429c      	cmp	r4, r3
 800a058:	d101      	bne.n	800a05e <__swsetup_r+0x46>
 800a05a:	68ac      	ldr	r4, [r5, #8]
 800a05c:	e7eb      	b.n	800a036 <__swsetup_r+0x1e>
 800a05e:	4b24      	ldr	r3, [pc, #144]	; (800a0f0 <__swsetup_r+0xd8>)
 800a060:	429c      	cmp	r4, r3
 800a062:	bf08      	it	eq
 800a064:	68ec      	ldreq	r4, [r5, #12]
 800a066:	e7e6      	b.n	800a036 <__swsetup_r+0x1e>
 800a068:	0758      	lsls	r0, r3, #29
 800a06a:	d512      	bpl.n	800a092 <__swsetup_r+0x7a>
 800a06c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a06e:	b141      	cbz	r1, 800a082 <__swsetup_r+0x6a>
 800a070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a074:	4299      	cmp	r1, r3
 800a076:	d002      	beq.n	800a07e <__swsetup_r+0x66>
 800a078:	4630      	mov	r0, r6
 800a07a:	f002 f99d 	bl	800c3b8 <_free_r>
 800a07e:	2300      	movs	r3, #0
 800a080:	6363      	str	r3, [r4, #52]	; 0x34
 800a082:	89a3      	ldrh	r3, [r4, #12]
 800a084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a088:	81a3      	strh	r3, [r4, #12]
 800a08a:	2300      	movs	r3, #0
 800a08c:	6063      	str	r3, [r4, #4]
 800a08e:	6923      	ldr	r3, [r4, #16]
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	f043 0308 	orr.w	r3, r3, #8
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	6923      	ldr	r3, [r4, #16]
 800a09c:	b94b      	cbnz	r3, 800a0b2 <__swsetup_r+0x9a>
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0a8:	d003      	beq.n	800a0b2 <__swsetup_r+0x9a>
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f001 fc43 	bl	800b938 <__smakebuf_r>
 800a0b2:	89a0      	ldrh	r0, [r4, #12]
 800a0b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0b8:	f010 0301 	ands.w	r3, r0, #1
 800a0bc:	d00a      	beq.n	800a0d4 <__swsetup_r+0xbc>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	60a3      	str	r3, [r4, #8]
 800a0c2:	6963      	ldr	r3, [r4, #20]
 800a0c4:	425b      	negs	r3, r3
 800a0c6:	61a3      	str	r3, [r4, #24]
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	b943      	cbnz	r3, 800a0de <__swsetup_r+0xc6>
 800a0cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0d0:	d1ba      	bne.n	800a048 <__swsetup_r+0x30>
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	0781      	lsls	r1, r0, #30
 800a0d6:	bf58      	it	pl
 800a0d8:	6963      	ldrpl	r3, [r4, #20]
 800a0da:	60a3      	str	r3, [r4, #8]
 800a0dc:	e7f4      	b.n	800a0c8 <__swsetup_r+0xb0>
 800a0de:	2000      	movs	r0, #0
 800a0e0:	e7f7      	b.n	800a0d2 <__swsetup_r+0xba>
 800a0e2:	bf00      	nop
 800a0e4:	2000000c 	.word	0x2000000c
 800a0e8:	0800e19c 	.word	0x0800e19c
 800a0ec:	0800e1bc 	.word	0x0800e1bc
 800a0f0:	0800e17c 	.word	0x0800e17c

0800a0f4 <_close_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d06      	ldr	r5, [pc, #24]	; (800a110 <_close_r+0x1c>)
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	602b      	str	r3, [r5, #0]
 800a100:	f7f7 fdeb 	bl	8001cda <_close>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_close_r+0x1a>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_close_r+0x1a>
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	20000418 	.word	0x20000418

0800a114 <quorem>:
 800a114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a118:	6903      	ldr	r3, [r0, #16]
 800a11a:	690c      	ldr	r4, [r1, #16]
 800a11c:	42a3      	cmp	r3, r4
 800a11e:	4607      	mov	r7, r0
 800a120:	f2c0 8081 	blt.w	800a226 <quorem+0x112>
 800a124:	3c01      	subs	r4, #1
 800a126:	f101 0814 	add.w	r8, r1, #20
 800a12a:	f100 0514 	add.w	r5, r0, #20
 800a12e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a132:	9301      	str	r3, [sp, #4]
 800a134:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a138:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a13c:	3301      	adds	r3, #1
 800a13e:	429a      	cmp	r2, r3
 800a140:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a144:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a148:	fbb2 f6f3 	udiv	r6, r2, r3
 800a14c:	d331      	bcc.n	800a1b2 <quorem+0x9e>
 800a14e:	f04f 0e00 	mov.w	lr, #0
 800a152:	4640      	mov	r0, r8
 800a154:	46ac      	mov	ip, r5
 800a156:	46f2      	mov	sl, lr
 800a158:	f850 2b04 	ldr.w	r2, [r0], #4
 800a15c:	b293      	uxth	r3, r2
 800a15e:	fb06 e303 	mla	r3, r6, r3, lr
 800a162:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a166:	b29b      	uxth	r3, r3
 800a168:	ebaa 0303 	sub.w	r3, sl, r3
 800a16c:	f8dc a000 	ldr.w	sl, [ip]
 800a170:	0c12      	lsrs	r2, r2, #16
 800a172:	fa13 f38a 	uxtah	r3, r3, sl
 800a176:	fb06 e202 	mla	r2, r6, r2, lr
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	9b00      	ldr	r3, [sp, #0]
 800a17e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a182:	b292      	uxth	r2, r2
 800a184:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a18c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a190:	4581      	cmp	r9, r0
 800a192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a196:	f84c 3b04 	str.w	r3, [ip], #4
 800a19a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a19e:	d2db      	bcs.n	800a158 <quorem+0x44>
 800a1a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1a4:	b92b      	cbnz	r3, 800a1b2 <quorem+0x9e>
 800a1a6:	9b01      	ldr	r3, [sp, #4]
 800a1a8:	3b04      	subs	r3, #4
 800a1aa:	429d      	cmp	r5, r3
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	d32e      	bcc.n	800a20e <quorem+0xfa>
 800a1b0:	613c      	str	r4, [r7, #16]
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	f001 fef4 	bl	800bfa0 <__mcmp>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	db24      	blt.n	800a206 <quorem+0xf2>
 800a1bc:	3601      	adds	r6, #1
 800a1be:	4628      	mov	r0, r5
 800a1c0:	f04f 0c00 	mov.w	ip, #0
 800a1c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1c8:	f8d0 e000 	ldr.w	lr, [r0]
 800a1cc:	b293      	uxth	r3, r2
 800a1ce:	ebac 0303 	sub.w	r3, ip, r3
 800a1d2:	0c12      	lsrs	r2, r2, #16
 800a1d4:	fa13 f38e 	uxtah	r3, r3, lr
 800a1d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1e6:	45c1      	cmp	r9, r8
 800a1e8:	f840 3b04 	str.w	r3, [r0], #4
 800a1ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1f0:	d2e8      	bcs.n	800a1c4 <quorem+0xb0>
 800a1f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1fa:	b922      	cbnz	r2, 800a206 <quorem+0xf2>
 800a1fc:	3b04      	subs	r3, #4
 800a1fe:	429d      	cmp	r5, r3
 800a200:	461a      	mov	r2, r3
 800a202:	d30a      	bcc.n	800a21a <quorem+0x106>
 800a204:	613c      	str	r4, [r7, #16]
 800a206:	4630      	mov	r0, r6
 800a208:	b003      	add	sp, #12
 800a20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20e:	6812      	ldr	r2, [r2, #0]
 800a210:	3b04      	subs	r3, #4
 800a212:	2a00      	cmp	r2, #0
 800a214:	d1cc      	bne.n	800a1b0 <quorem+0x9c>
 800a216:	3c01      	subs	r4, #1
 800a218:	e7c7      	b.n	800a1aa <quorem+0x96>
 800a21a:	6812      	ldr	r2, [r2, #0]
 800a21c:	3b04      	subs	r3, #4
 800a21e:	2a00      	cmp	r2, #0
 800a220:	d1f0      	bne.n	800a204 <quorem+0xf0>
 800a222:	3c01      	subs	r4, #1
 800a224:	e7eb      	b.n	800a1fe <quorem+0xea>
 800a226:	2000      	movs	r0, #0
 800a228:	e7ee      	b.n	800a208 <quorem+0xf4>
 800a22a:	0000      	movs	r0, r0
 800a22c:	0000      	movs	r0, r0
	...

0800a230 <_dtoa_r>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	ed2d 8b04 	vpush	{d8-d9}
 800a238:	ec57 6b10 	vmov	r6, r7, d0
 800a23c:	b093      	sub	sp, #76	; 0x4c
 800a23e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a240:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a244:	9106      	str	r1, [sp, #24]
 800a246:	ee10 aa10 	vmov	sl, s0
 800a24a:	4604      	mov	r4, r0
 800a24c:	9209      	str	r2, [sp, #36]	; 0x24
 800a24e:	930c      	str	r3, [sp, #48]	; 0x30
 800a250:	46bb      	mov	fp, r7
 800a252:	b975      	cbnz	r5, 800a272 <_dtoa_r+0x42>
 800a254:	2010      	movs	r0, #16
 800a256:	f001 fbaf 	bl	800b9b8 <malloc>
 800a25a:	4602      	mov	r2, r0
 800a25c:	6260      	str	r0, [r4, #36]	; 0x24
 800a25e:	b920      	cbnz	r0, 800a26a <_dtoa_r+0x3a>
 800a260:	4ba7      	ldr	r3, [pc, #668]	; (800a500 <_dtoa_r+0x2d0>)
 800a262:	21ea      	movs	r1, #234	; 0xea
 800a264:	48a7      	ldr	r0, [pc, #668]	; (800a504 <_dtoa_r+0x2d4>)
 800a266:	f003 fb8f 	bl	800d988 <__assert_func>
 800a26a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a26e:	6005      	str	r5, [r0, #0]
 800a270:	60c5      	str	r5, [r0, #12]
 800a272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a274:	6819      	ldr	r1, [r3, #0]
 800a276:	b151      	cbz	r1, 800a28e <_dtoa_r+0x5e>
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	604a      	str	r2, [r1, #4]
 800a27c:	2301      	movs	r3, #1
 800a27e:	4093      	lsls	r3, r2
 800a280:	608b      	str	r3, [r1, #8]
 800a282:	4620      	mov	r0, r4
 800a284:	f001 fc00 	bl	800ba88 <_Bfree>
 800a288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a28a:	2200      	movs	r2, #0
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	1e3b      	subs	r3, r7, #0
 800a290:	bfaa      	itet	ge
 800a292:	2300      	movge	r3, #0
 800a294:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a298:	f8c8 3000 	strge.w	r3, [r8]
 800a29c:	4b9a      	ldr	r3, [pc, #616]	; (800a508 <_dtoa_r+0x2d8>)
 800a29e:	bfbc      	itt	lt
 800a2a0:	2201      	movlt	r2, #1
 800a2a2:	f8c8 2000 	strlt.w	r2, [r8]
 800a2a6:	ea33 030b 	bics.w	r3, r3, fp
 800a2aa:	d11b      	bne.n	800a2e4 <_dtoa_r+0xb4>
 800a2ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2b8:	4333      	orrs	r3, r6
 800a2ba:	f000 8592 	beq.w	800ade2 <_dtoa_r+0xbb2>
 800a2be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2c0:	b963      	cbnz	r3, 800a2dc <_dtoa_r+0xac>
 800a2c2:	4b92      	ldr	r3, [pc, #584]	; (800a50c <_dtoa_r+0x2dc>)
 800a2c4:	e022      	b.n	800a30c <_dtoa_r+0xdc>
 800a2c6:	4b92      	ldr	r3, [pc, #584]	; (800a510 <_dtoa_r+0x2e0>)
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	3308      	adds	r3, #8
 800a2cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	9801      	ldr	r0, [sp, #4]
 800a2d2:	b013      	add	sp, #76	; 0x4c
 800a2d4:	ecbd 8b04 	vpop	{d8-d9}
 800a2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2dc:	4b8b      	ldr	r3, [pc, #556]	; (800a50c <_dtoa_r+0x2dc>)
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	3303      	adds	r3, #3
 800a2e2:	e7f3      	b.n	800a2cc <_dtoa_r+0x9c>
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	4650      	mov	r0, sl
 800a2ea:	4659      	mov	r1, fp
 800a2ec:	f7f6 fc0c 	bl	8000b08 <__aeabi_dcmpeq>
 800a2f0:	ec4b ab19 	vmov	d9, sl, fp
 800a2f4:	4680      	mov	r8, r0
 800a2f6:	b158      	cbz	r0, 800a310 <_dtoa_r+0xe0>
 800a2f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	6013      	str	r3, [r2, #0]
 800a2fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 856b 	beq.w	800addc <_dtoa_r+0xbac>
 800a306:	4883      	ldr	r0, [pc, #524]	; (800a514 <_dtoa_r+0x2e4>)
 800a308:	6018      	str	r0, [r3, #0]
 800a30a:	1e43      	subs	r3, r0, #1
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	e7df      	b.n	800a2d0 <_dtoa_r+0xa0>
 800a310:	ec4b ab10 	vmov	d0, sl, fp
 800a314:	aa10      	add	r2, sp, #64	; 0x40
 800a316:	a911      	add	r1, sp, #68	; 0x44
 800a318:	4620      	mov	r0, r4
 800a31a:	f001 ff63 	bl	800c1e4 <__d2b>
 800a31e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a322:	ee08 0a10 	vmov	s16, r0
 800a326:	2d00      	cmp	r5, #0
 800a328:	f000 8084 	beq.w	800a434 <_dtoa_r+0x204>
 800a32c:	ee19 3a90 	vmov	r3, s19
 800a330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a334:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a338:	4656      	mov	r6, sl
 800a33a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a33e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a342:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a346:	4b74      	ldr	r3, [pc, #464]	; (800a518 <_dtoa_r+0x2e8>)
 800a348:	2200      	movs	r2, #0
 800a34a:	4630      	mov	r0, r6
 800a34c:	4639      	mov	r1, r7
 800a34e:	f7f5 ffbb 	bl	80002c8 <__aeabi_dsub>
 800a352:	a365      	add	r3, pc, #404	; (adr r3, 800a4e8 <_dtoa_r+0x2b8>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f7f6 f96e 	bl	8000638 <__aeabi_dmul>
 800a35c:	a364      	add	r3, pc, #400	; (adr r3, 800a4f0 <_dtoa_r+0x2c0>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f5 ffb3 	bl	80002cc <__adddf3>
 800a366:	4606      	mov	r6, r0
 800a368:	4628      	mov	r0, r5
 800a36a:	460f      	mov	r7, r1
 800a36c:	f7f6 f8fa 	bl	8000564 <__aeabi_i2d>
 800a370:	a361      	add	r3, pc, #388	; (adr r3, 800a4f8 <_dtoa_r+0x2c8>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	f7f6 f95f 	bl	8000638 <__aeabi_dmul>
 800a37a:	4602      	mov	r2, r0
 800a37c:	460b      	mov	r3, r1
 800a37e:	4630      	mov	r0, r6
 800a380:	4639      	mov	r1, r7
 800a382:	f7f5 ffa3 	bl	80002cc <__adddf3>
 800a386:	4606      	mov	r6, r0
 800a388:	460f      	mov	r7, r1
 800a38a:	f7f6 fc05 	bl	8000b98 <__aeabi_d2iz>
 800a38e:	2200      	movs	r2, #0
 800a390:	9000      	str	r0, [sp, #0]
 800a392:	2300      	movs	r3, #0
 800a394:	4630      	mov	r0, r6
 800a396:	4639      	mov	r1, r7
 800a398:	f7f6 fbc0 	bl	8000b1c <__aeabi_dcmplt>
 800a39c:	b150      	cbz	r0, 800a3b4 <_dtoa_r+0x184>
 800a39e:	9800      	ldr	r0, [sp, #0]
 800a3a0:	f7f6 f8e0 	bl	8000564 <__aeabi_i2d>
 800a3a4:	4632      	mov	r2, r6
 800a3a6:	463b      	mov	r3, r7
 800a3a8:	f7f6 fbae 	bl	8000b08 <__aeabi_dcmpeq>
 800a3ac:	b910      	cbnz	r0, 800a3b4 <_dtoa_r+0x184>
 800a3ae:	9b00      	ldr	r3, [sp, #0]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	9b00      	ldr	r3, [sp, #0]
 800a3b6:	2b16      	cmp	r3, #22
 800a3b8:	d85a      	bhi.n	800a470 <_dtoa_r+0x240>
 800a3ba:	9a00      	ldr	r2, [sp, #0]
 800a3bc:	4b57      	ldr	r3, [pc, #348]	; (800a51c <_dtoa_r+0x2ec>)
 800a3be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	ec51 0b19 	vmov	r0, r1, d9
 800a3ca:	f7f6 fba7 	bl	8000b1c <__aeabi_dcmplt>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d050      	beq.n	800a474 <_dtoa_r+0x244>
 800a3d2:	9b00      	ldr	r3, [sp, #0]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3de:	1b5d      	subs	r5, r3, r5
 800a3e0:	1e6b      	subs	r3, r5, #1
 800a3e2:	9305      	str	r3, [sp, #20]
 800a3e4:	bf45      	ittet	mi
 800a3e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a3ea:	9304      	strmi	r3, [sp, #16]
 800a3ec:	2300      	movpl	r3, #0
 800a3ee:	2300      	movmi	r3, #0
 800a3f0:	bf4c      	ite	mi
 800a3f2:	9305      	strmi	r3, [sp, #20]
 800a3f4:	9304      	strpl	r3, [sp, #16]
 800a3f6:	9b00      	ldr	r3, [sp, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	db3d      	blt.n	800a478 <_dtoa_r+0x248>
 800a3fc:	9b05      	ldr	r3, [sp, #20]
 800a3fe:	9a00      	ldr	r2, [sp, #0]
 800a400:	920a      	str	r2, [sp, #40]	; 0x28
 800a402:	4413      	add	r3, r2
 800a404:	9305      	str	r3, [sp, #20]
 800a406:	2300      	movs	r3, #0
 800a408:	9307      	str	r3, [sp, #28]
 800a40a:	9b06      	ldr	r3, [sp, #24]
 800a40c:	2b09      	cmp	r3, #9
 800a40e:	f200 8089 	bhi.w	800a524 <_dtoa_r+0x2f4>
 800a412:	2b05      	cmp	r3, #5
 800a414:	bfc4      	itt	gt
 800a416:	3b04      	subgt	r3, #4
 800a418:	9306      	strgt	r3, [sp, #24]
 800a41a:	9b06      	ldr	r3, [sp, #24]
 800a41c:	f1a3 0302 	sub.w	r3, r3, #2
 800a420:	bfcc      	ite	gt
 800a422:	2500      	movgt	r5, #0
 800a424:	2501      	movle	r5, #1
 800a426:	2b03      	cmp	r3, #3
 800a428:	f200 8087 	bhi.w	800a53a <_dtoa_r+0x30a>
 800a42c:	e8df f003 	tbb	[pc, r3]
 800a430:	59383a2d 	.word	0x59383a2d
 800a434:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a438:	441d      	add	r5, r3
 800a43a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a43e:	2b20      	cmp	r3, #32
 800a440:	bfc1      	itttt	gt
 800a442:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a446:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a44a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a44e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a452:	bfda      	itte	le
 800a454:	f1c3 0320 	rsble	r3, r3, #32
 800a458:	fa06 f003 	lslle.w	r0, r6, r3
 800a45c:	4318      	orrgt	r0, r3
 800a45e:	f7f6 f871 	bl	8000544 <__aeabi_ui2d>
 800a462:	2301      	movs	r3, #1
 800a464:	4606      	mov	r6, r0
 800a466:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a46a:	3d01      	subs	r5, #1
 800a46c:	930e      	str	r3, [sp, #56]	; 0x38
 800a46e:	e76a      	b.n	800a346 <_dtoa_r+0x116>
 800a470:	2301      	movs	r3, #1
 800a472:	e7b2      	b.n	800a3da <_dtoa_r+0x1aa>
 800a474:	900b      	str	r0, [sp, #44]	; 0x2c
 800a476:	e7b1      	b.n	800a3dc <_dtoa_r+0x1ac>
 800a478:	9b04      	ldr	r3, [sp, #16]
 800a47a:	9a00      	ldr	r2, [sp, #0]
 800a47c:	1a9b      	subs	r3, r3, r2
 800a47e:	9304      	str	r3, [sp, #16]
 800a480:	4253      	negs	r3, r2
 800a482:	9307      	str	r3, [sp, #28]
 800a484:	2300      	movs	r3, #0
 800a486:	930a      	str	r3, [sp, #40]	; 0x28
 800a488:	e7bf      	b.n	800a40a <_dtoa_r+0x1da>
 800a48a:	2300      	movs	r3, #0
 800a48c:	9308      	str	r3, [sp, #32]
 800a48e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a490:	2b00      	cmp	r3, #0
 800a492:	dc55      	bgt.n	800a540 <_dtoa_r+0x310>
 800a494:	2301      	movs	r3, #1
 800a496:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a49a:	461a      	mov	r2, r3
 800a49c:	9209      	str	r2, [sp, #36]	; 0x24
 800a49e:	e00c      	b.n	800a4ba <_dtoa_r+0x28a>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e7f3      	b.n	800a48c <_dtoa_r+0x25c>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4a8:	9308      	str	r3, [sp, #32]
 800a4aa:	9b00      	ldr	r3, [sp, #0]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	9302      	str	r3, [sp, #8]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	9303      	str	r3, [sp, #12]
 800a4b6:	bfb8      	it	lt
 800a4b8:	2301      	movlt	r3, #1
 800a4ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4bc:	2200      	movs	r2, #0
 800a4be:	6042      	str	r2, [r0, #4]
 800a4c0:	2204      	movs	r2, #4
 800a4c2:	f102 0614 	add.w	r6, r2, #20
 800a4c6:	429e      	cmp	r6, r3
 800a4c8:	6841      	ldr	r1, [r0, #4]
 800a4ca:	d93d      	bls.n	800a548 <_dtoa_r+0x318>
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f001 fa9b 	bl	800ba08 <_Balloc>
 800a4d2:	9001      	str	r0, [sp, #4]
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d13b      	bne.n	800a550 <_dtoa_r+0x320>
 800a4d8:	4b11      	ldr	r3, [pc, #68]	; (800a520 <_dtoa_r+0x2f0>)
 800a4da:	4602      	mov	r2, r0
 800a4dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4e0:	e6c0      	b.n	800a264 <_dtoa_r+0x34>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e7df      	b.n	800a4a6 <_dtoa_r+0x276>
 800a4e6:	bf00      	nop
 800a4e8:	636f4361 	.word	0x636f4361
 800a4ec:	3fd287a7 	.word	0x3fd287a7
 800a4f0:	8b60c8b3 	.word	0x8b60c8b3
 800a4f4:	3fc68a28 	.word	0x3fc68a28
 800a4f8:	509f79fb 	.word	0x509f79fb
 800a4fc:	3fd34413 	.word	0x3fd34413
 800a500:	0800e0f6 	.word	0x0800e0f6
 800a504:	0800e10d 	.word	0x0800e10d
 800a508:	7ff00000 	.word	0x7ff00000
 800a50c:	0800e0f2 	.word	0x0800e0f2
 800a510:	0800e0e9 	.word	0x0800e0e9
 800a514:	0800e3ca 	.word	0x0800e3ca
 800a518:	3ff80000 	.word	0x3ff80000
 800a51c:	0800e2e0 	.word	0x0800e2e0
 800a520:	0800e168 	.word	0x0800e168
 800a524:	2501      	movs	r5, #1
 800a526:	2300      	movs	r3, #0
 800a528:	9306      	str	r3, [sp, #24]
 800a52a:	9508      	str	r5, [sp, #32]
 800a52c:	f04f 33ff 	mov.w	r3, #4294967295
 800a530:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a534:	2200      	movs	r2, #0
 800a536:	2312      	movs	r3, #18
 800a538:	e7b0      	b.n	800a49c <_dtoa_r+0x26c>
 800a53a:	2301      	movs	r3, #1
 800a53c:	9308      	str	r3, [sp, #32]
 800a53e:	e7f5      	b.n	800a52c <_dtoa_r+0x2fc>
 800a540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a542:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a546:	e7b8      	b.n	800a4ba <_dtoa_r+0x28a>
 800a548:	3101      	adds	r1, #1
 800a54a:	6041      	str	r1, [r0, #4]
 800a54c:	0052      	lsls	r2, r2, #1
 800a54e:	e7b8      	b.n	800a4c2 <_dtoa_r+0x292>
 800a550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a552:	9a01      	ldr	r2, [sp, #4]
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	9b03      	ldr	r3, [sp, #12]
 800a558:	2b0e      	cmp	r3, #14
 800a55a:	f200 809d 	bhi.w	800a698 <_dtoa_r+0x468>
 800a55e:	2d00      	cmp	r5, #0
 800a560:	f000 809a 	beq.w	800a698 <_dtoa_r+0x468>
 800a564:	9b00      	ldr	r3, [sp, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	dd32      	ble.n	800a5d0 <_dtoa_r+0x3a0>
 800a56a:	4ab7      	ldr	r2, [pc, #732]	; (800a848 <_dtoa_r+0x618>)
 800a56c:	f003 030f 	and.w	r3, r3, #15
 800a570:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a574:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a578:	9b00      	ldr	r3, [sp, #0]
 800a57a:	05d8      	lsls	r0, r3, #23
 800a57c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a580:	d516      	bpl.n	800a5b0 <_dtoa_r+0x380>
 800a582:	4bb2      	ldr	r3, [pc, #712]	; (800a84c <_dtoa_r+0x61c>)
 800a584:	ec51 0b19 	vmov	r0, r1, d9
 800a588:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a58c:	f7f6 f97e 	bl	800088c <__aeabi_ddiv>
 800a590:	f007 070f 	and.w	r7, r7, #15
 800a594:	4682      	mov	sl, r0
 800a596:	468b      	mov	fp, r1
 800a598:	2503      	movs	r5, #3
 800a59a:	4eac      	ldr	r6, [pc, #688]	; (800a84c <_dtoa_r+0x61c>)
 800a59c:	b957      	cbnz	r7, 800a5b4 <_dtoa_r+0x384>
 800a59e:	4642      	mov	r2, r8
 800a5a0:	464b      	mov	r3, r9
 800a5a2:	4650      	mov	r0, sl
 800a5a4:	4659      	mov	r1, fp
 800a5a6:	f7f6 f971 	bl	800088c <__aeabi_ddiv>
 800a5aa:	4682      	mov	sl, r0
 800a5ac:	468b      	mov	fp, r1
 800a5ae:	e028      	b.n	800a602 <_dtoa_r+0x3d2>
 800a5b0:	2502      	movs	r5, #2
 800a5b2:	e7f2      	b.n	800a59a <_dtoa_r+0x36a>
 800a5b4:	07f9      	lsls	r1, r7, #31
 800a5b6:	d508      	bpl.n	800a5ca <_dtoa_r+0x39a>
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5c0:	f7f6 f83a 	bl	8000638 <__aeabi_dmul>
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	4680      	mov	r8, r0
 800a5c8:	4689      	mov	r9, r1
 800a5ca:	107f      	asrs	r7, r7, #1
 800a5cc:	3608      	adds	r6, #8
 800a5ce:	e7e5      	b.n	800a59c <_dtoa_r+0x36c>
 800a5d0:	f000 809b 	beq.w	800a70a <_dtoa_r+0x4da>
 800a5d4:	9b00      	ldr	r3, [sp, #0]
 800a5d6:	4f9d      	ldr	r7, [pc, #628]	; (800a84c <_dtoa_r+0x61c>)
 800a5d8:	425e      	negs	r6, r3
 800a5da:	4b9b      	ldr	r3, [pc, #620]	; (800a848 <_dtoa_r+0x618>)
 800a5dc:	f006 020f 	and.w	r2, r6, #15
 800a5e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	ec51 0b19 	vmov	r0, r1, d9
 800a5ec:	f7f6 f824 	bl	8000638 <__aeabi_dmul>
 800a5f0:	1136      	asrs	r6, r6, #4
 800a5f2:	4682      	mov	sl, r0
 800a5f4:	468b      	mov	fp, r1
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	2502      	movs	r5, #2
 800a5fa:	2e00      	cmp	r6, #0
 800a5fc:	d17a      	bne.n	800a6f4 <_dtoa_r+0x4c4>
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1d3      	bne.n	800a5aa <_dtoa_r+0x37a>
 800a602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 8082 	beq.w	800a70e <_dtoa_r+0x4de>
 800a60a:	4b91      	ldr	r3, [pc, #580]	; (800a850 <_dtoa_r+0x620>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	4650      	mov	r0, sl
 800a610:	4659      	mov	r1, fp
 800a612:	f7f6 fa83 	bl	8000b1c <__aeabi_dcmplt>
 800a616:	2800      	cmp	r0, #0
 800a618:	d079      	beq.n	800a70e <_dtoa_r+0x4de>
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d076      	beq.n	800a70e <_dtoa_r+0x4de>
 800a620:	9b02      	ldr	r3, [sp, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	dd36      	ble.n	800a694 <_dtoa_r+0x464>
 800a626:	9b00      	ldr	r3, [sp, #0]
 800a628:	4650      	mov	r0, sl
 800a62a:	4659      	mov	r1, fp
 800a62c:	1e5f      	subs	r7, r3, #1
 800a62e:	2200      	movs	r2, #0
 800a630:	4b88      	ldr	r3, [pc, #544]	; (800a854 <_dtoa_r+0x624>)
 800a632:	f7f6 f801 	bl	8000638 <__aeabi_dmul>
 800a636:	9e02      	ldr	r6, [sp, #8]
 800a638:	4682      	mov	sl, r0
 800a63a:	468b      	mov	fp, r1
 800a63c:	3501      	adds	r5, #1
 800a63e:	4628      	mov	r0, r5
 800a640:	f7f5 ff90 	bl	8000564 <__aeabi_i2d>
 800a644:	4652      	mov	r2, sl
 800a646:	465b      	mov	r3, fp
 800a648:	f7f5 fff6 	bl	8000638 <__aeabi_dmul>
 800a64c:	4b82      	ldr	r3, [pc, #520]	; (800a858 <_dtoa_r+0x628>)
 800a64e:	2200      	movs	r2, #0
 800a650:	f7f5 fe3c 	bl	80002cc <__adddf3>
 800a654:	46d0      	mov	r8, sl
 800a656:	46d9      	mov	r9, fp
 800a658:	4682      	mov	sl, r0
 800a65a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a65e:	2e00      	cmp	r6, #0
 800a660:	d158      	bne.n	800a714 <_dtoa_r+0x4e4>
 800a662:	4b7e      	ldr	r3, [pc, #504]	; (800a85c <_dtoa_r+0x62c>)
 800a664:	2200      	movs	r2, #0
 800a666:	4640      	mov	r0, r8
 800a668:	4649      	mov	r1, r9
 800a66a:	f7f5 fe2d 	bl	80002c8 <__aeabi_dsub>
 800a66e:	4652      	mov	r2, sl
 800a670:	465b      	mov	r3, fp
 800a672:	4680      	mov	r8, r0
 800a674:	4689      	mov	r9, r1
 800a676:	f7f6 fa6f 	bl	8000b58 <__aeabi_dcmpgt>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	f040 8295 	bne.w	800abaa <_dtoa_r+0x97a>
 800a680:	4652      	mov	r2, sl
 800a682:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a686:	4640      	mov	r0, r8
 800a688:	4649      	mov	r1, r9
 800a68a:	f7f6 fa47 	bl	8000b1c <__aeabi_dcmplt>
 800a68e:	2800      	cmp	r0, #0
 800a690:	f040 8289 	bne.w	800aba6 <_dtoa_r+0x976>
 800a694:	ec5b ab19 	vmov	sl, fp, d9
 800a698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f2c0 8148 	blt.w	800a930 <_dtoa_r+0x700>
 800a6a0:	9a00      	ldr	r2, [sp, #0]
 800a6a2:	2a0e      	cmp	r2, #14
 800a6a4:	f300 8144 	bgt.w	800a930 <_dtoa_r+0x700>
 800a6a8:	4b67      	ldr	r3, [pc, #412]	; (800a848 <_dtoa_r+0x618>)
 800a6aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f280 80d5 	bge.w	800a864 <_dtoa_r+0x634>
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f300 80d1 	bgt.w	800a864 <_dtoa_r+0x634>
 800a6c2:	f040 826f 	bne.w	800aba4 <_dtoa_r+0x974>
 800a6c6:	4b65      	ldr	r3, [pc, #404]	; (800a85c <_dtoa_r+0x62c>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	f7f5 ffb3 	bl	8000638 <__aeabi_dmul>
 800a6d2:	4652      	mov	r2, sl
 800a6d4:	465b      	mov	r3, fp
 800a6d6:	f7f6 fa35 	bl	8000b44 <__aeabi_dcmpge>
 800a6da:	9e03      	ldr	r6, [sp, #12]
 800a6dc:	4637      	mov	r7, r6
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f040 8245 	bne.w	800ab6e <_dtoa_r+0x93e>
 800a6e4:	9d01      	ldr	r5, [sp, #4]
 800a6e6:	2331      	movs	r3, #49	; 0x31
 800a6e8:	f805 3b01 	strb.w	r3, [r5], #1
 800a6ec:	9b00      	ldr	r3, [sp, #0]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	e240      	b.n	800ab76 <_dtoa_r+0x946>
 800a6f4:	07f2      	lsls	r2, r6, #31
 800a6f6:	d505      	bpl.n	800a704 <_dtoa_r+0x4d4>
 800a6f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6fc:	f7f5 ff9c 	bl	8000638 <__aeabi_dmul>
 800a700:	3501      	adds	r5, #1
 800a702:	2301      	movs	r3, #1
 800a704:	1076      	asrs	r6, r6, #1
 800a706:	3708      	adds	r7, #8
 800a708:	e777      	b.n	800a5fa <_dtoa_r+0x3ca>
 800a70a:	2502      	movs	r5, #2
 800a70c:	e779      	b.n	800a602 <_dtoa_r+0x3d2>
 800a70e:	9f00      	ldr	r7, [sp, #0]
 800a710:	9e03      	ldr	r6, [sp, #12]
 800a712:	e794      	b.n	800a63e <_dtoa_r+0x40e>
 800a714:	9901      	ldr	r1, [sp, #4]
 800a716:	4b4c      	ldr	r3, [pc, #304]	; (800a848 <_dtoa_r+0x618>)
 800a718:	4431      	add	r1, r6
 800a71a:	910d      	str	r1, [sp, #52]	; 0x34
 800a71c:	9908      	ldr	r1, [sp, #32]
 800a71e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a722:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a726:	2900      	cmp	r1, #0
 800a728:	d043      	beq.n	800a7b2 <_dtoa_r+0x582>
 800a72a:	494d      	ldr	r1, [pc, #308]	; (800a860 <_dtoa_r+0x630>)
 800a72c:	2000      	movs	r0, #0
 800a72e:	f7f6 f8ad 	bl	800088c <__aeabi_ddiv>
 800a732:	4652      	mov	r2, sl
 800a734:	465b      	mov	r3, fp
 800a736:	f7f5 fdc7 	bl	80002c8 <__aeabi_dsub>
 800a73a:	9d01      	ldr	r5, [sp, #4]
 800a73c:	4682      	mov	sl, r0
 800a73e:	468b      	mov	fp, r1
 800a740:	4649      	mov	r1, r9
 800a742:	4640      	mov	r0, r8
 800a744:	f7f6 fa28 	bl	8000b98 <__aeabi_d2iz>
 800a748:	4606      	mov	r6, r0
 800a74a:	f7f5 ff0b 	bl	8000564 <__aeabi_i2d>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	4640      	mov	r0, r8
 800a754:	4649      	mov	r1, r9
 800a756:	f7f5 fdb7 	bl	80002c8 <__aeabi_dsub>
 800a75a:	3630      	adds	r6, #48	; 0x30
 800a75c:	f805 6b01 	strb.w	r6, [r5], #1
 800a760:	4652      	mov	r2, sl
 800a762:	465b      	mov	r3, fp
 800a764:	4680      	mov	r8, r0
 800a766:	4689      	mov	r9, r1
 800a768:	f7f6 f9d8 	bl	8000b1c <__aeabi_dcmplt>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d163      	bne.n	800a838 <_dtoa_r+0x608>
 800a770:	4642      	mov	r2, r8
 800a772:	464b      	mov	r3, r9
 800a774:	4936      	ldr	r1, [pc, #216]	; (800a850 <_dtoa_r+0x620>)
 800a776:	2000      	movs	r0, #0
 800a778:	f7f5 fda6 	bl	80002c8 <__aeabi_dsub>
 800a77c:	4652      	mov	r2, sl
 800a77e:	465b      	mov	r3, fp
 800a780:	f7f6 f9cc 	bl	8000b1c <__aeabi_dcmplt>
 800a784:	2800      	cmp	r0, #0
 800a786:	f040 80b5 	bne.w	800a8f4 <_dtoa_r+0x6c4>
 800a78a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a78c:	429d      	cmp	r5, r3
 800a78e:	d081      	beq.n	800a694 <_dtoa_r+0x464>
 800a790:	4b30      	ldr	r3, [pc, #192]	; (800a854 <_dtoa_r+0x624>)
 800a792:	2200      	movs	r2, #0
 800a794:	4650      	mov	r0, sl
 800a796:	4659      	mov	r1, fp
 800a798:	f7f5 ff4e 	bl	8000638 <__aeabi_dmul>
 800a79c:	4b2d      	ldr	r3, [pc, #180]	; (800a854 <_dtoa_r+0x624>)
 800a79e:	4682      	mov	sl, r0
 800a7a0:	468b      	mov	fp, r1
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	4649      	mov	r1, r9
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f7f5 ff46 	bl	8000638 <__aeabi_dmul>
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	4689      	mov	r9, r1
 800a7b0:	e7c6      	b.n	800a740 <_dtoa_r+0x510>
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	4659      	mov	r1, fp
 800a7b6:	f7f5 ff3f 	bl	8000638 <__aeabi_dmul>
 800a7ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7bc:	9d01      	ldr	r5, [sp, #4]
 800a7be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7c0:	4682      	mov	sl, r0
 800a7c2:	468b      	mov	fp, r1
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	f7f6 f9e6 	bl	8000b98 <__aeabi_d2iz>
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	f7f5 fec9 	bl	8000564 <__aeabi_i2d>
 800a7d2:	3630      	adds	r6, #48	; 0x30
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4640      	mov	r0, r8
 800a7da:	4649      	mov	r1, r9
 800a7dc:	f7f5 fd74 	bl	80002c8 <__aeabi_dsub>
 800a7e0:	f805 6b01 	strb.w	r6, [r5], #1
 800a7e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7e6:	429d      	cmp	r5, r3
 800a7e8:	4680      	mov	r8, r0
 800a7ea:	4689      	mov	r9, r1
 800a7ec:	f04f 0200 	mov.w	r2, #0
 800a7f0:	d124      	bne.n	800a83c <_dtoa_r+0x60c>
 800a7f2:	4b1b      	ldr	r3, [pc, #108]	; (800a860 <_dtoa_r+0x630>)
 800a7f4:	4650      	mov	r0, sl
 800a7f6:	4659      	mov	r1, fp
 800a7f8:	f7f5 fd68 	bl	80002cc <__adddf3>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4640      	mov	r0, r8
 800a802:	4649      	mov	r1, r9
 800a804:	f7f6 f9a8 	bl	8000b58 <__aeabi_dcmpgt>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d173      	bne.n	800a8f4 <_dtoa_r+0x6c4>
 800a80c:	4652      	mov	r2, sl
 800a80e:	465b      	mov	r3, fp
 800a810:	4913      	ldr	r1, [pc, #76]	; (800a860 <_dtoa_r+0x630>)
 800a812:	2000      	movs	r0, #0
 800a814:	f7f5 fd58 	bl	80002c8 <__aeabi_dsub>
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4640      	mov	r0, r8
 800a81e:	4649      	mov	r1, r9
 800a820:	f7f6 f97c 	bl	8000b1c <__aeabi_dcmplt>
 800a824:	2800      	cmp	r0, #0
 800a826:	f43f af35 	beq.w	800a694 <_dtoa_r+0x464>
 800a82a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a82c:	1e6b      	subs	r3, r5, #1
 800a82e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a830:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a834:	2b30      	cmp	r3, #48	; 0x30
 800a836:	d0f8      	beq.n	800a82a <_dtoa_r+0x5fa>
 800a838:	9700      	str	r7, [sp, #0]
 800a83a:	e049      	b.n	800a8d0 <_dtoa_r+0x6a0>
 800a83c:	4b05      	ldr	r3, [pc, #20]	; (800a854 <_dtoa_r+0x624>)
 800a83e:	f7f5 fefb 	bl	8000638 <__aeabi_dmul>
 800a842:	4680      	mov	r8, r0
 800a844:	4689      	mov	r9, r1
 800a846:	e7bd      	b.n	800a7c4 <_dtoa_r+0x594>
 800a848:	0800e2e0 	.word	0x0800e2e0
 800a84c:	0800e2b8 	.word	0x0800e2b8
 800a850:	3ff00000 	.word	0x3ff00000
 800a854:	40240000 	.word	0x40240000
 800a858:	401c0000 	.word	0x401c0000
 800a85c:	40140000 	.word	0x40140000
 800a860:	3fe00000 	.word	0x3fe00000
 800a864:	9d01      	ldr	r5, [sp, #4]
 800a866:	4656      	mov	r6, sl
 800a868:	465f      	mov	r7, fp
 800a86a:	4642      	mov	r2, r8
 800a86c:	464b      	mov	r3, r9
 800a86e:	4630      	mov	r0, r6
 800a870:	4639      	mov	r1, r7
 800a872:	f7f6 f80b 	bl	800088c <__aeabi_ddiv>
 800a876:	f7f6 f98f 	bl	8000b98 <__aeabi_d2iz>
 800a87a:	4682      	mov	sl, r0
 800a87c:	f7f5 fe72 	bl	8000564 <__aeabi_i2d>
 800a880:	4642      	mov	r2, r8
 800a882:	464b      	mov	r3, r9
 800a884:	f7f5 fed8 	bl	8000638 <__aeabi_dmul>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4630      	mov	r0, r6
 800a88e:	4639      	mov	r1, r7
 800a890:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a894:	f7f5 fd18 	bl	80002c8 <__aeabi_dsub>
 800a898:	f805 6b01 	strb.w	r6, [r5], #1
 800a89c:	9e01      	ldr	r6, [sp, #4]
 800a89e:	9f03      	ldr	r7, [sp, #12]
 800a8a0:	1bae      	subs	r6, r5, r6
 800a8a2:	42b7      	cmp	r7, r6
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	d135      	bne.n	800a916 <_dtoa_r+0x6e6>
 800a8aa:	f7f5 fd0f 	bl	80002cc <__adddf3>
 800a8ae:	4642      	mov	r2, r8
 800a8b0:	464b      	mov	r3, r9
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	460f      	mov	r7, r1
 800a8b6:	f7f6 f94f 	bl	8000b58 <__aeabi_dcmpgt>
 800a8ba:	b9d0      	cbnz	r0, 800a8f2 <_dtoa_r+0x6c2>
 800a8bc:	4642      	mov	r2, r8
 800a8be:	464b      	mov	r3, r9
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	4639      	mov	r1, r7
 800a8c4:	f7f6 f920 	bl	8000b08 <__aeabi_dcmpeq>
 800a8c8:	b110      	cbz	r0, 800a8d0 <_dtoa_r+0x6a0>
 800a8ca:	f01a 0f01 	tst.w	sl, #1
 800a8ce:	d110      	bne.n	800a8f2 <_dtoa_r+0x6c2>
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	ee18 1a10 	vmov	r1, s16
 800a8d6:	f001 f8d7 	bl	800ba88 <_Bfree>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	9800      	ldr	r0, [sp, #0]
 800a8de:	702b      	strb	r3, [r5, #0]
 800a8e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	6018      	str	r0, [r3, #0]
 800a8e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f43f acf1 	beq.w	800a2d0 <_dtoa_r+0xa0>
 800a8ee:	601d      	str	r5, [r3, #0]
 800a8f0:	e4ee      	b.n	800a2d0 <_dtoa_r+0xa0>
 800a8f2:	9f00      	ldr	r7, [sp, #0]
 800a8f4:	462b      	mov	r3, r5
 800a8f6:	461d      	mov	r5, r3
 800a8f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8fc:	2a39      	cmp	r2, #57	; 0x39
 800a8fe:	d106      	bne.n	800a90e <_dtoa_r+0x6de>
 800a900:	9a01      	ldr	r2, [sp, #4]
 800a902:	429a      	cmp	r2, r3
 800a904:	d1f7      	bne.n	800a8f6 <_dtoa_r+0x6c6>
 800a906:	9901      	ldr	r1, [sp, #4]
 800a908:	2230      	movs	r2, #48	; 0x30
 800a90a:	3701      	adds	r7, #1
 800a90c:	700a      	strb	r2, [r1, #0]
 800a90e:	781a      	ldrb	r2, [r3, #0]
 800a910:	3201      	adds	r2, #1
 800a912:	701a      	strb	r2, [r3, #0]
 800a914:	e790      	b.n	800a838 <_dtoa_r+0x608>
 800a916:	4ba6      	ldr	r3, [pc, #664]	; (800abb0 <_dtoa_r+0x980>)
 800a918:	2200      	movs	r2, #0
 800a91a:	f7f5 fe8d 	bl	8000638 <__aeabi_dmul>
 800a91e:	2200      	movs	r2, #0
 800a920:	2300      	movs	r3, #0
 800a922:	4606      	mov	r6, r0
 800a924:	460f      	mov	r7, r1
 800a926:	f7f6 f8ef 	bl	8000b08 <__aeabi_dcmpeq>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d09d      	beq.n	800a86a <_dtoa_r+0x63a>
 800a92e:	e7cf      	b.n	800a8d0 <_dtoa_r+0x6a0>
 800a930:	9a08      	ldr	r2, [sp, #32]
 800a932:	2a00      	cmp	r2, #0
 800a934:	f000 80d7 	beq.w	800aae6 <_dtoa_r+0x8b6>
 800a938:	9a06      	ldr	r2, [sp, #24]
 800a93a:	2a01      	cmp	r2, #1
 800a93c:	f300 80ba 	bgt.w	800aab4 <_dtoa_r+0x884>
 800a940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a942:	2a00      	cmp	r2, #0
 800a944:	f000 80b2 	beq.w	800aaac <_dtoa_r+0x87c>
 800a948:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a94c:	9e07      	ldr	r6, [sp, #28]
 800a94e:	9d04      	ldr	r5, [sp, #16]
 800a950:	9a04      	ldr	r2, [sp, #16]
 800a952:	441a      	add	r2, r3
 800a954:	9204      	str	r2, [sp, #16]
 800a956:	9a05      	ldr	r2, [sp, #20]
 800a958:	2101      	movs	r1, #1
 800a95a:	441a      	add	r2, r3
 800a95c:	4620      	mov	r0, r4
 800a95e:	9205      	str	r2, [sp, #20]
 800a960:	f001 f994 	bl	800bc8c <__i2b>
 800a964:	4607      	mov	r7, r0
 800a966:	2d00      	cmp	r5, #0
 800a968:	dd0c      	ble.n	800a984 <_dtoa_r+0x754>
 800a96a:	9b05      	ldr	r3, [sp, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	dd09      	ble.n	800a984 <_dtoa_r+0x754>
 800a970:	42ab      	cmp	r3, r5
 800a972:	9a04      	ldr	r2, [sp, #16]
 800a974:	bfa8      	it	ge
 800a976:	462b      	movge	r3, r5
 800a978:	1ad2      	subs	r2, r2, r3
 800a97a:	9204      	str	r2, [sp, #16]
 800a97c:	9a05      	ldr	r2, [sp, #20]
 800a97e:	1aed      	subs	r5, r5, r3
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	9305      	str	r3, [sp, #20]
 800a984:	9b07      	ldr	r3, [sp, #28]
 800a986:	b31b      	cbz	r3, 800a9d0 <_dtoa_r+0x7a0>
 800a988:	9b08      	ldr	r3, [sp, #32]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 80af 	beq.w	800aaee <_dtoa_r+0x8be>
 800a990:	2e00      	cmp	r6, #0
 800a992:	dd13      	ble.n	800a9bc <_dtoa_r+0x78c>
 800a994:	4639      	mov	r1, r7
 800a996:	4632      	mov	r2, r6
 800a998:	4620      	mov	r0, r4
 800a99a:	f001 fa37 	bl	800be0c <__pow5mult>
 800a99e:	ee18 2a10 	vmov	r2, s16
 800a9a2:	4601      	mov	r1, r0
 800a9a4:	4607      	mov	r7, r0
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f001 f986 	bl	800bcb8 <__multiply>
 800a9ac:	ee18 1a10 	vmov	r1, s16
 800a9b0:	4680      	mov	r8, r0
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f001 f868 	bl	800ba88 <_Bfree>
 800a9b8:	ee08 8a10 	vmov	s16, r8
 800a9bc:	9b07      	ldr	r3, [sp, #28]
 800a9be:	1b9a      	subs	r2, r3, r6
 800a9c0:	d006      	beq.n	800a9d0 <_dtoa_r+0x7a0>
 800a9c2:	ee18 1a10 	vmov	r1, s16
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f001 fa20 	bl	800be0c <__pow5mult>
 800a9cc:	ee08 0a10 	vmov	s16, r0
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f001 f95a 	bl	800bc8c <__i2b>
 800a9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	4606      	mov	r6, r0
 800a9de:	f340 8088 	ble.w	800aaf2 <_dtoa_r+0x8c2>
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	4601      	mov	r1, r0
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f001 fa10 	bl	800be0c <__pow5mult>
 800a9ec:	9b06      	ldr	r3, [sp, #24]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	f340 8081 	ble.w	800aaf8 <_dtoa_r+0x8c8>
 800a9f6:	f04f 0800 	mov.w	r8, #0
 800a9fa:	6933      	ldr	r3, [r6, #16]
 800a9fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa00:	6918      	ldr	r0, [r3, #16]
 800aa02:	f001 f8f3 	bl	800bbec <__hi0bits>
 800aa06:	f1c0 0020 	rsb	r0, r0, #32
 800aa0a:	9b05      	ldr	r3, [sp, #20]
 800aa0c:	4418      	add	r0, r3
 800aa0e:	f010 001f 	ands.w	r0, r0, #31
 800aa12:	f000 8092 	beq.w	800ab3a <_dtoa_r+0x90a>
 800aa16:	f1c0 0320 	rsb	r3, r0, #32
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	f340 808a 	ble.w	800ab34 <_dtoa_r+0x904>
 800aa20:	f1c0 001c 	rsb	r0, r0, #28
 800aa24:	9b04      	ldr	r3, [sp, #16]
 800aa26:	4403      	add	r3, r0
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	9b05      	ldr	r3, [sp, #20]
 800aa2c:	4403      	add	r3, r0
 800aa2e:	4405      	add	r5, r0
 800aa30:	9305      	str	r3, [sp, #20]
 800aa32:	9b04      	ldr	r3, [sp, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dd07      	ble.n	800aa48 <_dtoa_r+0x818>
 800aa38:	ee18 1a10 	vmov	r1, s16
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f001 fa3e 	bl	800bec0 <__lshift>
 800aa44:	ee08 0a10 	vmov	s16, r0
 800aa48:	9b05      	ldr	r3, [sp, #20]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	dd05      	ble.n	800aa5a <_dtoa_r+0x82a>
 800aa4e:	4631      	mov	r1, r6
 800aa50:	461a      	mov	r2, r3
 800aa52:	4620      	mov	r0, r4
 800aa54:	f001 fa34 	bl	800bec0 <__lshift>
 800aa58:	4606      	mov	r6, r0
 800aa5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d06e      	beq.n	800ab3e <_dtoa_r+0x90e>
 800aa60:	ee18 0a10 	vmov	r0, s16
 800aa64:	4631      	mov	r1, r6
 800aa66:	f001 fa9b 	bl	800bfa0 <__mcmp>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	da67      	bge.n	800ab3e <_dtoa_r+0x90e>
 800aa6e:	9b00      	ldr	r3, [sp, #0]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	ee18 1a10 	vmov	r1, s16
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	220a      	movs	r2, #10
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f001 f825 	bl	800bacc <__multadd>
 800aa82:	9b08      	ldr	r3, [sp, #32]
 800aa84:	ee08 0a10 	vmov	s16, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 81b1 	beq.w	800adf0 <_dtoa_r+0xbc0>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	4639      	mov	r1, r7
 800aa92:	220a      	movs	r2, #10
 800aa94:	4620      	mov	r0, r4
 800aa96:	f001 f819 	bl	800bacc <__multadd>
 800aa9a:	9b02      	ldr	r3, [sp, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	f300 808e 	bgt.w	800abc0 <_dtoa_r+0x990>
 800aaa4:	9b06      	ldr	r3, [sp, #24]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	dc51      	bgt.n	800ab4e <_dtoa_r+0x91e>
 800aaaa:	e089      	b.n	800abc0 <_dtoa_r+0x990>
 800aaac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aab2:	e74b      	b.n	800a94c <_dtoa_r+0x71c>
 800aab4:	9b03      	ldr	r3, [sp, #12]
 800aab6:	1e5e      	subs	r6, r3, #1
 800aab8:	9b07      	ldr	r3, [sp, #28]
 800aaba:	42b3      	cmp	r3, r6
 800aabc:	bfbf      	itttt	lt
 800aabe:	9b07      	ldrlt	r3, [sp, #28]
 800aac0:	9607      	strlt	r6, [sp, #28]
 800aac2:	1af2      	sublt	r2, r6, r3
 800aac4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aac6:	bfb6      	itet	lt
 800aac8:	189b      	addlt	r3, r3, r2
 800aaca:	1b9e      	subge	r6, r3, r6
 800aacc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aace:	9b03      	ldr	r3, [sp, #12]
 800aad0:	bfb8      	it	lt
 800aad2:	2600      	movlt	r6, #0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bfb7      	itett	lt
 800aad8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aadc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aae0:	1a9d      	sublt	r5, r3, r2
 800aae2:	2300      	movlt	r3, #0
 800aae4:	e734      	b.n	800a950 <_dtoa_r+0x720>
 800aae6:	9e07      	ldr	r6, [sp, #28]
 800aae8:	9d04      	ldr	r5, [sp, #16]
 800aaea:	9f08      	ldr	r7, [sp, #32]
 800aaec:	e73b      	b.n	800a966 <_dtoa_r+0x736>
 800aaee:	9a07      	ldr	r2, [sp, #28]
 800aaf0:	e767      	b.n	800a9c2 <_dtoa_r+0x792>
 800aaf2:	9b06      	ldr	r3, [sp, #24]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	dc18      	bgt.n	800ab2a <_dtoa_r+0x8fa>
 800aaf8:	f1ba 0f00 	cmp.w	sl, #0
 800aafc:	d115      	bne.n	800ab2a <_dtoa_r+0x8fa>
 800aafe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab02:	b993      	cbnz	r3, 800ab2a <_dtoa_r+0x8fa>
 800ab04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab08:	0d1b      	lsrs	r3, r3, #20
 800ab0a:	051b      	lsls	r3, r3, #20
 800ab0c:	b183      	cbz	r3, 800ab30 <_dtoa_r+0x900>
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	3301      	adds	r3, #1
 800ab12:	9304      	str	r3, [sp, #16]
 800ab14:	9b05      	ldr	r3, [sp, #20]
 800ab16:	3301      	adds	r3, #1
 800ab18:	9305      	str	r3, [sp, #20]
 800ab1a:	f04f 0801 	mov.w	r8, #1
 800ab1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f47f af6a 	bne.w	800a9fa <_dtoa_r+0x7ca>
 800ab26:	2001      	movs	r0, #1
 800ab28:	e76f      	b.n	800aa0a <_dtoa_r+0x7da>
 800ab2a:	f04f 0800 	mov.w	r8, #0
 800ab2e:	e7f6      	b.n	800ab1e <_dtoa_r+0x8ee>
 800ab30:	4698      	mov	r8, r3
 800ab32:	e7f4      	b.n	800ab1e <_dtoa_r+0x8ee>
 800ab34:	f43f af7d 	beq.w	800aa32 <_dtoa_r+0x802>
 800ab38:	4618      	mov	r0, r3
 800ab3a:	301c      	adds	r0, #28
 800ab3c:	e772      	b.n	800aa24 <_dtoa_r+0x7f4>
 800ab3e:	9b03      	ldr	r3, [sp, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	dc37      	bgt.n	800abb4 <_dtoa_r+0x984>
 800ab44:	9b06      	ldr	r3, [sp, #24]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	dd34      	ble.n	800abb4 <_dtoa_r+0x984>
 800ab4a:	9b03      	ldr	r3, [sp, #12]
 800ab4c:	9302      	str	r3, [sp, #8]
 800ab4e:	9b02      	ldr	r3, [sp, #8]
 800ab50:	b96b      	cbnz	r3, 800ab6e <_dtoa_r+0x93e>
 800ab52:	4631      	mov	r1, r6
 800ab54:	2205      	movs	r2, #5
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 ffb8 	bl	800bacc <__multadd>
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	4606      	mov	r6, r0
 800ab60:	ee18 0a10 	vmov	r0, s16
 800ab64:	f001 fa1c 	bl	800bfa0 <__mcmp>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	f73f adbb 	bgt.w	800a6e4 <_dtoa_r+0x4b4>
 800ab6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab70:	9d01      	ldr	r5, [sp, #4]
 800ab72:	43db      	mvns	r3, r3
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	f04f 0800 	mov.w	r8, #0
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 ff83 	bl	800ba88 <_Bfree>
 800ab82:	2f00      	cmp	r7, #0
 800ab84:	f43f aea4 	beq.w	800a8d0 <_dtoa_r+0x6a0>
 800ab88:	f1b8 0f00 	cmp.w	r8, #0
 800ab8c:	d005      	beq.n	800ab9a <_dtoa_r+0x96a>
 800ab8e:	45b8      	cmp	r8, r7
 800ab90:	d003      	beq.n	800ab9a <_dtoa_r+0x96a>
 800ab92:	4641      	mov	r1, r8
 800ab94:	4620      	mov	r0, r4
 800ab96:	f000 ff77 	bl	800ba88 <_Bfree>
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 ff73 	bl	800ba88 <_Bfree>
 800aba2:	e695      	b.n	800a8d0 <_dtoa_r+0x6a0>
 800aba4:	2600      	movs	r6, #0
 800aba6:	4637      	mov	r7, r6
 800aba8:	e7e1      	b.n	800ab6e <_dtoa_r+0x93e>
 800abaa:	9700      	str	r7, [sp, #0]
 800abac:	4637      	mov	r7, r6
 800abae:	e599      	b.n	800a6e4 <_dtoa_r+0x4b4>
 800abb0:	40240000 	.word	0x40240000
 800abb4:	9b08      	ldr	r3, [sp, #32]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f000 80ca 	beq.w	800ad50 <_dtoa_r+0xb20>
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	9302      	str	r3, [sp, #8]
 800abc0:	2d00      	cmp	r5, #0
 800abc2:	dd05      	ble.n	800abd0 <_dtoa_r+0x9a0>
 800abc4:	4639      	mov	r1, r7
 800abc6:	462a      	mov	r2, r5
 800abc8:	4620      	mov	r0, r4
 800abca:	f001 f979 	bl	800bec0 <__lshift>
 800abce:	4607      	mov	r7, r0
 800abd0:	f1b8 0f00 	cmp.w	r8, #0
 800abd4:	d05b      	beq.n	800ac8e <_dtoa_r+0xa5e>
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 ff15 	bl	800ba08 <_Balloc>
 800abde:	4605      	mov	r5, r0
 800abe0:	b928      	cbnz	r0, 800abee <_dtoa_r+0x9be>
 800abe2:	4b87      	ldr	r3, [pc, #540]	; (800ae00 <_dtoa_r+0xbd0>)
 800abe4:	4602      	mov	r2, r0
 800abe6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abea:	f7ff bb3b 	b.w	800a264 <_dtoa_r+0x34>
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	3202      	adds	r2, #2
 800abf2:	0092      	lsls	r2, r2, #2
 800abf4:	f107 010c 	add.w	r1, r7, #12
 800abf8:	300c      	adds	r0, #12
 800abfa:	f000 fef7 	bl	800b9ec <memcpy>
 800abfe:	2201      	movs	r2, #1
 800ac00:	4629      	mov	r1, r5
 800ac02:	4620      	mov	r0, r4
 800ac04:	f001 f95c 	bl	800bec0 <__lshift>
 800ac08:	9b01      	ldr	r3, [sp, #4]
 800ac0a:	f103 0901 	add.w	r9, r3, #1
 800ac0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac12:	4413      	add	r3, r2
 800ac14:	9305      	str	r3, [sp, #20]
 800ac16:	f00a 0301 	and.w	r3, sl, #1
 800ac1a:	46b8      	mov	r8, r7
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	4607      	mov	r7, r0
 800ac20:	4631      	mov	r1, r6
 800ac22:	ee18 0a10 	vmov	r0, s16
 800ac26:	f7ff fa75 	bl	800a114 <quorem>
 800ac2a:	4641      	mov	r1, r8
 800ac2c:	9002      	str	r0, [sp, #8]
 800ac2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac32:	ee18 0a10 	vmov	r0, s16
 800ac36:	f001 f9b3 	bl	800bfa0 <__mcmp>
 800ac3a:	463a      	mov	r2, r7
 800ac3c:	9003      	str	r0, [sp, #12]
 800ac3e:	4631      	mov	r1, r6
 800ac40:	4620      	mov	r0, r4
 800ac42:	f001 f9c9 	bl	800bfd8 <__mdiff>
 800ac46:	68c2      	ldr	r2, [r0, #12]
 800ac48:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	bb02      	cbnz	r2, 800ac92 <_dtoa_r+0xa62>
 800ac50:	4601      	mov	r1, r0
 800ac52:	ee18 0a10 	vmov	r0, s16
 800ac56:	f001 f9a3 	bl	800bfa0 <__mcmp>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	4620      	mov	r0, r4
 800ac60:	9207      	str	r2, [sp, #28]
 800ac62:	f000 ff11 	bl	800ba88 <_Bfree>
 800ac66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac6a:	ea43 0102 	orr.w	r1, r3, r2
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	430b      	orrs	r3, r1
 800ac72:	464d      	mov	r5, r9
 800ac74:	d10f      	bne.n	800ac96 <_dtoa_r+0xa66>
 800ac76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac7a:	d02a      	beq.n	800acd2 <_dtoa_r+0xaa2>
 800ac7c:	9b03      	ldr	r3, [sp, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	dd02      	ble.n	800ac88 <_dtoa_r+0xa58>
 800ac82:	9b02      	ldr	r3, [sp, #8]
 800ac84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ac88:	f88b a000 	strb.w	sl, [fp]
 800ac8c:	e775      	b.n	800ab7a <_dtoa_r+0x94a>
 800ac8e:	4638      	mov	r0, r7
 800ac90:	e7ba      	b.n	800ac08 <_dtoa_r+0x9d8>
 800ac92:	2201      	movs	r2, #1
 800ac94:	e7e2      	b.n	800ac5c <_dtoa_r+0xa2c>
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	db04      	blt.n	800aca6 <_dtoa_r+0xa76>
 800ac9c:	9906      	ldr	r1, [sp, #24]
 800ac9e:	430b      	orrs	r3, r1
 800aca0:	9904      	ldr	r1, [sp, #16]
 800aca2:	430b      	orrs	r3, r1
 800aca4:	d122      	bne.n	800acec <_dtoa_r+0xabc>
 800aca6:	2a00      	cmp	r2, #0
 800aca8:	ddee      	ble.n	800ac88 <_dtoa_r+0xa58>
 800acaa:	ee18 1a10 	vmov	r1, s16
 800acae:	2201      	movs	r2, #1
 800acb0:	4620      	mov	r0, r4
 800acb2:	f001 f905 	bl	800bec0 <__lshift>
 800acb6:	4631      	mov	r1, r6
 800acb8:	ee08 0a10 	vmov	s16, r0
 800acbc:	f001 f970 	bl	800bfa0 <__mcmp>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	dc03      	bgt.n	800accc <_dtoa_r+0xa9c>
 800acc4:	d1e0      	bne.n	800ac88 <_dtoa_r+0xa58>
 800acc6:	f01a 0f01 	tst.w	sl, #1
 800acca:	d0dd      	beq.n	800ac88 <_dtoa_r+0xa58>
 800accc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acd0:	d1d7      	bne.n	800ac82 <_dtoa_r+0xa52>
 800acd2:	2339      	movs	r3, #57	; 0x39
 800acd4:	f88b 3000 	strb.w	r3, [fp]
 800acd8:	462b      	mov	r3, r5
 800acda:	461d      	mov	r5, r3
 800acdc:	3b01      	subs	r3, #1
 800acde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ace2:	2a39      	cmp	r2, #57	; 0x39
 800ace4:	d071      	beq.n	800adca <_dtoa_r+0xb9a>
 800ace6:	3201      	adds	r2, #1
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	e746      	b.n	800ab7a <_dtoa_r+0x94a>
 800acec:	2a00      	cmp	r2, #0
 800acee:	dd07      	ble.n	800ad00 <_dtoa_r+0xad0>
 800acf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acf4:	d0ed      	beq.n	800acd2 <_dtoa_r+0xaa2>
 800acf6:	f10a 0301 	add.w	r3, sl, #1
 800acfa:	f88b 3000 	strb.w	r3, [fp]
 800acfe:	e73c      	b.n	800ab7a <_dtoa_r+0x94a>
 800ad00:	9b05      	ldr	r3, [sp, #20]
 800ad02:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad06:	4599      	cmp	r9, r3
 800ad08:	d047      	beq.n	800ad9a <_dtoa_r+0xb6a>
 800ad0a:	ee18 1a10 	vmov	r1, s16
 800ad0e:	2300      	movs	r3, #0
 800ad10:	220a      	movs	r2, #10
 800ad12:	4620      	mov	r0, r4
 800ad14:	f000 feda 	bl	800bacc <__multadd>
 800ad18:	45b8      	cmp	r8, r7
 800ad1a:	ee08 0a10 	vmov	s16, r0
 800ad1e:	f04f 0300 	mov.w	r3, #0
 800ad22:	f04f 020a 	mov.w	r2, #10
 800ad26:	4641      	mov	r1, r8
 800ad28:	4620      	mov	r0, r4
 800ad2a:	d106      	bne.n	800ad3a <_dtoa_r+0xb0a>
 800ad2c:	f000 fece 	bl	800bacc <__multadd>
 800ad30:	4680      	mov	r8, r0
 800ad32:	4607      	mov	r7, r0
 800ad34:	f109 0901 	add.w	r9, r9, #1
 800ad38:	e772      	b.n	800ac20 <_dtoa_r+0x9f0>
 800ad3a:	f000 fec7 	bl	800bacc <__multadd>
 800ad3e:	4639      	mov	r1, r7
 800ad40:	4680      	mov	r8, r0
 800ad42:	2300      	movs	r3, #0
 800ad44:	220a      	movs	r2, #10
 800ad46:	4620      	mov	r0, r4
 800ad48:	f000 fec0 	bl	800bacc <__multadd>
 800ad4c:	4607      	mov	r7, r0
 800ad4e:	e7f1      	b.n	800ad34 <_dtoa_r+0xb04>
 800ad50:	9b03      	ldr	r3, [sp, #12]
 800ad52:	9302      	str	r3, [sp, #8]
 800ad54:	9d01      	ldr	r5, [sp, #4]
 800ad56:	ee18 0a10 	vmov	r0, s16
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	f7ff f9da 	bl	800a114 <quorem>
 800ad60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad64:	9b01      	ldr	r3, [sp, #4]
 800ad66:	f805 ab01 	strb.w	sl, [r5], #1
 800ad6a:	1aea      	subs	r2, r5, r3
 800ad6c:	9b02      	ldr	r3, [sp, #8]
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	dd09      	ble.n	800ad86 <_dtoa_r+0xb56>
 800ad72:	ee18 1a10 	vmov	r1, s16
 800ad76:	2300      	movs	r3, #0
 800ad78:	220a      	movs	r2, #10
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 fea6 	bl	800bacc <__multadd>
 800ad80:	ee08 0a10 	vmov	s16, r0
 800ad84:	e7e7      	b.n	800ad56 <_dtoa_r+0xb26>
 800ad86:	9b02      	ldr	r3, [sp, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	bfc8      	it	gt
 800ad8c:	461d      	movgt	r5, r3
 800ad8e:	9b01      	ldr	r3, [sp, #4]
 800ad90:	bfd8      	it	le
 800ad92:	2501      	movle	r5, #1
 800ad94:	441d      	add	r5, r3
 800ad96:	f04f 0800 	mov.w	r8, #0
 800ad9a:	ee18 1a10 	vmov	r1, s16
 800ad9e:	2201      	movs	r2, #1
 800ada0:	4620      	mov	r0, r4
 800ada2:	f001 f88d 	bl	800bec0 <__lshift>
 800ada6:	4631      	mov	r1, r6
 800ada8:	ee08 0a10 	vmov	s16, r0
 800adac:	f001 f8f8 	bl	800bfa0 <__mcmp>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	dc91      	bgt.n	800acd8 <_dtoa_r+0xaa8>
 800adb4:	d102      	bne.n	800adbc <_dtoa_r+0xb8c>
 800adb6:	f01a 0f01 	tst.w	sl, #1
 800adba:	d18d      	bne.n	800acd8 <_dtoa_r+0xaa8>
 800adbc:	462b      	mov	r3, r5
 800adbe:	461d      	mov	r5, r3
 800adc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adc4:	2a30      	cmp	r2, #48	; 0x30
 800adc6:	d0fa      	beq.n	800adbe <_dtoa_r+0xb8e>
 800adc8:	e6d7      	b.n	800ab7a <_dtoa_r+0x94a>
 800adca:	9a01      	ldr	r2, [sp, #4]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d184      	bne.n	800acda <_dtoa_r+0xaaa>
 800add0:	9b00      	ldr	r3, [sp, #0]
 800add2:	3301      	adds	r3, #1
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	2331      	movs	r3, #49	; 0x31
 800add8:	7013      	strb	r3, [r2, #0]
 800adda:	e6ce      	b.n	800ab7a <_dtoa_r+0x94a>
 800addc:	4b09      	ldr	r3, [pc, #36]	; (800ae04 <_dtoa_r+0xbd4>)
 800adde:	f7ff ba95 	b.w	800a30c <_dtoa_r+0xdc>
 800ade2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f47f aa6e 	bne.w	800a2c6 <_dtoa_r+0x96>
 800adea:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <_dtoa_r+0xbd8>)
 800adec:	f7ff ba8e 	b.w	800a30c <_dtoa_r+0xdc>
 800adf0:	9b02      	ldr	r3, [sp, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	dcae      	bgt.n	800ad54 <_dtoa_r+0xb24>
 800adf6:	9b06      	ldr	r3, [sp, #24]
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	f73f aea8 	bgt.w	800ab4e <_dtoa_r+0x91e>
 800adfe:	e7a9      	b.n	800ad54 <_dtoa_r+0xb24>
 800ae00:	0800e168 	.word	0x0800e168
 800ae04:	0800e3c9 	.word	0x0800e3c9
 800ae08:	0800e0e9 	.word	0x0800e0e9

0800ae0c <__sflush_r>:
 800ae0c:	898a      	ldrh	r2, [r1, #12]
 800ae0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae12:	4605      	mov	r5, r0
 800ae14:	0710      	lsls	r0, r2, #28
 800ae16:	460c      	mov	r4, r1
 800ae18:	d458      	bmi.n	800aecc <__sflush_r+0xc0>
 800ae1a:	684b      	ldr	r3, [r1, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	dc05      	bgt.n	800ae2c <__sflush_r+0x20>
 800ae20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	dc02      	bgt.n	800ae2c <__sflush_r+0x20>
 800ae26:	2000      	movs	r0, #0
 800ae28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae2e:	2e00      	cmp	r6, #0
 800ae30:	d0f9      	beq.n	800ae26 <__sflush_r+0x1a>
 800ae32:	2300      	movs	r3, #0
 800ae34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae38:	682f      	ldr	r7, [r5, #0]
 800ae3a:	602b      	str	r3, [r5, #0]
 800ae3c:	d032      	beq.n	800aea4 <__sflush_r+0x98>
 800ae3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	075a      	lsls	r2, r3, #29
 800ae44:	d505      	bpl.n	800ae52 <__sflush_r+0x46>
 800ae46:	6863      	ldr	r3, [r4, #4]
 800ae48:	1ac0      	subs	r0, r0, r3
 800ae4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae4c:	b10b      	cbz	r3, 800ae52 <__sflush_r+0x46>
 800ae4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae50:	1ac0      	subs	r0, r0, r3
 800ae52:	2300      	movs	r3, #0
 800ae54:	4602      	mov	r2, r0
 800ae56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae58:	6a21      	ldr	r1, [r4, #32]
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	47b0      	blx	r6
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	d106      	bne.n	800ae72 <__sflush_r+0x66>
 800ae64:	6829      	ldr	r1, [r5, #0]
 800ae66:	291d      	cmp	r1, #29
 800ae68:	d82c      	bhi.n	800aec4 <__sflush_r+0xb8>
 800ae6a:	4a2a      	ldr	r2, [pc, #168]	; (800af14 <__sflush_r+0x108>)
 800ae6c:	40ca      	lsrs	r2, r1
 800ae6e:	07d6      	lsls	r6, r2, #31
 800ae70:	d528      	bpl.n	800aec4 <__sflush_r+0xb8>
 800ae72:	2200      	movs	r2, #0
 800ae74:	6062      	str	r2, [r4, #4]
 800ae76:	04d9      	lsls	r1, r3, #19
 800ae78:	6922      	ldr	r2, [r4, #16]
 800ae7a:	6022      	str	r2, [r4, #0]
 800ae7c:	d504      	bpl.n	800ae88 <__sflush_r+0x7c>
 800ae7e:	1c42      	adds	r2, r0, #1
 800ae80:	d101      	bne.n	800ae86 <__sflush_r+0x7a>
 800ae82:	682b      	ldr	r3, [r5, #0]
 800ae84:	b903      	cbnz	r3, 800ae88 <__sflush_r+0x7c>
 800ae86:	6560      	str	r0, [r4, #84]	; 0x54
 800ae88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae8a:	602f      	str	r7, [r5, #0]
 800ae8c:	2900      	cmp	r1, #0
 800ae8e:	d0ca      	beq.n	800ae26 <__sflush_r+0x1a>
 800ae90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae94:	4299      	cmp	r1, r3
 800ae96:	d002      	beq.n	800ae9e <__sflush_r+0x92>
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f001 fa8d 	bl	800c3b8 <_free_r>
 800ae9e:	2000      	movs	r0, #0
 800aea0:	6360      	str	r0, [r4, #52]	; 0x34
 800aea2:	e7c1      	b.n	800ae28 <__sflush_r+0x1c>
 800aea4:	6a21      	ldr	r1, [r4, #32]
 800aea6:	2301      	movs	r3, #1
 800aea8:	4628      	mov	r0, r5
 800aeaa:	47b0      	blx	r6
 800aeac:	1c41      	adds	r1, r0, #1
 800aeae:	d1c7      	bne.n	800ae40 <__sflush_r+0x34>
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0c4      	beq.n	800ae40 <__sflush_r+0x34>
 800aeb6:	2b1d      	cmp	r3, #29
 800aeb8:	d001      	beq.n	800aebe <__sflush_r+0xb2>
 800aeba:	2b16      	cmp	r3, #22
 800aebc:	d101      	bne.n	800aec2 <__sflush_r+0xb6>
 800aebe:	602f      	str	r7, [r5, #0]
 800aec0:	e7b1      	b.n	800ae26 <__sflush_r+0x1a>
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	e7ad      	b.n	800ae28 <__sflush_r+0x1c>
 800aecc:	690f      	ldr	r7, [r1, #16]
 800aece:	2f00      	cmp	r7, #0
 800aed0:	d0a9      	beq.n	800ae26 <__sflush_r+0x1a>
 800aed2:	0793      	lsls	r3, r2, #30
 800aed4:	680e      	ldr	r6, [r1, #0]
 800aed6:	bf08      	it	eq
 800aed8:	694b      	ldreq	r3, [r1, #20]
 800aeda:	600f      	str	r7, [r1, #0]
 800aedc:	bf18      	it	ne
 800aede:	2300      	movne	r3, #0
 800aee0:	eba6 0807 	sub.w	r8, r6, r7
 800aee4:	608b      	str	r3, [r1, #8]
 800aee6:	f1b8 0f00 	cmp.w	r8, #0
 800aeea:	dd9c      	ble.n	800ae26 <__sflush_r+0x1a>
 800aeec:	6a21      	ldr	r1, [r4, #32]
 800aeee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aef0:	4643      	mov	r3, r8
 800aef2:	463a      	mov	r2, r7
 800aef4:	4628      	mov	r0, r5
 800aef6:	47b0      	blx	r6
 800aef8:	2800      	cmp	r0, #0
 800aefa:	dc06      	bgt.n	800af0a <__sflush_r+0xfe>
 800aefc:	89a3      	ldrh	r3, [r4, #12]
 800aefe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af02:	81a3      	strh	r3, [r4, #12]
 800af04:	f04f 30ff 	mov.w	r0, #4294967295
 800af08:	e78e      	b.n	800ae28 <__sflush_r+0x1c>
 800af0a:	4407      	add	r7, r0
 800af0c:	eba8 0800 	sub.w	r8, r8, r0
 800af10:	e7e9      	b.n	800aee6 <__sflush_r+0xda>
 800af12:	bf00      	nop
 800af14:	20400001 	.word	0x20400001

0800af18 <_fflush_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	690b      	ldr	r3, [r1, #16]
 800af1c:	4605      	mov	r5, r0
 800af1e:	460c      	mov	r4, r1
 800af20:	b913      	cbnz	r3, 800af28 <_fflush_r+0x10>
 800af22:	2500      	movs	r5, #0
 800af24:	4628      	mov	r0, r5
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	b118      	cbz	r0, 800af32 <_fflush_r+0x1a>
 800af2a:	6983      	ldr	r3, [r0, #24]
 800af2c:	b90b      	cbnz	r3, 800af32 <_fflush_r+0x1a>
 800af2e:	f000 f899 	bl	800b064 <__sinit>
 800af32:	4b14      	ldr	r3, [pc, #80]	; (800af84 <_fflush_r+0x6c>)
 800af34:	429c      	cmp	r4, r3
 800af36:	d11b      	bne.n	800af70 <_fflush_r+0x58>
 800af38:	686c      	ldr	r4, [r5, #4]
 800af3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d0ef      	beq.n	800af22 <_fflush_r+0xa>
 800af42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af44:	07d0      	lsls	r0, r2, #31
 800af46:	d404      	bmi.n	800af52 <_fflush_r+0x3a>
 800af48:	0599      	lsls	r1, r3, #22
 800af4a:	d402      	bmi.n	800af52 <_fflush_r+0x3a>
 800af4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af4e:	f000 fcb8 	bl	800b8c2 <__retarget_lock_acquire_recursive>
 800af52:	4628      	mov	r0, r5
 800af54:	4621      	mov	r1, r4
 800af56:	f7ff ff59 	bl	800ae0c <__sflush_r>
 800af5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af5c:	07da      	lsls	r2, r3, #31
 800af5e:	4605      	mov	r5, r0
 800af60:	d4e0      	bmi.n	800af24 <_fflush_r+0xc>
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	059b      	lsls	r3, r3, #22
 800af66:	d4dd      	bmi.n	800af24 <_fflush_r+0xc>
 800af68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af6a:	f000 fcab 	bl	800b8c4 <__retarget_lock_release_recursive>
 800af6e:	e7d9      	b.n	800af24 <_fflush_r+0xc>
 800af70:	4b05      	ldr	r3, [pc, #20]	; (800af88 <_fflush_r+0x70>)
 800af72:	429c      	cmp	r4, r3
 800af74:	d101      	bne.n	800af7a <_fflush_r+0x62>
 800af76:	68ac      	ldr	r4, [r5, #8]
 800af78:	e7df      	b.n	800af3a <_fflush_r+0x22>
 800af7a:	4b04      	ldr	r3, [pc, #16]	; (800af8c <_fflush_r+0x74>)
 800af7c:	429c      	cmp	r4, r3
 800af7e:	bf08      	it	eq
 800af80:	68ec      	ldreq	r4, [r5, #12]
 800af82:	e7da      	b.n	800af3a <_fflush_r+0x22>
 800af84:	0800e19c 	.word	0x0800e19c
 800af88:	0800e1bc 	.word	0x0800e1bc
 800af8c:	0800e17c 	.word	0x0800e17c

0800af90 <fflush>:
 800af90:	4601      	mov	r1, r0
 800af92:	b920      	cbnz	r0, 800af9e <fflush+0xe>
 800af94:	4b04      	ldr	r3, [pc, #16]	; (800afa8 <fflush+0x18>)
 800af96:	4905      	ldr	r1, [pc, #20]	; (800afac <fflush+0x1c>)
 800af98:	6818      	ldr	r0, [r3, #0]
 800af9a:	f000 b8fe 	b.w	800b19a <_fwalk_reent>
 800af9e:	4b04      	ldr	r3, [pc, #16]	; (800afb0 <fflush+0x20>)
 800afa0:	6818      	ldr	r0, [r3, #0]
 800afa2:	f7ff bfb9 	b.w	800af18 <_fflush_r>
 800afa6:	bf00      	nop
 800afa8:	0800df58 	.word	0x0800df58
 800afac:	0800af19 	.word	0x0800af19
 800afb0:	2000000c 	.word	0x2000000c

0800afb4 <std>:
 800afb4:	2300      	movs	r3, #0
 800afb6:	b510      	push	{r4, lr}
 800afb8:	4604      	mov	r4, r0
 800afba:	e9c0 3300 	strd	r3, r3, [r0]
 800afbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afc2:	6083      	str	r3, [r0, #8]
 800afc4:	8181      	strh	r1, [r0, #12]
 800afc6:	6643      	str	r3, [r0, #100]	; 0x64
 800afc8:	81c2      	strh	r2, [r0, #14]
 800afca:	6183      	str	r3, [r0, #24]
 800afcc:	4619      	mov	r1, r3
 800afce:	2208      	movs	r2, #8
 800afd0:	305c      	adds	r0, #92	; 0x5c
 800afd2:	f7fd f875 	bl	80080c0 <memset>
 800afd6:	4b05      	ldr	r3, [pc, #20]	; (800afec <std+0x38>)
 800afd8:	6263      	str	r3, [r4, #36]	; 0x24
 800afda:	4b05      	ldr	r3, [pc, #20]	; (800aff0 <std+0x3c>)
 800afdc:	62a3      	str	r3, [r4, #40]	; 0x28
 800afde:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <std+0x40>)
 800afe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afe2:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <std+0x44>)
 800afe4:	6224      	str	r4, [r4, #32]
 800afe6:	6323      	str	r3, [r4, #48]	; 0x30
 800afe8:	bd10      	pop	{r4, pc}
 800afea:	bf00      	nop
 800afec:	08009141 	.word	0x08009141
 800aff0:	08009167 	.word	0x08009167
 800aff4:	0800919f 	.word	0x0800919f
 800aff8:	080091c3 	.word	0x080091c3

0800affc <_cleanup_r>:
 800affc:	4901      	ldr	r1, [pc, #4]	; (800b004 <_cleanup_r+0x8>)
 800affe:	f000 b8cc 	b.w	800b19a <_fwalk_reent>
 800b002:	bf00      	nop
 800b004:	0800af19 	.word	0x0800af19

0800b008 <__sfmoreglue>:
 800b008:	b570      	push	{r4, r5, r6, lr}
 800b00a:	2268      	movs	r2, #104	; 0x68
 800b00c:	1e4d      	subs	r5, r1, #1
 800b00e:	4355      	muls	r5, r2
 800b010:	460e      	mov	r6, r1
 800b012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b016:	f001 fa3b 	bl	800c490 <_malloc_r>
 800b01a:	4604      	mov	r4, r0
 800b01c:	b140      	cbz	r0, 800b030 <__sfmoreglue+0x28>
 800b01e:	2100      	movs	r1, #0
 800b020:	e9c0 1600 	strd	r1, r6, [r0]
 800b024:	300c      	adds	r0, #12
 800b026:	60a0      	str	r0, [r4, #8]
 800b028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b02c:	f7fd f848 	bl	80080c0 <memset>
 800b030:	4620      	mov	r0, r4
 800b032:	bd70      	pop	{r4, r5, r6, pc}

0800b034 <__sfp_lock_acquire>:
 800b034:	4801      	ldr	r0, [pc, #4]	; (800b03c <__sfp_lock_acquire+0x8>)
 800b036:	f000 bc44 	b.w	800b8c2 <__retarget_lock_acquire_recursive>
 800b03a:	bf00      	nop
 800b03c:	2000040d 	.word	0x2000040d

0800b040 <__sfp_lock_release>:
 800b040:	4801      	ldr	r0, [pc, #4]	; (800b048 <__sfp_lock_release+0x8>)
 800b042:	f000 bc3f 	b.w	800b8c4 <__retarget_lock_release_recursive>
 800b046:	bf00      	nop
 800b048:	2000040d 	.word	0x2000040d

0800b04c <__sinit_lock_acquire>:
 800b04c:	4801      	ldr	r0, [pc, #4]	; (800b054 <__sinit_lock_acquire+0x8>)
 800b04e:	f000 bc38 	b.w	800b8c2 <__retarget_lock_acquire_recursive>
 800b052:	bf00      	nop
 800b054:	2000040e 	.word	0x2000040e

0800b058 <__sinit_lock_release>:
 800b058:	4801      	ldr	r0, [pc, #4]	; (800b060 <__sinit_lock_release+0x8>)
 800b05a:	f000 bc33 	b.w	800b8c4 <__retarget_lock_release_recursive>
 800b05e:	bf00      	nop
 800b060:	2000040e 	.word	0x2000040e

0800b064 <__sinit>:
 800b064:	b510      	push	{r4, lr}
 800b066:	4604      	mov	r4, r0
 800b068:	f7ff fff0 	bl	800b04c <__sinit_lock_acquire>
 800b06c:	69a3      	ldr	r3, [r4, #24]
 800b06e:	b11b      	cbz	r3, 800b078 <__sinit+0x14>
 800b070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b074:	f7ff bff0 	b.w	800b058 <__sinit_lock_release>
 800b078:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b07c:	6523      	str	r3, [r4, #80]	; 0x50
 800b07e:	4b13      	ldr	r3, [pc, #76]	; (800b0cc <__sinit+0x68>)
 800b080:	4a13      	ldr	r2, [pc, #76]	; (800b0d0 <__sinit+0x6c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	62a2      	str	r2, [r4, #40]	; 0x28
 800b086:	42a3      	cmp	r3, r4
 800b088:	bf04      	itt	eq
 800b08a:	2301      	moveq	r3, #1
 800b08c:	61a3      	streq	r3, [r4, #24]
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 f820 	bl	800b0d4 <__sfp>
 800b094:	6060      	str	r0, [r4, #4]
 800b096:	4620      	mov	r0, r4
 800b098:	f000 f81c 	bl	800b0d4 <__sfp>
 800b09c:	60a0      	str	r0, [r4, #8]
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 f818 	bl	800b0d4 <__sfp>
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	60e0      	str	r0, [r4, #12]
 800b0a8:	2104      	movs	r1, #4
 800b0aa:	6860      	ldr	r0, [r4, #4]
 800b0ac:	f7ff ff82 	bl	800afb4 <std>
 800b0b0:	68a0      	ldr	r0, [r4, #8]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	2109      	movs	r1, #9
 800b0b6:	f7ff ff7d 	bl	800afb4 <std>
 800b0ba:	68e0      	ldr	r0, [r4, #12]
 800b0bc:	2202      	movs	r2, #2
 800b0be:	2112      	movs	r1, #18
 800b0c0:	f7ff ff78 	bl	800afb4 <std>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	61a3      	str	r3, [r4, #24]
 800b0c8:	e7d2      	b.n	800b070 <__sinit+0xc>
 800b0ca:	bf00      	nop
 800b0cc:	0800df58 	.word	0x0800df58
 800b0d0:	0800affd 	.word	0x0800affd

0800b0d4 <__sfp>:
 800b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d6:	4607      	mov	r7, r0
 800b0d8:	f7ff ffac 	bl	800b034 <__sfp_lock_acquire>
 800b0dc:	4b1e      	ldr	r3, [pc, #120]	; (800b158 <__sfp+0x84>)
 800b0de:	681e      	ldr	r6, [r3, #0]
 800b0e0:	69b3      	ldr	r3, [r6, #24]
 800b0e2:	b913      	cbnz	r3, 800b0ea <__sfp+0x16>
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f7ff ffbd 	bl	800b064 <__sinit>
 800b0ea:	3648      	adds	r6, #72	; 0x48
 800b0ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	d503      	bpl.n	800b0fc <__sfp+0x28>
 800b0f4:	6833      	ldr	r3, [r6, #0]
 800b0f6:	b30b      	cbz	r3, 800b13c <__sfp+0x68>
 800b0f8:	6836      	ldr	r6, [r6, #0]
 800b0fa:	e7f7      	b.n	800b0ec <__sfp+0x18>
 800b0fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b100:	b9d5      	cbnz	r5, 800b138 <__sfp+0x64>
 800b102:	4b16      	ldr	r3, [pc, #88]	; (800b15c <__sfp+0x88>)
 800b104:	60e3      	str	r3, [r4, #12]
 800b106:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b10a:	6665      	str	r5, [r4, #100]	; 0x64
 800b10c:	f000 fbd8 	bl	800b8c0 <__retarget_lock_init_recursive>
 800b110:	f7ff ff96 	bl	800b040 <__sfp_lock_release>
 800b114:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b118:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b11c:	6025      	str	r5, [r4, #0]
 800b11e:	61a5      	str	r5, [r4, #24]
 800b120:	2208      	movs	r2, #8
 800b122:	4629      	mov	r1, r5
 800b124:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b128:	f7fc ffca 	bl	80080c0 <memset>
 800b12c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b134:	4620      	mov	r0, r4
 800b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b138:	3468      	adds	r4, #104	; 0x68
 800b13a:	e7d9      	b.n	800b0f0 <__sfp+0x1c>
 800b13c:	2104      	movs	r1, #4
 800b13e:	4638      	mov	r0, r7
 800b140:	f7ff ff62 	bl	800b008 <__sfmoreglue>
 800b144:	4604      	mov	r4, r0
 800b146:	6030      	str	r0, [r6, #0]
 800b148:	2800      	cmp	r0, #0
 800b14a:	d1d5      	bne.n	800b0f8 <__sfp+0x24>
 800b14c:	f7ff ff78 	bl	800b040 <__sfp_lock_release>
 800b150:	230c      	movs	r3, #12
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	e7ee      	b.n	800b134 <__sfp+0x60>
 800b156:	bf00      	nop
 800b158:	0800df58 	.word	0x0800df58
 800b15c:	ffff0001 	.word	0xffff0001

0800b160 <_fwalk>:
 800b160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b164:	460f      	mov	r7, r1
 800b166:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b16a:	2600      	movs	r6, #0
 800b16c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800b170:	f1b8 0801 	subs.w	r8, r8, #1
 800b174:	d505      	bpl.n	800b182 <_fwalk+0x22>
 800b176:	6824      	ldr	r4, [r4, #0]
 800b178:	2c00      	cmp	r4, #0
 800b17a:	d1f7      	bne.n	800b16c <_fwalk+0xc>
 800b17c:	4630      	mov	r0, r6
 800b17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b182:	89ab      	ldrh	r3, [r5, #12]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d906      	bls.n	800b196 <_fwalk+0x36>
 800b188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b18c:	3301      	adds	r3, #1
 800b18e:	d002      	beq.n	800b196 <_fwalk+0x36>
 800b190:	4628      	mov	r0, r5
 800b192:	47b8      	blx	r7
 800b194:	4306      	orrs	r6, r0
 800b196:	3568      	adds	r5, #104	; 0x68
 800b198:	e7ea      	b.n	800b170 <_fwalk+0x10>

0800b19a <_fwalk_reent>:
 800b19a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b19e:	4606      	mov	r6, r0
 800b1a0:	4688      	mov	r8, r1
 800b1a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1a6:	2700      	movs	r7, #0
 800b1a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1ac:	f1b9 0901 	subs.w	r9, r9, #1
 800b1b0:	d505      	bpl.n	800b1be <_fwalk_reent+0x24>
 800b1b2:	6824      	ldr	r4, [r4, #0]
 800b1b4:	2c00      	cmp	r4, #0
 800b1b6:	d1f7      	bne.n	800b1a8 <_fwalk_reent+0xe>
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1be:	89ab      	ldrh	r3, [r5, #12]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d907      	bls.n	800b1d4 <_fwalk_reent+0x3a>
 800b1c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	d003      	beq.n	800b1d4 <_fwalk_reent+0x3a>
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	47c0      	blx	r8
 800b1d2:	4307      	orrs	r7, r0
 800b1d4:	3568      	adds	r5, #104	; 0x68
 800b1d6:	e7e9      	b.n	800b1ac <_fwalk_reent+0x12>

0800b1d8 <rshift>:
 800b1d8:	6903      	ldr	r3, [r0, #16]
 800b1da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1e6:	f100 0414 	add.w	r4, r0, #20
 800b1ea:	dd45      	ble.n	800b278 <rshift+0xa0>
 800b1ec:	f011 011f 	ands.w	r1, r1, #31
 800b1f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1f8:	d10c      	bne.n	800b214 <rshift+0x3c>
 800b1fa:	f100 0710 	add.w	r7, r0, #16
 800b1fe:	4629      	mov	r1, r5
 800b200:	42b1      	cmp	r1, r6
 800b202:	d334      	bcc.n	800b26e <rshift+0x96>
 800b204:	1a9b      	subs	r3, r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	1eea      	subs	r2, r5, #3
 800b20a:	4296      	cmp	r6, r2
 800b20c:	bf38      	it	cc
 800b20e:	2300      	movcc	r3, #0
 800b210:	4423      	add	r3, r4
 800b212:	e015      	b.n	800b240 <rshift+0x68>
 800b214:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b218:	f1c1 0820 	rsb	r8, r1, #32
 800b21c:	40cf      	lsrs	r7, r1
 800b21e:	f105 0e04 	add.w	lr, r5, #4
 800b222:	46a1      	mov	r9, r4
 800b224:	4576      	cmp	r6, lr
 800b226:	46f4      	mov	ip, lr
 800b228:	d815      	bhi.n	800b256 <rshift+0x7e>
 800b22a:	1a9a      	subs	r2, r3, r2
 800b22c:	0092      	lsls	r2, r2, #2
 800b22e:	3a04      	subs	r2, #4
 800b230:	3501      	adds	r5, #1
 800b232:	42ae      	cmp	r6, r5
 800b234:	bf38      	it	cc
 800b236:	2200      	movcc	r2, #0
 800b238:	18a3      	adds	r3, r4, r2
 800b23a:	50a7      	str	r7, [r4, r2]
 800b23c:	b107      	cbz	r7, 800b240 <rshift+0x68>
 800b23e:	3304      	adds	r3, #4
 800b240:	1b1a      	subs	r2, r3, r4
 800b242:	42a3      	cmp	r3, r4
 800b244:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b248:	bf08      	it	eq
 800b24a:	2300      	moveq	r3, #0
 800b24c:	6102      	str	r2, [r0, #16]
 800b24e:	bf08      	it	eq
 800b250:	6143      	streq	r3, [r0, #20]
 800b252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b256:	f8dc c000 	ldr.w	ip, [ip]
 800b25a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b25e:	ea4c 0707 	orr.w	r7, ip, r7
 800b262:	f849 7b04 	str.w	r7, [r9], #4
 800b266:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b26a:	40cf      	lsrs	r7, r1
 800b26c:	e7da      	b.n	800b224 <rshift+0x4c>
 800b26e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b272:	f847 cf04 	str.w	ip, [r7, #4]!
 800b276:	e7c3      	b.n	800b200 <rshift+0x28>
 800b278:	4623      	mov	r3, r4
 800b27a:	e7e1      	b.n	800b240 <rshift+0x68>

0800b27c <__hexdig_fun>:
 800b27c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b280:	2b09      	cmp	r3, #9
 800b282:	d802      	bhi.n	800b28a <__hexdig_fun+0xe>
 800b284:	3820      	subs	r0, #32
 800b286:	b2c0      	uxtb	r0, r0
 800b288:	4770      	bx	lr
 800b28a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b28e:	2b05      	cmp	r3, #5
 800b290:	d801      	bhi.n	800b296 <__hexdig_fun+0x1a>
 800b292:	3847      	subs	r0, #71	; 0x47
 800b294:	e7f7      	b.n	800b286 <__hexdig_fun+0xa>
 800b296:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b29a:	2b05      	cmp	r3, #5
 800b29c:	d801      	bhi.n	800b2a2 <__hexdig_fun+0x26>
 800b29e:	3827      	subs	r0, #39	; 0x27
 800b2a0:	e7f1      	b.n	800b286 <__hexdig_fun+0xa>
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	4770      	bx	lr
	...

0800b2a8 <__gethex>:
 800b2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ac:	ed2d 8b02 	vpush	{d8}
 800b2b0:	b089      	sub	sp, #36	; 0x24
 800b2b2:	ee08 0a10 	vmov	s16, r0
 800b2b6:	9304      	str	r3, [sp, #16]
 800b2b8:	4bb4      	ldr	r3, [pc, #720]	; (800b58c <__gethex+0x2e4>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	468b      	mov	fp, r1
 800b2c2:	4690      	mov	r8, r2
 800b2c4:	f7f4 ffa4 	bl	8000210 <strlen>
 800b2c8:	9b01      	ldr	r3, [sp, #4]
 800b2ca:	f8db 2000 	ldr.w	r2, [fp]
 800b2ce:	4403      	add	r3, r0
 800b2d0:	4682      	mov	sl, r0
 800b2d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b2d6:	9305      	str	r3, [sp, #20]
 800b2d8:	1c93      	adds	r3, r2, #2
 800b2da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b2de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b2e2:	32fe      	adds	r2, #254	; 0xfe
 800b2e4:	18d1      	adds	r1, r2, r3
 800b2e6:	461f      	mov	r7, r3
 800b2e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b2ec:	9100      	str	r1, [sp, #0]
 800b2ee:	2830      	cmp	r0, #48	; 0x30
 800b2f0:	d0f8      	beq.n	800b2e4 <__gethex+0x3c>
 800b2f2:	f7ff ffc3 	bl	800b27c <__hexdig_fun>
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d13a      	bne.n	800b372 <__gethex+0xca>
 800b2fc:	9901      	ldr	r1, [sp, #4]
 800b2fe:	4652      	mov	r2, sl
 800b300:	4638      	mov	r0, r7
 800b302:	f002 f9d9 	bl	800d6b8 <strncmp>
 800b306:	4605      	mov	r5, r0
 800b308:	2800      	cmp	r0, #0
 800b30a:	d168      	bne.n	800b3de <__gethex+0x136>
 800b30c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b310:	eb07 060a 	add.w	r6, r7, sl
 800b314:	f7ff ffb2 	bl	800b27c <__hexdig_fun>
 800b318:	2800      	cmp	r0, #0
 800b31a:	d062      	beq.n	800b3e2 <__gethex+0x13a>
 800b31c:	4633      	mov	r3, r6
 800b31e:	7818      	ldrb	r0, [r3, #0]
 800b320:	2830      	cmp	r0, #48	; 0x30
 800b322:	461f      	mov	r7, r3
 800b324:	f103 0301 	add.w	r3, r3, #1
 800b328:	d0f9      	beq.n	800b31e <__gethex+0x76>
 800b32a:	f7ff ffa7 	bl	800b27c <__hexdig_fun>
 800b32e:	2301      	movs	r3, #1
 800b330:	fab0 f480 	clz	r4, r0
 800b334:	0964      	lsrs	r4, r4, #5
 800b336:	4635      	mov	r5, r6
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	463a      	mov	r2, r7
 800b33c:	4616      	mov	r6, r2
 800b33e:	3201      	adds	r2, #1
 800b340:	7830      	ldrb	r0, [r6, #0]
 800b342:	f7ff ff9b 	bl	800b27c <__hexdig_fun>
 800b346:	2800      	cmp	r0, #0
 800b348:	d1f8      	bne.n	800b33c <__gethex+0x94>
 800b34a:	9901      	ldr	r1, [sp, #4]
 800b34c:	4652      	mov	r2, sl
 800b34e:	4630      	mov	r0, r6
 800b350:	f002 f9b2 	bl	800d6b8 <strncmp>
 800b354:	b980      	cbnz	r0, 800b378 <__gethex+0xd0>
 800b356:	b94d      	cbnz	r5, 800b36c <__gethex+0xc4>
 800b358:	eb06 050a 	add.w	r5, r6, sl
 800b35c:	462a      	mov	r2, r5
 800b35e:	4616      	mov	r6, r2
 800b360:	3201      	adds	r2, #1
 800b362:	7830      	ldrb	r0, [r6, #0]
 800b364:	f7ff ff8a 	bl	800b27c <__hexdig_fun>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d1f8      	bne.n	800b35e <__gethex+0xb6>
 800b36c:	1bad      	subs	r5, r5, r6
 800b36e:	00ad      	lsls	r5, r5, #2
 800b370:	e004      	b.n	800b37c <__gethex+0xd4>
 800b372:	2400      	movs	r4, #0
 800b374:	4625      	mov	r5, r4
 800b376:	e7e0      	b.n	800b33a <__gethex+0x92>
 800b378:	2d00      	cmp	r5, #0
 800b37a:	d1f7      	bne.n	800b36c <__gethex+0xc4>
 800b37c:	7833      	ldrb	r3, [r6, #0]
 800b37e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b382:	2b50      	cmp	r3, #80	; 0x50
 800b384:	d13b      	bne.n	800b3fe <__gethex+0x156>
 800b386:	7873      	ldrb	r3, [r6, #1]
 800b388:	2b2b      	cmp	r3, #43	; 0x2b
 800b38a:	d02c      	beq.n	800b3e6 <__gethex+0x13e>
 800b38c:	2b2d      	cmp	r3, #45	; 0x2d
 800b38e:	d02e      	beq.n	800b3ee <__gethex+0x146>
 800b390:	1c71      	adds	r1, r6, #1
 800b392:	f04f 0900 	mov.w	r9, #0
 800b396:	7808      	ldrb	r0, [r1, #0]
 800b398:	f7ff ff70 	bl	800b27c <__hexdig_fun>
 800b39c:	1e43      	subs	r3, r0, #1
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	2b18      	cmp	r3, #24
 800b3a2:	d82c      	bhi.n	800b3fe <__gethex+0x156>
 800b3a4:	f1a0 0210 	sub.w	r2, r0, #16
 800b3a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b3ac:	f7ff ff66 	bl	800b27c <__hexdig_fun>
 800b3b0:	1e43      	subs	r3, r0, #1
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b18      	cmp	r3, #24
 800b3b6:	d91d      	bls.n	800b3f4 <__gethex+0x14c>
 800b3b8:	f1b9 0f00 	cmp.w	r9, #0
 800b3bc:	d000      	beq.n	800b3c0 <__gethex+0x118>
 800b3be:	4252      	negs	r2, r2
 800b3c0:	4415      	add	r5, r2
 800b3c2:	f8cb 1000 	str.w	r1, [fp]
 800b3c6:	b1e4      	cbz	r4, 800b402 <__gethex+0x15a>
 800b3c8:	9b00      	ldr	r3, [sp, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	bf14      	ite	ne
 800b3ce:	2700      	movne	r7, #0
 800b3d0:	2706      	moveq	r7, #6
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	b009      	add	sp, #36	; 0x24
 800b3d6:	ecbd 8b02 	vpop	{d8}
 800b3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3de:	463e      	mov	r6, r7
 800b3e0:	4625      	mov	r5, r4
 800b3e2:	2401      	movs	r4, #1
 800b3e4:	e7ca      	b.n	800b37c <__gethex+0xd4>
 800b3e6:	f04f 0900 	mov.w	r9, #0
 800b3ea:	1cb1      	adds	r1, r6, #2
 800b3ec:	e7d3      	b.n	800b396 <__gethex+0xee>
 800b3ee:	f04f 0901 	mov.w	r9, #1
 800b3f2:	e7fa      	b.n	800b3ea <__gethex+0x142>
 800b3f4:	230a      	movs	r3, #10
 800b3f6:	fb03 0202 	mla	r2, r3, r2, r0
 800b3fa:	3a10      	subs	r2, #16
 800b3fc:	e7d4      	b.n	800b3a8 <__gethex+0x100>
 800b3fe:	4631      	mov	r1, r6
 800b400:	e7df      	b.n	800b3c2 <__gethex+0x11a>
 800b402:	1bf3      	subs	r3, r6, r7
 800b404:	3b01      	subs	r3, #1
 800b406:	4621      	mov	r1, r4
 800b408:	2b07      	cmp	r3, #7
 800b40a:	dc0b      	bgt.n	800b424 <__gethex+0x17c>
 800b40c:	ee18 0a10 	vmov	r0, s16
 800b410:	f000 fafa 	bl	800ba08 <_Balloc>
 800b414:	4604      	mov	r4, r0
 800b416:	b940      	cbnz	r0, 800b42a <__gethex+0x182>
 800b418:	4b5d      	ldr	r3, [pc, #372]	; (800b590 <__gethex+0x2e8>)
 800b41a:	4602      	mov	r2, r0
 800b41c:	21de      	movs	r1, #222	; 0xde
 800b41e:	485d      	ldr	r0, [pc, #372]	; (800b594 <__gethex+0x2ec>)
 800b420:	f002 fab2 	bl	800d988 <__assert_func>
 800b424:	3101      	adds	r1, #1
 800b426:	105b      	asrs	r3, r3, #1
 800b428:	e7ee      	b.n	800b408 <__gethex+0x160>
 800b42a:	f100 0914 	add.w	r9, r0, #20
 800b42e:	f04f 0b00 	mov.w	fp, #0
 800b432:	f1ca 0301 	rsb	r3, sl, #1
 800b436:	f8cd 9008 	str.w	r9, [sp, #8]
 800b43a:	f8cd b000 	str.w	fp, [sp]
 800b43e:	9306      	str	r3, [sp, #24]
 800b440:	42b7      	cmp	r7, r6
 800b442:	d340      	bcc.n	800b4c6 <__gethex+0x21e>
 800b444:	9802      	ldr	r0, [sp, #8]
 800b446:	9b00      	ldr	r3, [sp, #0]
 800b448:	f840 3b04 	str.w	r3, [r0], #4
 800b44c:	eba0 0009 	sub.w	r0, r0, r9
 800b450:	1080      	asrs	r0, r0, #2
 800b452:	0146      	lsls	r6, r0, #5
 800b454:	6120      	str	r0, [r4, #16]
 800b456:	4618      	mov	r0, r3
 800b458:	f000 fbc8 	bl	800bbec <__hi0bits>
 800b45c:	1a30      	subs	r0, r6, r0
 800b45e:	f8d8 6000 	ldr.w	r6, [r8]
 800b462:	42b0      	cmp	r0, r6
 800b464:	dd63      	ble.n	800b52e <__gethex+0x286>
 800b466:	1b87      	subs	r7, r0, r6
 800b468:	4639      	mov	r1, r7
 800b46a:	4620      	mov	r0, r4
 800b46c:	f000 ff6c 	bl	800c348 <__any_on>
 800b470:	4682      	mov	sl, r0
 800b472:	b1a8      	cbz	r0, 800b4a0 <__gethex+0x1f8>
 800b474:	1e7b      	subs	r3, r7, #1
 800b476:	1159      	asrs	r1, r3, #5
 800b478:	f003 021f 	and.w	r2, r3, #31
 800b47c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b480:	f04f 0a01 	mov.w	sl, #1
 800b484:	fa0a f202 	lsl.w	r2, sl, r2
 800b488:	420a      	tst	r2, r1
 800b48a:	d009      	beq.n	800b4a0 <__gethex+0x1f8>
 800b48c:	4553      	cmp	r3, sl
 800b48e:	dd05      	ble.n	800b49c <__gethex+0x1f4>
 800b490:	1eb9      	subs	r1, r7, #2
 800b492:	4620      	mov	r0, r4
 800b494:	f000 ff58 	bl	800c348 <__any_on>
 800b498:	2800      	cmp	r0, #0
 800b49a:	d145      	bne.n	800b528 <__gethex+0x280>
 800b49c:	f04f 0a02 	mov.w	sl, #2
 800b4a0:	4639      	mov	r1, r7
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f7ff fe98 	bl	800b1d8 <rshift>
 800b4a8:	443d      	add	r5, r7
 800b4aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4ae:	42ab      	cmp	r3, r5
 800b4b0:	da4c      	bge.n	800b54c <__gethex+0x2a4>
 800b4b2:	ee18 0a10 	vmov	r0, s16
 800b4b6:	4621      	mov	r1, r4
 800b4b8:	f000 fae6 	bl	800ba88 <_Bfree>
 800b4bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4be:	2300      	movs	r3, #0
 800b4c0:	6013      	str	r3, [r2, #0]
 800b4c2:	27a3      	movs	r7, #163	; 0xa3
 800b4c4:	e785      	b.n	800b3d2 <__gethex+0x12a>
 800b4c6:	1e73      	subs	r3, r6, #1
 800b4c8:	9a05      	ldr	r2, [sp, #20]
 800b4ca:	9303      	str	r3, [sp, #12]
 800b4cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d019      	beq.n	800b508 <__gethex+0x260>
 800b4d4:	f1bb 0f20 	cmp.w	fp, #32
 800b4d8:	d107      	bne.n	800b4ea <__gethex+0x242>
 800b4da:	9b02      	ldr	r3, [sp, #8]
 800b4dc:	9a00      	ldr	r2, [sp, #0]
 800b4de:	f843 2b04 	str.w	r2, [r3], #4
 800b4e2:	9302      	str	r3, [sp, #8]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	469b      	mov	fp, r3
 800b4ea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b4ee:	f7ff fec5 	bl	800b27c <__hexdig_fun>
 800b4f2:	9b00      	ldr	r3, [sp, #0]
 800b4f4:	f000 000f 	and.w	r0, r0, #15
 800b4f8:	fa00 f00b 	lsl.w	r0, r0, fp
 800b4fc:	4303      	orrs	r3, r0
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	f10b 0b04 	add.w	fp, fp, #4
 800b504:	9b03      	ldr	r3, [sp, #12]
 800b506:	e00d      	b.n	800b524 <__gethex+0x27c>
 800b508:	9b03      	ldr	r3, [sp, #12]
 800b50a:	9a06      	ldr	r2, [sp, #24]
 800b50c:	4413      	add	r3, r2
 800b50e:	42bb      	cmp	r3, r7
 800b510:	d3e0      	bcc.n	800b4d4 <__gethex+0x22c>
 800b512:	4618      	mov	r0, r3
 800b514:	9901      	ldr	r1, [sp, #4]
 800b516:	9307      	str	r3, [sp, #28]
 800b518:	4652      	mov	r2, sl
 800b51a:	f002 f8cd 	bl	800d6b8 <strncmp>
 800b51e:	9b07      	ldr	r3, [sp, #28]
 800b520:	2800      	cmp	r0, #0
 800b522:	d1d7      	bne.n	800b4d4 <__gethex+0x22c>
 800b524:	461e      	mov	r6, r3
 800b526:	e78b      	b.n	800b440 <__gethex+0x198>
 800b528:	f04f 0a03 	mov.w	sl, #3
 800b52c:	e7b8      	b.n	800b4a0 <__gethex+0x1f8>
 800b52e:	da0a      	bge.n	800b546 <__gethex+0x29e>
 800b530:	1a37      	subs	r7, r6, r0
 800b532:	4621      	mov	r1, r4
 800b534:	ee18 0a10 	vmov	r0, s16
 800b538:	463a      	mov	r2, r7
 800b53a:	f000 fcc1 	bl	800bec0 <__lshift>
 800b53e:	1bed      	subs	r5, r5, r7
 800b540:	4604      	mov	r4, r0
 800b542:	f100 0914 	add.w	r9, r0, #20
 800b546:	f04f 0a00 	mov.w	sl, #0
 800b54a:	e7ae      	b.n	800b4aa <__gethex+0x202>
 800b54c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b550:	42a8      	cmp	r0, r5
 800b552:	dd72      	ble.n	800b63a <__gethex+0x392>
 800b554:	1b45      	subs	r5, r0, r5
 800b556:	42ae      	cmp	r6, r5
 800b558:	dc36      	bgt.n	800b5c8 <__gethex+0x320>
 800b55a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d02a      	beq.n	800b5b8 <__gethex+0x310>
 800b562:	2b03      	cmp	r3, #3
 800b564:	d02c      	beq.n	800b5c0 <__gethex+0x318>
 800b566:	2b01      	cmp	r3, #1
 800b568:	d11c      	bne.n	800b5a4 <__gethex+0x2fc>
 800b56a:	42ae      	cmp	r6, r5
 800b56c:	d11a      	bne.n	800b5a4 <__gethex+0x2fc>
 800b56e:	2e01      	cmp	r6, #1
 800b570:	d112      	bne.n	800b598 <__gethex+0x2f0>
 800b572:	9a04      	ldr	r2, [sp, #16]
 800b574:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b578:	6013      	str	r3, [r2, #0]
 800b57a:	2301      	movs	r3, #1
 800b57c:	6123      	str	r3, [r4, #16]
 800b57e:	f8c9 3000 	str.w	r3, [r9]
 800b582:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b584:	2762      	movs	r7, #98	; 0x62
 800b586:	601c      	str	r4, [r3, #0]
 800b588:	e723      	b.n	800b3d2 <__gethex+0x12a>
 800b58a:	bf00      	nop
 800b58c:	0800e244 	.word	0x0800e244
 800b590:	0800e168 	.word	0x0800e168
 800b594:	0800e1dc 	.word	0x0800e1dc
 800b598:	1e71      	subs	r1, r6, #1
 800b59a:	4620      	mov	r0, r4
 800b59c:	f000 fed4 	bl	800c348 <__any_on>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d1e6      	bne.n	800b572 <__gethex+0x2ca>
 800b5a4:	ee18 0a10 	vmov	r0, s16
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	f000 fa6d 	bl	800ba88 <_Bfree>
 800b5ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	6013      	str	r3, [r2, #0]
 800b5b4:	2750      	movs	r7, #80	; 0x50
 800b5b6:	e70c      	b.n	800b3d2 <__gethex+0x12a>
 800b5b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1f2      	bne.n	800b5a4 <__gethex+0x2fc>
 800b5be:	e7d8      	b.n	800b572 <__gethex+0x2ca>
 800b5c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1d5      	bne.n	800b572 <__gethex+0x2ca>
 800b5c6:	e7ed      	b.n	800b5a4 <__gethex+0x2fc>
 800b5c8:	1e6f      	subs	r7, r5, #1
 800b5ca:	f1ba 0f00 	cmp.w	sl, #0
 800b5ce:	d131      	bne.n	800b634 <__gethex+0x38c>
 800b5d0:	b127      	cbz	r7, 800b5dc <__gethex+0x334>
 800b5d2:	4639      	mov	r1, r7
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f000 feb7 	bl	800c348 <__any_on>
 800b5da:	4682      	mov	sl, r0
 800b5dc:	117b      	asrs	r3, r7, #5
 800b5de:	2101      	movs	r1, #1
 800b5e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b5e4:	f007 071f 	and.w	r7, r7, #31
 800b5e8:	fa01 f707 	lsl.w	r7, r1, r7
 800b5ec:	421f      	tst	r7, r3
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	bf18      	it	ne
 800b5f4:	f04a 0a02 	orrne.w	sl, sl, #2
 800b5f8:	1b76      	subs	r6, r6, r5
 800b5fa:	f7ff fded 	bl	800b1d8 <rshift>
 800b5fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b602:	2702      	movs	r7, #2
 800b604:	f1ba 0f00 	cmp.w	sl, #0
 800b608:	d048      	beq.n	800b69c <__gethex+0x3f4>
 800b60a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b60e:	2b02      	cmp	r3, #2
 800b610:	d015      	beq.n	800b63e <__gethex+0x396>
 800b612:	2b03      	cmp	r3, #3
 800b614:	d017      	beq.n	800b646 <__gethex+0x39e>
 800b616:	2b01      	cmp	r3, #1
 800b618:	d109      	bne.n	800b62e <__gethex+0x386>
 800b61a:	f01a 0f02 	tst.w	sl, #2
 800b61e:	d006      	beq.n	800b62e <__gethex+0x386>
 800b620:	f8d9 0000 	ldr.w	r0, [r9]
 800b624:	ea4a 0a00 	orr.w	sl, sl, r0
 800b628:	f01a 0f01 	tst.w	sl, #1
 800b62c:	d10e      	bne.n	800b64c <__gethex+0x3a4>
 800b62e:	f047 0710 	orr.w	r7, r7, #16
 800b632:	e033      	b.n	800b69c <__gethex+0x3f4>
 800b634:	f04f 0a01 	mov.w	sl, #1
 800b638:	e7d0      	b.n	800b5dc <__gethex+0x334>
 800b63a:	2701      	movs	r7, #1
 800b63c:	e7e2      	b.n	800b604 <__gethex+0x35c>
 800b63e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b640:	f1c3 0301 	rsb	r3, r3, #1
 800b644:	9315      	str	r3, [sp, #84]	; 0x54
 800b646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d0f0      	beq.n	800b62e <__gethex+0x386>
 800b64c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b650:	f104 0314 	add.w	r3, r4, #20
 800b654:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b658:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b65c:	f04f 0c00 	mov.w	ip, #0
 800b660:	4618      	mov	r0, r3
 800b662:	f853 2b04 	ldr.w	r2, [r3], #4
 800b666:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b66a:	d01c      	beq.n	800b6a6 <__gethex+0x3fe>
 800b66c:	3201      	adds	r2, #1
 800b66e:	6002      	str	r2, [r0, #0]
 800b670:	2f02      	cmp	r7, #2
 800b672:	f104 0314 	add.w	r3, r4, #20
 800b676:	d13f      	bne.n	800b6f8 <__gethex+0x450>
 800b678:	f8d8 2000 	ldr.w	r2, [r8]
 800b67c:	3a01      	subs	r2, #1
 800b67e:	42b2      	cmp	r2, r6
 800b680:	d10a      	bne.n	800b698 <__gethex+0x3f0>
 800b682:	1171      	asrs	r1, r6, #5
 800b684:	2201      	movs	r2, #1
 800b686:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b68a:	f006 061f 	and.w	r6, r6, #31
 800b68e:	fa02 f606 	lsl.w	r6, r2, r6
 800b692:	421e      	tst	r6, r3
 800b694:	bf18      	it	ne
 800b696:	4617      	movne	r7, r2
 800b698:	f047 0720 	orr.w	r7, r7, #32
 800b69c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b69e:	601c      	str	r4, [r3, #0]
 800b6a0:	9b04      	ldr	r3, [sp, #16]
 800b6a2:	601d      	str	r5, [r3, #0]
 800b6a4:	e695      	b.n	800b3d2 <__gethex+0x12a>
 800b6a6:	4299      	cmp	r1, r3
 800b6a8:	f843 cc04 	str.w	ip, [r3, #-4]
 800b6ac:	d8d8      	bhi.n	800b660 <__gethex+0x3b8>
 800b6ae:	68a3      	ldr	r3, [r4, #8]
 800b6b0:	459b      	cmp	fp, r3
 800b6b2:	db19      	blt.n	800b6e8 <__gethex+0x440>
 800b6b4:	6861      	ldr	r1, [r4, #4]
 800b6b6:	ee18 0a10 	vmov	r0, s16
 800b6ba:	3101      	adds	r1, #1
 800b6bc:	f000 f9a4 	bl	800ba08 <_Balloc>
 800b6c0:	4681      	mov	r9, r0
 800b6c2:	b918      	cbnz	r0, 800b6cc <__gethex+0x424>
 800b6c4:	4b1a      	ldr	r3, [pc, #104]	; (800b730 <__gethex+0x488>)
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	2184      	movs	r1, #132	; 0x84
 800b6ca:	e6a8      	b.n	800b41e <__gethex+0x176>
 800b6cc:	6922      	ldr	r2, [r4, #16]
 800b6ce:	3202      	adds	r2, #2
 800b6d0:	f104 010c 	add.w	r1, r4, #12
 800b6d4:	0092      	lsls	r2, r2, #2
 800b6d6:	300c      	adds	r0, #12
 800b6d8:	f000 f988 	bl	800b9ec <memcpy>
 800b6dc:	4621      	mov	r1, r4
 800b6de:	ee18 0a10 	vmov	r0, s16
 800b6e2:	f000 f9d1 	bl	800ba88 <_Bfree>
 800b6e6:	464c      	mov	r4, r9
 800b6e8:	6923      	ldr	r3, [r4, #16]
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6f0:	6122      	str	r2, [r4, #16]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	615a      	str	r2, [r3, #20]
 800b6f6:	e7bb      	b.n	800b670 <__gethex+0x3c8>
 800b6f8:	6922      	ldr	r2, [r4, #16]
 800b6fa:	455a      	cmp	r2, fp
 800b6fc:	dd0b      	ble.n	800b716 <__gethex+0x46e>
 800b6fe:	2101      	movs	r1, #1
 800b700:	4620      	mov	r0, r4
 800b702:	f7ff fd69 	bl	800b1d8 <rshift>
 800b706:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b70a:	3501      	adds	r5, #1
 800b70c:	42ab      	cmp	r3, r5
 800b70e:	f6ff aed0 	blt.w	800b4b2 <__gethex+0x20a>
 800b712:	2701      	movs	r7, #1
 800b714:	e7c0      	b.n	800b698 <__gethex+0x3f0>
 800b716:	f016 061f 	ands.w	r6, r6, #31
 800b71a:	d0fa      	beq.n	800b712 <__gethex+0x46a>
 800b71c:	4453      	add	r3, sl
 800b71e:	f1c6 0620 	rsb	r6, r6, #32
 800b722:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b726:	f000 fa61 	bl	800bbec <__hi0bits>
 800b72a:	42b0      	cmp	r0, r6
 800b72c:	dbe7      	blt.n	800b6fe <__gethex+0x456>
 800b72e:	e7f0      	b.n	800b712 <__gethex+0x46a>
 800b730:	0800e168 	.word	0x0800e168

0800b734 <L_shift>:
 800b734:	f1c2 0208 	rsb	r2, r2, #8
 800b738:	0092      	lsls	r2, r2, #2
 800b73a:	b570      	push	{r4, r5, r6, lr}
 800b73c:	f1c2 0620 	rsb	r6, r2, #32
 800b740:	6843      	ldr	r3, [r0, #4]
 800b742:	6804      	ldr	r4, [r0, #0]
 800b744:	fa03 f506 	lsl.w	r5, r3, r6
 800b748:	432c      	orrs	r4, r5
 800b74a:	40d3      	lsrs	r3, r2
 800b74c:	6004      	str	r4, [r0, #0]
 800b74e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b752:	4288      	cmp	r0, r1
 800b754:	d3f4      	bcc.n	800b740 <L_shift+0xc>
 800b756:	bd70      	pop	{r4, r5, r6, pc}

0800b758 <__match>:
 800b758:	b530      	push	{r4, r5, lr}
 800b75a:	6803      	ldr	r3, [r0, #0]
 800b75c:	3301      	adds	r3, #1
 800b75e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b762:	b914      	cbnz	r4, 800b76a <__match+0x12>
 800b764:	6003      	str	r3, [r0, #0]
 800b766:	2001      	movs	r0, #1
 800b768:	bd30      	pop	{r4, r5, pc}
 800b76a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b76e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b772:	2d19      	cmp	r5, #25
 800b774:	bf98      	it	ls
 800b776:	3220      	addls	r2, #32
 800b778:	42a2      	cmp	r2, r4
 800b77a:	d0f0      	beq.n	800b75e <__match+0x6>
 800b77c:	2000      	movs	r0, #0
 800b77e:	e7f3      	b.n	800b768 <__match+0x10>

0800b780 <__hexnan>:
 800b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	680b      	ldr	r3, [r1, #0]
 800b786:	115e      	asrs	r6, r3, #5
 800b788:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b78c:	f013 031f 	ands.w	r3, r3, #31
 800b790:	b087      	sub	sp, #28
 800b792:	bf18      	it	ne
 800b794:	3604      	addne	r6, #4
 800b796:	2500      	movs	r5, #0
 800b798:	1f37      	subs	r7, r6, #4
 800b79a:	4690      	mov	r8, r2
 800b79c:	6802      	ldr	r2, [r0, #0]
 800b79e:	9301      	str	r3, [sp, #4]
 800b7a0:	4682      	mov	sl, r0
 800b7a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7a6:	46b9      	mov	r9, r7
 800b7a8:	463c      	mov	r4, r7
 800b7aa:	9502      	str	r5, [sp, #8]
 800b7ac:	46ab      	mov	fp, r5
 800b7ae:	7851      	ldrb	r1, [r2, #1]
 800b7b0:	1c53      	adds	r3, r2, #1
 800b7b2:	9303      	str	r3, [sp, #12]
 800b7b4:	b341      	cbz	r1, 800b808 <__hexnan+0x88>
 800b7b6:	4608      	mov	r0, r1
 800b7b8:	9205      	str	r2, [sp, #20]
 800b7ba:	9104      	str	r1, [sp, #16]
 800b7bc:	f7ff fd5e 	bl	800b27c <__hexdig_fun>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d14f      	bne.n	800b864 <__hexnan+0xe4>
 800b7c4:	9904      	ldr	r1, [sp, #16]
 800b7c6:	9a05      	ldr	r2, [sp, #20]
 800b7c8:	2920      	cmp	r1, #32
 800b7ca:	d818      	bhi.n	800b7fe <__hexnan+0x7e>
 800b7cc:	9b02      	ldr	r3, [sp, #8]
 800b7ce:	459b      	cmp	fp, r3
 800b7d0:	dd13      	ble.n	800b7fa <__hexnan+0x7a>
 800b7d2:	454c      	cmp	r4, r9
 800b7d4:	d206      	bcs.n	800b7e4 <__hexnan+0x64>
 800b7d6:	2d07      	cmp	r5, #7
 800b7d8:	dc04      	bgt.n	800b7e4 <__hexnan+0x64>
 800b7da:	462a      	mov	r2, r5
 800b7dc:	4649      	mov	r1, r9
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f7ff ffa8 	bl	800b734 <L_shift>
 800b7e4:	4544      	cmp	r4, r8
 800b7e6:	d950      	bls.n	800b88a <__hexnan+0x10a>
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	f1a4 0904 	sub.w	r9, r4, #4
 800b7ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7f2:	f8cd b008 	str.w	fp, [sp, #8]
 800b7f6:	464c      	mov	r4, r9
 800b7f8:	461d      	mov	r5, r3
 800b7fa:	9a03      	ldr	r2, [sp, #12]
 800b7fc:	e7d7      	b.n	800b7ae <__hexnan+0x2e>
 800b7fe:	2929      	cmp	r1, #41	; 0x29
 800b800:	d156      	bne.n	800b8b0 <__hexnan+0x130>
 800b802:	3202      	adds	r2, #2
 800b804:	f8ca 2000 	str.w	r2, [sl]
 800b808:	f1bb 0f00 	cmp.w	fp, #0
 800b80c:	d050      	beq.n	800b8b0 <__hexnan+0x130>
 800b80e:	454c      	cmp	r4, r9
 800b810:	d206      	bcs.n	800b820 <__hexnan+0xa0>
 800b812:	2d07      	cmp	r5, #7
 800b814:	dc04      	bgt.n	800b820 <__hexnan+0xa0>
 800b816:	462a      	mov	r2, r5
 800b818:	4649      	mov	r1, r9
 800b81a:	4620      	mov	r0, r4
 800b81c:	f7ff ff8a 	bl	800b734 <L_shift>
 800b820:	4544      	cmp	r4, r8
 800b822:	d934      	bls.n	800b88e <__hexnan+0x10e>
 800b824:	f1a8 0204 	sub.w	r2, r8, #4
 800b828:	4623      	mov	r3, r4
 800b82a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b82e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b832:	429f      	cmp	r7, r3
 800b834:	d2f9      	bcs.n	800b82a <__hexnan+0xaa>
 800b836:	1b3b      	subs	r3, r7, r4
 800b838:	f023 0303 	bic.w	r3, r3, #3
 800b83c:	3304      	adds	r3, #4
 800b83e:	3401      	adds	r4, #1
 800b840:	3e03      	subs	r6, #3
 800b842:	42b4      	cmp	r4, r6
 800b844:	bf88      	it	hi
 800b846:	2304      	movhi	r3, #4
 800b848:	4443      	add	r3, r8
 800b84a:	2200      	movs	r2, #0
 800b84c:	f843 2b04 	str.w	r2, [r3], #4
 800b850:	429f      	cmp	r7, r3
 800b852:	d2fb      	bcs.n	800b84c <__hexnan+0xcc>
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	b91b      	cbnz	r3, 800b860 <__hexnan+0xe0>
 800b858:	4547      	cmp	r7, r8
 800b85a:	d127      	bne.n	800b8ac <__hexnan+0x12c>
 800b85c:	2301      	movs	r3, #1
 800b85e:	603b      	str	r3, [r7, #0]
 800b860:	2005      	movs	r0, #5
 800b862:	e026      	b.n	800b8b2 <__hexnan+0x132>
 800b864:	3501      	adds	r5, #1
 800b866:	2d08      	cmp	r5, #8
 800b868:	f10b 0b01 	add.w	fp, fp, #1
 800b86c:	dd06      	ble.n	800b87c <__hexnan+0xfc>
 800b86e:	4544      	cmp	r4, r8
 800b870:	d9c3      	bls.n	800b7fa <__hexnan+0x7a>
 800b872:	2300      	movs	r3, #0
 800b874:	f844 3c04 	str.w	r3, [r4, #-4]
 800b878:	2501      	movs	r5, #1
 800b87a:	3c04      	subs	r4, #4
 800b87c:	6822      	ldr	r2, [r4, #0]
 800b87e:	f000 000f 	and.w	r0, r0, #15
 800b882:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b886:	6022      	str	r2, [r4, #0]
 800b888:	e7b7      	b.n	800b7fa <__hexnan+0x7a>
 800b88a:	2508      	movs	r5, #8
 800b88c:	e7b5      	b.n	800b7fa <__hexnan+0x7a>
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d0df      	beq.n	800b854 <__hexnan+0xd4>
 800b894:	f04f 32ff 	mov.w	r2, #4294967295
 800b898:	f1c3 0320 	rsb	r3, r3, #32
 800b89c:	fa22 f303 	lsr.w	r3, r2, r3
 800b8a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b8a4:	401a      	ands	r2, r3
 800b8a6:	f846 2c04 	str.w	r2, [r6, #-4]
 800b8aa:	e7d3      	b.n	800b854 <__hexnan+0xd4>
 800b8ac:	3f04      	subs	r7, #4
 800b8ae:	e7d1      	b.n	800b854 <__hexnan+0xd4>
 800b8b0:	2004      	movs	r0, #4
 800b8b2:	b007      	add	sp, #28
 800b8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8b8 <_localeconv_r>:
 800b8b8:	4800      	ldr	r0, [pc, #0]	; (800b8bc <_localeconv_r+0x4>)
 800b8ba:	4770      	bx	lr
 800b8bc:	20000164 	.word	0x20000164

0800b8c0 <__retarget_lock_init_recursive>:
 800b8c0:	4770      	bx	lr

0800b8c2 <__retarget_lock_acquire_recursive>:
 800b8c2:	4770      	bx	lr

0800b8c4 <__retarget_lock_release_recursive>:
 800b8c4:	4770      	bx	lr
	...

0800b8c8 <_lseek_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	4d07      	ldr	r5, [pc, #28]	; (800b8e8 <_lseek_r+0x20>)
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	4608      	mov	r0, r1
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	602a      	str	r2, [r5, #0]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	f7f6 fa26 	bl	8001d28 <_lseek>
 800b8dc:	1c43      	adds	r3, r0, #1
 800b8de:	d102      	bne.n	800b8e6 <_lseek_r+0x1e>
 800b8e0:	682b      	ldr	r3, [r5, #0]
 800b8e2:	b103      	cbz	r3, 800b8e6 <_lseek_r+0x1e>
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	bd38      	pop	{r3, r4, r5, pc}
 800b8e8:	20000418 	.word	0x20000418

0800b8ec <__swhatbuf_r>:
 800b8ec:	b570      	push	{r4, r5, r6, lr}
 800b8ee:	460e      	mov	r6, r1
 800b8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8f4:	2900      	cmp	r1, #0
 800b8f6:	b096      	sub	sp, #88	; 0x58
 800b8f8:	4614      	mov	r4, r2
 800b8fa:	461d      	mov	r5, r3
 800b8fc:	da08      	bge.n	800b910 <__swhatbuf_r+0x24>
 800b8fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b902:	2200      	movs	r2, #0
 800b904:	602a      	str	r2, [r5, #0]
 800b906:	061a      	lsls	r2, r3, #24
 800b908:	d410      	bmi.n	800b92c <__swhatbuf_r+0x40>
 800b90a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b90e:	e00e      	b.n	800b92e <__swhatbuf_r+0x42>
 800b910:	466a      	mov	r2, sp
 800b912:	f002 f869 	bl	800d9e8 <_fstat_r>
 800b916:	2800      	cmp	r0, #0
 800b918:	dbf1      	blt.n	800b8fe <__swhatbuf_r+0x12>
 800b91a:	9a01      	ldr	r2, [sp, #4]
 800b91c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b920:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b924:	425a      	negs	r2, r3
 800b926:	415a      	adcs	r2, r3
 800b928:	602a      	str	r2, [r5, #0]
 800b92a:	e7ee      	b.n	800b90a <__swhatbuf_r+0x1e>
 800b92c:	2340      	movs	r3, #64	; 0x40
 800b92e:	2000      	movs	r0, #0
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	b016      	add	sp, #88	; 0x58
 800b934:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b938 <__smakebuf_r>:
 800b938:	898b      	ldrh	r3, [r1, #12]
 800b93a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b93c:	079d      	lsls	r5, r3, #30
 800b93e:	4606      	mov	r6, r0
 800b940:	460c      	mov	r4, r1
 800b942:	d507      	bpl.n	800b954 <__smakebuf_r+0x1c>
 800b944:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	6123      	str	r3, [r4, #16]
 800b94c:	2301      	movs	r3, #1
 800b94e:	6163      	str	r3, [r4, #20]
 800b950:	b002      	add	sp, #8
 800b952:	bd70      	pop	{r4, r5, r6, pc}
 800b954:	ab01      	add	r3, sp, #4
 800b956:	466a      	mov	r2, sp
 800b958:	f7ff ffc8 	bl	800b8ec <__swhatbuf_r>
 800b95c:	9900      	ldr	r1, [sp, #0]
 800b95e:	4605      	mov	r5, r0
 800b960:	4630      	mov	r0, r6
 800b962:	f000 fd95 	bl	800c490 <_malloc_r>
 800b966:	b948      	cbnz	r0, 800b97c <__smakebuf_r+0x44>
 800b968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b96c:	059a      	lsls	r2, r3, #22
 800b96e:	d4ef      	bmi.n	800b950 <__smakebuf_r+0x18>
 800b970:	f023 0303 	bic.w	r3, r3, #3
 800b974:	f043 0302 	orr.w	r3, r3, #2
 800b978:	81a3      	strh	r3, [r4, #12]
 800b97a:	e7e3      	b.n	800b944 <__smakebuf_r+0xc>
 800b97c:	4b0d      	ldr	r3, [pc, #52]	; (800b9b4 <__smakebuf_r+0x7c>)
 800b97e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	6020      	str	r0, [r4, #0]
 800b984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b988:	81a3      	strh	r3, [r4, #12]
 800b98a:	9b00      	ldr	r3, [sp, #0]
 800b98c:	6163      	str	r3, [r4, #20]
 800b98e:	9b01      	ldr	r3, [sp, #4]
 800b990:	6120      	str	r0, [r4, #16]
 800b992:	b15b      	cbz	r3, 800b9ac <__smakebuf_r+0x74>
 800b994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b998:	4630      	mov	r0, r6
 800b99a:	f002 f837 	bl	800da0c <_isatty_r>
 800b99e:	b128      	cbz	r0, 800b9ac <__smakebuf_r+0x74>
 800b9a0:	89a3      	ldrh	r3, [r4, #12]
 800b9a2:	f023 0303 	bic.w	r3, r3, #3
 800b9a6:	f043 0301 	orr.w	r3, r3, #1
 800b9aa:	81a3      	strh	r3, [r4, #12]
 800b9ac:	89a0      	ldrh	r0, [r4, #12]
 800b9ae:	4305      	orrs	r5, r0
 800b9b0:	81a5      	strh	r5, [r4, #12]
 800b9b2:	e7cd      	b.n	800b950 <__smakebuf_r+0x18>
 800b9b4:	0800affd 	.word	0x0800affd

0800b9b8 <malloc>:
 800b9b8:	4b02      	ldr	r3, [pc, #8]	; (800b9c4 <malloc+0xc>)
 800b9ba:	4601      	mov	r1, r0
 800b9bc:	6818      	ldr	r0, [r3, #0]
 800b9be:	f000 bd67 	b.w	800c490 <_malloc_r>
 800b9c2:	bf00      	nop
 800b9c4:	2000000c 	.word	0x2000000c

0800b9c8 <__ascii_mbtowc>:
 800b9c8:	b082      	sub	sp, #8
 800b9ca:	b901      	cbnz	r1, 800b9ce <__ascii_mbtowc+0x6>
 800b9cc:	a901      	add	r1, sp, #4
 800b9ce:	b142      	cbz	r2, 800b9e2 <__ascii_mbtowc+0x1a>
 800b9d0:	b14b      	cbz	r3, 800b9e6 <__ascii_mbtowc+0x1e>
 800b9d2:	7813      	ldrb	r3, [r2, #0]
 800b9d4:	600b      	str	r3, [r1, #0]
 800b9d6:	7812      	ldrb	r2, [r2, #0]
 800b9d8:	1e10      	subs	r0, r2, #0
 800b9da:	bf18      	it	ne
 800b9dc:	2001      	movne	r0, #1
 800b9de:	b002      	add	sp, #8
 800b9e0:	4770      	bx	lr
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	e7fb      	b.n	800b9de <__ascii_mbtowc+0x16>
 800b9e6:	f06f 0001 	mvn.w	r0, #1
 800b9ea:	e7f8      	b.n	800b9de <__ascii_mbtowc+0x16>

0800b9ec <memcpy>:
 800b9ec:	440a      	add	r2, r1
 800b9ee:	4291      	cmp	r1, r2
 800b9f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9f4:	d100      	bne.n	800b9f8 <memcpy+0xc>
 800b9f6:	4770      	bx	lr
 800b9f8:	b510      	push	{r4, lr}
 800b9fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba02:	4291      	cmp	r1, r2
 800ba04:	d1f9      	bne.n	800b9fa <memcpy+0xe>
 800ba06:	bd10      	pop	{r4, pc}

0800ba08 <_Balloc>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	460d      	mov	r5, r1
 800ba10:	b976      	cbnz	r6, 800ba30 <_Balloc+0x28>
 800ba12:	2010      	movs	r0, #16
 800ba14:	f7ff ffd0 	bl	800b9b8 <malloc>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	6260      	str	r0, [r4, #36]	; 0x24
 800ba1c:	b920      	cbnz	r0, 800ba28 <_Balloc+0x20>
 800ba1e:	4b18      	ldr	r3, [pc, #96]	; (800ba80 <_Balloc+0x78>)
 800ba20:	4818      	ldr	r0, [pc, #96]	; (800ba84 <_Balloc+0x7c>)
 800ba22:	2166      	movs	r1, #102	; 0x66
 800ba24:	f001 ffb0 	bl	800d988 <__assert_func>
 800ba28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba2c:	6006      	str	r6, [r0, #0]
 800ba2e:	60c6      	str	r6, [r0, #12]
 800ba30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba32:	68f3      	ldr	r3, [r6, #12]
 800ba34:	b183      	cbz	r3, 800ba58 <_Balloc+0x50>
 800ba36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba3e:	b9b8      	cbnz	r0, 800ba70 <_Balloc+0x68>
 800ba40:	2101      	movs	r1, #1
 800ba42:	fa01 f605 	lsl.w	r6, r1, r5
 800ba46:	1d72      	adds	r2, r6, #5
 800ba48:	0092      	lsls	r2, r2, #2
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f000 fc9d 	bl	800c38a <_calloc_r>
 800ba50:	b160      	cbz	r0, 800ba6c <_Balloc+0x64>
 800ba52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba56:	e00e      	b.n	800ba76 <_Balloc+0x6e>
 800ba58:	2221      	movs	r2, #33	; 0x21
 800ba5a:	2104      	movs	r1, #4
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f000 fc94 	bl	800c38a <_calloc_r>
 800ba62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba64:	60f0      	str	r0, [r6, #12]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1e4      	bne.n	800ba36 <_Balloc+0x2e>
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	bd70      	pop	{r4, r5, r6, pc}
 800ba70:	6802      	ldr	r2, [r0, #0]
 800ba72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba76:	2300      	movs	r3, #0
 800ba78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba7c:	e7f7      	b.n	800ba6e <_Balloc+0x66>
 800ba7e:	bf00      	nop
 800ba80:	0800e0f6 	.word	0x0800e0f6
 800ba84:	0800e258 	.word	0x0800e258

0800ba88 <_Bfree>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	460c      	mov	r4, r1
 800ba90:	b976      	cbnz	r6, 800bab0 <_Bfree+0x28>
 800ba92:	2010      	movs	r0, #16
 800ba94:	f7ff ff90 	bl	800b9b8 <malloc>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	6268      	str	r0, [r5, #36]	; 0x24
 800ba9c:	b920      	cbnz	r0, 800baa8 <_Bfree+0x20>
 800ba9e:	4b09      	ldr	r3, [pc, #36]	; (800bac4 <_Bfree+0x3c>)
 800baa0:	4809      	ldr	r0, [pc, #36]	; (800bac8 <_Bfree+0x40>)
 800baa2:	218a      	movs	r1, #138	; 0x8a
 800baa4:	f001 ff70 	bl	800d988 <__assert_func>
 800baa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baac:	6006      	str	r6, [r0, #0]
 800baae:	60c6      	str	r6, [r0, #12]
 800bab0:	b13c      	cbz	r4, 800bac2 <_Bfree+0x3a>
 800bab2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bab4:	6862      	ldr	r2, [r4, #4]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800babc:	6021      	str	r1, [r4, #0]
 800babe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	0800e0f6 	.word	0x0800e0f6
 800bac8:	0800e258 	.word	0x0800e258

0800bacc <__multadd>:
 800bacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad0:	690d      	ldr	r5, [r1, #16]
 800bad2:	4607      	mov	r7, r0
 800bad4:	460c      	mov	r4, r1
 800bad6:	461e      	mov	r6, r3
 800bad8:	f101 0c14 	add.w	ip, r1, #20
 800badc:	2000      	movs	r0, #0
 800bade:	f8dc 3000 	ldr.w	r3, [ip]
 800bae2:	b299      	uxth	r1, r3
 800bae4:	fb02 6101 	mla	r1, r2, r1, r6
 800bae8:	0c1e      	lsrs	r6, r3, #16
 800baea:	0c0b      	lsrs	r3, r1, #16
 800baec:	fb02 3306 	mla	r3, r2, r6, r3
 800baf0:	b289      	uxth	r1, r1
 800baf2:	3001      	adds	r0, #1
 800baf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800baf8:	4285      	cmp	r5, r0
 800bafa:	f84c 1b04 	str.w	r1, [ip], #4
 800bafe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb02:	dcec      	bgt.n	800bade <__multadd+0x12>
 800bb04:	b30e      	cbz	r6, 800bb4a <__multadd+0x7e>
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	42ab      	cmp	r3, r5
 800bb0a:	dc19      	bgt.n	800bb40 <__multadd+0x74>
 800bb0c:	6861      	ldr	r1, [r4, #4]
 800bb0e:	4638      	mov	r0, r7
 800bb10:	3101      	adds	r1, #1
 800bb12:	f7ff ff79 	bl	800ba08 <_Balloc>
 800bb16:	4680      	mov	r8, r0
 800bb18:	b928      	cbnz	r0, 800bb26 <__multadd+0x5a>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	4b0c      	ldr	r3, [pc, #48]	; (800bb50 <__multadd+0x84>)
 800bb1e:	480d      	ldr	r0, [pc, #52]	; (800bb54 <__multadd+0x88>)
 800bb20:	21b5      	movs	r1, #181	; 0xb5
 800bb22:	f001 ff31 	bl	800d988 <__assert_func>
 800bb26:	6922      	ldr	r2, [r4, #16]
 800bb28:	3202      	adds	r2, #2
 800bb2a:	f104 010c 	add.w	r1, r4, #12
 800bb2e:	0092      	lsls	r2, r2, #2
 800bb30:	300c      	adds	r0, #12
 800bb32:	f7ff ff5b 	bl	800b9ec <memcpy>
 800bb36:	4621      	mov	r1, r4
 800bb38:	4638      	mov	r0, r7
 800bb3a:	f7ff ffa5 	bl	800ba88 <_Bfree>
 800bb3e:	4644      	mov	r4, r8
 800bb40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb44:	3501      	adds	r5, #1
 800bb46:	615e      	str	r6, [r3, #20]
 800bb48:	6125      	str	r5, [r4, #16]
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb50:	0800e168 	.word	0x0800e168
 800bb54:	0800e258 	.word	0x0800e258

0800bb58 <__s2b>:
 800bb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	4615      	mov	r5, r2
 800bb60:	461f      	mov	r7, r3
 800bb62:	2209      	movs	r2, #9
 800bb64:	3308      	adds	r3, #8
 800bb66:	4606      	mov	r6, r0
 800bb68:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	2201      	movs	r2, #1
 800bb70:	429a      	cmp	r2, r3
 800bb72:	db09      	blt.n	800bb88 <__s2b+0x30>
 800bb74:	4630      	mov	r0, r6
 800bb76:	f7ff ff47 	bl	800ba08 <_Balloc>
 800bb7a:	b940      	cbnz	r0, 800bb8e <__s2b+0x36>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	4b19      	ldr	r3, [pc, #100]	; (800bbe4 <__s2b+0x8c>)
 800bb80:	4819      	ldr	r0, [pc, #100]	; (800bbe8 <__s2b+0x90>)
 800bb82:	21ce      	movs	r1, #206	; 0xce
 800bb84:	f001 ff00 	bl	800d988 <__assert_func>
 800bb88:	0052      	lsls	r2, r2, #1
 800bb8a:	3101      	adds	r1, #1
 800bb8c:	e7f0      	b.n	800bb70 <__s2b+0x18>
 800bb8e:	9b08      	ldr	r3, [sp, #32]
 800bb90:	6143      	str	r3, [r0, #20]
 800bb92:	2d09      	cmp	r5, #9
 800bb94:	f04f 0301 	mov.w	r3, #1
 800bb98:	6103      	str	r3, [r0, #16]
 800bb9a:	dd16      	ble.n	800bbca <__s2b+0x72>
 800bb9c:	f104 0909 	add.w	r9, r4, #9
 800bba0:	46c8      	mov	r8, r9
 800bba2:	442c      	add	r4, r5
 800bba4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bba8:	4601      	mov	r1, r0
 800bbaa:	3b30      	subs	r3, #48	; 0x30
 800bbac:	220a      	movs	r2, #10
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7ff ff8c 	bl	800bacc <__multadd>
 800bbb4:	45a0      	cmp	r8, r4
 800bbb6:	d1f5      	bne.n	800bba4 <__s2b+0x4c>
 800bbb8:	f1a5 0408 	sub.w	r4, r5, #8
 800bbbc:	444c      	add	r4, r9
 800bbbe:	1b2d      	subs	r5, r5, r4
 800bbc0:	1963      	adds	r3, r4, r5
 800bbc2:	42bb      	cmp	r3, r7
 800bbc4:	db04      	blt.n	800bbd0 <__s2b+0x78>
 800bbc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbca:	340a      	adds	r4, #10
 800bbcc:	2509      	movs	r5, #9
 800bbce:	e7f6      	b.n	800bbbe <__s2b+0x66>
 800bbd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbd4:	4601      	mov	r1, r0
 800bbd6:	3b30      	subs	r3, #48	; 0x30
 800bbd8:	220a      	movs	r2, #10
 800bbda:	4630      	mov	r0, r6
 800bbdc:	f7ff ff76 	bl	800bacc <__multadd>
 800bbe0:	e7ee      	b.n	800bbc0 <__s2b+0x68>
 800bbe2:	bf00      	nop
 800bbe4:	0800e168 	.word	0x0800e168
 800bbe8:	0800e258 	.word	0x0800e258

0800bbec <__hi0bits>:
 800bbec:	0c03      	lsrs	r3, r0, #16
 800bbee:	041b      	lsls	r3, r3, #16
 800bbf0:	b9d3      	cbnz	r3, 800bc28 <__hi0bits+0x3c>
 800bbf2:	0400      	lsls	r0, r0, #16
 800bbf4:	2310      	movs	r3, #16
 800bbf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbfa:	bf04      	itt	eq
 800bbfc:	0200      	lsleq	r0, r0, #8
 800bbfe:	3308      	addeq	r3, #8
 800bc00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc04:	bf04      	itt	eq
 800bc06:	0100      	lsleq	r0, r0, #4
 800bc08:	3304      	addeq	r3, #4
 800bc0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc0e:	bf04      	itt	eq
 800bc10:	0080      	lsleq	r0, r0, #2
 800bc12:	3302      	addeq	r3, #2
 800bc14:	2800      	cmp	r0, #0
 800bc16:	db05      	blt.n	800bc24 <__hi0bits+0x38>
 800bc18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc1c:	f103 0301 	add.w	r3, r3, #1
 800bc20:	bf08      	it	eq
 800bc22:	2320      	moveq	r3, #32
 800bc24:	4618      	mov	r0, r3
 800bc26:	4770      	bx	lr
 800bc28:	2300      	movs	r3, #0
 800bc2a:	e7e4      	b.n	800bbf6 <__hi0bits+0xa>

0800bc2c <__lo0bits>:
 800bc2c:	6803      	ldr	r3, [r0, #0]
 800bc2e:	f013 0207 	ands.w	r2, r3, #7
 800bc32:	4601      	mov	r1, r0
 800bc34:	d00b      	beq.n	800bc4e <__lo0bits+0x22>
 800bc36:	07da      	lsls	r2, r3, #31
 800bc38:	d423      	bmi.n	800bc82 <__lo0bits+0x56>
 800bc3a:	0798      	lsls	r0, r3, #30
 800bc3c:	bf49      	itett	mi
 800bc3e:	085b      	lsrmi	r3, r3, #1
 800bc40:	089b      	lsrpl	r3, r3, #2
 800bc42:	2001      	movmi	r0, #1
 800bc44:	600b      	strmi	r3, [r1, #0]
 800bc46:	bf5c      	itt	pl
 800bc48:	600b      	strpl	r3, [r1, #0]
 800bc4a:	2002      	movpl	r0, #2
 800bc4c:	4770      	bx	lr
 800bc4e:	b298      	uxth	r0, r3
 800bc50:	b9a8      	cbnz	r0, 800bc7e <__lo0bits+0x52>
 800bc52:	0c1b      	lsrs	r3, r3, #16
 800bc54:	2010      	movs	r0, #16
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	b90a      	cbnz	r2, 800bc5e <__lo0bits+0x32>
 800bc5a:	3008      	adds	r0, #8
 800bc5c:	0a1b      	lsrs	r3, r3, #8
 800bc5e:	071a      	lsls	r2, r3, #28
 800bc60:	bf04      	itt	eq
 800bc62:	091b      	lsreq	r3, r3, #4
 800bc64:	3004      	addeq	r0, #4
 800bc66:	079a      	lsls	r2, r3, #30
 800bc68:	bf04      	itt	eq
 800bc6a:	089b      	lsreq	r3, r3, #2
 800bc6c:	3002      	addeq	r0, #2
 800bc6e:	07da      	lsls	r2, r3, #31
 800bc70:	d403      	bmi.n	800bc7a <__lo0bits+0x4e>
 800bc72:	085b      	lsrs	r3, r3, #1
 800bc74:	f100 0001 	add.w	r0, r0, #1
 800bc78:	d005      	beq.n	800bc86 <__lo0bits+0x5a>
 800bc7a:	600b      	str	r3, [r1, #0]
 800bc7c:	4770      	bx	lr
 800bc7e:	4610      	mov	r0, r2
 800bc80:	e7e9      	b.n	800bc56 <__lo0bits+0x2a>
 800bc82:	2000      	movs	r0, #0
 800bc84:	4770      	bx	lr
 800bc86:	2020      	movs	r0, #32
 800bc88:	4770      	bx	lr
	...

0800bc8c <__i2b>:
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	460c      	mov	r4, r1
 800bc90:	2101      	movs	r1, #1
 800bc92:	f7ff feb9 	bl	800ba08 <_Balloc>
 800bc96:	4602      	mov	r2, r0
 800bc98:	b928      	cbnz	r0, 800bca6 <__i2b+0x1a>
 800bc9a:	4b05      	ldr	r3, [pc, #20]	; (800bcb0 <__i2b+0x24>)
 800bc9c:	4805      	ldr	r0, [pc, #20]	; (800bcb4 <__i2b+0x28>)
 800bc9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bca2:	f001 fe71 	bl	800d988 <__assert_func>
 800bca6:	2301      	movs	r3, #1
 800bca8:	6144      	str	r4, [r0, #20]
 800bcaa:	6103      	str	r3, [r0, #16]
 800bcac:	bd10      	pop	{r4, pc}
 800bcae:	bf00      	nop
 800bcb0:	0800e168 	.word	0x0800e168
 800bcb4:	0800e258 	.word	0x0800e258

0800bcb8 <__multiply>:
 800bcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbc:	4691      	mov	r9, r2
 800bcbe:	690a      	ldr	r2, [r1, #16]
 800bcc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	bfb8      	it	lt
 800bcc8:	460b      	movlt	r3, r1
 800bcca:	460c      	mov	r4, r1
 800bccc:	bfbc      	itt	lt
 800bcce:	464c      	movlt	r4, r9
 800bcd0:	4699      	movlt	r9, r3
 800bcd2:	6927      	ldr	r7, [r4, #16]
 800bcd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bcd8:	68a3      	ldr	r3, [r4, #8]
 800bcda:	6861      	ldr	r1, [r4, #4]
 800bcdc:	eb07 060a 	add.w	r6, r7, sl
 800bce0:	42b3      	cmp	r3, r6
 800bce2:	b085      	sub	sp, #20
 800bce4:	bfb8      	it	lt
 800bce6:	3101      	addlt	r1, #1
 800bce8:	f7ff fe8e 	bl	800ba08 <_Balloc>
 800bcec:	b930      	cbnz	r0, 800bcfc <__multiply+0x44>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	4b44      	ldr	r3, [pc, #272]	; (800be04 <__multiply+0x14c>)
 800bcf2:	4845      	ldr	r0, [pc, #276]	; (800be08 <__multiply+0x150>)
 800bcf4:	f240 115d 	movw	r1, #349	; 0x15d
 800bcf8:	f001 fe46 	bl	800d988 <__assert_func>
 800bcfc:	f100 0514 	add.w	r5, r0, #20
 800bd00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd04:	462b      	mov	r3, r5
 800bd06:	2200      	movs	r2, #0
 800bd08:	4543      	cmp	r3, r8
 800bd0a:	d321      	bcc.n	800bd50 <__multiply+0x98>
 800bd0c:	f104 0314 	add.w	r3, r4, #20
 800bd10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd14:	f109 0314 	add.w	r3, r9, #20
 800bd18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd1c:	9202      	str	r2, [sp, #8]
 800bd1e:	1b3a      	subs	r2, r7, r4
 800bd20:	3a15      	subs	r2, #21
 800bd22:	f022 0203 	bic.w	r2, r2, #3
 800bd26:	3204      	adds	r2, #4
 800bd28:	f104 0115 	add.w	r1, r4, #21
 800bd2c:	428f      	cmp	r7, r1
 800bd2e:	bf38      	it	cc
 800bd30:	2204      	movcc	r2, #4
 800bd32:	9201      	str	r2, [sp, #4]
 800bd34:	9a02      	ldr	r2, [sp, #8]
 800bd36:	9303      	str	r3, [sp, #12]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d80c      	bhi.n	800bd56 <__multiply+0x9e>
 800bd3c:	2e00      	cmp	r6, #0
 800bd3e:	dd03      	ble.n	800bd48 <__multiply+0x90>
 800bd40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d05a      	beq.n	800bdfe <__multiply+0x146>
 800bd48:	6106      	str	r6, [r0, #16]
 800bd4a:	b005      	add	sp, #20
 800bd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd50:	f843 2b04 	str.w	r2, [r3], #4
 800bd54:	e7d8      	b.n	800bd08 <__multiply+0x50>
 800bd56:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd5a:	f1ba 0f00 	cmp.w	sl, #0
 800bd5e:	d024      	beq.n	800bdaa <__multiply+0xf2>
 800bd60:	f104 0e14 	add.w	lr, r4, #20
 800bd64:	46a9      	mov	r9, r5
 800bd66:	f04f 0c00 	mov.w	ip, #0
 800bd6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd6e:	f8d9 1000 	ldr.w	r1, [r9]
 800bd72:	fa1f fb82 	uxth.w	fp, r2
 800bd76:	b289      	uxth	r1, r1
 800bd78:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd80:	f8d9 2000 	ldr.w	r2, [r9]
 800bd84:	4461      	add	r1, ip
 800bd86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd8a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd92:	b289      	uxth	r1, r1
 800bd94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd98:	4577      	cmp	r7, lr
 800bd9a:	f849 1b04 	str.w	r1, [r9], #4
 800bd9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bda2:	d8e2      	bhi.n	800bd6a <__multiply+0xb2>
 800bda4:	9a01      	ldr	r2, [sp, #4]
 800bda6:	f845 c002 	str.w	ip, [r5, r2]
 800bdaa:	9a03      	ldr	r2, [sp, #12]
 800bdac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdb0:	3304      	adds	r3, #4
 800bdb2:	f1b9 0f00 	cmp.w	r9, #0
 800bdb6:	d020      	beq.n	800bdfa <__multiply+0x142>
 800bdb8:	6829      	ldr	r1, [r5, #0]
 800bdba:	f104 0c14 	add.w	ip, r4, #20
 800bdbe:	46ae      	mov	lr, r5
 800bdc0:	f04f 0a00 	mov.w	sl, #0
 800bdc4:	f8bc b000 	ldrh.w	fp, [ip]
 800bdc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bdcc:	fb09 220b 	mla	r2, r9, fp, r2
 800bdd0:	4492      	add	sl, r2
 800bdd2:	b289      	uxth	r1, r1
 800bdd4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bdd8:	f84e 1b04 	str.w	r1, [lr], #4
 800bddc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bde0:	f8be 1000 	ldrh.w	r1, [lr]
 800bde4:	0c12      	lsrs	r2, r2, #16
 800bde6:	fb09 1102 	mla	r1, r9, r2, r1
 800bdea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bdee:	4567      	cmp	r7, ip
 800bdf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdf4:	d8e6      	bhi.n	800bdc4 <__multiply+0x10c>
 800bdf6:	9a01      	ldr	r2, [sp, #4]
 800bdf8:	50a9      	str	r1, [r5, r2]
 800bdfa:	3504      	adds	r5, #4
 800bdfc:	e79a      	b.n	800bd34 <__multiply+0x7c>
 800bdfe:	3e01      	subs	r6, #1
 800be00:	e79c      	b.n	800bd3c <__multiply+0x84>
 800be02:	bf00      	nop
 800be04:	0800e168 	.word	0x0800e168
 800be08:	0800e258 	.word	0x0800e258

0800be0c <__pow5mult>:
 800be0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be10:	4615      	mov	r5, r2
 800be12:	f012 0203 	ands.w	r2, r2, #3
 800be16:	4606      	mov	r6, r0
 800be18:	460f      	mov	r7, r1
 800be1a:	d007      	beq.n	800be2c <__pow5mult+0x20>
 800be1c:	4c25      	ldr	r4, [pc, #148]	; (800beb4 <__pow5mult+0xa8>)
 800be1e:	3a01      	subs	r2, #1
 800be20:	2300      	movs	r3, #0
 800be22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be26:	f7ff fe51 	bl	800bacc <__multadd>
 800be2a:	4607      	mov	r7, r0
 800be2c:	10ad      	asrs	r5, r5, #2
 800be2e:	d03d      	beq.n	800beac <__pow5mult+0xa0>
 800be30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be32:	b97c      	cbnz	r4, 800be54 <__pow5mult+0x48>
 800be34:	2010      	movs	r0, #16
 800be36:	f7ff fdbf 	bl	800b9b8 <malloc>
 800be3a:	4602      	mov	r2, r0
 800be3c:	6270      	str	r0, [r6, #36]	; 0x24
 800be3e:	b928      	cbnz	r0, 800be4c <__pow5mult+0x40>
 800be40:	4b1d      	ldr	r3, [pc, #116]	; (800beb8 <__pow5mult+0xac>)
 800be42:	481e      	ldr	r0, [pc, #120]	; (800bebc <__pow5mult+0xb0>)
 800be44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be48:	f001 fd9e 	bl	800d988 <__assert_func>
 800be4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be50:	6004      	str	r4, [r0, #0]
 800be52:	60c4      	str	r4, [r0, #12]
 800be54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be5c:	b94c      	cbnz	r4, 800be72 <__pow5mult+0x66>
 800be5e:	f240 2171 	movw	r1, #625	; 0x271
 800be62:	4630      	mov	r0, r6
 800be64:	f7ff ff12 	bl	800bc8c <__i2b>
 800be68:	2300      	movs	r3, #0
 800be6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800be6e:	4604      	mov	r4, r0
 800be70:	6003      	str	r3, [r0, #0]
 800be72:	f04f 0900 	mov.w	r9, #0
 800be76:	07eb      	lsls	r3, r5, #31
 800be78:	d50a      	bpl.n	800be90 <__pow5mult+0x84>
 800be7a:	4639      	mov	r1, r7
 800be7c:	4622      	mov	r2, r4
 800be7e:	4630      	mov	r0, r6
 800be80:	f7ff ff1a 	bl	800bcb8 <__multiply>
 800be84:	4639      	mov	r1, r7
 800be86:	4680      	mov	r8, r0
 800be88:	4630      	mov	r0, r6
 800be8a:	f7ff fdfd 	bl	800ba88 <_Bfree>
 800be8e:	4647      	mov	r7, r8
 800be90:	106d      	asrs	r5, r5, #1
 800be92:	d00b      	beq.n	800beac <__pow5mult+0xa0>
 800be94:	6820      	ldr	r0, [r4, #0]
 800be96:	b938      	cbnz	r0, 800bea8 <__pow5mult+0x9c>
 800be98:	4622      	mov	r2, r4
 800be9a:	4621      	mov	r1, r4
 800be9c:	4630      	mov	r0, r6
 800be9e:	f7ff ff0b 	bl	800bcb8 <__multiply>
 800bea2:	6020      	str	r0, [r4, #0]
 800bea4:	f8c0 9000 	str.w	r9, [r0]
 800bea8:	4604      	mov	r4, r0
 800beaa:	e7e4      	b.n	800be76 <__pow5mult+0x6a>
 800beac:	4638      	mov	r0, r7
 800beae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beb2:	bf00      	nop
 800beb4:	0800e3a8 	.word	0x0800e3a8
 800beb8:	0800e0f6 	.word	0x0800e0f6
 800bebc:	0800e258 	.word	0x0800e258

0800bec0 <__lshift>:
 800bec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bec4:	460c      	mov	r4, r1
 800bec6:	6849      	ldr	r1, [r1, #4]
 800bec8:	6923      	ldr	r3, [r4, #16]
 800beca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bece:	68a3      	ldr	r3, [r4, #8]
 800bed0:	4607      	mov	r7, r0
 800bed2:	4691      	mov	r9, r2
 800bed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bed8:	f108 0601 	add.w	r6, r8, #1
 800bedc:	42b3      	cmp	r3, r6
 800bede:	db0b      	blt.n	800bef8 <__lshift+0x38>
 800bee0:	4638      	mov	r0, r7
 800bee2:	f7ff fd91 	bl	800ba08 <_Balloc>
 800bee6:	4605      	mov	r5, r0
 800bee8:	b948      	cbnz	r0, 800befe <__lshift+0x3e>
 800beea:	4602      	mov	r2, r0
 800beec:	4b2a      	ldr	r3, [pc, #168]	; (800bf98 <__lshift+0xd8>)
 800beee:	482b      	ldr	r0, [pc, #172]	; (800bf9c <__lshift+0xdc>)
 800bef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bef4:	f001 fd48 	bl	800d988 <__assert_func>
 800bef8:	3101      	adds	r1, #1
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	e7ee      	b.n	800bedc <__lshift+0x1c>
 800befe:	2300      	movs	r3, #0
 800bf00:	f100 0114 	add.w	r1, r0, #20
 800bf04:	f100 0210 	add.w	r2, r0, #16
 800bf08:	4618      	mov	r0, r3
 800bf0a:	4553      	cmp	r3, sl
 800bf0c:	db37      	blt.n	800bf7e <__lshift+0xbe>
 800bf0e:	6920      	ldr	r0, [r4, #16]
 800bf10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf14:	f104 0314 	add.w	r3, r4, #20
 800bf18:	f019 091f 	ands.w	r9, r9, #31
 800bf1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf24:	d02f      	beq.n	800bf86 <__lshift+0xc6>
 800bf26:	f1c9 0e20 	rsb	lr, r9, #32
 800bf2a:	468a      	mov	sl, r1
 800bf2c:	f04f 0c00 	mov.w	ip, #0
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	fa02 f209 	lsl.w	r2, r2, r9
 800bf36:	ea42 020c 	orr.w	r2, r2, ip
 800bf3a:	f84a 2b04 	str.w	r2, [sl], #4
 800bf3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf42:	4298      	cmp	r0, r3
 800bf44:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf48:	d8f2      	bhi.n	800bf30 <__lshift+0x70>
 800bf4a:	1b03      	subs	r3, r0, r4
 800bf4c:	3b15      	subs	r3, #21
 800bf4e:	f023 0303 	bic.w	r3, r3, #3
 800bf52:	3304      	adds	r3, #4
 800bf54:	f104 0215 	add.w	r2, r4, #21
 800bf58:	4290      	cmp	r0, r2
 800bf5a:	bf38      	it	cc
 800bf5c:	2304      	movcc	r3, #4
 800bf5e:	f841 c003 	str.w	ip, [r1, r3]
 800bf62:	f1bc 0f00 	cmp.w	ip, #0
 800bf66:	d001      	beq.n	800bf6c <__lshift+0xac>
 800bf68:	f108 0602 	add.w	r6, r8, #2
 800bf6c:	3e01      	subs	r6, #1
 800bf6e:	4638      	mov	r0, r7
 800bf70:	612e      	str	r6, [r5, #16]
 800bf72:	4621      	mov	r1, r4
 800bf74:	f7ff fd88 	bl	800ba88 <_Bfree>
 800bf78:	4628      	mov	r0, r5
 800bf7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf82:	3301      	adds	r3, #1
 800bf84:	e7c1      	b.n	800bf0a <__lshift+0x4a>
 800bf86:	3904      	subs	r1, #4
 800bf88:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf90:	4298      	cmp	r0, r3
 800bf92:	d8f9      	bhi.n	800bf88 <__lshift+0xc8>
 800bf94:	e7ea      	b.n	800bf6c <__lshift+0xac>
 800bf96:	bf00      	nop
 800bf98:	0800e168 	.word	0x0800e168
 800bf9c:	0800e258 	.word	0x0800e258

0800bfa0 <__mcmp>:
 800bfa0:	b530      	push	{r4, r5, lr}
 800bfa2:	6902      	ldr	r2, [r0, #16]
 800bfa4:	690c      	ldr	r4, [r1, #16]
 800bfa6:	1b12      	subs	r2, r2, r4
 800bfa8:	d10e      	bne.n	800bfc8 <__mcmp+0x28>
 800bfaa:	f100 0314 	add.w	r3, r0, #20
 800bfae:	3114      	adds	r1, #20
 800bfb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfc0:	42a5      	cmp	r5, r4
 800bfc2:	d003      	beq.n	800bfcc <__mcmp+0x2c>
 800bfc4:	d305      	bcc.n	800bfd2 <__mcmp+0x32>
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	4610      	mov	r0, r2
 800bfca:	bd30      	pop	{r4, r5, pc}
 800bfcc:	4283      	cmp	r3, r0
 800bfce:	d3f3      	bcc.n	800bfb8 <__mcmp+0x18>
 800bfd0:	e7fa      	b.n	800bfc8 <__mcmp+0x28>
 800bfd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd6:	e7f7      	b.n	800bfc8 <__mcmp+0x28>

0800bfd8 <__mdiff>:
 800bfd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfdc:	460c      	mov	r4, r1
 800bfde:	4606      	mov	r6, r0
 800bfe0:	4611      	mov	r1, r2
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	4690      	mov	r8, r2
 800bfe6:	f7ff ffdb 	bl	800bfa0 <__mcmp>
 800bfea:	1e05      	subs	r5, r0, #0
 800bfec:	d110      	bne.n	800c010 <__mdiff+0x38>
 800bfee:	4629      	mov	r1, r5
 800bff0:	4630      	mov	r0, r6
 800bff2:	f7ff fd09 	bl	800ba08 <_Balloc>
 800bff6:	b930      	cbnz	r0, 800c006 <__mdiff+0x2e>
 800bff8:	4b3a      	ldr	r3, [pc, #232]	; (800c0e4 <__mdiff+0x10c>)
 800bffa:	4602      	mov	r2, r0
 800bffc:	f240 2132 	movw	r1, #562	; 0x232
 800c000:	4839      	ldr	r0, [pc, #228]	; (800c0e8 <__mdiff+0x110>)
 800c002:	f001 fcc1 	bl	800d988 <__assert_func>
 800c006:	2301      	movs	r3, #1
 800c008:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c00c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c010:	bfa4      	itt	ge
 800c012:	4643      	movge	r3, r8
 800c014:	46a0      	movge	r8, r4
 800c016:	4630      	mov	r0, r6
 800c018:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c01c:	bfa6      	itte	ge
 800c01e:	461c      	movge	r4, r3
 800c020:	2500      	movge	r5, #0
 800c022:	2501      	movlt	r5, #1
 800c024:	f7ff fcf0 	bl	800ba08 <_Balloc>
 800c028:	b920      	cbnz	r0, 800c034 <__mdiff+0x5c>
 800c02a:	4b2e      	ldr	r3, [pc, #184]	; (800c0e4 <__mdiff+0x10c>)
 800c02c:	4602      	mov	r2, r0
 800c02e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c032:	e7e5      	b.n	800c000 <__mdiff+0x28>
 800c034:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c038:	6926      	ldr	r6, [r4, #16]
 800c03a:	60c5      	str	r5, [r0, #12]
 800c03c:	f104 0914 	add.w	r9, r4, #20
 800c040:	f108 0514 	add.w	r5, r8, #20
 800c044:	f100 0e14 	add.w	lr, r0, #20
 800c048:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c04c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c050:	f108 0210 	add.w	r2, r8, #16
 800c054:	46f2      	mov	sl, lr
 800c056:	2100      	movs	r1, #0
 800c058:	f859 3b04 	ldr.w	r3, [r9], #4
 800c05c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c060:	fa1f f883 	uxth.w	r8, r3
 800c064:	fa11 f18b 	uxtah	r1, r1, fp
 800c068:	0c1b      	lsrs	r3, r3, #16
 800c06a:	eba1 0808 	sub.w	r8, r1, r8
 800c06e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c072:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c076:	fa1f f888 	uxth.w	r8, r8
 800c07a:	1419      	asrs	r1, r3, #16
 800c07c:	454e      	cmp	r6, r9
 800c07e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c082:	f84a 3b04 	str.w	r3, [sl], #4
 800c086:	d8e7      	bhi.n	800c058 <__mdiff+0x80>
 800c088:	1b33      	subs	r3, r6, r4
 800c08a:	3b15      	subs	r3, #21
 800c08c:	f023 0303 	bic.w	r3, r3, #3
 800c090:	3304      	adds	r3, #4
 800c092:	3415      	adds	r4, #21
 800c094:	42a6      	cmp	r6, r4
 800c096:	bf38      	it	cc
 800c098:	2304      	movcc	r3, #4
 800c09a:	441d      	add	r5, r3
 800c09c:	4473      	add	r3, lr
 800c09e:	469e      	mov	lr, r3
 800c0a0:	462e      	mov	r6, r5
 800c0a2:	4566      	cmp	r6, ip
 800c0a4:	d30e      	bcc.n	800c0c4 <__mdiff+0xec>
 800c0a6:	f10c 0203 	add.w	r2, ip, #3
 800c0aa:	1b52      	subs	r2, r2, r5
 800c0ac:	f022 0203 	bic.w	r2, r2, #3
 800c0b0:	3d03      	subs	r5, #3
 800c0b2:	45ac      	cmp	ip, r5
 800c0b4:	bf38      	it	cc
 800c0b6:	2200      	movcc	r2, #0
 800c0b8:	441a      	add	r2, r3
 800c0ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c0be:	b17b      	cbz	r3, 800c0e0 <__mdiff+0x108>
 800c0c0:	6107      	str	r7, [r0, #16]
 800c0c2:	e7a3      	b.n	800c00c <__mdiff+0x34>
 800c0c4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c0c8:	fa11 f288 	uxtah	r2, r1, r8
 800c0cc:	1414      	asrs	r4, r2, #16
 800c0ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0d2:	b292      	uxth	r2, r2
 800c0d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0d8:	f84e 2b04 	str.w	r2, [lr], #4
 800c0dc:	1421      	asrs	r1, r4, #16
 800c0de:	e7e0      	b.n	800c0a2 <__mdiff+0xca>
 800c0e0:	3f01      	subs	r7, #1
 800c0e2:	e7ea      	b.n	800c0ba <__mdiff+0xe2>
 800c0e4:	0800e168 	.word	0x0800e168
 800c0e8:	0800e258 	.word	0x0800e258

0800c0ec <__ulp>:
 800c0ec:	b082      	sub	sp, #8
 800c0ee:	ed8d 0b00 	vstr	d0, [sp]
 800c0f2:	9b01      	ldr	r3, [sp, #4]
 800c0f4:	4912      	ldr	r1, [pc, #72]	; (800c140 <__ulp+0x54>)
 800c0f6:	4019      	ands	r1, r3
 800c0f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c0fc:	2900      	cmp	r1, #0
 800c0fe:	dd05      	ble.n	800c10c <__ulp+0x20>
 800c100:	2200      	movs	r2, #0
 800c102:	460b      	mov	r3, r1
 800c104:	ec43 2b10 	vmov	d0, r2, r3
 800c108:	b002      	add	sp, #8
 800c10a:	4770      	bx	lr
 800c10c:	4249      	negs	r1, r1
 800c10e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c112:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c116:	f04f 0200 	mov.w	r2, #0
 800c11a:	f04f 0300 	mov.w	r3, #0
 800c11e:	da04      	bge.n	800c12a <__ulp+0x3e>
 800c120:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c124:	fa41 f300 	asr.w	r3, r1, r0
 800c128:	e7ec      	b.n	800c104 <__ulp+0x18>
 800c12a:	f1a0 0114 	sub.w	r1, r0, #20
 800c12e:	291e      	cmp	r1, #30
 800c130:	bfda      	itte	le
 800c132:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c136:	fa20 f101 	lsrle.w	r1, r0, r1
 800c13a:	2101      	movgt	r1, #1
 800c13c:	460a      	mov	r2, r1
 800c13e:	e7e1      	b.n	800c104 <__ulp+0x18>
 800c140:	7ff00000 	.word	0x7ff00000

0800c144 <__b2d>:
 800c144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c146:	6905      	ldr	r5, [r0, #16]
 800c148:	f100 0714 	add.w	r7, r0, #20
 800c14c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c150:	1f2e      	subs	r6, r5, #4
 800c152:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c156:	4620      	mov	r0, r4
 800c158:	f7ff fd48 	bl	800bbec <__hi0bits>
 800c15c:	f1c0 0320 	rsb	r3, r0, #32
 800c160:	280a      	cmp	r0, #10
 800c162:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c1e0 <__b2d+0x9c>
 800c166:	600b      	str	r3, [r1, #0]
 800c168:	dc14      	bgt.n	800c194 <__b2d+0x50>
 800c16a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c16e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c172:	42b7      	cmp	r7, r6
 800c174:	ea41 030c 	orr.w	r3, r1, ip
 800c178:	bf34      	ite	cc
 800c17a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c17e:	2100      	movcs	r1, #0
 800c180:	3015      	adds	r0, #21
 800c182:	fa04 f000 	lsl.w	r0, r4, r0
 800c186:	fa21 f10e 	lsr.w	r1, r1, lr
 800c18a:	ea40 0201 	orr.w	r2, r0, r1
 800c18e:	ec43 2b10 	vmov	d0, r2, r3
 800c192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c194:	42b7      	cmp	r7, r6
 800c196:	bf3a      	itte	cc
 800c198:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c19c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c1a0:	2100      	movcs	r1, #0
 800c1a2:	380b      	subs	r0, #11
 800c1a4:	d017      	beq.n	800c1d6 <__b2d+0x92>
 800c1a6:	f1c0 0c20 	rsb	ip, r0, #32
 800c1aa:	fa04 f500 	lsl.w	r5, r4, r0
 800c1ae:	42be      	cmp	r6, r7
 800c1b0:	fa21 f40c 	lsr.w	r4, r1, ip
 800c1b4:	ea45 0504 	orr.w	r5, r5, r4
 800c1b8:	bf8c      	ite	hi
 800c1ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c1be:	2400      	movls	r4, #0
 800c1c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c1c4:	fa01 f000 	lsl.w	r0, r1, r0
 800c1c8:	fa24 f40c 	lsr.w	r4, r4, ip
 800c1cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c1d0:	ea40 0204 	orr.w	r2, r0, r4
 800c1d4:	e7db      	b.n	800c18e <__b2d+0x4a>
 800c1d6:	ea44 030c 	orr.w	r3, r4, ip
 800c1da:	460a      	mov	r2, r1
 800c1dc:	e7d7      	b.n	800c18e <__b2d+0x4a>
 800c1de:	bf00      	nop
 800c1e0:	3ff00000 	.word	0x3ff00000

0800c1e4 <__d2b>:
 800c1e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1e8:	4689      	mov	r9, r1
 800c1ea:	2101      	movs	r1, #1
 800c1ec:	ec57 6b10 	vmov	r6, r7, d0
 800c1f0:	4690      	mov	r8, r2
 800c1f2:	f7ff fc09 	bl	800ba08 <_Balloc>
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	b930      	cbnz	r0, 800c208 <__d2b+0x24>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	4b25      	ldr	r3, [pc, #148]	; (800c294 <__d2b+0xb0>)
 800c1fe:	4826      	ldr	r0, [pc, #152]	; (800c298 <__d2b+0xb4>)
 800c200:	f240 310a 	movw	r1, #778	; 0x30a
 800c204:	f001 fbc0 	bl	800d988 <__assert_func>
 800c208:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c20c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c210:	bb35      	cbnz	r5, 800c260 <__d2b+0x7c>
 800c212:	2e00      	cmp	r6, #0
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	d028      	beq.n	800c26a <__d2b+0x86>
 800c218:	4668      	mov	r0, sp
 800c21a:	9600      	str	r6, [sp, #0]
 800c21c:	f7ff fd06 	bl	800bc2c <__lo0bits>
 800c220:	9900      	ldr	r1, [sp, #0]
 800c222:	b300      	cbz	r0, 800c266 <__d2b+0x82>
 800c224:	9a01      	ldr	r2, [sp, #4]
 800c226:	f1c0 0320 	rsb	r3, r0, #32
 800c22a:	fa02 f303 	lsl.w	r3, r2, r3
 800c22e:	430b      	orrs	r3, r1
 800c230:	40c2      	lsrs	r2, r0
 800c232:	6163      	str	r3, [r4, #20]
 800c234:	9201      	str	r2, [sp, #4]
 800c236:	9b01      	ldr	r3, [sp, #4]
 800c238:	61a3      	str	r3, [r4, #24]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	bf14      	ite	ne
 800c23e:	2202      	movne	r2, #2
 800c240:	2201      	moveq	r2, #1
 800c242:	6122      	str	r2, [r4, #16]
 800c244:	b1d5      	cbz	r5, 800c27c <__d2b+0x98>
 800c246:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c24a:	4405      	add	r5, r0
 800c24c:	f8c9 5000 	str.w	r5, [r9]
 800c250:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c254:	f8c8 0000 	str.w	r0, [r8]
 800c258:	4620      	mov	r0, r4
 800c25a:	b003      	add	sp, #12
 800c25c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c264:	e7d5      	b.n	800c212 <__d2b+0x2e>
 800c266:	6161      	str	r1, [r4, #20]
 800c268:	e7e5      	b.n	800c236 <__d2b+0x52>
 800c26a:	a801      	add	r0, sp, #4
 800c26c:	f7ff fcde 	bl	800bc2c <__lo0bits>
 800c270:	9b01      	ldr	r3, [sp, #4]
 800c272:	6163      	str	r3, [r4, #20]
 800c274:	2201      	movs	r2, #1
 800c276:	6122      	str	r2, [r4, #16]
 800c278:	3020      	adds	r0, #32
 800c27a:	e7e3      	b.n	800c244 <__d2b+0x60>
 800c27c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c280:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c284:	f8c9 0000 	str.w	r0, [r9]
 800c288:	6918      	ldr	r0, [r3, #16]
 800c28a:	f7ff fcaf 	bl	800bbec <__hi0bits>
 800c28e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c292:	e7df      	b.n	800c254 <__d2b+0x70>
 800c294:	0800e168 	.word	0x0800e168
 800c298:	0800e258 	.word	0x0800e258

0800c29c <__ratio>:
 800c29c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a0:	4688      	mov	r8, r1
 800c2a2:	4669      	mov	r1, sp
 800c2a4:	4681      	mov	r9, r0
 800c2a6:	f7ff ff4d 	bl	800c144 <__b2d>
 800c2aa:	a901      	add	r1, sp, #4
 800c2ac:	4640      	mov	r0, r8
 800c2ae:	ec55 4b10 	vmov	r4, r5, d0
 800c2b2:	f7ff ff47 	bl	800c144 <__b2d>
 800c2b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c2be:	eba3 0c02 	sub.w	ip, r3, r2
 800c2c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c2c6:	1a9b      	subs	r3, r3, r2
 800c2c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c2cc:	ec51 0b10 	vmov	r0, r1, d0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	bfd6      	itet	le
 800c2d4:	460a      	movle	r2, r1
 800c2d6:	462a      	movgt	r2, r5
 800c2d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2dc:	468b      	mov	fp, r1
 800c2de:	462f      	mov	r7, r5
 800c2e0:	bfd4      	ite	le
 800c2e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c2e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	ee10 2a10 	vmov	r2, s0
 800c2f0:	465b      	mov	r3, fp
 800c2f2:	4639      	mov	r1, r7
 800c2f4:	f7f4 faca 	bl	800088c <__aeabi_ddiv>
 800c2f8:	ec41 0b10 	vmov	d0, r0, r1
 800c2fc:	b003      	add	sp, #12
 800c2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c302 <__copybits>:
 800c302:	3901      	subs	r1, #1
 800c304:	b570      	push	{r4, r5, r6, lr}
 800c306:	1149      	asrs	r1, r1, #5
 800c308:	6914      	ldr	r4, [r2, #16]
 800c30a:	3101      	adds	r1, #1
 800c30c:	f102 0314 	add.w	r3, r2, #20
 800c310:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c314:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c318:	1f05      	subs	r5, r0, #4
 800c31a:	42a3      	cmp	r3, r4
 800c31c:	d30c      	bcc.n	800c338 <__copybits+0x36>
 800c31e:	1aa3      	subs	r3, r4, r2
 800c320:	3b11      	subs	r3, #17
 800c322:	f023 0303 	bic.w	r3, r3, #3
 800c326:	3211      	adds	r2, #17
 800c328:	42a2      	cmp	r2, r4
 800c32a:	bf88      	it	hi
 800c32c:	2300      	movhi	r3, #0
 800c32e:	4418      	add	r0, r3
 800c330:	2300      	movs	r3, #0
 800c332:	4288      	cmp	r0, r1
 800c334:	d305      	bcc.n	800c342 <__copybits+0x40>
 800c336:	bd70      	pop	{r4, r5, r6, pc}
 800c338:	f853 6b04 	ldr.w	r6, [r3], #4
 800c33c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c340:	e7eb      	b.n	800c31a <__copybits+0x18>
 800c342:	f840 3b04 	str.w	r3, [r0], #4
 800c346:	e7f4      	b.n	800c332 <__copybits+0x30>

0800c348 <__any_on>:
 800c348:	f100 0214 	add.w	r2, r0, #20
 800c34c:	6900      	ldr	r0, [r0, #16]
 800c34e:	114b      	asrs	r3, r1, #5
 800c350:	4298      	cmp	r0, r3
 800c352:	b510      	push	{r4, lr}
 800c354:	db11      	blt.n	800c37a <__any_on+0x32>
 800c356:	dd0a      	ble.n	800c36e <__any_on+0x26>
 800c358:	f011 011f 	ands.w	r1, r1, #31
 800c35c:	d007      	beq.n	800c36e <__any_on+0x26>
 800c35e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c362:	fa24 f001 	lsr.w	r0, r4, r1
 800c366:	fa00 f101 	lsl.w	r1, r0, r1
 800c36a:	428c      	cmp	r4, r1
 800c36c:	d10b      	bne.n	800c386 <__any_on+0x3e>
 800c36e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c372:	4293      	cmp	r3, r2
 800c374:	d803      	bhi.n	800c37e <__any_on+0x36>
 800c376:	2000      	movs	r0, #0
 800c378:	bd10      	pop	{r4, pc}
 800c37a:	4603      	mov	r3, r0
 800c37c:	e7f7      	b.n	800c36e <__any_on+0x26>
 800c37e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c382:	2900      	cmp	r1, #0
 800c384:	d0f5      	beq.n	800c372 <__any_on+0x2a>
 800c386:	2001      	movs	r0, #1
 800c388:	e7f6      	b.n	800c378 <__any_on+0x30>

0800c38a <_calloc_r>:
 800c38a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c38c:	fba1 2402 	umull	r2, r4, r1, r2
 800c390:	b94c      	cbnz	r4, 800c3a6 <_calloc_r+0x1c>
 800c392:	4611      	mov	r1, r2
 800c394:	9201      	str	r2, [sp, #4]
 800c396:	f000 f87b 	bl	800c490 <_malloc_r>
 800c39a:	9a01      	ldr	r2, [sp, #4]
 800c39c:	4605      	mov	r5, r0
 800c39e:	b930      	cbnz	r0, 800c3ae <_calloc_r+0x24>
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	b003      	add	sp, #12
 800c3a4:	bd30      	pop	{r4, r5, pc}
 800c3a6:	220c      	movs	r2, #12
 800c3a8:	6002      	str	r2, [r0, #0]
 800c3aa:	2500      	movs	r5, #0
 800c3ac:	e7f8      	b.n	800c3a0 <_calloc_r+0x16>
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	f7fb fe86 	bl	80080c0 <memset>
 800c3b4:	e7f4      	b.n	800c3a0 <_calloc_r+0x16>
	...

0800c3b8 <_free_r>:
 800c3b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3ba:	2900      	cmp	r1, #0
 800c3bc:	d044      	beq.n	800c448 <_free_r+0x90>
 800c3be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3c2:	9001      	str	r0, [sp, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f1a1 0404 	sub.w	r4, r1, #4
 800c3ca:	bfb8      	it	lt
 800c3cc:	18e4      	addlt	r4, r4, r3
 800c3ce:	f001 fb47 	bl	800da60 <__malloc_lock>
 800c3d2:	4a1e      	ldr	r2, [pc, #120]	; (800c44c <_free_r+0x94>)
 800c3d4:	9801      	ldr	r0, [sp, #4]
 800c3d6:	6813      	ldr	r3, [r2, #0]
 800c3d8:	b933      	cbnz	r3, 800c3e8 <_free_r+0x30>
 800c3da:	6063      	str	r3, [r4, #4]
 800c3dc:	6014      	str	r4, [r2, #0]
 800c3de:	b003      	add	sp, #12
 800c3e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3e4:	f001 bb42 	b.w	800da6c <__malloc_unlock>
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	d908      	bls.n	800c3fe <_free_r+0x46>
 800c3ec:	6825      	ldr	r5, [r4, #0]
 800c3ee:	1961      	adds	r1, r4, r5
 800c3f0:	428b      	cmp	r3, r1
 800c3f2:	bf01      	itttt	eq
 800c3f4:	6819      	ldreq	r1, [r3, #0]
 800c3f6:	685b      	ldreq	r3, [r3, #4]
 800c3f8:	1949      	addeq	r1, r1, r5
 800c3fa:	6021      	streq	r1, [r4, #0]
 800c3fc:	e7ed      	b.n	800c3da <_free_r+0x22>
 800c3fe:	461a      	mov	r2, r3
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	b10b      	cbz	r3, 800c408 <_free_r+0x50>
 800c404:	42a3      	cmp	r3, r4
 800c406:	d9fa      	bls.n	800c3fe <_free_r+0x46>
 800c408:	6811      	ldr	r1, [r2, #0]
 800c40a:	1855      	adds	r5, r2, r1
 800c40c:	42a5      	cmp	r5, r4
 800c40e:	d10b      	bne.n	800c428 <_free_r+0x70>
 800c410:	6824      	ldr	r4, [r4, #0]
 800c412:	4421      	add	r1, r4
 800c414:	1854      	adds	r4, r2, r1
 800c416:	42a3      	cmp	r3, r4
 800c418:	6011      	str	r1, [r2, #0]
 800c41a:	d1e0      	bne.n	800c3de <_free_r+0x26>
 800c41c:	681c      	ldr	r4, [r3, #0]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	6053      	str	r3, [r2, #4]
 800c422:	4421      	add	r1, r4
 800c424:	6011      	str	r1, [r2, #0]
 800c426:	e7da      	b.n	800c3de <_free_r+0x26>
 800c428:	d902      	bls.n	800c430 <_free_r+0x78>
 800c42a:	230c      	movs	r3, #12
 800c42c:	6003      	str	r3, [r0, #0]
 800c42e:	e7d6      	b.n	800c3de <_free_r+0x26>
 800c430:	6825      	ldr	r5, [r4, #0]
 800c432:	1961      	adds	r1, r4, r5
 800c434:	428b      	cmp	r3, r1
 800c436:	bf04      	itt	eq
 800c438:	6819      	ldreq	r1, [r3, #0]
 800c43a:	685b      	ldreq	r3, [r3, #4]
 800c43c:	6063      	str	r3, [r4, #4]
 800c43e:	bf04      	itt	eq
 800c440:	1949      	addeq	r1, r1, r5
 800c442:	6021      	streq	r1, [r4, #0]
 800c444:	6054      	str	r4, [r2, #4]
 800c446:	e7ca      	b.n	800c3de <_free_r+0x26>
 800c448:	b003      	add	sp, #12
 800c44a:	bd30      	pop	{r4, r5, pc}
 800c44c:	20000410 	.word	0x20000410

0800c450 <sbrk_aligned>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	4e0e      	ldr	r6, [pc, #56]	; (800c48c <sbrk_aligned+0x3c>)
 800c454:	460c      	mov	r4, r1
 800c456:	6831      	ldr	r1, [r6, #0]
 800c458:	4605      	mov	r5, r0
 800c45a:	b911      	cbnz	r1, 800c462 <sbrk_aligned+0x12>
 800c45c:	f001 f8e4 	bl	800d628 <_sbrk_r>
 800c460:	6030      	str	r0, [r6, #0]
 800c462:	4621      	mov	r1, r4
 800c464:	4628      	mov	r0, r5
 800c466:	f001 f8df 	bl	800d628 <_sbrk_r>
 800c46a:	1c43      	adds	r3, r0, #1
 800c46c:	d00a      	beq.n	800c484 <sbrk_aligned+0x34>
 800c46e:	1cc4      	adds	r4, r0, #3
 800c470:	f024 0403 	bic.w	r4, r4, #3
 800c474:	42a0      	cmp	r0, r4
 800c476:	d007      	beq.n	800c488 <sbrk_aligned+0x38>
 800c478:	1a21      	subs	r1, r4, r0
 800c47a:	4628      	mov	r0, r5
 800c47c:	f001 f8d4 	bl	800d628 <_sbrk_r>
 800c480:	3001      	adds	r0, #1
 800c482:	d101      	bne.n	800c488 <sbrk_aligned+0x38>
 800c484:	f04f 34ff 	mov.w	r4, #4294967295
 800c488:	4620      	mov	r0, r4
 800c48a:	bd70      	pop	{r4, r5, r6, pc}
 800c48c:	20000414 	.word	0x20000414

0800c490 <_malloc_r>:
 800c490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c494:	1ccd      	adds	r5, r1, #3
 800c496:	f025 0503 	bic.w	r5, r5, #3
 800c49a:	3508      	adds	r5, #8
 800c49c:	2d0c      	cmp	r5, #12
 800c49e:	bf38      	it	cc
 800c4a0:	250c      	movcc	r5, #12
 800c4a2:	2d00      	cmp	r5, #0
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	db01      	blt.n	800c4ac <_malloc_r+0x1c>
 800c4a8:	42a9      	cmp	r1, r5
 800c4aa:	d905      	bls.n	800c4b8 <_malloc_r+0x28>
 800c4ac:	230c      	movs	r3, #12
 800c4ae:	603b      	str	r3, [r7, #0]
 800c4b0:	2600      	movs	r6, #0
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b8:	4e2e      	ldr	r6, [pc, #184]	; (800c574 <_malloc_r+0xe4>)
 800c4ba:	f001 fad1 	bl	800da60 <__malloc_lock>
 800c4be:	6833      	ldr	r3, [r6, #0]
 800c4c0:	461c      	mov	r4, r3
 800c4c2:	bb34      	cbnz	r4, 800c512 <_malloc_r+0x82>
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	f7ff ffc2 	bl	800c450 <sbrk_aligned>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	d14d      	bne.n	800c56e <_malloc_r+0xde>
 800c4d2:	6834      	ldr	r4, [r6, #0]
 800c4d4:	4626      	mov	r6, r4
 800c4d6:	2e00      	cmp	r6, #0
 800c4d8:	d140      	bne.n	800c55c <_malloc_r+0xcc>
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	4631      	mov	r1, r6
 800c4de:	4638      	mov	r0, r7
 800c4e0:	eb04 0803 	add.w	r8, r4, r3
 800c4e4:	f001 f8a0 	bl	800d628 <_sbrk_r>
 800c4e8:	4580      	cmp	r8, r0
 800c4ea:	d13a      	bne.n	800c562 <_malloc_r+0xd2>
 800c4ec:	6821      	ldr	r1, [r4, #0]
 800c4ee:	3503      	adds	r5, #3
 800c4f0:	1a6d      	subs	r5, r5, r1
 800c4f2:	f025 0503 	bic.w	r5, r5, #3
 800c4f6:	3508      	adds	r5, #8
 800c4f8:	2d0c      	cmp	r5, #12
 800c4fa:	bf38      	it	cc
 800c4fc:	250c      	movcc	r5, #12
 800c4fe:	4629      	mov	r1, r5
 800c500:	4638      	mov	r0, r7
 800c502:	f7ff ffa5 	bl	800c450 <sbrk_aligned>
 800c506:	3001      	adds	r0, #1
 800c508:	d02b      	beq.n	800c562 <_malloc_r+0xd2>
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	442b      	add	r3, r5
 800c50e:	6023      	str	r3, [r4, #0]
 800c510:	e00e      	b.n	800c530 <_malloc_r+0xa0>
 800c512:	6822      	ldr	r2, [r4, #0]
 800c514:	1b52      	subs	r2, r2, r5
 800c516:	d41e      	bmi.n	800c556 <_malloc_r+0xc6>
 800c518:	2a0b      	cmp	r2, #11
 800c51a:	d916      	bls.n	800c54a <_malloc_r+0xba>
 800c51c:	1961      	adds	r1, r4, r5
 800c51e:	42a3      	cmp	r3, r4
 800c520:	6025      	str	r5, [r4, #0]
 800c522:	bf18      	it	ne
 800c524:	6059      	strne	r1, [r3, #4]
 800c526:	6863      	ldr	r3, [r4, #4]
 800c528:	bf08      	it	eq
 800c52a:	6031      	streq	r1, [r6, #0]
 800c52c:	5162      	str	r2, [r4, r5]
 800c52e:	604b      	str	r3, [r1, #4]
 800c530:	4638      	mov	r0, r7
 800c532:	f104 060b 	add.w	r6, r4, #11
 800c536:	f001 fa99 	bl	800da6c <__malloc_unlock>
 800c53a:	f026 0607 	bic.w	r6, r6, #7
 800c53e:	1d23      	adds	r3, r4, #4
 800c540:	1af2      	subs	r2, r6, r3
 800c542:	d0b6      	beq.n	800c4b2 <_malloc_r+0x22>
 800c544:	1b9b      	subs	r3, r3, r6
 800c546:	50a3      	str	r3, [r4, r2]
 800c548:	e7b3      	b.n	800c4b2 <_malloc_r+0x22>
 800c54a:	6862      	ldr	r2, [r4, #4]
 800c54c:	42a3      	cmp	r3, r4
 800c54e:	bf0c      	ite	eq
 800c550:	6032      	streq	r2, [r6, #0]
 800c552:	605a      	strne	r2, [r3, #4]
 800c554:	e7ec      	b.n	800c530 <_malloc_r+0xa0>
 800c556:	4623      	mov	r3, r4
 800c558:	6864      	ldr	r4, [r4, #4]
 800c55a:	e7b2      	b.n	800c4c2 <_malloc_r+0x32>
 800c55c:	4634      	mov	r4, r6
 800c55e:	6876      	ldr	r6, [r6, #4]
 800c560:	e7b9      	b.n	800c4d6 <_malloc_r+0x46>
 800c562:	230c      	movs	r3, #12
 800c564:	603b      	str	r3, [r7, #0]
 800c566:	4638      	mov	r0, r7
 800c568:	f001 fa80 	bl	800da6c <__malloc_unlock>
 800c56c:	e7a1      	b.n	800c4b2 <_malloc_r+0x22>
 800c56e:	6025      	str	r5, [r4, #0]
 800c570:	e7de      	b.n	800c530 <_malloc_r+0xa0>
 800c572:	bf00      	nop
 800c574:	20000410 	.word	0x20000410

0800c578 <__ssputs_r>:
 800c578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c57c:	688e      	ldr	r6, [r1, #8]
 800c57e:	429e      	cmp	r6, r3
 800c580:	4682      	mov	sl, r0
 800c582:	460c      	mov	r4, r1
 800c584:	4690      	mov	r8, r2
 800c586:	461f      	mov	r7, r3
 800c588:	d838      	bhi.n	800c5fc <__ssputs_r+0x84>
 800c58a:	898a      	ldrh	r2, [r1, #12]
 800c58c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c590:	d032      	beq.n	800c5f8 <__ssputs_r+0x80>
 800c592:	6825      	ldr	r5, [r4, #0]
 800c594:	6909      	ldr	r1, [r1, #16]
 800c596:	eba5 0901 	sub.w	r9, r5, r1
 800c59a:	6965      	ldr	r5, [r4, #20]
 800c59c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	444b      	add	r3, r9
 800c5a8:	106d      	asrs	r5, r5, #1
 800c5aa:	429d      	cmp	r5, r3
 800c5ac:	bf38      	it	cc
 800c5ae:	461d      	movcc	r5, r3
 800c5b0:	0553      	lsls	r3, r2, #21
 800c5b2:	d531      	bpl.n	800c618 <__ssputs_r+0xa0>
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	f7ff ff6b 	bl	800c490 <_malloc_r>
 800c5ba:	4606      	mov	r6, r0
 800c5bc:	b950      	cbnz	r0, 800c5d4 <__ssputs_r+0x5c>
 800c5be:	230c      	movs	r3, #12
 800c5c0:	f8ca 3000 	str.w	r3, [sl]
 800c5c4:	89a3      	ldrh	r3, [r4, #12]
 800c5c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5ca:	81a3      	strh	r3, [r4, #12]
 800c5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5d4:	6921      	ldr	r1, [r4, #16]
 800c5d6:	464a      	mov	r2, r9
 800c5d8:	f7ff fa08 	bl	800b9ec <memcpy>
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5e6:	81a3      	strh	r3, [r4, #12]
 800c5e8:	6126      	str	r6, [r4, #16]
 800c5ea:	6165      	str	r5, [r4, #20]
 800c5ec:	444e      	add	r6, r9
 800c5ee:	eba5 0509 	sub.w	r5, r5, r9
 800c5f2:	6026      	str	r6, [r4, #0]
 800c5f4:	60a5      	str	r5, [r4, #8]
 800c5f6:	463e      	mov	r6, r7
 800c5f8:	42be      	cmp	r6, r7
 800c5fa:	d900      	bls.n	800c5fe <__ssputs_r+0x86>
 800c5fc:	463e      	mov	r6, r7
 800c5fe:	6820      	ldr	r0, [r4, #0]
 800c600:	4632      	mov	r2, r6
 800c602:	4641      	mov	r1, r8
 800c604:	f001 fa12 	bl	800da2c <memmove>
 800c608:	68a3      	ldr	r3, [r4, #8]
 800c60a:	1b9b      	subs	r3, r3, r6
 800c60c:	60a3      	str	r3, [r4, #8]
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	4433      	add	r3, r6
 800c612:	6023      	str	r3, [r4, #0]
 800c614:	2000      	movs	r0, #0
 800c616:	e7db      	b.n	800c5d0 <__ssputs_r+0x58>
 800c618:	462a      	mov	r2, r5
 800c61a:	f001 fa2d 	bl	800da78 <_realloc_r>
 800c61e:	4606      	mov	r6, r0
 800c620:	2800      	cmp	r0, #0
 800c622:	d1e1      	bne.n	800c5e8 <__ssputs_r+0x70>
 800c624:	6921      	ldr	r1, [r4, #16]
 800c626:	4650      	mov	r0, sl
 800c628:	f7ff fec6 	bl	800c3b8 <_free_r>
 800c62c:	e7c7      	b.n	800c5be <__ssputs_r+0x46>
	...

0800c630 <_svfiprintf_r>:
 800c630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c634:	4698      	mov	r8, r3
 800c636:	898b      	ldrh	r3, [r1, #12]
 800c638:	061b      	lsls	r3, r3, #24
 800c63a:	b09d      	sub	sp, #116	; 0x74
 800c63c:	4607      	mov	r7, r0
 800c63e:	460d      	mov	r5, r1
 800c640:	4614      	mov	r4, r2
 800c642:	d50e      	bpl.n	800c662 <_svfiprintf_r+0x32>
 800c644:	690b      	ldr	r3, [r1, #16]
 800c646:	b963      	cbnz	r3, 800c662 <_svfiprintf_r+0x32>
 800c648:	2140      	movs	r1, #64	; 0x40
 800c64a:	f7ff ff21 	bl	800c490 <_malloc_r>
 800c64e:	6028      	str	r0, [r5, #0]
 800c650:	6128      	str	r0, [r5, #16]
 800c652:	b920      	cbnz	r0, 800c65e <_svfiprintf_r+0x2e>
 800c654:	230c      	movs	r3, #12
 800c656:	603b      	str	r3, [r7, #0]
 800c658:	f04f 30ff 	mov.w	r0, #4294967295
 800c65c:	e0d1      	b.n	800c802 <_svfiprintf_r+0x1d2>
 800c65e:	2340      	movs	r3, #64	; 0x40
 800c660:	616b      	str	r3, [r5, #20]
 800c662:	2300      	movs	r3, #0
 800c664:	9309      	str	r3, [sp, #36]	; 0x24
 800c666:	2320      	movs	r3, #32
 800c668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c66c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c670:	2330      	movs	r3, #48	; 0x30
 800c672:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c81c <_svfiprintf_r+0x1ec>
 800c676:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c67a:	f04f 0901 	mov.w	r9, #1
 800c67e:	4623      	mov	r3, r4
 800c680:	469a      	mov	sl, r3
 800c682:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c686:	b10a      	cbz	r2, 800c68c <_svfiprintf_r+0x5c>
 800c688:	2a25      	cmp	r2, #37	; 0x25
 800c68a:	d1f9      	bne.n	800c680 <_svfiprintf_r+0x50>
 800c68c:	ebba 0b04 	subs.w	fp, sl, r4
 800c690:	d00b      	beq.n	800c6aa <_svfiprintf_r+0x7a>
 800c692:	465b      	mov	r3, fp
 800c694:	4622      	mov	r2, r4
 800c696:	4629      	mov	r1, r5
 800c698:	4638      	mov	r0, r7
 800c69a:	f7ff ff6d 	bl	800c578 <__ssputs_r>
 800c69e:	3001      	adds	r0, #1
 800c6a0:	f000 80aa 	beq.w	800c7f8 <_svfiprintf_r+0x1c8>
 800c6a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6a6:	445a      	add	r2, fp
 800c6a8:	9209      	str	r2, [sp, #36]	; 0x24
 800c6aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 80a2 	beq.w	800c7f8 <_svfiprintf_r+0x1c8>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6be:	f10a 0a01 	add.w	sl, sl, #1
 800c6c2:	9304      	str	r3, [sp, #16]
 800c6c4:	9307      	str	r3, [sp, #28]
 800c6c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c6cc:	4654      	mov	r4, sl
 800c6ce:	2205      	movs	r2, #5
 800c6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d4:	4851      	ldr	r0, [pc, #324]	; (800c81c <_svfiprintf_r+0x1ec>)
 800c6d6:	f7f3 fda3 	bl	8000220 <memchr>
 800c6da:	9a04      	ldr	r2, [sp, #16]
 800c6dc:	b9d8      	cbnz	r0, 800c716 <_svfiprintf_r+0xe6>
 800c6de:	06d0      	lsls	r0, r2, #27
 800c6e0:	bf44      	itt	mi
 800c6e2:	2320      	movmi	r3, #32
 800c6e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6e8:	0711      	lsls	r1, r2, #28
 800c6ea:	bf44      	itt	mi
 800c6ec:	232b      	movmi	r3, #43	; 0x2b
 800c6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6f8:	d015      	beq.n	800c726 <_svfiprintf_r+0xf6>
 800c6fa:	9a07      	ldr	r2, [sp, #28]
 800c6fc:	4654      	mov	r4, sl
 800c6fe:	2000      	movs	r0, #0
 800c700:	f04f 0c0a 	mov.w	ip, #10
 800c704:	4621      	mov	r1, r4
 800c706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c70a:	3b30      	subs	r3, #48	; 0x30
 800c70c:	2b09      	cmp	r3, #9
 800c70e:	d94e      	bls.n	800c7ae <_svfiprintf_r+0x17e>
 800c710:	b1b0      	cbz	r0, 800c740 <_svfiprintf_r+0x110>
 800c712:	9207      	str	r2, [sp, #28]
 800c714:	e014      	b.n	800c740 <_svfiprintf_r+0x110>
 800c716:	eba0 0308 	sub.w	r3, r0, r8
 800c71a:	fa09 f303 	lsl.w	r3, r9, r3
 800c71e:	4313      	orrs	r3, r2
 800c720:	9304      	str	r3, [sp, #16]
 800c722:	46a2      	mov	sl, r4
 800c724:	e7d2      	b.n	800c6cc <_svfiprintf_r+0x9c>
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	1d19      	adds	r1, r3, #4
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	9103      	str	r1, [sp, #12]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	bfbb      	ittet	lt
 800c732:	425b      	neglt	r3, r3
 800c734:	f042 0202 	orrlt.w	r2, r2, #2
 800c738:	9307      	strge	r3, [sp, #28]
 800c73a:	9307      	strlt	r3, [sp, #28]
 800c73c:	bfb8      	it	lt
 800c73e:	9204      	strlt	r2, [sp, #16]
 800c740:	7823      	ldrb	r3, [r4, #0]
 800c742:	2b2e      	cmp	r3, #46	; 0x2e
 800c744:	d10c      	bne.n	800c760 <_svfiprintf_r+0x130>
 800c746:	7863      	ldrb	r3, [r4, #1]
 800c748:	2b2a      	cmp	r3, #42	; 0x2a
 800c74a:	d135      	bne.n	800c7b8 <_svfiprintf_r+0x188>
 800c74c:	9b03      	ldr	r3, [sp, #12]
 800c74e:	1d1a      	adds	r2, r3, #4
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	9203      	str	r2, [sp, #12]
 800c754:	2b00      	cmp	r3, #0
 800c756:	bfb8      	it	lt
 800c758:	f04f 33ff 	movlt.w	r3, #4294967295
 800c75c:	3402      	adds	r4, #2
 800c75e:	9305      	str	r3, [sp, #20]
 800c760:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c82c <_svfiprintf_r+0x1fc>
 800c764:	7821      	ldrb	r1, [r4, #0]
 800c766:	2203      	movs	r2, #3
 800c768:	4650      	mov	r0, sl
 800c76a:	f7f3 fd59 	bl	8000220 <memchr>
 800c76e:	b140      	cbz	r0, 800c782 <_svfiprintf_r+0x152>
 800c770:	2340      	movs	r3, #64	; 0x40
 800c772:	eba0 000a 	sub.w	r0, r0, sl
 800c776:	fa03 f000 	lsl.w	r0, r3, r0
 800c77a:	9b04      	ldr	r3, [sp, #16]
 800c77c:	4303      	orrs	r3, r0
 800c77e:	3401      	adds	r4, #1
 800c780:	9304      	str	r3, [sp, #16]
 800c782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c786:	4826      	ldr	r0, [pc, #152]	; (800c820 <_svfiprintf_r+0x1f0>)
 800c788:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c78c:	2206      	movs	r2, #6
 800c78e:	f7f3 fd47 	bl	8000220 <memchr>
 800c792:	2800      	cmp	r0, #0
 800c794:	d038      	beq.n	800c808 <_svfiprintf_r+0x1d8>
 800c796:	4b23      	ldr	r3, [pc, #140]	; (800c824 <_svfiprintf_r+0x1f4>)
 800c798:	bb1b      	cbnz	r3, 800c7e2 <_svfiprintf_r+0x1b2>
 800c79a:	9b03      	ldr	r3, [sp, #12]
 800c79c:	3307      	adds	r3, #7
 800c79e:	f023 0307 	bic.w	r3, r3, #7
 800c7a2:	3308      	adds	r3, #8
 800c7a4:	9303      	str	r3, [sp, #12]
 800c7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7a8:	4433      	add	r3, r6
 800c7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ac:	e767      	b.n	800c67e <_svfiprintf_r+0x4e>
 800c7ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	2001      	movs	r0, #1
 800c7b6:	e7a5      	b.n	800c704 <_svfiprintf_r+0xd4>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	3401      	adds	r4, #1
 800c7bc:	9305      	str	r3, [sp, #20]
 800c7be:	4619      	mov	r1, r3
 800c7c0:	f04f 0c0a 	mov.w	ip, #10
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7ca:	3a30      	subs	r2, #48	; 0x30
 800c7cc:	2a09      	cmp	r2, #9
 800c7ce:	d903      	bls.n	800c7d8 <_svfiprintf_r+0x1a8>
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d0c5      	beq.n	800c760 <_svfiprintf_r+0x130>
 800c7d4:	9105      	str	r1, [sp, #20]
 800c7d6:	e7c3      	b.n	800c760 <_svfiprintf_r+0x130>
 800c7d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7dc:	4604      	mov	r4, r0
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e7f0      	b.n	800c7c4 <_svfiprintf_r+0x194>
 800c7e2:	ab03      	add	r3, sp, #12
 800c7e4:	9300      	str	r3, [sp, #0]
 800c7e6:	462a      	mov	r2, r5
 800c7e8:	4b0f      	ldr	r3, [pc, #60]	; (800c828 <_svfiprintf_r+0x1f8>)
 800c7ea:	a904      	add	r1, sp, #16
 800c7ec:	4638      	mov	r0, r7
 800c7ee:	f7fb fd0f 	bl	8008210 <_printf_float>
 800c7f2:	1c42      	adds	r2, r0, #1
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	d1d6      	bne.n	800c7a6 <_svfiprintf_r+0x176>
 800c7f8:	89ab      	ldrh	r3, [r5, #12]
 800c7fa:	065b      	lsls	r3, r3, #25
 800c7fc:	f53f af2c 	bmi.w	800c658 <_svfiprintf_r+0x28>
 800c800:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c802:	b01d      	add	sp, #116	; 0x74
 800c804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c808:	ab03      	add	r3, sp, #12
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	462a      	mov	r2, r5
 800c80e:	4b06      	ldr	r3, [pc, #24]	; (800c828 <_svfiprintf_r+0x1f8>)
 800c810:	a904      	add	r1, sp, #16
 800c812:	4638      	mov	r0, r7
 800c814:	f7fb ffa0 	bl	8008758 <_printf_i>
 800c818:	e7eb      	b.n	800c7f2 <_svfiprintf_r+0x1c2>
 800c81a:	bf00      	nop
 800c81c:	0800e3b4 	.word	0x0800e3b4
 800c820:	0800e3be 	.word	0x0800e3be
 800c824:	08008211 	.word	0x08008211
 800c828:	0800c579 	.word	0x0800c579
 800c82c:	0800e3ba 	.word	0x0800e3ba

0800c830 <_sungetc_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	1c4b      	adds	r3, r1, #1
 800c834:	4614      	mov	r4, r2
 800c836:	d103      	bne.n	800c840 <_sungetc_r+0x10>
 800c838:	f04f 35ff 	mov.w	r5, #4294967295
 800c83c:	4628      	mov	r0, r5
 800c83e:	bd38      	pop	{r3, r4, r5, pc}
 800c840:	8993      	ldrh	r3, [r2, #12]
 800c842:	f023 0320 	bic.w	r3, r3, #32
 800c846:	8193      	strh	r3, [r2, #12]
 800c848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c84a:	6852      	ldr	r2, [r2, #4]
 800c84c:	b2cd      	uxtb	r5, r1
 800c84e:	b18b      	cbz	r3, 800c874 <_sungetc_r+0x44>
 800c850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c852:	4293      	cmp	r3, r2
 800c854:	dd08      	ble.n	800c868 <_sungetc_r+0x38>
 800c856:	6823      	ldr	r3, [r4, #0]
 800c858:	1e5a      	subs	r2, r3, #1
 800c85a:	6022      	str	r2, [r4, #0]
 800c85c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c860:	6863      	ldr	r3, [r4, #4]
 800c862:	3301      	adds	r3, #1
 800c864:	6063      	str	r3, [r4, #4]
 800c866:	e7e9      	b.n	800c83c <_sungetc_r+0xc>
 800c868:	4621      	mov	r1, r4
 800c86a:	f000 ffad 	bl	800d7c8 <__submore>
 800c86e:	2800      	cmp	r0, #0
 800c870:	d0f1      	beq.n	800c856 <_sungetc_r+0x26>
 800c872:	e7e1      	b.n	800c838 <_sungetc_r+0x8>
 800c874:	6921      	ldr	r1, [r4, #16]
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	b151      	cbz	r1, 800c890 <_sungetc_r+0x60>
 800c87a:	4299      	cmp	r1, r3
 800c87c:	d208      	bcs.n	800c890 <_sungetc_r+0x60>
 800c87e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c882:	42a9      	cmp	r1, r5
 800c884:	d104      	bne.n	800c890 <_sungetc_r+0x60>
 800c886:	3b01      	subs	r3, #1
 800c888:	3201      	adds	r2, #1
 800c88a:	6023      	str	r3, [r4, #0]
 800c88c:	6062      	str	r2, [r4, #4]
 800c88e:	e7d5      	b.n	800c83c <_sungetc_r+0xc>
 800c890:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c898:	6363      	str	r3, [r4, #52]	; 0x34
 800c89a:	2303      	movs	r3, #3
 800c89c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c89e:	4623      	mov	r3, r4
 800c8a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e7dc      	b.n	800c864 <_sungetc_r+0x34>

0800c8aa <__ssrefill_r>:
 800c8aa:	b510      	push	{r4, lr}
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c8b0:	b169      	cbz	r1, 800c8ce <__ssrefill_r+0x24>
 800c8b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8b6:	4299      	cmp	r1, r3
 800c8b8:	d001      	beq.n	800c8be <__ssrefill_r+0x14>
 800c8ba:	f7ff fd7d 	bl	800c3b8 <_free_r>
 800c8be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8c0:	6063      	str	r3, [r4, #4]
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	6360      	str	r0, [r4, #52]	; 0x34
 800c8c6:	b113      	cbz	r3, 800c8ce <__ssrefill_r+0x24>
 800c8c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c8ca:	6023      	str	r3, [r4, #0]
 800c8cc:	bd10      	pop	{r4, pc}
 800c8ce:	6923      	ldr	r3, [r4, #16]
 800c8d0:	6023      	str	r3, [r4, #0]
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	6063      	str	r3, [r4, #4]
 800c8d6:	89a3      	ldrh	r3, [r4, #12]
 800c8d8:	f043 0320 	orr.w	r3, r3, #32
 800c8dc:	81a3      	strh	r3, [r4, #12]
 800c8de:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e2:	e7f3      	b.n	800c8cc <__ssrefill_r+0x22>

0800c8e4 <__ssvfiscanf_r>:
 800c8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8e8:	460c      	mov	r4, r1
 800c8ea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c8f4:	49a6      	ldr	r1, [pc, #664]	; (800cb90 <__ssvfiscanf_r+0x2ac>)
 800c8f6:	91a0      	str	r1, [sp, #640]	; 0x280
 800c8f8:	f10d 0804 	add.w	r8, sp, #4
 800c8fc:	49a5      	ldr	r1, [pc, #660]	; (800cb94 <__ssvfiscanf_r+0x2b0>)
 800c8fe:	4fa6      	ldr	r7, [pc, #664]	; (800cb98 <__ssvfiscanf_r+0x2b4>)
 800c900:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cb9c <__ssvfiscanf_r+0x2b8>
 800c904:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c908:	4606      	mov	r6, r0
 800c90a:	91a1      	str	r1, [sp, #644]	; 0x284
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	7813      	ldrb	r3, [r2, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	f000 815a 	beq.w	800cbca <__ssvfiscanf_r+0x2e6>
 800c916:	5dd9      	ldrb	r1, [r3, r7]
 800c918:	f011 0108 	ands.w	r1, r1, #8
 800c91c:	f102 0501 	add.w	r5, r2, #1
 800c920:	d019      	beq.n	800c956 <__ssvfiscanf_r+0x72>
 800c922:	6863      	ldr	r3, [r4, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	dd0f      	ble.n	800c948 <__ssvfiscanf_r+0x64>
 800c928:	6823      	ldr	r3, [r4, #0]
 800c92a:	781a      	ldrb	r2, [r3, #0]
 800c92c:	5cba      	ldrb	r2, [r7, r2]
 800c92e:	0712      	lsls	r2, r2, #28
 800c930:	d401      	bmi.n	800c936 <__ssvfiscanf_r+0x52>
 800c932:	462a      	mov	r2, r5
 800c934:	e7eb      	b.n	800c90e <__ssvfiscanf_r+0x2a>
 800c936:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c938:	3201      	adds	r2, #1
 800c93a:	9245      	str	r2, [sp, #276]	; 0x114
 800c93c:	6862      	ldr	r2, [r4, #4]
 800c93e:	3301      	adds	r3, #1
 800c940:	3a01      	subs	r2, #1
 800c942:	6062      	str	r2, [r4, #4]
 800c944:	6023      	str	r3, [r4, #0]
 800c946:	e7ec      	b.n	800c922 <__ssvfiscanf_r+0x3e>
 800c948:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c94a:	4621      	mov	r1, r4
 800c94c:	4630      	mov	r0, r6
 800c94e:	4798      	blx	r3
 800c950:	2800      	cmp	r0, #0
 800c952:	d0e9      	beq.n	800c928 <__ssvfiscanf_r+0x44>
 800c954:	e7ed      	b.n	800c932 <__ssvfiscanf_r+0x4e>
 800c956:	2b25      	cmp	r3, #37	; 0x25
 800c958:	d012      	beq.n	800c980 <__ssvfiscanf_r+0x9c>
 800c95a:	469a      	mov	sl, r3
 800c95c:	6863      	ldr	r3, [r4, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f340 8091 	ble.w	800ca86 <__ssvfiscanf_r+0x1a2>
 800c964:	6822      	ldr	r2, [r4, #0]
 800c966:	7813      	ldrb	r3, [r2, #0]
 800c968:	4553      	cmp	r3, sl
 800c96a:	f040 812e 	bne.w	800cbca <__ssvfiscanf_r+0x2e6>
 800c96e:	6863      	ldr	r3, [r4, #4]
 800c970:	3b01      	subs	r3, #1
 800c972:	6063      	str	r3, [r4, #4]
 800c974:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c976:	3201      	adds	r2, #1
 800c978:	3301      	adds	r3, #1
 800c97a:	6022      	str	r2, [r4, #0]
 800c97c:	9345      	str	r3, [sp, #276]	; 0x114
 800c97e:	e7d8      	b.n	800c932 <__ssvfiscanf_r+0x4e>
 800c980:	9141      	str	r1, [sp, #260]	; 0x104
 800c982:	9143      	str	r1, [sp, #268]	; 0x10c
 800c984:	7853      	ldrb	r3, [r2, #1]
 800c986:	2b2a      	cmp	r3, #42	; 0x2a
 800c988:	bf02      	ittt	eq
 800c98a:	2310      	moveq	r3, #16
 800c98c:	1c95      	addeq	r5, r2, #2
 800c98e:	9341      	streq	r3, [sp, #260]	; 0x104
 800c990:	220a      	movs	r2, #10
 800c992:	46aa      	mov	sl, r5
 800c994:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c998:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c99c:	2b09      	cmp	r3, #9
 800c99e:	d91d      	bls.n	800c9dc <__ssvfiscanf_r+0xf8>
 800c9a0:	487e      	ldr	r0, [pc, #504]	; (800cb9c <__ssvfiscanf_r+0x2b8>)
 800c9a2:	2203      	movs	r2, #3
 800c9a4:	f7f3 fc3c 	bl	8000220 <memchr>
 800c9a8:	b140      	cbz	r0, 800c9bc <__ssvfiscanf_r+0xd8>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	eba0 0009 	sub.w	r0, r0, r9
 800c9b0:	fa03 f000 	lsl.w	r0, r3, r0
 800c9b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c9b6:	4318      	orrs	r0, r3
 800c9b8:	9041      	str	r0, [sp, #260]	; 0x104
 800c9ba:	4655      	mov	r5, sl
 800c9bc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c9c0:	2b78      	cmp	r3, #120	; 0x78
 800c9c2:	d806      	bhi.n	800c9d2 <__ssvfiscanf_r+0xee>
 800c9c4:	2b57      	cmp	r3, #87	; 0x57
 800c9c6:	d810      	bhi.n	800c9ea <__ssvfiscanf_r+0x106>
 800c9c8:	2b25      	cmp	r3, #37	; 0x25
 800c9ca:	d0c6      	beq.n	800c95a <__ssvfiscanf_r+0x76>
 800c9cc:	d856      	bhi.n	800ca7c <__ssvfiscanf_r+0x198>
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d064      	beq.n	800ca9c <__ssvfiscanf_r+0x1b8>
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	9347      	str	r3, [sp, #284]	; 0x11c
 800c9d6:	230a      	movs	r3, #10
 800c9d8:	9342      	str	r3, [sp, #264]	; 0x108
 800c9da:	e071      	b.n	800cac0 <__ssvfiscanf_r+0x1dc>
 800c9dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c9de:	fb02 1103 	mla	r1, r2, r3, r1
 800c9e2:	3930      	subs	r1, #48	; 0x30
 800c9e4:	9143      	str	r1, [sp, #268]	; 0x10c
 800c9e6:	4655      	mov	r5, sl
 800c9e8:	e7d3      	b.n	800c992 <__ssvfiscanf_r+0xae>
 800c9ea:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c9ee:	2a20      	cmp	r2, #32
 800c9f0:	d8ef      	bhi.n	800c9d2 <__ssvfiscanf_r+0xee>
 800c9f2:	a101      	add	r1, pc, #4	; (adr r1, 800c9f8 <__ssvfiscanf_r+0x114>)
 800c9f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c9f8:	0800caab 	.word	0x0800caab
 800c9fc:	0800c9d3 	.word	0x0800c9d3
 800ca00:	0800c9d3 	.word	0x0800c9d3
 800ca04:	0800cb09 	.word	0x0800cb09
 800ca08:	0800c9d3 	.word	0x0800c9d3
 800ca0c:	0800c9d3 	.word	0x0800c9d3
 800ca10:	0800c9d3 	.word	0x0800c9d3
 800ca14:	0800c9d3 	.word	0x0800c9d3
 800ca18:	0800c9d3 	.word	0x0800c9d3
 800ca1c:	0800c9d3 	.word	0x0800c9d3
 800ca20:	0800c9d3 	.word	0x0800c9d3
 800ca24:	0800cb1f 	.word	0x0800cb1f
 800ca28:	0800caf5 	.word	0x0800caf5
 800ca2c:	0800ca83 	.word	0x0800ca83
 800ca30:	0800ca83 	.word	0x0800ca83
 800ca34:	0800ca83 	.word	0x0800ca83
 800ca38:	0800c9d3 	.word	0x0800c9d3
 800ca3c:	0800caf9 	.word	0x0800caf9
 800ca40:	0800c9d3 	.word	0x0800c9d3
 800ca44:	0800c9d3 	.word	0x0800c9d3
 800ca48:	0800c9d3 	.word	0x0800c9d3
 800ca4c:	0800c9d3 	.word	0x0800c9d3
 800ca50:	0800cb2f 	.word	0x0800cb2f
 800ca54:	0800cb01 	.word	0x0800cb01
 800ca58:	0800caa3 	.word	0x0800caa3
 800ca5c:	0800c9d3 	.word	0x0800c9d3
 800ca60:	0800c9d3 	.word	0x0800c9d3
 800ca64:	0800cb2b 	.word	0x0800cb2b
 800ca68:	0800c9d3 	.word	0x0800c9d3
 800ca6c:	0800caf5 	.word	0x0800caf5
 800ca70:	0800c9d3 	.word	0x0800c9d3
 800ca74:	0800c9d3 	.word	0x0800c9d3
 800ca78:	0800caab 	.word	0x0800caab
 800ca7c:	3b45      	subs	r3, #69	; 0x45
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d8a7      	bhi.n	800c9d2 <__ssvfiscanf_r+0xee>
 800ca82:	2305      	movs	r3, #5
 800ca84:	e01b      	b.n	800cabe <__ssvfiscanf_r+0x1da>
 800ca86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca88:	4621      	mov	r1, r4
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	4798      	blx	r3
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	f43f af68 	beq.w	800c964 <__ssvfiscanf_r+0x80>
 800ca94:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ca96:	2800      	cmp	r0, #0
 800ca98:	f040 808d 	bne.w	800cbb6 <__ssvfiscanf_r+0x2d2>
 800ca9c:	f04f 30ff 	mov.w	r0, #4294967295
 800caa0:	e08f      	b.n	800cbc2 <__ssvfiscanf_r+0x2de>
 800caa2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800caa4:	f042 0220 	orr.w	r2, r2, #32
 800caa8:	9241      	str	r2, [sp, #260]	; 0x104
 800caaa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800caac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cab0:	9241      	str	r2, [sp, #260]	; 0x104
 800cab2:	2210      	movs	r2, #16
 800cab4:	2b6f      	cmp	r3, #111	; 0x6f
 800cab6:	9242      	str	r2, [sp, #264]	; 0x108
 800cab8:	bf34      	ite	cc
 800caba:	2303      	movcc	r3, #3
 800cabc:	2304      	movcs	r3, #4
 800cabe:	9347      	str	r3, [sp, #284]	; 0x11c
 800cac0:	6863      	ldr	r3, [r4, #4]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	dd42      	ble.n	800cb4c <__ssvfiscanf_r+0x268>
 800cac6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cac8:	0659      	lsls	r1, r3, #25
 800caca:	d404      	bmi.n	800cad6 <__ssvfiscanf_r+0x1f2>
 800cacc:	6823      	ldr	r3, [r4, #0]
 800cace:	781a      	ldrb	r2, [r3, #0]
 800cad0:	5cba      	ldrb	r2, [r7, r2]
 800cad2:	0712      	lsls	r2, r2, #28
 800cad4:	d441      	bmi.n	800cb5a <__ssvfiscanf_r+0x276>
 800cad6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cad8:	2b02      	cmp	r3, #2
 800cada:	dc50      	bgt.n	800cb7e <__ssvfiscanf_r+0x29a>
 800cadc:	466b      	mov	r3, sp
 800cade:	4622      	mov	r2, r4
 800cae0:	a941      	add	r1, sp, #260	; 0x104
 800cae2:	4630      	mov	r0, r6
 800cae4:	f000 fb9e 	bl	800d224 <_scanf_chars>
 800cae8:	2801      	cmp	r0, #1
 800caea:	d06e      	beq.n	800cbca <__ssvfiscanf_r+0x2e6>
 800caec:	2802      	cmp	r0, #2
 800caee:	f47f af20 	bne.w	800c932 <__ssvfiscanf_r+0x4e>
 800caf2:	e7cf      	b.n	800ca94 <__ssvfiscanf_r+0x1b0>
 800caf4:	220a      	movs	r2, #10
 800caf6:	e7dd      	b.n	800cab4 <__ssvfiscanf_r+0x1d0>
 800caf8:	2300      	movs	r3, #0
 800cafa:	9342      	str	r3, [sp, #264]	; 0x108
 800cafc:	2303      	movs	r3, #3
 800cafe:	e7de      	b.n	800cabe <__ssvfiscanf_r+0x1da>
 800cb00:	2308      	movs	r3, #8
 800cb02:	9342      	str	r3, [sp, #264]	; 0x108
 800cb04:	2304      	movs	r3, #4
 800cb06:	e7da      	b.n	800cabe <__ssvfiscanf_r+0x1da>
 800cb08:	4629      	mov	r1, r5
 800cb0a:	4640      	mov	r0, r8
 800cb0c:	f000 fd9c 	bl	800d648 <__sccl>
 800cb10:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb16:	9341      	str	r3, [sp, #260]	; 0x104
 800cb18:	4605      	mov	r5, r0
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e7cf      	b.n	800cabe <__ssvfiscanf_r+0x1da>
 800cb1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb24:	9341      	str	r3, [sp, #260]	; 0x104
 800cb26:	2300      	movs	r3, #0
 800cb28:	e7c9      	b.n	800cabe <__ssvfiscanf_r+0x1da>
 800cb2a:	2302      	movs	r3, #2
 800cb2c:	e7c7      	b.n	800cabe <__ssvfiscanf_r+0x1da>
 800cb2e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cb30:	06c3      	lsls	r3, r0, #27
 800cb32:	f53f aefe 	bmi.w	800c932 <__ssvfiscanf_r+0x4e>
 800cb36:	9b00      	ldr	r3, [sp, #0]
 800cb38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb3a:	1d19      	adds	r1, r3, #4
 800cb3c:	9100      	str	r1, [sp, #0]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f010 0f01 	tst.w	r0, #1
 800cb44:	bf14      	ite	ne
 800cb46:	801a      	strhne	r2, [r3, #0]
 800cb48:	601a      	streq	r2, [r3, #0]
 800cb4a:	e6f2      	b.n	800c932 <__ssvfiscanf_r+0x4e>
 800cb4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4630      	mov	r0, r6
 800cb52:	4798      	blx	r3
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d0b6      	beq.n	800cac6 <__ssvfiscanf_r+0x1e2>
 800cb58:	e79c      	b.n	800ca94 <__ssvfiscanf_r+0x1b0>
 800cb5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb5c:	3201      	adds	r2, #1
 800cb5e:	9245      	str	r2, [sp, #276]	; 0x114
 800cb60:	6862      	ldr	r2, [r4, #4]
 800cb62:	3a01      	subs	r2, #1
 800cb64:	2a00      	cmp	r2, #0
 800cb66:	6062      	str	r2, [r4, #4]
 800cb68:	dd02      	ble.n	800cb70 <__ssvfiscanf_r+0x28c>
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	e7ad      	b.n	800cacc <__ssvfiscanf_r+0x1e8>
 800cb70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb72:	4621      	mov	r1, r4
 800cb74:	4630      	mov	r0, r6
 800cb76:	4798      	blx	r3
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d0a7      	beq.n	800cacc <__ssvfiscanf_r+0x1e8>
 800cb7c:	e78a      	b.n	800ca94 <__ssvfiscanf_r+0x1b0>
 800cb7e:	2b04      	cmp	r3, #4
 800cb80:	dc0e      	bgt.n	800cba0 <__ssvfiscanf_r+0x2bc>
 800cb82:	466b      	mov	r3, sp
 800cb84:	4622      	mov	r2, r4
 800cb86:	a941      	add	r1, sp, #260	; 0x104
 800cb88:	4630      	mov	r0, r6
 800cb8a:	f000 fba5 	bl	800d2d8 <_scanf_i>
 800cb8e:	e7ab      	b.n	800cae8 <__ssvfiscanf_r+0x204>
 800cb90:	0800c831 	.word	0x0800c831
 800cb94:	0800c8ab 	.word	0x0800c8ab
 800cb98:	0800dfe9 	.word	0x0800dfe9
 800cb9c:	0800e3ba 	.word	0x0800e3ba
 800cba0:	4b0b      	ldr	r3, [pc, #44]	; (800cbd0 <__ssvfiscanf_r+0x2ec>)
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f43f aec5 	beq.w	800c932 <__ssvfiscanf_r+0x4e>
 800cba8:	466b      	mov	r3, sp
 800cbaa:	4622      	mov	r2, r4
 800cbac:	a941      	add	r1, sp, #260	; 0x104
 800cbae:	4630      	mov	r0, r6
 800cbb0:	f7fb fef8 	bl	80089a4 <_scanf_float>
 800cbb4:	e798      	b.n	800cae8 <__ssvfiscanf_r+0x204>
 800cbb6:	89a3      	ldrh	r3, [r4, #12]
 800cbb8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cbbc:	bf18      	it	ne
 800cbbe:	f04f 30ff 	movne.w	r0, #4294967295
 800cbc2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbca:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cbcc:	e7f9      	b.n	800cbc2 <__ssvfiscanf_r+0x2de>
 800cbce:	bf00      	nop
 800cbd0:	080089a5 	.word	0x080089a5

0800cbd4 <__sfputc_r>:
 800cbd4:	6893      	ldr	r3, [r2, #8]
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	b410      	push	{r4}
 800cbdc:	6093      	str	r3, [r2, #8]
 800cbde:	da08      	bge.n	800cbf2 <__sfputc_r+0x1e>
 800cbe0:	6994      	ldr	r4, [r2, #24]
 800cbe2:	42a3      	cmp	r3, r4
 800cbe4:	db01      	blt.n	800cbea <__sfputc_r+0x16>
 800cbe6:	290a      	cmp	r1, #10
 800cbe8:	d103      	bne.n	800cbf2 <__sfputc_r+0x1e>
 800cbea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbee:	f7fd b9af 	b.w	8009f50 <__swbuf_r>
 800cbf2:	6813      	ldr	r3, [r2, #0]
 800cbf4:	1c58      	adds	r0, r3, #1
 800cbf6:	6010      	str	r0, [r2, #0]
 800cbf8:	7019      	strb	r1, [r3, #0]
 800cbfa:	4608      	mov	r0, r1
 800cbfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <__sfputs_r>:
 800cc02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc04:	4606      	mov	r6, r0
 800cc06:	460f      	mov	r7, r1
 800cc08:	4614      	mov	r4, r2
 800cc0a:	18d5      	adds	r5, r2, r3
 800cc0c:	42ac      	cmp	r4, r5
 800cc0e:	d101      	bne.n	800cc14 <__sfputs_r+0x12>
 800cc10:	2000      	movs	r0, #0
 800cc12:	e007      	b.n	800cc24 <__sfputs_r+0x22>
 800cc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc18:	463a      	mov	r2, r7
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f7ff ffda 	bl	800cbd4 <__sfputc_r>
 800cc20:	1c43      	adds	r3, r0, #1
 800cc22:	d1f3      	bne.n	800cc0c <__sfputs_r+0xa>
 800cc24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc28 <_vfiprintf_r>:
 800cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2c:	460d      	mov	r5, r1
 800cc2e:	b09d      	sub	sp, #116	; 0x74
 800cc30:	4614      	mov	r4, r2
 800cc32:	4698      	mov	r8, r3
 800cc34:	4606      	mov	r6, r0
 800cc36:	b118      	cbz	r0, 800cc40 <_vfiprintf_r+0x18>
 800cc38:	6983      	ldr	r3, [r0, #24]
 800cc3a:	b90b      	cbnz	r3, 800cc40 <_vfiprintf_r+0x18>
 800cc3c:	f7fe fa12 	bl	800b064 <__sinit>
 800cc40:	4b89      	ldr	r3, [pc, #548]	; (800ce68 <_vfiprintf_r+0x240>)
 800cc42:	429d      	cmp	r5, r3
 800cc44:	d11b      	bne.n	800cc7e <_vfiprintf_r+0x56>
 800cc46:	6875      	ldr	r5, [r6, #4]
 800cc48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc4a:	07d9      	lsls	r1, r3, #31
 800cc4c:	d405      	bmi.n	800cc5a <_vfiprintf_r+0x32>
 800cc4e:	89ab      	ldrh	r3, [r5, #12]
 800cc50:	059a      	lsls	r2, r3, #22
 800cc52:	d402      	bmi.n	800cc5a <_vfiprintf_r+0x32>
 800cc54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc56:	f7fe fe34 	bl	800b8c2 <__retarget_lock_acquire_recursive>
 800cc5a:	89ab      	ldrh	r3, [r5, #12]
 800cc5c:	071b      	lsls	r3, r3, #28
 800cc5e:	d501      	bpl.n	800cc64 <_vfiprintf_r+0x3c>
 800cc60:	692b      	ldr	r3, [r5, #16]
 800cc62:	b9eb      	cbnz	r3, 800cca0 <_vfiprintf_r+0x78>
 800cc64:	4629      	mov	r1, r5
 800cc66:	4630      	mov	r0, r6
 800cc68:	f7fd f9d6 	bl	800a018 <__swsetup_r>
 800cc6c:	b1c0      	cbz	r0, 800cca0 <_vfiprintf_r+0x78>
 800cc6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc70:	07dc      	lsls	r4, r3, #31
 800cc72:	d50e      	bpl.n	800cc92 <_vfiprintf_r+0x6a>
 800cc74:	f04f 30ff 	mov.w	r0, #4294967295
 800cc78:	b01d      	add	sp, #116	; 0x74
 800cc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7e:	4b7b      	ldr	r3, [pc, #492]	; (800ce6c <_vfiprintf_r+0x244>)
 800cc80:	429d      	cmp	r5, r3
 800cc82:	d101      	bne.n	800cc88 <_vfiprintf_r+0x60>
 800cc84:	68b5      	ldr	r5, [r6, #8]
 800cc86:	e7df      	b.n	800cc48 <_vfiprintf_r+0x20>
 800cc88:	4b79      	ldr	r3, [pc, #484]	; (800ce70 <_vfiprintf_r+0x248>)
 800cc8a:	429d      	cmp	r5, r3
 800cc8c:	bf08      	it	eq
 800cc8e:	68f5      	ldreq	r5, [r6, #12]
 800cc90:	e7da      	b.n	800cc48 <_vfiprintf_r+0x20>
 800cc92:	89ab      	ldrh	r3, [r5, #12]
 800cc94:	0598      	lsls	r0, r3, #22
 800cc96:	d4ed      	bmi.n	800cc74 <_vfiprintf_r+0x4c>
 800cc98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc9a:	f7fe fe13 	bl	800b8c4 <__retarget_lock_release_recursive>
 800cc9e:	e7e9      	b.n	800cc74 <_vfiprintf_r+0x4c>
 800cca0:	2300      	movs	r3, #0
 800cca2:	9309      	str	r3, [sp, #36]	; 0x24
 800cca4:	2320      	movs	r3, #32
 800cca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccae:	2330      	movs	r3, #48	; 0x30
 800ccb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce74 <_vfiprintf_r+0x24c>
 800ccb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccb8:	f04f 0901 	mov.w	r9, #1
 800ccbc:	4623      	mov	r3, r4
 800ccbe:	469a      	mov	sl, r3
 800ccc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccc4:	b10a      	cbz	r2, 800ccca <_vfiprintf_r+0xa2>
 800ccc6:	2a25      	cmp	r2, #37	; 0x25
 800ccc8:	d1f9      	bne.n	800ccbe <_vfiprintf_r+0x96>
 800ccca:	ebba 0b04 	subs.w	fp, sl, r4
 800ccce:	d00b      	beq.n	800cce8 <_vfiprintf_r+0xc0>
 800ccd0:	465b      	mov	r3, fp
 800ccd2:	4622      	mov	r2, r4
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f7ff ff93 	bl	800cc02 <__sfputs_r>
 800ccdc:	3001      	adds	r0, #1
 800ccde:	f000 80aa 	beq.w	800ce36 <_vfiprintf_r+0x20e>
 800cce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cce4:	445a      	add	r2, fp
 800cce6:	9209      	str	r2, [sp, #36]	; 0x24
 800cce8:	f89a 3000 	ldrb.w	r3, [sl]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f000 80a2 	beq.w	800ce36 <_vfiprintf_r+0x20e>
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccfc:	f10a 0a01 	add.w	sl, sl, #1
 800cd00:	9304      	str	r3, [sp, #16]
 800cd02:	9307      	str	r3, [sp, #28]
 800cd04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd08:	931a      	str	r3, [sp, #104]	; 0x68
 800cd0a:	4654      	mov	r4, sl
 800cd0c:	2205      	movs	r2, #5
 800cd0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd12:	4858      	ldr	r0, [pc, #352]	; (800ce74 <_vfiprintf_r+0x24c>)
 800cd14:	f7f3 fa84 	bl	8000220 <memchr>
 800cd18:	9a04      	ldr	r2, [sp, #16]
 800cd1a:	b9d8      	cbnz	r0, 800cd54 <_vfiprintf_r+0x12c>
 800cd1c:	06d1      	lsls	r1, r2, #27
 800cd1e:	bf44      	itt	mi
 800cd20:	2320      	movmi	r3, #32
 800cd22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd26:	0713      	lsls	r3, r2, #28
 800cd28:	bf44      	itt	mi
 800cd2a:	232b      	movmi	r3, #43	; 0x2b
 800cd2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd30:	f89a 3000 	ldrb.w	r3, [sl]
 800cd34:	2b2a      	cmp	r3, #42	; 0x2a
 800cd36:	d015      	beq.n	800cd64 <_vfiprintf_r+0x13c>
 800cd38:	9a07      	ldr	r2, [sp, #28]
 800cd3a:	4654      	mov	r4, sl
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	f04f 0c0a 	mov.w	ip, #10
 800cd42:	4621      	mov	r1, r4
 800cd44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd48:	3b30      	subs	r3, #48	; 0x30
 800cd4a:	2b09      	cmp	r3, #9
 800cd4c:	d94e      	bls.n	800cdec <_vfiprintf_r+0x1c4>
 800cd4e:	b1b0      	cbz	r0, 800cd7e <_vfiprintf_r+0x156>
 800cd50:	9207      	str	r2, [sp, #28]
 800cd52:	e014      	b.n	800cd7e <_vfiprintf_r+0x156>
 800cd54:	eba0 0308 	sub.w	r3, r0, r8
 800cd58:	fa09 f303 	lsl.w	r3, r9, r3
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	9304      	str	r3, [sp, #16]
 800cd60:	46a2      	mov	sl, r4
 800cd62:	e7d2      	b.n	800cd0a <_vfiprintf_r+0xe2>
 800cd64:	9b03      	ldr	r3, [sp, #12]
 800cd66:	1d19      	adds	r1, r3, #4
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	9103      	str	r1, [sp, #12]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	bfbb      	ittet	lt
 800cd70:	425b      	neglt	r3, r3
 800cd72:	f042 0202 	orrlt.w	r2, r2, #2
 800cd76:	9307      	strge	r3, [sp, #28]
 800cd78:	9307      	strlt	r3, [sp, #28]
 800cd7a:	bfb8      	it	lt
 800cd7c:	9204      	strlt	r2, [sp, #16]
 800cd7e:	7823      	ldrb	r3, [r4, #0]
 800cd80:	2b2e      	cmp	r3, #46	; 0x2e
 800cd82:	d10c      	bne.n	800cd9e <_vfiprintf_r+0x176>
 800cd84:	7863      	ldrb	r3, [r4, #1]
 800cd86:	2b2a      	cmp	r3, #42	; 0x2a
 800cd88:	d135      	bne.n	800cdf6 <_vfiprintf_r+0x1ce>
 800cd8a:	9b03      	ldr	r3, [sp, #12]
 800cd8c:	1d1a      	adds	r2, r3, #4
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	9203      	str	r2, [sp, #12]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	bfb8      	it	lt
 800cd96:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd9a:	3402      	adds	r4, #2
 800cd9c:	9305      	str	r3, [sp, #20]
 800cd9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce84 <_vfiprintf_r+0x25c>
 800cda2:	7821      	ldrb	r1, [r4, #0]
 800cda4:	2203      	movs	r2, #3
 800cda6:	4650      	mov	r0, sl
 800cda8:	f7f3 fa3a 	bl	8000220 <memchr>
 800cdac:	b140      	cbz	r0, 800cdc0 <_vfiprintf_r+0x198>
 800cdae:	2340      	movs	r3, #64	; 0x40
 800cdb0:	eba0 000a 	sub.w	r0, r0, sl
 800cdb4:	fa03 f000 	lsl.w	r0, r3, r0
 800cdb8:	9b04      	ldr	r3, [sp, #16]
 800cdba:	4303      	orrs	r3, r0
 800cdbc:	3401      	adds	r4, #1
 800cdbe:	9304      	str	r3, [sp, #16]
 800cdc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc4:	482c      	ldr	r0, [pc, #176]	; (800ce78 <_vfiprintf_r+0x250>)
 800cdc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdca:	2206      	movs	r2, #6
 800cdcc:	f7f3 fa28 	bl	8000220 <memchr>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	d03f      	beq.n	800ce54 <_vfiprintf_r+0x22c>
 800cdd4:	4b29      	ldr	r3, [pc, #164]	; (800ce7c <_vfiprintf_r+0x254>)
 800cdd6:	bb1b      	cbnz	r3, 800ce20 <_vfiprintf_r+0x1f8>
 800cdd8:	9b03      	ldr	r3, [sp, #12]
 800cdda:	3307      	adds	r3, #7
 800cddc:	f023 0307 	bic.w	r3, r3, #7
 800cde0:	3308      	adds	r3, #8
 800cde2:	9303      	str	r3, [sp, #12]
 800cde4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde6:	443b      	add	r3, r7
 800cde8:	9309      	str	r3, [sp, #36]	; 0x24
 800cdea:	e767      	b.n	800ccbc <_vfiprintf_r+0x94>
 800cdec:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	2001      	movs	r0, #1
 800cdf4:	e7a5      	b.n	800cd42 <_vfiprintf_r+0x11a>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	3401      	adds	r4, #1
 800cdfa:	9305      	str	r3, [sp, #20]
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	f04f 0c0a 	mov.w	ip, #10
 800ce02:	4620      	mov	r0, r4
 800ce04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce08:	3a30      	subs	r2, #48	; 0x30
 800ce0a:	2a09      	cmp	r2, #9
 800ce0c:	d903      	bls.n	800ce16 <_vfiprintf_r+0x1ee>
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d0c5      	beq.n	800cd9e <_vfiprintf_r+0x176>
 800ce12:	9105      	str	r1, [sp, #20]
 800ce14:	e7c3      	b.n	800cd9e <_vfiprintf_r+0x176>
 800ce16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e7f0      	b.n	800ce02 <_vfiprintf_r+0x1da>
 800ce20:	ab03      	add	r3, sp, #12
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	462a      	mov	r2, r5
 800ce26:	4b16      	ldr	r3, [pc, #88]	; (800ce80 <_vfiprintf_r+0x258>)
 800ce28:	a904      	add	r1, sp, #16
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7fb f9f0 	bl	8008210 <_printf_float>
 800ce30:	4607      	mov	r7, r0
 800ce32:	1c78      	adds	r0, r7, #1
 800ce34:	d1d6      	bne.n	800cde4 <_vfiprintf_r+0x1bc>
 800ce36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce38:	07d9      	lsls	r1, r3, #31
 800ce3a:	d405      	bmi.n	800ce48 <_vfiprintf_r+0x220>
 800ce3c:	89ab      	ldrh	r3, [r5, #12]
 800ce3e:	059a      	lsls	r2, r3, #22
 800ce40:	d402      	bmi.n	800ce48 <_vfiprintf_r+0x220>
 800ce42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce44:	f7fe fd3e 	bl	800b8c4 <__retarget_lock_release_recursive>
 800ce48:	89ab      	ldrh	r3, [r5, #12]
 800ce4a:	065b      	lsls	r3, r3, #25
 800ce4c:	f53f af12 	bmi.w	800cc74 <_vfiprintf_r+0x4c>
 800ce50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce52:	e711      	b.n	800cc78 <_vfiprintf_r+0x50>
 800ce54:	ab03      	add	r3, sp, #12
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	462a      	mov	r2, r5
 800ce5a:	4b09      	ldr	r3, [pc, #36]	; (800ce80 <_vfiprintf_r+0x258>)
 800ce5c:	a904      	add	r1, sp, #16
 800ce5e:	4630      	mov	r0, r6
 800ce60:	f7fb fc7a 	bl	8008758 <_printf_i>
 800ce64:	e7e4      	b.n	800ce30 <_vfiprintf_r+0x208>
 800ce66:	bf00      	nop
 800ce68:	0800e19c 	.word	0x0800e19c
 800ce6c:	0800e1bc 	.word	0x0800e1bc
 800ce70:	0800e17c 	.word	0x0800e17c
 800ce74:	0800e3b4 	.word	0x0800e3b4
 800ce78:	0800e3be 	.word	0x0800e3be
 800ce7c:	08008211 	.word	0x08008211
 800ce80:	0800cc03 	.word	0x0800cc03
 800ce84:	0800e3ba 	.word	0x0800e3ba

0800ce88 <__svfiscanf_r>:
 800ce88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce8c:	461d      	mov	r5, r3
 800ce8e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ce90:	07df      	lsls	r7, r3, #31
 800ce92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ce96:	4606      	mov	r6, r0
 800ce98:	460c      	mov	r4, r1
 800ce9a:	4692      	mov	sl, r2
 800ce9c:	d405      	bmi.n	800ceaa <__svfiscanf_r+0x22>
 800ce9e:	898b      	ldrh	r3, [r1, #12]
 800cea0:	0598      	lsls	r0, r3, #22
 800cea2:	d402      	bmi.n	800ceaa <__svfiscanf_r+0x22>
 800cea4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800cea6:	f7fe fd0c 	bl	800b8c2 <__retarget_lock_acquire_recursive>
 800ceaa:	2300      	movs	r3, #0
 800ceac:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800ceb0:	4ba6      	ldr	r3, [pc, #664]	; (800d14c <__svfiscanf_r+0x2c4>)
 800ceb2:	93a0      	str	r3, [sp, #640]	; 0x280
 800ceb4:	f10d 0804 	add.w	r8, sp, #4
 800ceb8:	4ba5      	ldr	r3, [pc, #660]	; (800d150 <__svfiscanf_r+0x2c8>)
 800ceba:	4fa6      	ldr	r7, [pc, #664]	; (800d154 <__svfiscanf_r+0x2cc>)
 800cebc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d158 <__svfiscanf_r+0x2d0>
 800cec0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cec4:	93a1      	str	r3, [sp, #644]	; 0x284
 800cec6:	9500      	str	r5, [sp, #0]
 800cec8:	f89a 3000 	ldrb.w	r3, [sl]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f000 8173 	beq.w	800d1b8 <__svfiscanf_r+0x330>
 800ced2:	5dd9      	ldrb	r1, [r3, r7]
 800ced4:	f011 0108 	ands.w	r1, r1, #8
 800ced8:	f10a 0501 	add.w	r5, sl, #1
 800cedc:	d019      	beq.n	800cf12 <__svfiscanf_r+0x8a>
 800cede:	6863      	ldr	r3, [r4, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	dd0f      	ble.n	800cf04 <__svfiscanf_r+0x7c>
 800cee4:	6823      	ldr	r3, [r4, #0]
 800cee6:	781a      	ldrb	r2, [r3, #0]
 800cee8:	5cba      	ldrb	r2, [r7, r2]
 800ceea:	0711      	lsls	r1, r2, #28
 800ceec:	d401      	bmi.n	800cef2 <__svfiscanf_r+0x6a>
 800ceee:	46aa      	mov	sl, r5
 800cef0:	e7ea      	b.n	800cec8 <__svfiscanf_r+0x40>
 800cef2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cef4:	3201      	adds	r2, #1
 800cef6:	9245      	str	r2, [sp, #276]	; 0x114
 800cef8:	6862      	ldr	r2, [r4, #4]
 800cefa:	3301      	adds	r3, #1
 800cefc:	3a01      	subs	r2, #1
 800cefe:	6062      	str	r2, [r4, #4]
 800cf00:	6023      	str	r3, [r4, #0]
 800cf02:	e7ec      	b.n	800cede <__svfiscanf_r+0x56>
 800cf04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cf06:	4621      	mov	r1, r4
 800cf08:	4630      	mov	r0, r6
 800cf0a:	4798      	blx	r3
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d0e9      	beq.n	800cee4 <__svfiscanf_r+0x5c>
 800cf10:	e7ed      	b.n	800ceee <__svfiscanf_r+0x66>
 800cf12:	2b25      	cmp	r3, #37	; 0x25
 800cf14:	d012      	beq.n	800cf3c <__svfiscanf_r+0xb4>
 800cf16:	469a      	mov	sl, r3
 800cf18:	6863      	ldr	r3, [r4, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f340 8095 	ble.w	800d04a <__svfiscanf_r+0x1c2>
 800cf20:	6822      	ldr	r2, [r4, #0]
 800cf22:	7813      	ldrb	r3, [r2, #0]
 800cf24:	4553      	cmp	r3, sl
 800cf26:	f040 8147 	bne.w	800d1b8 <__svfiscanf_r+0x330>
 800cf2a:	6863      	ldr	r3, [r4, #4]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	6063      	str	r3, [r4, #4]
 800cf30:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cf32:	3201      	adds	r2, #1
 800cf34:	3301      	adds	r3, #1
 800cf36:	6022      	str	r2, [r4, #0]
 800cf38:	9345      	str	r3, [sp, #276]	; 0x114
 800cf3a:	e7d8      	b.n	800ceee <__svfiscanf_r+0x66>
 800cf3c:	9141      	str	r1, [sp, #260]	; 0x104
 800cf3e:	9143      	str	r1, [sp, #268]	; 0x10c
 800cf40:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800cf44:	2b2a      	cmp	r3, #42	; 0x2a
 800cf46:	bf02      	ittt	eq
 800cf48:	2310      	moveq	r3, #16
 800cf4a:	9341      	streq	r3, [sp, #260]	; 0x104
 800cf4c:	f10a 0502 	addeq.w	r5, sl, #2
 800cf50:	220a      	movs	r2, #10
 800cf52:	46aa      	mov	sl, r5
 800cf54:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cf58:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cf5c:	2b09      	cmp	r3, #9
 800cf5e:	d91e      	bls.n	800cf9e <__svfiscanf_r+0x116>
 800cf60:	487d      	ldr	r0, [pc, #500]	; (800d158 <__svfiscanf_r+0x2d0>)
 800cf62:	2203      	movs	r2, #3
 800cf64:	f7f3 f95c 	bl	8000220 <memchr>
 800cf68:	b140      	cbz	r0, 800cf7c <__svfiscanf_r+0xf4>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	eba0 0009 	sub.w	r0, r0, r9
 800cf70:	fa03 f000 	lsl.w	r0, r3, r0
 800cf74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cf76:	4318      	orrs	r0, r3
 800cf78:	9041      	str	r0, [sp, #260]	; 0x104
 800cf7a:	4655      	mov	r5, sl
 800cf7c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cf80:	2b78      	cmp	r3, #120	; 0x78
 800cf82:	d807      	bhi.n	800cf94 <__svfiscanf_r+0x10c>
 800cf84:	2b57      	cmp	r3, #87	; 0x57
 800cf86:	d811      	bhi.n	800cfac <__svfiscanf_r+0x124>
 800cf88:	2b25      	cmp	r3, #37	; 0x25
 800cf8a:	d0c4      	beq.n	800cf16 <__svfiscanf_r+0x8e>
 800cf8c:	d858      	bhi.n	800d040 <__svfiscanf_r+0x1b8>
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f000 80c8 	beq.w	800d124 <__svfiscanf_r+0x29c>
 800cf94:	2303      	movs	r3, #3
 800cf96:	9347      	str	r3, [sp, #284]	; 0x11c
 800cf98:	230a      	movs	r3, #10
 800cf9a:	9342      	str	r3, [sp, #264]	; 0x108
 800cf9c:	e07c      	b.n	800d098 <__svfiscanf_r+0x210>
 800cf9e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cfa0:	fb02 1103 	mla	r1, r2, r3, r1
 800cfa4:	3930      	subs	r1, #48	; 0x30
 800cfa6:	9143      	str	r1, [sp, #268]	; 0x10c
 800cfa8:	4655      	mov	r5, sl
 800cfaa:	e7d2      	b.n	800cf52 <__svfiscanf_r+0xca>
 800cfac:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800cfb0:	2a20      	cmp	r2, #32
 800cfb2:	d8ef      	bhi.n	800cf94 <__svfiscanf_r+0x10c>
 800cfb4:	a101      	add	r1, pc, #4	; (adr r1, 800cfbc <__svfiscanf_r+0x134>)
 800cfb6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cfba:	bf00      	nop
 800cfbc:	0800d083 	.word	0x0800d083
 800cfc0:	0800cf95 	.word	0x0800cf95
 800cfc4:	0800cf95 	.word	0x0800cf95
 800cfc8:	0800d0e1 	.word	0x0800d0e1
 800cfcc:	0800cf95 	.word	0x0800cf95
 800cfd0:	0800cf95 	.word	0x0800cf95
 800cfd4:	0800cf95 	.word	0x0800cf95
 800cfd8:	0800cf95 	.word	0x0800cf95
 800cfdc:	0800cf95 	.word	0x0800cf95
 800cfe0:	0800cf95 	.word	0x0800cf95
 800cfe4:	0800cf95 	.word	0x0800cf95
 800cfe8:	0800d0f7 	.word	0x0800d0f7
 800cfec:	0800d0cd 	.word	0x0800d0cd
 800cff0:	0800d047 	.word	0x0800d047
 800cff4:	0800d047 	.word	0x0800d047
 800cff8:	0800d047 	.word	0x0800d047
 800cffc:	0800cf95 	.word	0x0800cf95
 800d000:	0800d0d1 	.word	0x0800d0d1
 800d004:	0800cf95 	.word	0x0800cf95
 800d008:	0800cf95 	.word	0x0800cf95
 800d00c:	0800cf95 	.word	0x0800cf95
 800d010:	0800cf95 	.word	0x0800cf95
 800d014:	0800d107 	.word	0x0800d107
 800d018:	0800d0d9 	.word	0x0800d0d9
 800d01c:	0800d07b 	.word	0x0800d07b
 800d020:	0800cf95 	.word	0x0800cf95
 800d024:	0800cf95 	.word	0x0800cf95
 800d028:	0800d103 	.word	0x0800d103
 800d02c:	0800cf95 	.word	0x0800cf95
 800d030:	0800d0cd 	.word	0x0800d0cd
 800d034:	0800cf95 	.word	0x0800cf95
 800d038:	0800cf95 	.word	0x0800cf95
 800d03c:	0800d083 	.word	0x0800d083
 800d040:	3b45      	subs	r3, #69	; 0x45
 800d042:	2b02      	cmp	r3, #2
 800d044:	d8a6      	bhi.n	800cf94 <__svfiscanf_r+0x10c>
 800d046:	2305      	movs	r3, #5
 800d048:	e025      	b.n	800d096 <__svfiscanf_r+0x20e>
 800d04a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d04c:	4621      	mov	r1, r4
 800d04e:	4630      	mov	r0, r6
 800d050:	4798      	blx	r3
 800d052:	2800      	cmp	r0, #0
 800d054:	f43f af64 	beq.w	800cf20 <__svfiscanf_r+0x98>
 800d058:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d05a:	07da      	lsls	r2, r3, #31
 800d05c:	f140 80a4 	bpl.w	800d1a8 <__svfiscanf_r+0x320>
 800d060:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d062:	2800      	cmp	r0, #0
 800d064:	d067      	beq.n	800d136 <__svfiscanf_r+0x2ae>
 800d066:	89a3      	ldrh	r3, [r4, #12]
 800d068:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d06c:	bf18      	it	ne
 800d06e:	f04f 30ff 	movne.w	r0, #4294967295
 800d072:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d07a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d07c:	f042 0220 	orr.w	r2, r2, #32
 800d080:	9241      	str	r2, [sp, #260]	; 0x104
 800d082:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d088:	9241      	str	r2, [sp, #260]	; 0x104
 800d08a:	2210      	movs	r2, #16
 800d08c:	2b6f      	cmp	r3, #111	; 0x6f
 800d08e:	9242      	str	r2, [sp, #264]	; 0x108
 800d090:	bf34      	ite	cc
 800d092:	2303      	movcc	r3, #3
 800d094:	2304      	movcs	r3, #4
 800d096:	9347      	str	r3, [sp, #284]	; 0x11c
 800d098:	6863      	ldr	r3, [r4, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	dd4e      	ble.n	800d13c <__svfiscanf_r+0x2b4>
 800d09e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d0a0:	065b      	lsls	r3, r3, #25
 800d0a2:	d404      	bmi.n	800d0ae <__svfiscanf_r+0x226>
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	781a      	ldrb	r2, [r3, #0]
 800d0a8:	5cba      	ldrb	r2, [r7, r2]
 800d0aa:	0710      	lsls	r0, r2, #28
 800d0ac:	d456      	bmi.n	800d15c <__svfiscanf_r+0x2d4>
 800d0ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	dc65      	bgt.n	800d180 <__svfiscanf_r+0x2f8>
 800d0b4:	466b      	mov	r3, sp
 800d0b6:	4622      	mov	r2, r4
 800d0b8:	a941      	add	r1, sp, #260	; 0x104
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f000 f8b2 	bl	800d224 <_scanf_chars>
 800d0c0:	2801      	cmp	r0, #1
 800d0c2:	d079      	beq.n	800d1b8 <__svfiscanf_r+0x330>
 800d0c4:	2802      	cmp	r0, #2
 800d0c6:	f47f af12 	bne.w	800ceee <__svfiscanf_r+0x66>
 800d0ca:	e7c5      	b.n	800d058 <__svfiscanf_r+0x1d0>
 800d0cc:	220a      	movs	r2, #10
 800d0ce:	e7dd      	b.n	800d08c <__svfiscanf_r+0x204>
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	9342      	str	r3, [sp, #264]	; 0x108
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	e7de      	b.n	800d096 <__svfiscanf_r+0x20e>
 800d0d8:	2308      	movs	r3, #8
 800d0da:	9342      	str	r3, [sp, #264]	; 0x108
 800d0dc:	2304      	movs	r3, #4
 800d0de:	e7da      	b.n	800d096 <__svfiscanf_r+0x20e>
 800d0e0:	4629      	mov	r1, r5
 800d0e2:	4640      	mov	r0, r8
 800d0e4:	f000 fab0 	bl	800d648 <__sccl>
 800d0e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ee:	9341      	str	r3, [sp, #260]	; 0x104
 800d0f0:	4605      	mov	r5, r0
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e7cf      	b.n	800d096 <__svfiscanf_r+0x20e>
 800d0f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0fc:	9341      	str	r3, [sp, #260]	; 0x104
 800d0fe:	2300      	movs	r3, #0
 800d100:	e7c9      	b.n	800d096 <__svfiscanf_r+0x20e>
 800d102:	2302      	movs	r3, #2
 800d104:	e7c7      	b.n	800d096 <__svfiscanf_r+0x20e>
 800d106:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d108:	06c3      	lsls	r3, r0, #27
 800d10a:	f53f aef0 	bmi.w	800ceee <__svfiscanf_r+0x66>
 800d10e:	9b00      	ldr	r3, [sp, #0]
 800d110:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d112:	1d19      	adds	r1, r3, #4
 800d114:	9100      	str	r1, [sp, #0]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f010 0f01 	tst.w	r0, #1
 800d11c:	bf14      	ite	ne
 800d11e:	801a      	strhne	r2, [r3, #0]
 800d120:	601a      	streq	r2, [r3, #0]
 800d122:	e6e4      	b.n	800ceee <__svfiscanf_r+0x66>
 800d124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d126:	07d8      	lsls	r0, r3, #31
 800d128:	d405      	bmi.n	800d136 <__svfiscanf_r+0x2ae>
 800d12a:	89a3      	ldrh	r3, [r4, #12]
 800d12c:	0599      	lsls	r1, r3, #22
 800d12e:	d402      	bmi.n	800d136 <__svfiscanf_r+0x2ae>
 800d130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d132:	f7fe fbc7 	bl	800b8c4 <__retarget_lock_release_recursive>
 800d136:	f04f 30ff 	mov.w	r0, #4294967295
 800d13a:	e79a      	b.n	800d072 <__svfiscanf_r+0x1ea>
 800d13c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d13e:	4621      	mov	r1, r4
 800d140:	4630      	mov	r0, r6
 800d142:	4798      	blx	r3
 800d144:	2800      	cmp	r0, #0
 800d146:	d0aa      	beq.n	800d09e <__svfiscanf_r+0x216>
 800d148:	e786      	b.n	800d058 <__svfiscanf_r+0x1d0>
 800d14a:	bf00      	nop
 800d14c:	0800d83d 	.word	0x0800d83d
 800d150:	0800d501 	.word	0x0800d501
 800d154:	0800dfe9 	.word	0x0800dfe9
 800d158:	0800e3ba 	.word	0x0800e3ba
 800d15c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d15e:	3201      	adds	r2, #1
 800d160:	9245      	str	r2, [sp, #276]	; 0x114
 800d162:	6862      	ldr	r2, [r4, #4]
 800d164:	3a01      	subs	r2, #1
 800d166:	2a00      	cmp	r2, #0
 800d168:	6062      	str	r2, [r4, #4]
 800d16a:	dd02      	ble.n	800d172 <__svfiscanf_r+0x2ea>
 800d16c:	3301      	adds	r3, #1
 800d16e:	6023      	str	r3, [r4, #0]
 800d170:	e798      	b.n	800d0a4 <__svfiscanf_r+0x21c>
 800d172:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d174:	4621      	mov	r1, r4
 800d176:	4630      	mov	r0, r6
 800d178:	4798      	blx	r3
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d092      	beq.n	800d0a4 <__svfiscanf_r+0x21c>
 800d17e:	e76b      	b.n	800d058 <__svfiscanf_r+0x1d0>
 800d180:	2b04      	cmp	r3, #4
 800d182:	dc06      	bgt.n	800d192 <__svfiscanf_r+0x30a>
 800d184:	466b      	mov	r3, sp
 800d186:	4622      	mov	r2, r4
 800d188:	a941      	add	r1, sp, #260	; 0x104
 800d18a:	4630      	mov	r0, r6
 800d18c:	f000 f8a4 	bl	800d2d8 <_scanf_i>
 800d190:	e796      	b.n	800d0c0 <__svfiscanf_r+0x238>
 800d192:	4b0f      	ldr	r3, [pc, #60]	; (800d1d0 <__svfiscanf_r+0x348>)
 800d194:	2b00      	cmp	r3, #0
 800d196:	f43f aeaa 	beq.w	800ceee <__svfiscanf_r+0x66>
 800d19a:	466b      	mov	r3, sp
 800d19c:	4622      	mov	r2, r4
 800d19e:	a941      	add	r1, sp, #260	; 0x104
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	f7fb fbff 	bl	80089a4 <_scanf_float>
 800d1a6:	e78b      	b.n	800d0c0 <__svfiscanf_r+0x238>
 800d1a8:	89a3      	ldrh	r3, [r4, #12]
 800d1aa:	0599      	lsls	r1, r3, #22
 800d1ac:	f53f af58 	bmi.w	800d060 <__svfiscanf_r+0x1d8>
 800d1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1b2:	f7fe fb87 	bl	800b8c4 <__retarget_lock_release_recursive>
 800d1b6:	e753      	b.n	800d060 <__svfiscanf_r+0x1d8>
 800d1b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1ba:	07da      	lsls	r2, r3, #31
 800d1bc:	d405      	bmi.n	800d1ca <__svfiscanf_r+0x342>
 800d1be:	89a3      	ldrh	r3, [r4, #12]
 800d1c0:	059b      	lsls	r3, r3, #22
 800d1c2:	d402      	bmi.n	800d1ca <__svfiscanf_r+0x342>
 800d1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1c6:	f7fe fb7d 	bl	800b8c4 <__retarget_lock_release_recursive>
 800d1ca:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d1cc:	e751      	b.n	800d072 <__svfiscanf_r+0x1ea>
 800d1ce:	bf00      	nop
 800d1d0:	080089a5 	.word	0x080089a5

0800d1d4 <_vfiscanf_r>:
 800d1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	4605      	mov	r5, r0
 800d1da:	b138      	cbz	r0, 800d1ec <_vfiscanf_r+0x18>
 800d1dc:	6981      	ldr	r1, [r0, #24]
 800d1de:	b929      	cbnz	r1, 800d1ec <_vfiscanf_r+0x18>
 800d1e0:	e9cd 2300 	strd	r2, r3, [sp]
 800d1e4:	f7fd ff3e 	bl	800b064 <__sinit>
 800d1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1ec:	490a      	ldr	r1, [pc, #40]	; (800d218 <_vfiscanf_r+0x44>)
 800d1ee:	428c      	cmp	r4, r1
 800d1f0:	d107      	bne.n	800d202 <_vfiscanf_r+0x2e>
 800d1f2:	686c      	ldr	r4, [r5, #4]
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	b003      	add	sp, #12
 800d1fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1fe:	f7ff be43 	b.w	800ce88 <__svfiscanf_r>
 800d202:	4906      	ldr	r1, [pc, #24]	; (800d21c <_vfiscanf_r+0x48>)
 800d204:	428c      	cmp	r4, r1
 800d206:	d101      	bne.n	800d20c <_vfiscanf_r+0x38>
 800d208:	68ac      	ldr	r4, [r5, #8]
 800d20a:	e7f3      	b.n	800d1f4 <_vfiscanf_r+0x20>
 800d20c:	4904      	ldr	r1, [pc, #16]	; (800d220 <_vfiscanf_r+0x4c>)
 800d20e:	428c      	cmp	r4, r1
 800d210:	bf08      	it	eq
 800d212:	68ec      	ldreq	r4, [r5, #12]
 800d214:	e7ee      	b.n	800d1f4 <_vfiscanf_r+0x20>
 800d216:	bf00      	nop
 800d218:	0800e19c 	.word	0x0800e19c
 800d21c:	0800e1bc 	.word	0x0800e1bc
 800d220:	0800e17c 	.word	0x0800e17c

0800d224 <_scanf_chars>:
 800d224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d228:	4615      	mov	r5, r2
 800d22a:	688a      	ldr	r2, [r1, #8]
 800d22c:	4680      	mov	r8, r0
 800d22e:	460c      	mov	r4, r1
 800d230:	b932      	cbnz	r2, 800d240 <_scanf_chars+0x1c>
 800d232:	698a      	ldr	r2, [r1, #24]
 800d234:	2a00      	cmp	r2, #0
 800d236:	bf0c      	ite	eq
 800d238:	2201      	moveq	r2, #1
 800d23a:	f04f 32ff 	movne.w	r2, #4294967295
 800d23e:	608a      	str	r2, [r1, #8]
 800d240:	6822      	ldr	r2, [r4, #0]
 800d242:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d2d4 <_scanf_chars+0xb0>
 800d246:	06d1      	lsls	r1, r2, #27
 800d248:	bf5f      	itttt	pl
 800d24a:	681a      	ldrpl	r2, [r3, #0]
 800d24c:	1d11      	addpl	r1, r2, #4
 800d24e:	6019      	strpl	r1, [r3, #0]
 800d250:	6816      	ldrpl	r6, [r2, #0]
 800d252:	2700      	movs	r7, #0
 800d254:	69a0      	ldr	r0, [r4, #24]
 800d256:	b188      	cbz	r0, 800d27c <_scanf_chars+0x58>
 800d258:	2801      	cmp	r0, #1
 800d25a:	d107      	bne.n	800d26c <_scanf_chars+0x48>
 800d25c:	682a      	ldr	r2, [r5, #0]
 800d25e:	7811      	ldrb	r1, [r2, #0]
 800d260:	6962      	ldr	r2, [r4, #20]
 800d262:	5c52      	ldrb	r2, [r2, r1]
 800d264:	b952      	cbnz	r2, 800d27c <_scanf_chars+0x58>
 800d266:	2f00      	cmp	r7, #0
 800d268:	d031      	beq.n	800d2ce <_scanf_chars+0xaa>
 800d26a:	e022      	b.n	800d2b2 <_scanf_chars+0x8e>
 800d26c:	2802      	cmp	r0, #2
 800d26e:	d120      	bne.n	800d2b2 <_scanf_chars+0x8e>
 800d270:	682b      	ldr	r3, [r5, #0]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d278:	071b      	lsls	r3, r3, #28
 800d27a:	d41a      	bmi.n	800d2b2 <_scanf_chars+0x8e>
 800d27c:	6823      	ldr	r3, [r4, #0]
 800d27e:	06da      	lsls	r2, r3, #27
 800d280:	bf5e      	ittt	pl
 800d282:	682b      	ldrpl	r3, [r5, #0]
 800d284:	781b      	ldrbpl	r3, [r3, #0]
 800d286:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d28a:	682a      	ldr	r2, [r5, #0]
 800d28c:	686b      	ldr	r3, [r5, #4]
 800d28e:	3201      	adds	r2, #1
 800d290:	602a      	str	r2, [r5, #0]
 800d292:	68a2      	ldr	r2, [r4, #8]
 800d294:	3b01      	subs	r3, #1
 800d296:	3a01      	subs	r2, #1
 800d298:	606b      	str	r3, [r5, #4]
 800d29a:	3701      	adds	r7, #1
 800d29c:	60a2      	str	r2, [r4, #8]
 800d29e:	b142      	cbz	r2, 800d2b2 <_scanf_chars+0x8e>
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	dcd7      	bgt.n	800d254 <_scanf_chars+0x30>
 800d2a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d2a8:	4629      	mov	r1, r5
 800d2aa:	4640      	mov	r0, r8
 800d2ac:	4798      	blx	r3
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	d0d0      	beq.n	800d254 <_scanf_chars+0x30>
 800d2b2:	6823      	ldr	r3, [r4, #0]
 800d2b4:	f013 0310 	ands.w	r3, r3, #16
 800d2b8:	d105      	bne.n	800d2c6 <_scanf_chars+0xa2>
 800d2ba:	68e2      	ldr	r2, [r4, #12]
 800d2bc:	3201      	adds	r2, #1
 800d2be:	60e2      	str	r2, [r4, #12]
 800d2c0:	69a2      	ldr	r2, [r4, #24]
 800d2c2:	b102      	cbz	r2, 800d2c6 <_scanf_chars+0xa2>
 800d2c4:	7033      	strb	r3, [r6, #0]
 800d2c6:	6923      	ldr	r3, [r4, #16]
 800d2c8:	443b      	add	r3, r7
 800d2ca:	6123      	str	r3, [r4, #16]
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2d2:	bf00      	nop
 800d2d4:	0800dfe9 	.word	0x0800dfe9

0800d2d8 <_scanf_i>:
 800d2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2dc:	4698      	mov	r8, r3
 800d2de:	4b76      	ldr	r3, [pc, #472]	; (800d4b8 <_scanf_i+0x1e0>)
 800d2e0:	460c      	mov	r4, r1
 800d2e2:	4682      	mov	sl, r0
 800d2e4:	4616      	mov	r6, r2
 800d2e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d2ea:	b087      	sub	sp, #28
 800d2ec:	ab03      	add	r3, sp, #12
 800d2ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d2f2:	4b72      	ldr	r3, [pc, #456]	; (800d4bc <_scanf_i+0x1e4>)
 800d2f4:	69a1      	ldr	r1, [r4, #24]
 800d2f6:	4a72      	ldr	r2, [pc, #456]	; (800d4c0 <_scanf_i+0x1e8>)
 800d2f8:	2903      	cmp	r1, #3
 800d2fa:	bf18      	it	ne
 800d2fc:	461a      	movne	r2, r3
 800d2fe:	68a3      	ldr	r3, [r4, #8]
 800d300:	9201      	str	r2, [sp, #4]
 800d302:	1e5a      	subs	r2, r3, #1
 800d304:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d308:	bf88      	it	hi
 800d30a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d30e:	4627      	mov	r7, r4
 800d310:	bf82      	ittt	hi
 800d312:	eb03 0905 	addhi.w	r9, r3, r5
 800d316:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d31a:	60a3      	strhi	r3, [r4, #8]
 800d31c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d320:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d324:	bf98      	it	ls
 800d326:	f04f 0900 	movls.w	r9, #0
 800d32a:	6023      	str	r3, [r4, #0]
 800d32c:	463d      	mov	r5, r7
 800d32e:	f04f 0b00 	mov.w	fp, #0
 800d332:	6831      	ldr	r1, [r6, #0]
 800d334:	ab03      	add	r3, sp, #12
 800d336:	7809      	ldrb	r1, [r1, #0]
 800d338:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d33c:	2202      	movs	r2, #2
 800d33e:	f7f2 ff6f 	bl	8000220 <memchr>
 800d342:	b328      	cbz	r0, 800d390 <_scanf_i+0xb8>
 800d344:	f1bb 0f01 	cmp.w	fp, #1
 800d348:	d159      	bne.n	800d3fe <_scanf_i+0x126>
 800d34a:	6862      	ldr	r2, [r4, #4]
 800d34c:	b92a      	cbnz	r2, 800d35a <_scanf_i+0x82>
 800d34e:	6822      	ldr	r2, [r4, #0]
 800d350:	2308      	movs	r3, #8
 800d352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d356:	6063      	str	r3, [r4, #4]
 800d358:	6022      	str	r2, [r4, #0]
 800d35a:	6822      	ldr	r2, [r4, #0]
 800d35c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d360:	6022      	str	r2, [r4, #0]
 800d362:	68a2      	ldr	r2, [r4, #8]
 800d364:	1e51      	subs	r1, r2, #1
 800d366:	60a1      	str	r1, [r4, #8]
 800d368:	b192      	cbz	r2, 800d390 <_scanf_i+0xb8>
 800d36a:	6832      	ldr	r2, [r6, #0]
 800d36c:	1c51      	adds	r1, r2, #1
 800d36e:	6031      	str	r1, [r6, #0]
 800d370:	7812      	ldrb	r2, [r2, #0]
 800d372:	f805 2b01 	strb.w	r2, [r5], #1
 800d376:	6872      	ldr	r2, [r6, #4]
 800d378:	3a01      	subs	r2, #1
 800d37a:	2a00      	cmp	r2, #0
 800d37c:	6072      	str	r2, [r6, #4]
 800d37e:	dc07      	bgt.n	800d390 <_scanf_i+0xb8>
 800d380:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d384:	4631      	mov	r1, r6
 800d386:	4650      	mov	r0, sl
 800d388:	4790      	blx	r2
 800d38a:	2800      	cmp	r0, #0
 800d38c:	f040 8085 	bne.w	800d49a <_scanf_i+0x1c2>
 800d390:	f10b 0b01 	add.w	fp, fp, #1
 800d394:	f1bb 0f03 	cmp.w	fp, #3
 800d398:	d1cb      	bne.n	800d332 <_scanf_i+0x5a>
 800d39a:	6863      	ldr	r3, [r4, #4]
 800d39c:	b90b      	cbnz	r3, 800d3a2 <_scanf_i+0xca>
 800d39e:	230a      	movs	r3, #10
 800d3a0:	6063      	str	r3, [r4, #4]
 800d3a2:	6863      	ldr	r3, [r4, #4]
 800d3a4:	4947      	ldr	r1, [pc, #284]	; (800d4c4 <_scanf_i+0x1ec>)
 800d3a6:	6960      	ldr	r0, [r4, #20]
 800d3a8:	1ac9      	subs	r1, r1, r3
 800d3aa:	f000 f94d 	bl	800d648 <__sccl>
 800d3ae:	f04f 0b00 	mov.w	fp, #0
 800d3b2:	68a3      	ldr	r3, [r4, #8]
 800d3b4:	6822      	ldr	r2, [r4, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d03d      	beq.n	800d436 <_scanf_i+0x15e>
 800d3ba:	6831      	ldr	r1, [r6, #0]
 800d3bc:	6960      	ldr	r0, [r4, #20]
 800d3be:	f891 c000 	ldrb.w	ip, [r1]
 800d3c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d035      	beq.n	800d436 <_scanf_i+0x15e>
 800d3ca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d3ce:	d124      	bne.n	800d41a <_scanf_i+0x142>
 800d3d0:	0510      	lsls	r0, r2, #20
 800d3d2:	d522      	bpl.n	800d41a <_scanf_i+0x142>
 800d3d4:	f10b 0b01 	add.w	fp, fp, #1
 800d3d8:	f1b9 0f00 	cmp.w	r9, #0
 800d3dc:	d003      	beq.n	800d3e6 <_scanf_i+0x10e>
 800d3de:	3301      	adds	r3, #1
 800d3e0:	f109 39ff 	add.w	r9, r9, #4294967295
 800d3e4:	60a3      	str	r3, [r4, #8]
 800d3e6:	6873      	ldr	r3, [r6, #4]
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	6073      	str	r3, [r6, #4]
 800d3ee:	dd1b      	ble.n	800d428 <_scanf_i+0x150>
 800d3f0:	6833      	ldr	r3, [r6, #0]
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	6033      	str	r3, [r6, #0]
 800d3f6:	68a3      	ldr	r3, [r4, #8]
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	60a3      	str	r3, [r4, #8]
 800d3fc:	e7d9      	b.n	800d3b2 <_scanf_i+0xda>
 800d3fe:	f1bb 0f02 	cmp.w	fp, #2
 800d402:	d1ae      	bne.n	800d362 <_scanf_i+0x8a>
 800d404:	6822      	ldr	r2, [r4, #0]
 800d406:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d40a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d40e:	d1bf      	bne.n	800d390 <_scanf_i+0xb8>
 800d410:	2310      	movs	r3, #16
 800d412:	6063      	str	r3, [r4, #4]
 800d414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d418:	e7a2      	b.n	800d360 <_scanf_i+0x88>
 800d41a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d41e:	6022      	str	r2, [r4, #0]
 800d420:	780b      	ldrb	r3, [r1, #0]
 800d422:	f805 3b01 	strb.w	r3, [r5], #1
 800d426:	e7de      	b.n	800d3e6 <_scanf_i+0x10e>
 800d428:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d42c:	4631      	mov	r1, r6
 800d42e:	4650      	mov	r0, sl
 800d430:	4798      	blx	r3
 800d432:	2800      	cmp	r0, #0
 800d434:	d0df      	beq.n	800d3f6 <_scanf_i+0x11e>
 800d436:	6823      	ldr	r3, [r4, #0]
 800d438:	05db      	lsls	r3, r3, #23
 800d43a:	d50d      	bpl.n	800d458 <_scanf_i+0x180>
 800d43c:	42bd      	cmp	r5, r7
 800d43e:	d909      	bls.n	800d454 <_scanf_i+0x17c>
 800d440:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d448:	4632      	mov	r2, r6
 800d44a:	4650      	mov	r0, sl
 800d44c:	4798      	blx	r3
 800d44e:	f105 39ff 	add.w	r9, r5, #4294967295
 800d452:	464d      	mov	r5, r9
 800d454:	42bd      	cmp	r5, r7
 800d456:	d02d      	beq.n	800d4b4 <_scanf_i+0x1dc>
 800d458:	6822      	ldr	r2, [r4, #0]
 800d45a:	f012 0210 	ands.w	r2, r2, #16
 800d45e:	d113      	bne.n	800d488 <_scanf_i+0x1b0>
 800d460:	702a      	strb	r2, [r5, #0]
 800d462:	6863      	ldr	r3, [r4, #4]
 800d464:	9e01      	ldr	r6, [sp, #4]
 800d466:	4639      	mov	r1, r7
 800d468:	4650      	mov	r0, sl
 800d46a:	47b0      	blx	r6
 800d46c:	6821      	ldr	r1, [r4, #0]
 800d46e:	f8d8 3000 	ldr.w	r3, [r8]
 800d472:	f011 0f20 	tst.w	r1, #32
 800d476:	d013      	beq.n	800d4a0 <_scanf_i+0x1c8>
 800d478:	1d1a      	adds	r2, r3, #4
 800d47a:	f8c8 2000 	str.w	r2, [r8]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6018      	str	r0, [r3, #0]
 800d482:	68e3      	ldr	r3, [r4, #12]
 800d484:	3301      	adds	r3, #1
 800d486:	60e3      	str	r3, [r4, #12]
 800d488:	1bed      	subs	r5, r5, r7
 800d48a:	44ab      	add	fp, r5
 800d48c:	6925      	ldr	r5, [r4, #16]
 800d48e:	445d      	add	r5, fp
 800d490:	6125      	str	r5, [r4, #16]
 800d492:	2000      	movs	r0, #0
 800d494:	b007      	add	sp, #28
 800d496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49a:	f04f 0b00 	mov.w	fp, #0
 800d49e:	e7ca      	b.n	800d436 <_scanf_i+0x15e>
 800d4a0:	1d1a      	adds	r2, r3, #4
 800d4a2:	f8c8 2000 	str.w	r2, [r8]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f011 0f01 	tst.w	r1, #1
 800d4ac:	bf14      	ite	ne
 800d4ae:	8018      	strhne	r0, [r3, #0]
 800d4b0:	6018      	streq	r0, [r3, #0]
 800d4b2:	e7e6      	b.n	800d482 <_scanf_i+0x1aa>
 800d4b4:	2001      	movs	r0, #1
 800d4b6:	e7ed      	b.n	800d494 <_scanf_i+0x1bc>
 800d4b8:	0800df2c 	.word	0x0800df2c
 800d4bc:	0800d7c5 	.word	0x0800d7c5
 800d4c0:	08009f4d 	.word	0x08009f4d
 800d4c4:	0800e3de 	.word	0x0800e3de

0800d4c8 <_read_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4d07      	ldr	r5, [pc, #28]	; (800d4e8 <_read_r+0x20>)
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	4608      	mov	r0, r1
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	602a      	str	r2, [r5, #0]
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	f7f4 fbc6 	bl	8001c68 <_read>
 800d4dc:	1c43      	adds	r3, r0, #1
 800d4de:	d102      	bne.n	800d4e6 <_read_r+0x1e>
 800d4e0:	682b      	ldr	r3, [r5, #0]
 800d4e2:	b103      	cbz	r3, 800d4e6 <_read_r+0x1e>
 800d4e4:	6023      	str	r3, [r4, #0]
 800d4e6:	bd38      	pop	{r3, r4, r5, pc}
 800d4e8:	20000418 	.word	0x20000418

0800d4ec <lflush>:
 800d4ec:	8983      	ldrh	r3, [r0, #12]
 800d4ee:	f003 0309 	and.w	r3, r3, #9
 800d4f2:	2b09      	cmp	r3, #9
 800d4f4:	d101      	bne.n	800d4fa <lflush+0xe>
 800d4f6:	f7fd bd4b 	b.w	800af90 <fflush>
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	4770      	bx	lr
	...

0800d500 <__srefill_r>:
 800d500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d502:	460c      	mov	r4, r1
 800d504:	4605      	mov	r5, r0
 800d506:	b118      	cbz	r0, 800d510 <__srefill_r+0x10>
 800d508:	6983      	ldr	r3, [r0, #24]
 800d50a:	b90b      	cbnz	r3, 800d510 <__srefill_r+0x10>
 800d50c:	f7fd fdaa 	bl	800b064 <__sinit>
 800d510:	4b3b      	ldr	r3, [pc, #236]	; (800d600 <__srefill_r+0x100>)
 800d512:	429c      	cmp	r4, r3
 800d514:	d10a      	bne.n	800d52c <__srefill_r+0x2c>
 800d516:	686c      	ldr	r4, [r5, #4]
 800d518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d51c:	2300      	movs	r3, #0
 800d51e:	6063      	str	r3, [r4, #4]
 800d520:	89a3      	ldrh	r3, [r4, #12]
 800d522:	069e      	lsls	r6, r3, #26
 800d524:	d50c      	bpl.n	800d540 <__srefill_r+0x40>
 800d526:	f04f 30ff 	mov.w	r0, #4294967295
 800d52a:	e066      	b.n	800d5fa <__srefill_r+0xfa>
 800d52c:	4b35      	ldr	r3, [pc, #212]	; (800d604 <__srefill_r+0x104>)
 800d52e:	429c      	cmp	r4, r3
 800d530:	d101      	bne.n	800d536 <__srefill_r+0x36>
 800d532:	68ac      	ldr	r4, [r5, #8]
 800d534:	e7f0      	b.n	800d518 <__srefill_r+0x18>
 800d536:	4b34      	ldr	r3, [pc, #208]	; (800d608 <__srefill_r+0x108>)
 800d538:	429c      	cmp	r4, r3
 800d53a:	bf08      	it	eq
 800d53c:	68ec      	ldreq	r4, [r5, #12]
 800d53e:	e7eb      	b.n	800d518 <__srefill_r+0x18>
 800d540:	0758      	lsls	r0, r3, #29
 800d542:	d448      	bmi.n	800d5d6 <__srefill_r+0xd6>
 800d544:	06d9      	lsls	r1, r3, #27
 800d546:	d405      	bmi.n	800d554 <__srefill_r+0x54>
 800d548:	2309      	movs	r3, #9
 800d54a:	602b      	str	r3, [r5, #0]
 800d54c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d550:	81a3      	strh	r3, [r4, #12]
 800d552:	e7e8      	b.n	800d526 <__srefill_r+0x26>
 800d554:	071a      	lsls	r2, r3, #28
 800d556:	d50b      	bpl.n	800d570 <__srefill_r+0x70>
 800d558:	4621      	mov	r1, r4
 800d55a:	4628      	mov	r0, r5
 800d55c:	f7fd fcdc 	bl	800af18 <_fflush_r>
 800d560:	2800      	cmp	r0, #0
 800d562:	d1e0      	bne.n	800d526 <__srefill_r+0x26>
 800d564:	89a3      	ldrh	r3, [r4, #12]
 800d566:	60a0      	str	r0, [r4, #8]
 800d568:	f023 0308 	bic.w	r3, r3, #8
 800d56c:	81a3      	strh	r3, [r4, #12]
 800d56e:	61a0      	str	r0, [r4, #24]
 800d570:	89a3      	ldrh	r3, [r4, #12]
 800d572:	f043 0304 	orr.w	r3, r3, #4
 800d576:	81a3      	strh	r3, [r4, #12]
 800d578:	6923      	ldr	r3, [r4, #16]
 800d57a:	b91b      	cbnz	r3, 800d584 <__srefill_r+0x84>
 800d57c:	4621      	mov	r1, r4
 800d57e:	4628      	mov	r0, r5
 800d580:	f7fe f9da 	bl	800b938 <__smakebuf_r>
 800d584:	89a6      	ldrh	r6, [r4, #12]
 800d586:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800d58a:	07b3      	lsls	r3, r6, #30
 800d58c:	d00f      	beq.n	800d5ae <__srefill_r+0xae>
 800d58e:	2301      	movs	r3, #1
 800d590:	81a3      	strh	r3, [r4, #12]
 800d592:	4b1e      	ldr	r3, [pc, #120]	; (800d60c <__srefill_r+0x10c>)
 800d594:	491e      	ldr	r1, [pc, #120]	; (800d610 <__srefill_r+0x110>)
 800d596:	6818      	ldr	r0, [r3, #0]
 800d598:	f006 0609 	and.w	r6, r6, #9
 800d59c:	f7fd fde0 	bl	800b160 <_fwalk>
 800d5a0:	2e09      	cmp	r6, #9
 800d5a2:	81a7      	strh	r7, [r4, #12]
 800d5a4:	d103      	bne.n	800d5ae <__srefill_r+0xae>
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	f7fd fc2f 	bl	800ae0c <__sflush_r>
 800d5ae:	6922      	ldr	r2, [r4, #16]
 800d5b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d5b2:	6963      	ldr	r3, [r4, #20]
 800d5b4:	6a21      	ldr	r1, [r4, #32]
 800d5b6:	6022      	str	r2, [r4, #0]
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	47b0      	blx	r6
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	6060      	str	r0, [r4, #4]
 800d5c0:	dc1c      	bgt.n	800d5fc <__srefill_r+0xfc>
 800d5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5c6:	bf17      	itett	ne
 800d5c8:	2200      	movne	r2, #0
 800d5ca:	f043 0320 	orreq.w	r3, r3, #32
 800d5ce:	6062      	strne	r2, [r4, #4]
 800d5d0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800d5d4:	e7bc      	b.n	800d550 <__srefill_r+0x50>
 800d5d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5d8:	2900      	cmp	r1, #0
 800d5da:	d0cd      	beq.n	800d578 <__srefill_r+0x78>
 800d5dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5e0:	4299      	cmp	r1, r3
 800d5e2:	d002      	beq.n	800d5ea <__srefill_r+0xea>
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	f7fe fee7 	bl	800c3b8 <_free_r>
 800d5ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5ec:	6063      	str	r3, [r4, #4]
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	6360      	str	r0, [r4, #52]	; 0x34
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d0c0      	beq.n	800d578 <__srefill_r+0x78>
 800d5f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	e7fc      	b.n	800d5fa <__srefill_r+0xfa>
 800d600:	0800e19c 	.word	0x0800e19c
 800d604:	0800e1bc 	.word	0x0800e1bc
 800d608:	0800e17c 	.word	0x0800e17c
 800d60c:	0800df58 	.word	0x0800df58
 800d610:	0800d4ed 	.word	0x0800d4ed
 800d614:	00000000 	.word	0x00000000

0800d618 <nan>:
 800d618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d620 <nan+0x8>
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	00000000 	.word	0x00000000
 800d624:	7ff80000 	.word	0x7ff80000

0800d628 <_sbrk_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	4d06      	ldr	r5, [pc, #24]	; (800d644 <_sbrk_r+0x1c>)
 800d62c:	2300      	movs	r3, #0
 800d62e:	4604      	mov	r4, r0
 800d630:	4608      	mov	r0, r1
 800d632:	602b      	str	r3, [r5, #0]
 800d634:	f7f4 fb86 	bl	8001d44 <_sbrk>
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	d102      	bne.n	800d642 <_sbrk_r+0x1a>
 800d63c:	682b      	ldr	r3, [r5, #0]
 800d63e:	b103      	cbz	r3, 800d642 <_sbrk_r+0x1a>
 800d640:	6023      	str	r3, [r4, #0]
 800d642:	bd38      	pop	{r3, r4, r5, pc}
 800d644:	20000418 	.word	0x20000418

0800d648 <__sccl>:
 800d648:	b570      	push	{r4, r5, r6, lr}
 800d64a:	780b      	ldrb	r3, [r1, #0]
 800d64c:	4604      	mov	r4, r0
 800d64e:	2b5e      	cmp	r3, #94	; 0x5e
 800d650:	bf0b      	itete	eq
 800d652:	784b      	ldrbeq	r3, [r1, #1]
 800d654:	1c48      	addne	r0, r1, #1
 800d656:	1c88      	addeq	r0, r1, #2
 800d658:	2200      	movne	r2, #0
 800d65a:	bf08      	it	eq
 800d65c:	2201      	moveq	r2, #1
 800d65e:	1e61      	subs	r1, r4, #1
 800d660:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d664:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d668:	42a9      	cmp	r1, r5
 800d66a:	d1fb      	bne.n	800d664 <__sccl+0x1c>
 800d66c:	b90b      	cbnz	r3, 800d672 <__sccl+0x2a>
 800d66e:	3801      	subs	r0, #1
 800d670:	bd70      	pop	{r4, r5, r6, pc}
 800d672:	f082 0201 	eor.w	r2, r2, #1
 800d676:	54e2      	strb	r2, [r4, r3]
 800d678:	4605      	mov	r5, r0
 800d67a:	4628      	mov	r0, r5
 800d67c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d680:	292d      	cmp	r1, #45	; 0x2d
 800d682:	d006      	beq.n	800d692 <__sccl+0x4a>
 800d684:	295d      	cmp	r1, #93	; 0x5d
 800d686:	d0f3      	beq.n	800d670 <__sccl+0x28>
 800d688:	b909      	cbnz	r1, 800d68e <__sccl+0x46>
 800d68a:	4628      	mov	r0, r5
 800d68c:	e7f0      	b.n	800d670 <__sccl+0x28>
 800d68e:	460b      	mov	r3, r1
 800d690:	e7f1      	b.n	800d676 <__sccl+0x2e>
 800d692:	786e      	ldrb	r6, [r5, #1]
 800d694:	2e5d      	cmp	r6, #93	; 0x5d
 800d696:	d0fa      	beq.n	800d68e <__sccl+0x46>
 800d698:	42b3      	cmp	r3, r6
 800d69a:	dcf8      	bgt.n	800d68e <__sccl+0x46>
 800d69c:	3502      	adds	r5, #2
 800d69e:	4619      	mov	r1, r3
 800d6a0:	3101      	adds	r1, #1
 800d6a2:	428e      	cmp	r6, r1
 800d6a4:	5462      	strb	r2, [r4, r1]
 800d6a6:	dcfb      	bgt.n	800d6a0 <__sccl+0x58>
 800d6a8:	1af1      	subs	r1, r6, r3
 800d6aa:	3901      	subs	r1, #1
 800d6ac:	1c58      	adds	r0, r3, #1
 800d6ae:	42b3      	cmp	r3, r6
 800d6b0:	bfa8      	it	ge
 800d6b2:	2100      	movge	r1, #0
 800d6b4:	1843      	adds	r3, r0, r1
 800d6b6:	e7e0      	b.n	800d67a <__sccl+0x32>

0800d6b8 <strncmp>:
 800d6b8:	b510      	push	{r4, lr}
 800d6ba:	b17a      	cbz	r2, 800d6dc <strncmp+0x24>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	3901      	subs	r1, #1
 800d6c0:	1884      	adds	r4, r0, r2
 800d6c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d6c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d6ca:	4290      	cmp	r0, r2
 800d6cc:	d101      	bne.n	800d6d2 <strncmp+0x1a>
 800d6ce:	42a3      	cmp	r3, r4
 800d6d0:	d101      	bne.n	800d6d6 <strncmp+0x1e>
 800d6d2:	1a80      	subs	r0, r0, r2
 800d6d4:	bd10      	pop	{r4, pc}
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	d1f3      	bne.n	800d6c2 <strncmp+0xa>
 800d6da:	e7fa      	b.n	800d6d2 <strncmp+0x1a>
 800d6dc:	4610      	mov	r0, r2
 800d6de:	e7f9      	b.n	800d6d4 <strncmp+0x1c>

0800d6e0 <_strtoul_l.constprop.0>:
 800d6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6e4:	4f36      	ldr	r7, [pc, #216]	; (800d7c0 <_strtoul_l.constprop.0+0xe0>)
 800d6e6:	4686      	mov	lr, r0
 800d6e8:	460d      	mov	r5, r1
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6f0:	5de6      	ldrb	r6, [r4, r7]
 800d6f2:	f016 0608 	ands.w	r6, r6, #8
 800d6f6:	d1f8      	bne.n	800d6ea <_strtoul_l.constprop.0+0xa>
 800d6f8:	2c2d      	cmp	r4, #45	; 0x2d
 800d6fa:	d12f      	bne.n	800d75c <_strtoul_l.constprop.0+0x7c>
 800d6fc:	782c      	ldrb	r4, [r5, #0]
 800d6fe:	2601      	movs	r6, #1
 800d700:	1c85      	adds	r5, r0, #2
 800d702:	2b00      	cmp	r3, #0
 800d704:	d057      	beq.n	800d7b6 <_strtoul_l.constprop.0+0xd6>
 800d706:	2b10      	cmp	r3, #16
 800d708:	d109      	bne.n	800d71e <_strtoul_l.constprop.0+0x3e>
 800d70a:	2c30      	cmp	r4, #48	; 0x30
 800d70c:	d107      	bne.n	800d71e <_strtoul_l.constprop.0+0x3e>
 800d70e:	7828      	ldrb	r0, [r5, #0]
 800d710:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d714:	2858      	cmp	r0, #88	; 0x58
 800d716:	d149      	bne.n	800d7ac <_strtoul_l.constprop.0+0xcc>
 800d718:	786c      	ldrb	r4, [r5, #1]
 800d71a:	2310      	movs	r3, #16
 800d71c:	3502      	adds	r5, #2
 800d71e:	f04f 38ff 	mov.w	r8, #4294967295
 800d722:	2700      	movs	r7, #0
 800d724:	fbb8 f8f3 	udiv	r8, r8, r3
 800d728:	fb03 f908 	mul.w	r9, r3, r8
 800d72c:	ea6f 0909 	mvn.w	r9, r9
 800d730:	4638      	mov	r0, r7
 800d732:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d736:	f1bc 0f09 	cmp.w	ip, #9
 800d73a:	d814      	bhi.n	800d766 <_strtoul_l.constprop.0+0x86>
 800d73c:	4664      	mov	r4, ip
 800d73e:	42a3      	cmp	r3, r4
 800d740:	dd22      	ble.n	800d788 <_strtoul_l.constprop.0+0xa8>
 800d742:	2f00      	cmp	r7, #0
 800d744:	db1d      	blt.n	800d782 <_strtoul_l.constprop.0+0xa2>
 800d746:	4580      	cmp	r8, r0
 800d748:	d31b      	bcc.n	800d782 <_strtoul_l.constprop.0+0xa2>
 800d74a:	d101      	bne.n	800d750 <_strtoul_l.constprop.0+0x70>
 800d74c:	45a1      	cmp	r9, r4
 800d74e:	db18      	blt.n	800d782 <_strtoul_l.constprop.0+0xa2>
 800d750:	fb00 4003 	mla	r0, r0, r3, r4
 800d754:	2701      	movs	r7, #1
 800d756:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d75a:	e7ea      	b.n	800d732 <_strtoul_l.constprop.0+0x52>
 800d75c:	2c2b      	cmp	r4, #43	; 0x2b
 800d75e:	bf04      	itt	eq
 800d760:	782c      	ldrbeq	r4, [r5, #0]
 800d762:	1c85      	addeq	r5, r0, #2
 800d764:	e7cd      	b.n	800d702 <_strtoul_l.constprop.0+0x22>
 800d766:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d76a:	f1bc 0f19 	cmp.w	ip, #25
 800d76e:	d801      	bhi.n	800d774 <_strtoul_l.constprop.0+0x94>
 800d770:	3c37      	subs	r4, #55	; 0x37
 800d772:	e7e4      	b.n	800d73e <_strtoul_l.constprop.0+0x5e>
 800d774:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d778:	f1bc 0f19 	cmp.w	ip, #25
 800d77c:	d804      	bhi.n	800d788 <_strtoul_l.constprop.0+0xa8>
 800d77e:	3c57      	subs	r4, #87	; 0x57
 800d780:	e7dd      	b.n	800d73e <_strtoul_l.constprop.0+0x5e>
 800d782:	f04f 37ff 	mov.w	r7, #4294967295
 800d786:	e7e6      	b.n	800d756 <_strtoul_l.constprop.0+0x76>
 800d788:	2f00      	cmp	r7, #0
 800d78a:	da07      	bge.n	800d79c <_strtoul_l.constprop.0+0xbc>
 800d78c:	2322      	movs	r3, #34	; 0x22
 800d78e:	f8ce 3000 	str.w	r3, [lr]
 800d792:	f04f 30ff 	mov.w	r0, #4294967295
 800d796:	b932      	cbnz	r2, 800d7a6 <_strtoul_l.constprop.0+0xc6>
 800d798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d79c:	b106      	cbz	r6, 800d7a0 <_strtoul_l.constprop.0+0xc0>
 800d79e:	4240      	negs	r0, r0
 800d7a0:	2a00      	cmp	r2, #0
 800d7a2:	d0f9      	beq.n	800d798 <_strtoul_l.constprop.0+0xb8>
 800d7a4:	b107      	cbz	r7, 800d7a8 <_strtoul_l.constprop.0+0xc8>
 800d7a6:	1e69      	subs	r1, r5, #1
 800d7a8:	6011      	str	r1, [r2, #0]
 800d7aa:	e7f5      	b.n	800d798 <_strtoul_l.constprop.0+0xb8>
 800d7ac:	2430      	movs	r4, #48	; 0x30
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1b5      	bne.n	800d71e <_strtoul_l.constprop.0+0x3e>
 800d7b2:	2308      	movs	r3, #8
 800d7b4:	e7b3      	b.n	800d71e <_strtoul_l.constprop.0+0x3e>
 800d7b6:	2c30      	cmp	r4, #48	; 0x30
 800d7b8:	d0a9      	beq.n	800d70e <_strtoul_l.constprop.0+0x2e>
 800d7ba:	230a      	movs	r3, #10
 800d7bc:	e7af      	b.n	800d71e <_strtoul_l.constprop.0+0x3e>
 800d7be:	bf00      	nop
 800d7c0:	0800dfe9 	.word	0x0800dfe9

0800d7c4 <_strtoul_r>:
 800d7c4:	f7ff bf8c 	b.w	800d6e0 <_strtoul_l.constprop.0>

0800d7c8 <__submore>:
 800d7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7d4:	4299      	cmp	r1, r3
 800d7d6:	d11d      	bne.n	800d814 <__submore+0x4c>
 800d7d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d7dc:	f7fe fe58 	bl	800c490 <_malloc_r>
 800d7e0:	b918      	cbnz	r0, 800d7ea <__submore+0x22>
 800d7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7ee:	63a3      	str	r3, [r4, #56]	; 0x38
 800d7f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d7f4:	6360      	str	r0, [r4, #52]	; 0x34
 800d7f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d7fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d7fe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d802:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d806:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d80a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d80e:	6020      	str	r0, [r4, #0]
 800d810:	2000      	movs	r0, #0
 800d812:	e7e8      	b.n	800d7e6 <__submore+0x1e>
 800d814:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d816:	0077      	lsls	r7, r6, #1
 800d818:	463a      	mov	r2, r7
 800d81a:	f000 f92d 	bl	800da78 <_realloc_r>
 800d81e:	4605      	mov	r5, r0
 800d820:	2800      	cmp	r0, #0
 800d822:	d0de      	beq.n	800d7e2 <__submore+0x1a>
 800d824:	eb00 0806 	add.w	r8, r0, r6
 800d828:	4601      	mov	r1, r0
 800d82a:	4632      	mov	r2, r6
 800d82c:	4640      	mov	r0, r8
 800d82e:	f7fe f8dd 	bl	800b9ec <memcpy>
 800d832:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d836:	f8c4 8000 	str.w	r8, [r4]
 800d83a:	e7e9      	b.n	800d810 <__submore+0x48>

0800d83c <_ungetc_r>:
 800d83c:	b570      	push	{r4, r5, r6, lr}
 800d83e:	4614      	mov	r4, r2
 800d840:	1c4a      	adds	r2, r1, #1
 800d842:	4606      	mov	r6, r0
 800d844:	460d      	mov	r5, r1
 800d846:	d103      	bne.n	800d850 <_ungetc_r+0x14>
 800d848:	f04f 35ff 	mov.w	r5, #4294967295
 800d84c:	4628      	mov	r0, r5
 800d84e:	bd70      	pop	{r4, r5, r6, pc}
 800d850:	b118      	cbz	r0, 800d85a <_ungetc_r+0x1e>
 800d852:	6983      	ldr	r3, [r0, #24]
 800d854:	b90b      	cbnz	r3, 800d85a <_ungetc_r+0x1e>
 800d856:	f7fd fc05 	bl	800b064 <__sinit>
 800d85a:	4b41      	ldr	r3, [pc, #260]	; (800d960 <_ungetc_r+0x124>)
 800d85c:	429c      	cmp	r4, r3
 800d85e:	d11d      	bne.n	800d89c <_ungetc_r+0x60>
 800d860:	6874      	ldr	r4, [r6, #4]
 800d862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d864:	07db      	lsls	r3, r3, #31
 800d866:	d405      	bmi.n	800d874 <_ungetc_r+0x38>
 800d868:	89a3      	ldrh	r3, [r4, #12]
 800d86a:	0598      	lsls	r0, r3, #22
 800d86c:	d402      	bmi.n	800d874 <_ungetc_r+0x38>
 800d86e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d870:	f7fe f827 	bl	800b8c2 <__retarget_lock_acquire_recursive>
 800d874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d878:	f023 0320 	bic.w	r3, r3, #32
 800d87c:	0759      	lsls	r1, r3, #29
 800d87e:	81a3      	strh	r3, [r4, #12]
 800d880:	b29a      	uxth	r2, r3
 800d882:	d42d      	bmi.n	800d8e0 <_ungetc_r+0xa4>
 800d884:	06d3      	lsls	r3, r2, #27
 800d886:	d413      	bmi.n	800d8b0 <_ungetc_r+0x74>
 800d888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d88a:	07dd      	lsls	r5, r3, #31
 800d88c:	d4dc      	bmi.n	800d848 <_ungetc_r+0xc>
 800d88e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d892:	d1d9      	bne.n	800d848 <_ungetc_r+0xc>
 800d894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d896:	f7fe f815 	bl	800b8c4 <__retarget_lock_release_recursive>
 800d89a:	e7d5      	b.n	800d848 <_ungetc_r+0xc>
 800d89c:	4b31      	ldr	r3, [pc, #196]	; (800d964 <_ungetc_r+0x128>)
 800d89e:	429c      	cmp	r4, r3
 800d8a0:	d101      	bne.n	800d8a6 <_ungetc_r+0x6a>
 800d8a2:	68b4      	ldr	r4, [r6, #8]
 800d8a4:	e7dd      	b.n	800d862 <_ungetc_r+0x26>
 800d8a6:	4b30      	ldr	r3, [pc, #192]	; (800d968 <_ungetc_r+0x12c>)
 800d8a8:	429c      	cmp	r4, r3
 800d8aa:	bf08      	it	eq
 800d8ac:	68f4      	ldreq	r4, [r6, #12]
 800d8ae:	e7d8      	b.n	800d862 <_ungetc_r+0x26>
 800d8b0:	0710      	lsls	r0, r2, #28
 800d8b2:	d511      	bpl.n	800d8d8 <_ungetc_r+0x9c>
 800d8b4:	4621      	mov	r1, r4
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	f7fd fb2e 	bl	800af18 <_fflush_r>
 800d8bc:	b130      	cbz	r0, 800d8cc <_ungetc_r+0x90>
 800d8be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8c0:	07d9      	lsls	r1, r3, #31
 800d8c2:	d4c1      	bmi.n	800d848 <_ungetc_r+0xc>
 800d8c4:	89a3      	ldrh	r3, [r4, #12]
 800d8c6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d8ca:	e7e2      	b.n	800d892 <_ungetc_r+0x56>
 800d8cc:	89a3      	ldrh	r3, [r4, #12]
 800d8ce:	60a0      	str	r0, [r4, #8]
 800d8d0:	f023 0308 	bic.w	r3, r3, #8
 800d8d4:	81a3      	strh	r3, [r4, #12]
 800d8d6:	61a0      	str	r0, [r4, #24]
 800d8d8:	89a3      	ldrh	r3, [r4, #12]
 800d8da:	f043 0304 	orr.w	r3, r3, #4
 800d8de:	81a3      	strh	r3, [r4, #12]
 800d8e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d8e2:	6862      	ldr	r2, [r4, #4]
 800d8e4:	b2ed      	uxtb	r5, r5
 800d8e6:	b1d3      	cbz	r3, 800d91e <_ungetc_r+0xe2>
 800d8e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	dc05      	bgt.n	800d8fa <_ungetc_r+0xbe>
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f7ff ff69 	bl	800d7c8 <__submore>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d1e1      	bne.n	800d8be <_ungetc_r+0x82>
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	1e5a      	subs	r2, r3, #1
 800d8fe:	6022      	str	r2, [r4, #0]
 800d900:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d904:	6863      	ldr	r3, [r4, #4]
 800d906:	3301      	adds	r3, #1
 800d908:	6063      	str	r3, [r4, #4]
 800d90a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d90c:	07da      	lsls	r2, r3, #31
 800d90e:	d49d      	bmi.n	800d84c <_ungetc_r+0x10>
 800d910:	89a3      	ldrh	r3, [r4, #12]
 800d912:	059b      	lsls	r3, r3, #22
 800d914:	d49a      	bmi.n	800d84c <_ungetc_r+0x10>
 800d916:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d918:	f7fd ffd4 	bl	800b8c4 <__retarget_lock_release_recursive>
 800d91c:	e796      	b.n	800d84c <_ungetc_r+0x10>
 800d91e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d920:	6920      	ldr	r0, [r4, #16]
 800d922:	6823      	ldr	r3, [r4, #0]
 800d924:	f001 0101 	and.w	r1, r1, #1
 800d928:	b160      	cbz	r0, 800d944 <_ungetc_r+0x108>
 800d92a:	4298      	cmp	r0, r3
 800d92c:	d20a      	bcs.n	800d944 <_ungetc_r+0x108>
 800d92e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800d932:	42a8      	cmp	r0, r5
 800d934:	d106      	bne.n	800d944 <_ungetc_r+0x108>
 800d936:	3b01      	subs	r3, #1
 800d938:	3201      	adds	r2, #1
 800d93a:	6023      	str	r3, [r4, #0]
 800d93c:	6062      	str	r2, [r4, #4]
 800d93e:	2900      	cmp	r1, #0
 800d940:	d184      	bne.n	800d84c <_ungetc_r+0x10>
 800d942:	e7e5      	b.n	800d910 <_ungetc_r+0xd4>
 800d944:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d94c:	6363      	str	r3, [r4, #52]	; 0x34
 800d94e:	2303      	movs	r3, #3
 800d950:	63a3      	str	r3, [r4, #56]	; 0x38
 800d952:	4623      	mov	r3, r4
 800d954:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d958:	6023      	str	r3, [r4, #0]
 800d95a:	2301      	movs	r3, #1
 800d95c:	6063      	str	r3, [r4, #4]
 800d95e:	e7ee      	b.n	800d93e <_ungetc_r+0x102>
 800d960:	0800e19c 	.word	0x0800e19c
 800d964:	0800e1bc 	.word	0x0800e1bc
 800d968:	0800e17c 	.word	0x0800e17c

0800d96c <__ascii_wctomb>:
 800d96c:	b149      	cbz	r1, 800d982 <__ascii_wctomb+0x16>
 800d96e:	2aff      	cmp	r2, #255	; 0xff
 800d970:	bf85      	ittet	hi
 800d972:	238a      	movhi	r3, #138	; 0x8a
 800d974:	6003      	strhi	r3, [r0, #0]
 800d976:	700a      	strbls	r2, [r1, #0]
 800d978:	f04f 30ff 	movhi.w	r0, #4294967295
 800d97c:	bf98      	it	ls
 800d97e:	2001      	movls	r0, #1
 800d980:	4770      	bx	lr
 800d982:	4608      	mov	r0, r1
 800d984:	4770      	bx	lr
	...

0800d988 <__assert_func>:
 800d988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d98a:	4614      	mov	r4, r2
 800d98c:	461a      	mov	r2, r3
 800d98e:	4b09      	ldr	r3, [pc, #36]	; (800d9b4 <__assert_func+0x2c>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4605      	mov	r5, r0
 800d994:	68d8      	ldr	r0, [r3, #12]
 800d996:	b14c      	cbz	r4, 800d9ac <__assert_func+0x24>
 800d998:	4b07      	ldr	r3, [pc, #28]	; (800d9b8 <__assert_func+0x30>)
 800d99a:	9100      	str	r1, [sp, #0]
 800d99c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9a0:	4906      	ldr	r1, [pc, #24]	; (800d9bc <__assert_func+0x34>)
 800d9a2:	462b      	mov	r3, r5
 800d9a4:	f000 f80e 	bl	800d9c4 <fiprintf>
 800d9a8:	f000 f895 	bl	800dad6 <abort>
 800d9ac:	4b04      	ldr	r3, [pc, #16]	; (800d9c0 <__assert_func+0x38>)
 800d9ae:	461c      	mov	r4, r3
 800d9b0:	e7f3      	b.n	800d99a <__assert_func+0x12>
 800d9b2:	bf00      	nop
 800d9b4:	2000000c 	.word	0x2000000c
 800d9b8:	0800e3e0 	.word	0x0800e3e0
 800d9bc:	0800e3ed 	.word	0x0800e3ed
 800d9c0:	0800e41b 	.word	0x0800e41b

0800d9c4 <fiprintf>:
 800d9c4:	b40e      	push	{r1, r2, r3}
 800d9c6:	b503      	push	{r0, r1, lr}
 800d9c8:	4601      	mov	r1, r0
 800d9ca:	ab03      	add	r3, sp, #12
 800d9cc:	4805      	ldr	r0, [pc, #20]	; (800d9e4 <fiprintf+0x20>)
 800d9ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9d2:	6800      	ldr	r0, [r0, #0]
 800d9d4:	9301      	str	r3, [sp, #4]
 800d9d6:	f7ff f927 	bl	800cc28 <_vfiprintf_r>
 800d9da:	b002      	add	sp, #8
 800d9dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9e0:	b003      	add	sp, #12
 800d9e2:	4770      	bx	lr
 800d9e4:	2000000c 	.word	0x2000000c

0800d9e8 <_fstat_r>:
 800d9e8:	b538      	push	{r3, r4, r5, lr}
 800d9ea:	4d07      	ldr	r5, [pc, #28]	; (800da08 <_fstat_r+0x20>)
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	4608      	mov	r0, r1
 800d9f2:	4611      	mov	r1, r2
 800d9f4:	602b      	str	r3, [r5, #0]
 800d9f6:	f7f4 f97c 	bl	8001cf2 <_fstat>
 800d9fa:	1c43      	adds	r3, r0, #1
 800d9fc:	d102      	bne.n	800da04 <_fstat_r+0x1c>
 800d9fe:	682b      	ldr	r3, [r5, #0]
 800da00:	b103      	cbz	r3, 800da04 <_fstat_r+0x1c>
 800da02:	6023      	str	r3, [r4, #0]
 800da04:	bd38      	pop	{r3, r4, r5, pc}
 800da06:	bf00      	nop
 800da08:	20000418 	.word	0x20000418

0800da0c <_isatty_r>:
 800da0c:	b538      	push	{r3, r4, r5, lr}
 800da0e:	4d06      	ldr	r5, [pc, #24]	; (800da28 <_isatty_r+0x1c>)
 800da10:	2300      	movs	r3, #0
 800da12:	4604      	mov	r4, r0
 800da14:	4608      	mov	r0, r1
 800da16:	602b      	str	r3, [r5, #0]
 800da18:	f7f4 f97b 	bl	8001d12 <_isatty>
 800da1c:	1c43      	adds	r3, r0, #1
 800da1e:	d102      	bne.n	800da26 <_isatty_r+0x1a>
 800da20:	682b      	ldr	r3, [r5, #0]
 800da22:	b103      	cbz	r3, 800da26 <_isatty_r+0x1a>
 800da24:	6023      	str	r3, [r4, #0]
 800da26:	bd38      	pop	{r3, r4, r5, pc}
 800da28:	20000418 	.word	0x20000418

0800da2c <memmove>:
 800da2c:	4288      	cmp	r0, r1
 800da2e:	b510      	push	{r4, lr}
 800da30:	eb01 0402 	add.w	r4, r1, r2
 800da34:	d902      	bls.n	800da3c <memmove+0x10>
 800da36:	4284      	cmp	r4, r0
 800da38:	4623      	mov	r3, r4
 800da3a:	d807      	bhi.n	800da4c <memmove+0x20>
 800da3c:	1e43      	subs	r3, r0, #1
 800da3e:	42a1      	cmp	r1, r4
 800da40:	d008      	beq.n	800da54 <memmove+0x28>
 800da42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da4a:	e7f8      	b.n	800da3e <memmove+0x12>
 800da4c:	4402      	add	r2, r0
 800da4e:	4601      	mov	r1, r0
 800da50:	428a      	cmp	r2, r1
 800da52:	d100      	bne.n	800da56 <memmove+0x2a>
 800da54:	bd10      	pop	{r4, pc}
 800da56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da5e:	e7f7      	b.n	800da50 <memmove+0x24>

0800da60 <__malloc_lock>:
 800da60:	4801      	ldr	r0, [pc, #4]	; (800da68 <__malloc_lock+0x8>)
 800da62:	f7fd bf2e 	b.w	800b8c2 <__retarget_lock_acquire_recursive>
 800da66:	bf00      	nop
 800da68:	2000040c 	.word	0x2000040c

0800da6c <__malloc_unlock>:
 800da6c:	4801      	ldr	r0, [pc, #4]	; (800da74 <__malloc_unlock+0x8>)
 800da6e:	f7fd bf29 	b.w	800b8c4 <__retarget_lock_release_recursive>
 800da72:	bf00      	nop
 800da74:	2000040c 	.word	0x2000040c

0800da78 <_realloc_r>:
 800da78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da7c:	4680      	mov	r8, r0
 800da7e:	4614      	mov	r4, r2
 800da80:	460e      	mov	r6, r1
 800da82:	b921      	cbnz	r1, 800da8e <_realloc_r+0x16>
 800da84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da88:	4611      	mov	r1, r2
 800da8a:	f7fe bd01 	b.w	800c490 <_malloc_r>
 800da8e:	b92a      	cbnz	r2, 800da9c <_realloc_r+0x24>
 800da90:	f7fe fc92 	bl	800c3b8 <_free_r>
 800da94:	4625      	mov	r5, r4
 800da96:	4628      	mov	r0, r5
 800da98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da9c:	f000 f822 	bl	800dae4 <_malloc_usable_size_r>
 800daa0:	4284      	cmp	r4, r0
 800daa2:	4607      	mov	r7, r0
 800daa4:	d802      	bhi.n	800daac <_realloc_r+0x34>
 800daa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800daaa:	d812      	bhi.n	800dad2 <_realloc_r+0x5a>
 800daac:	4621      	mov	r1, r4
 800daae:	4640      	mov	r0, r8
 800dab0:	f7fe fcee 	bl	800c490 <_malloc_r>
 800dab4:	4605      	mov	r5, r0
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d0ed      	beq.n	800da96 <_realloc_r+0x1e>
 800daba:	42bc      	cmp	r4, r7
 800dabc:	4622      	mov	r2, r4
 800dabe:	4631      	mov	r1, r6
 800dac0:	bf28      	it	cs
 800dac2:	463a      	movcs	r2, r7
 800dac4:	f7fd ff92 	bl	800b9ec <memcpy>
 800dac8:	4631      	mov	r1, r6
 800daca:	4640      	mov	r0, r8
 800dacc:	f7fe fc74 	bl	800c3b8 <_free_r>
 800dad0:	e7e1      	b.n	800da96 <_realloc_r+0x1e>
 800dad2:	4635      	mov	r5, r6
 800dad4:	e7df      	b.n	800da96 <_realloc_r+0x1e>

0800dad6 <abort>:
 800dad6:	b508      	push	{r3, lr}
 800dad8:	2006      	movs	r0, #6
 800dada:	f000 f833 	bl	800db44 <raise>
 800dade:	2001      	movs	r0, #1
 800dae0:	f7f4 f8b8 	bl	8001c54 <_exit>

0800dae4 <_malloc_usable_size_r>:
 800dae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dae8:	1f18      	subs	r0, r3, #4
 800daea:	2b00      	cmp	r3, #0
 800daec:	bfbc      	itt	lt
 800daee:	580b      	ldrlt	r3, [r1, r0]
 800daf0:	18c0      	addlt	r0, r0, r3
 800daf2:	4770      	bx	lr

0800daf4 <_raise_r>:
 800daf4:	291f      	cmp	r1, #31
 800daf6:	b538      	push	{r3, r4, r5, lr}
 800daf8:	4604      	mov	r4, r0
 800dafa:	460d      	mov	r5, r1
 800dafc:	d904      	bls.n	800db08 <_raise_r+0x14>
 800dafe:	2316      	movs	r3, #22
 800db00:	6003      	str	r3, [r0, #0]
 800db02:	f04f 30ff 	mov.w	r0, #4294967295
 800db06:	bd38      	pop	{r3, r4, r5, pc}
 800db08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db0a:	b112      	cbz	r2, 800db12 <_raise_r+0x1e>
 800db0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db10:	b94b      	cbnz	r3, 800db26 <_raise_r+0x32>
 800db12:	4620      	mov	r0, r4
 800db14:	f000 f830 	bl	800db78 <_getpid_r>
 800db18:	462a      	mov	r2, r5
 800db1a:	4601      	mov	r1, r0
 800db1c:	4620      	mov	r0, r4
 800db1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db22:	f000 b817 	b.w	800db54 <_kill_r>
 800db26:	2b01      	cmp	r3, #1
 800db28:	d00a      	beq.n	800db40 <_raise_r+0x4c>
 800db2a:	1c59      	adds	r1, r3, #1
 800db2c:	d103      	bne.n	800db36 <_raise_r+0x42>
 800db2e:	2316      	movs	r3, #22
 800db30:	6003      	str	r3, [r0, #0]
 800db32:	2001      	movs	r0, #1
 800db34:	e7e7      	b.n	800db06 <_raise_r+0x12>
 800db36:	2400      	movs	r4, #0
 800db38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db3c:	4628      	mov	r0, r5
 800db3e:	4798      	blx	r3
 800db40:	2000      	movs	r0, #0
 800db42:	e7e0      	b.n	800db06 <_raise_r+0x12>

0800db44 <raise>:
 800db44:	4b02      	ldr	r3, [pc, #8]	; (800db50 <raise+0xc>)
 800db46:	4601      	mov	r1, r0
 800db48:	6818      	ldr	r0, [r3, #0]
 800db4a:	f7ff bfd3 	b.w	800daf4 <_raise_r>
 800db4e:	bf00      	nop
 800db50:	2000000c 	.word	0x2000000c

0800db54 <_kill_r>:
 800db54:	b538      	push	{r3, r4, r5, lr}
 800db56:	4d07      	ldr	r5, [pc, #28]	; (800db74 <_kill_r+0x20>)
 800db58:	2300      	movs	r3, #0
 800db5a:	4604      	mov	r4, r0
 800db5c:	4608      	mov	r0, r1
 800db5e:	4611      	mov	r1, r2
 800db60:	602b      	str	r3, [r5, #0]
 800db62:	f7f4 f867 	bl	8001c34 <_kill>
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	d102      	bne.n	800db70 <_kill_r+0x1c>
 800db6a:	682b      	ldr	r3, [r5, #0]
 800db6c:	b103      	cbz	r3, 800db70 <_kill_r+0x1c>
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	bd38      	pop	{r3, r4, r5, pc}
 800db72:	bf00      	nop
 800db74:	20000418 	.word	0x20000418

0800db78 <_getpid_r>:
 800db78:	f7f4 b854 	b.w	8001c24 <_getpid>

0800db7c <_init>:
 800db7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db7e:	bf00      	nop
 800db80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db82:	bc08      	pop	{r3}
 800db84:	469e      	mov	lr, r3
 800db86:	4770      	bx	lr

0800db88 <_fini>:
 800db88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8a:	bf00      	nop
 800db8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db8e:	bc08      	pop	{r3}
 800db90:	469e      	mov	lr, r3
 800db92:	4770      	bx	lr
