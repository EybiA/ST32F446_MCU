
/*  This file contains all the ADC associated functions running on the ST32F446RTE MCU
 *  application as developed by me
 */

/*
------------------------ Includes --------------------------------------------*/

#include "ADC_driver.h"

ADC_HandleTypeDef hadc1;
DAC_HandleTypeDef hdac1;

int32_t sensorValue, temperature;

/* ----------------------------------FUNCTIONS--------------------------------*/

extern void MX_ADC1_Init(void)

{

  ADC_ChannelConfTypeDef sConfig = {0};


  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

}

// ****************************************************************************

/**
  * @brief DAC Initialization Function
    DAC channel OUT1 configuration (GPIO PA4)
  */
extern void MX_DAC_Init(void)
{

  DAC_ChannelConfTypeDef sConfig = {0};


  if (HAL_DAC_Init(&hdac1) != HAL_OK)
  {
    Error_Handler();
  }


  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

}

// ****************************************************************************

extern int32_t read_ADC_sensor(void)
{

	__HAL_ADC_ENABLE(&hadc1);

	ADC->CCR &= ~(ADC_CCR_TSVREFE); // Disable Vbat signal from input channel and wake up temp sensor from power down mode

	HAL_ADC_Start(&hadc1);

	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
	{
	    sensorValue = (int32_t)HAL_ADC_GetValue(&hadc1);
	    HAL_ADC_Stop(&hadc1);
	    sensorValue = sensorValue * (ADC_REFERENCE_VOLTAGE_MV / ADC_MAX_OUTPUT_VALUE);
	    temperature = (int32_t)((sensorValue - TEMP_SENSOR_VOLTAGE_MV_AT_25) / TEMP_SENSOR_AVG_SLOPE_MV_PER_CELSIUS ) + 25;
	}
	else
	{
	    temperature = -273;
	}

	return temperature;
}
